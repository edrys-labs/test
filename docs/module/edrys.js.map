{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,M,C,S,C,C,C,C,C,ECeC,IAOG,EACA,EACA,EATH,EAAA,EAAA,mC,E,E,uCAED,EAAA,EAAA,OACA,EAAA,EAAA,4BACA,EAAA,EAAA,sBAEM,EAAS,QAKf,CAAA,OAAO,KAAQ,CAAG,CAChB,OAAQ,IACR,MAAO,CAAA,EACP,KAAM,KAAA,EACN,SAAU,KAAA,EACV,UAAW,KAAA,EACX,SAAU,KAAA,EACV,SAAU,KAAA,EACV,OAAQ,KAAA,EACR,SAAU,KAAA,EAEV,QAAA,SAAQ,CAAO,EACT,OAAO,KAAQ,CAAC,KAAK,CAAE,EAAQ,OAAO,KAAQ,EAEhD,OAAO,gBAAgB,CAAC,eAAgB,SAAC,CAAzC,EACE,EAAQ,OAAO,KAAQ,CACzB,EACJ,EACA,SAAA,SAAS,CAAO,EACd,OAAO,gBAAgB,CAAC,gBAAiB,SAAC,CAA1C,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C5B,GAAI,AAAkB,aAAlB,OAAO,QAA0B,AAAyB,MAAzB,CAAI,CAAC,OAAO,QAAQ,CAAC,EAAY,AAAsB,MAAtB,CAAI,CAAC,aAAa,CACpF,OAAO,MAAM,IAAI,CAAC,EAE1B,C,E,iB,C,GACA,EAAA,MAAA,CAAA,EAAA,IAAA,WAAS,OAAA,C,E,E,C,iD,O,E,C,M,C,S,C,C,C,C,C,E,I,E,E,kDCLT,SAAS,IACL,MAAM,AAAI,UAAU,uIACxB,C,E,iB,C,GACA,EAAA,MAAA,CAAA,EAAA,IAAA,WAAS,OAAA,C,E,E,C,iD,O,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,G,E,M,C,E,mB,W,O,E,G,E,M,C,E,oB,W,O,C,G,E,M,C,E,iB,W,O,E,G,E,M,C,E,e,W,O,E,G,E,M,C,E,Q,W,O,E,G,E,M,C,E,a,W,O,E,G,E,M,C,E,gB,W,O,E,G,E,M,C,E,iB,W,O,E,G,E,M,C,E,a,W,O,E,G,E,M,C,E,e,W,O,E,G,E,M,C,E,gB,W,O,E,G,E,M,C,E,c,W,O,E,G,E,M,C,E,gB,W,O,E,G,E,M,C,E,c,W,O,E,G,E,M,C,E,M,W,O,C,G,E,M,C,E,K,W,O,E,G,E,M,C,E,K,W,O,E,G,E,M,C,E,O,W,O,E,G,E,M,C,E,M,W,O,E,G,E,M,C,E,oB,W,O,E,G,E,M,C,E,mB,W,O,E,G,E,M,C,E,O,W,O,E,G,E,M,C,E,W,W,O,E,G,E,M,C,E,O,W,O,E,G,E,M,C,E,c,W,O,E,G,E,M,C,E,c,W,O,E,G,E,M,C,E,kB,W,O,E,G,E,M,C,E,kB,W,O,E,G,E,M,C,E,kB,W,O,E,G,E,M,C,E,kB,W,O,E,G,E,M,C,E,a,W,O,E,G,E,M,C,E,c,W,O,E,G,E,M,C,E,U,W,O,E,G,E,M,C,E,U,W,O,E,G,E,M,C,E,c,W,O,E,G,E,M,C,E,S,W,O,E,G,E,M,C,E,Y,W,O,E,G,E,M,C,E,a,W,O,E,G,E,M,C,E,Y,W,O,E,G,E,M,C,E,c,W,O,E,G,E,M,C,E,gB,W,O,E,G,E,M,C,E,yB,W,O,E,G,E,M,C,E,a,W,O,E,G,E,M,C,E,2B,W,O,E,G,E,M,C,E,4B,W,O,E,G,E,M,C,E,4B,W,O,E,G,E,M,C,E,6C,W,O,E,G,E,M,C,E,kB,W,O,C,G,E,M,C,E,iC,W,O,C,G,E,M,C,E,wB,W,O,E,G,E,M,C,E,W,W,O,E,G,E,M,C,E,iC,W,O,E,G,E,M,C,E,sC,W,O,E,G,E,M,C,E,iB,W,O,E,G,E,M,C,E,yB,W,O,E,G,E,M,C,E,iB,W,O,E,G,E,M,C,E,mB,W,O,E,G,E,M,C,E,oB,W,O,E,G,E,M,C,E,e,W,O,E,G,E,M,C,E,iB,W,O,E,G,E,M,C,E,a,W,O,E,G,E,M,C,E,e,W,O,E,G,E,M,C,E,gB,W,O,E,G,E,M,C,E,yB,W,O,E,G,E,M,C,E,iB,W,O,E,G,E,M,C,E,mB,W,O,E,G,E,M,C,E,sB,W,O,E,G,E,M,C,E,wB,W,O,E,G,E,M,C,E,oB,W,O,E,G,E,M,C,E,8B,W,O,E,G,E,M,C,E,gC,W,O,E,G,E,M,C,E,kB,W,O,C,G,E,M,C,E,iB,W,O,E,G,E,M,C,E,c,W,O,E,G,E,M,C,E,kB,W,O,E,G,E,M,C,E,U,W,O,E,G,E,M,C,E,W,W,O,E,G,E,M,C,E,kB,W,O,E,G,E,M,C,E,Y,W,O,C,G,E,M,C,E,a,W,O,E,G,E,M,C,E,wB,W,O,C,G,E,M,C,E,U,W,O,E,G,E,M,C,E,Y,W,O,E,G,E,M,C,E,c,W,O,E,G,E,M,C,E,kB,W,O,C,G,E,M,C,E,e,W,O,E,G,E,M,C,E,iB,W,O,E,G,E,M,C,E,kB,W,O,E,G,E,M,C,E,oB,W,O,E,G,E,M,C,E,kB,W,O,E,G,E,M,C,E,oB,W,O,E,G,E,M,C,E,a,W,O,E,G,E,M,C,E,e,W,O,E,G,E,M,C,E,yB,W,O,E,G,E,M,C,E,W,W,O,E,G,E,M,C,E,yB,W,O,E,G,E,M,C,E,W,W,O,E,G,E,M,C,E,Q,W,O,E,G,E,M,C,E,0B,W,O,E,G,E,M,C,E,wB,W,O,E,G,E,M,C,E,qB,W,O,E,G,I,E,E,2C,E,E,oC,E,E,gC,E,E,mC,E,E,uB,E,E,oC,E,E,4B,E,E,iC,E,E,uC,E,E,mC,E,E,uC,E,E,gC,E,E,gC,E,E,mB,E,E,c,E,E,a,E,E,Y,E,E,iB,E,E,iB,E,E,e,E,E,gB,E,E,e,E,E,c,E,E,e,E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AAA,C,G,E,M,C,E,M,WAQA,OAAA,C,G,E,M,C,E,Q,WAEA,OAAA,C,G,E,M,C,E,M,WAEA,OAAA,C,G,E,M,C,E,Q,WAOA,OAAA,C,G,E,M,C,E,O,WAEA,OAAA,C,G,E,M,C,E,iB,WAMA,OAAA,C,GAnDN,IAAM,EAAQ,KAAK,KAAK,CAClB,EAAO,KAAK,IAAI,CAChB,EAAM,KAAK,GAAG,CACd,EAAO,KAAK,IAAI,CAChB,EAAQ,KAAK,KAAK,CAClB,EAAQ,KAAK,KAAK,CAClB,EAAO,KAAK,IAAI,CAChB,EAAM,KAAK,GAAG,CACd,EAAO,KAAK,IAAI,CAQhB,EAAM,SAAC,CAAA,CAAG,CAAhB,EAAsB,OAAA,EAAI,C,EAQpB,EAAM,SAAC,CAAA,CAAG,CAAhB,EAAsB,OAAA,EAAI,EAAI,EAAI,C,EAQ5B,EAAM,SAAC,CAAA,CAAG,CAAhB,EAAsB,OAAA,EAAI,EAAI,EAAI,C,EAE5B,EAAQ,OAAO,KAAK,CAEpB,EAAM,KAAK,GAAG,CAOd,EAAQ,SAAA,CAAd,EAAqB,OAAA,KAAK,GAAG,CAAC,GAAI,E,EAE5B,EAAO,KAAK,IAAI,CAMhB,EAAiB,SAAA,CAAvB,EAA4B,OAAA,AAAM,IAAN,EAAU,EAAI,EAAI,EAAI,EAAI,C,C,E,C,iD,O,E,C,M,C,S,C,C,C,C,C,EC/B5D,IAAA,EAAA,EAAA,kD,E,iB,C,G,E,M,C,E,U,WAWY,OAAA,C,G,E,M,C,E,gB,WAeA,OAAA,C,G,E,M,C,E,S,WAKA,OAAA,C,G,E,M,C,E,S,WAaA,OAAA,C,G,E,M,C,E,a,WAeA,OAAA,C,G,E,M,C,E,e,WASA,OAAA,C,G,E,M,C,E,Y,WAmBA,OAAA,C,G,E,M,C,E,Q,WAgBA,OAAA,C,G,E,M,C,E,M,WAmBA,OAAA,C,G,E,M,C,E,a,WAyBA,OAAA,C,G,E,M,C,E,W,WAUA,OAAA,C,G,E,M,C,E,c,WASA,OAAA,C,G,E,M,C,E,Y,WAYA,OAAA,C,G,E,M,C,E,c,WAYA,OAAA,C,G,E,M,C,E,uB,WAeA,OAAA,C,G,E,M,C,E,Y,WAcA,OAAA,C,G,E,M,C,E,e,WAcA,OAAA,C,G,E,M,C,E,c,WAiBA,OAAA,C,G,E,M,C,E,wB,WA6BA,OAAA,C,G,E,M,C,E,0B,WAqBA,OAAA,C,G,E,M,C,E,iB,WAiBA,OAAA,C,G,E,M,C,E,wB,WAaA,OAAA,C,G,E,M,C,E,4B,WAoBA,OAAA,C,G,E,M,C,E,qB,WAsBA,OAAA,C,G,E,M,C,E,kB,WASA,OAAA,C,G,E,M,C,E,qB,WA0BA,OAAA,C,G,E,M,C,E,kB,WAsBA,OAAA,C,G,E,M,C,E,e,WAWA,OAAA,C,G,E,M,C,E,e,WAMA,OAAA,C,G,E,M,C,E,gB,WAMA,OAAA,C,G,E,M,C,E,iB,WAMA,OAAA,C,G,E,M,C,E,W,WAmDA,OAAA,C,G,E,M,C,E,a,WA+EA,OAAA,C,G,E,M,C,E,iB,WA0CA,OAAA,C,G,E,M,C,E,oB,WA6BA,OAAA,C,G,E,M,C,E,oB,WAwDA,OAAA,C,G,E,M,C,E,uB,WA0CA,OAAA,E,G,E,M,C,E,uB,WAqEA,OAAA,E,G,E,M,C,E,gB,WA+CA,OAAA,E,G,I,E,E,oC,E,E,gC,E,E,4B,E,E,2B,E,E,gCAv2Bb,EAAA,EAAA,aACA,EAAA,EAAA,eACA,EAAA,EAAA,eACA,EAAA,EAAA,eACA,EAAA,EAAA,cAKa,EAAN,SAAM,IAAA,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,IAAA,CAAA,GAET,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,IAAI,CAAG,IAAI,WAAW,KAI3B,IAAI,CAAC,IAAI,CAAG,EAAE,A,EAQL,EAAgB,WAAM,OAAA,IAAI,C,EAK1B,EAAS,SAAC,CAAhB,EACL,IAAM,EAAU,IAEhB,OADA,EAAE,GACK,EAAa,EACtB,EASa,EAAS,SAAA,CAAf,EAEL,IAAK,IADD,EAAM,EAAQ,IAAI,CACb,EAAI,EAAG,EAAI,EAAQ,IAAI,CAAC,MAAM,CAAE,IACvC,GAAO,EAAQ,IAAI,CAAC,EAAE,CAAC,MAAM,CAE/B,OAAO,CACT,EASa,EAAa,SAAA,CAAnB,EAA8B,OAAA,EAAQ,IAAI,CAAG,GAAK,EAAQ,IAAI,CAAC,MAAM,CAAG,C,EASlE,EAAe,SAAA,CAArB,EAGL,IAAK,IAFC,EAAW,IAAI,WAAW,EAAO,IACnC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C,GAtBb,IAAA,EAAA,EAAA,aACA,EAAA,EAAA,eAEa,EAAmB,OAAO,gBAAgB,CAC1C,EAAmB,OAAO,gBAAgB,CAE1C,EAAe,YACf,EAAgB,EAAO,MAAM,CAC7B,EAAiB,EAAO,MAAM,CAG9B,EAAY,OAAO,SAAS,EAAK,SAAA,CAAvC,EAA8C,MAAA,AAAe,UAAf,OAAO,GAAoB,SAAS,IAAQ,EAAK,KAAK,CAAC,KAAS,C,EACxG,EAAQ,OAAO,KAAK,CACpB,EAAW,OAAO,QAAQ,CAS1B,EAAY,SAAA,CAAlB,EACL,GAAK,EAAO,MAAM,CAElB,IADA,IAAI,EAAQ,EACL,GACL,GAAM,EAAI,EACV,IAEF,OAAO,CACT,C,E,C,Y,Q,c,Q,iD,O,E,C,M,C,S,C,C,C,C,C,ECxBC,IAAA,EAAA,EAAA,kD,E,iB,C,G,E,M,C,E,O,WACY,OAAA,C,G,E,M,C,E,O,WACA,OAAA,C,G,E,M,C,E,O,WACA,OAAA,C,G,E,M,C,E,O,WACA,OAAA,C,G,E,M,C,E,O,WACA,OAAA,C,G,E,M,C,E,O,WACA,OAAA,C,G,E,M,C,E,O,WACA,OAAA,C,G,E,M,C,E,O,WACA,OAAA,C,G,E,M,C,E,O,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WAOA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,Q,WACA,OAAA,C,G,E,M,C,E,S,WACA,OAAA,C,G,E,M,C,E,S,WACA,OAAA,C,G,E,M,C,E,S,WACA,OAAA,C,G,E,M,C,E,S,WACA,OAAA,C,G,E,M,C,E,S,WACA,OAAA,C,G,E,M,C,E,S,WACA,OAAA,C,G,E,M,C,E,S,WACA,OAAA,C,G,E,M,C,E,S,WACA,OAAA,C,G,E,M,C,E,S,WACA,OAAA,E,G,E,M,C,E,S,WACA,OAAA,E,G,E,M,C,E,S,WACA,OAAA,E,G,E,M,C,E,S,WACA,OAAA,E,G,E,M,C,E,S,WACA,OAAA,E,G,E,M,C,E,S,WACA,OAAA,E,G,E,M,C,E,S,WACA,OAAA,E,G,E,M,C,E,S,WACA,OAAA,E,G,E,M,C,E,S,WACA,OAAA,E,G,E,M,C,E,S,WACA,OAAA,E,G,E,M,C,E,S,WACA,OAAA,E,G,E,M,C,E,S,WACA,OAAA,E,G,E,M,C,E,S,WACA,OAAA,E,G,E,M,C,E,S,WAIA,OAAA,E,G,E,M,C,E,S,WAIA,OAAA,E,GA5EN,IAAM,EAAO,EACP,EAAO,EACP,EAAO,EACP,EAAO,EACP,EAAO,GACP,EAAO,GACP,EAAO,GACP,EAAO,IACP,EAAO,IACP,EAAQ,IACR,EAAQ,KACR,EAAQ,KACR,EAAQ,KACR,EAAQ,KACR,EAAQ,MACR,EAAQ,MACR,EAAQ,MACR,EAAQ,OACR,EAAQ,OACR,EAAQ,OACR,EAAQ,QACR,EAAQ,QACR,EAAQ,QACR,EAAQ,QACR,EAAQ,UACR,EAAQ,UACR,EAAQ,UACR,EAAQ,UACR,EAAQ,WACR,EAAQ,WACR,EAAQ,WACR,EAAQ,YAOR,EAAQ,EACR,EAAQ,EACR,EAAQ,EACR,EAAQ,EACR,EAAQ,GACR,EAAQ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,E,uB,WAQA,OAAA,C,G,E,M,C,E,Q,WAQA,OAAA,C,G,E,M,C,E,Y,WAQA,OAAA,C,G,E,M,C,E,a,WASA,OAAA,C,G,E,M,C,E,a,WAeA,OAAA,C,G,E,M,C,E,sB,WAkBA,OAAA,C,G,E,M,C,E,Y,WAkBA,OAAA,C,G,E,M,C,E,a,WAUA,OAAA,C,G,E,M,C,E,a,WAYA,OAAA,C,G,E,M,C,E,c,WAiBA,OAAA,C,G,E,M,C,E,a,WAgCA,OAAA,C,G,E,M,C,E,c,WAkCA,OAAA,C,G,E,M,C,E,a,WAcA,OAAA,C,G,E,M,C,E,yB,WAqBA,OAAA,C,G,E,M,C,E,uB,WA+BA,OAAA,C,G,E,M,C,E,gB,WAaA,OAAA,C,G,E,M,C,E,2B,WAMA,OAAA,C,G,E,M,C,E,uB,WAmBA,OAAA,C,G,E,M,C,E,gB,WASA,OAAA,C,G,E,M,C,E,mB,WAYA,OAAA,C,G,E,M,C,E,c,WASA,OAAA,C,G,E,M,C,E,c,WAKA,OAAA,C,G,E,M,C,E,e,WAKA,OAAA,C,G,E,M,C,E,gB,WAKA,OAAA,C,G,E,M,C,E,U,WAyCA,OAAA,C,G,E,M,C,E,a,WAOA,OAAA,C,G,E,M,C,E,iB,WAiCA,OAAA,C,G,E,M,C,E,oB,WAuBA,OAAA,C,G,E,M,C,E,oB,WAgCA,OAAA,C,G,E,M,C,E,uB,WA6BA,OAAA,C,G,E,M,C,E,uB,WA6BA,OAAA,C,G,E,M,C,E,gB,WAkCA,OAAA,E,G,I,E,E,oC,E,E,gC,E,E,4B,E,E,gCA/oBb,EAAA,EAAA,eACA,EAAA,EAAA,aACA,EAAA,EAAA,eACA,EAAA,EAAA,eACA,EAAA,EAAA,cACA,EAAA,EAAA,iBAEM,EAA4B,EAAM,MAAM,CAAC,2BACzC,EAAyB,EAAM,MAAM,CAAC,wBAKrC,EAAA,SAAM,EAIE,CAAU,EAJZ,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,IAAA,CAAA,GAUT,IAAI,CAAC,GAAG,CAAG,EAMX,IAAI,CAAC,GAAG,CAAG,C,EASF,EAAgB,SAAA,CAAtB,EAAoC,OAAA,IAAI,EAAQ,E,EAO1C,EAAa,SAAA,CAAnB,EAA8B,OAAA,EAAQ,GAAG,GAAK,EAAQ,GAAG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AI,CACZ,CAAA,AAAa,UAAb,OAAO,GAAkB,AAAa,YAAb,OAAO,CAAM,GACxC,EAAW,CAAC,CAAC,EAAI,CAErB,CACA,OAAO,EAAO,EAChB,C,E,C,iD,O,E,C,Q,C,S,C,C,C,C,C,ECtIC,IAiBwB,EAjBxB,EAAA,EAAA,kD,E,iB,C,GAYD,EAAA,MAAA,CAAA,EAAA,OAAA,W,O,E,I,A,GAAA,EAAA,MAAA,CAAA,EAAA,SAAA,W,O,E,M,A,GAAA,EAAA,MAAA,CAAA,EAAA,OAAA,W,O,E,I,A,GAAA,EAAA,MAAA,CAAA,EAAA,OAAA,W,O,E,I,A,GAAA,EAAA,MAAA,CAAA,EAAA,QAAA,W,O,E,K,A,GAAA,EAAA,MAAA,CAAA,EAAA,MAAA,W,O,E,G,A,GAAA,EAAA,MAAA,CAAA,EAAA,SAAA,W,O,E,M,A,GAAA,EAAA,MAAA,CAAA,EAAA,SAAA,W,O,E,M,A,GAAA,EAAA,MAAA,CAAA,EAAA,UAAA,W,O,E,O,A,G,E,M,C,E,Q,WAmFa,OAAA,C,G,E,M,C,E,O,WAUA,OAAA,C,G,E,M,C,E,a,WAWA,OAAA,C,G,E,M,C,E,W,WAWA,OAAA,C,G,E,M,C,E,iB,WAiBA,OAAA,C,G,E,M,C,E,Q,WAMA,OAAA,C,G,E,M,C,E,iB,WASA,OAAA,C,G,E,M,C,E,W,WAMA,OAAA,C,G,E,M,C,E,W,WAUA,OAAA,C,G,E,M,C,E,c,WAQA,OAAA,C,G,E,M,C,E,Y,WAGA,OAAA,C,G,E,M,C,E,W,WAwDA,OAAA,C,G,E,M,C,E,iB,WAkIA,OAAA,C,G,E,M,C,E,qB,WAMA,OAAA,C,G,I,E,E,oC,E,E,gC,E,E,mC,E,E,uCAxXb,EAAA,EAAA,oBACA,EAAA,EAAA,YACA,EAAA,EAAA,aACA,EAAA,EAAA,YACA,EAAA,EAAA,aACA,EAAA,EAAA,YACA,EAAA,EAAA,kBACA,EAAA,EAAA,aACA,EAAA,EAAA,uBAOM,EAAmB,CAAA,EAAA,CAAA,EACvB,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EADuB,EACtB,EAAO,IAAI,CAAG,EAAK,MAAM,CAAC,cAAe,SAC1C,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAFu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CAAR,EAAa,OAAA,EAAE,EAAE,IAAI,CAAE,EAAE,KAAK,C,E,C,E,C,mC,Q,iD,O,E,C,M,C,S,C,C,C,C,C,EC3C5D,IAAA,EAAA,EAAA,kD,E,iB,C,G,E,M,C,E,M,WASY,OAAA,C,G,E,M,C,E,gB,WAMA,OAAA,C,G,E,M,C,E,yB,WAKA,OAAA,C,G,E,M,C,E,iB,WAMA,OAAA,C,G,E,M,C,E,Y,WAEA,OAAA,C,G,E,M,C,E,kB,WAOA,OAAA,C,G,E,M,C,E,gB,WAOA,OAAA,C,G,E,M,C,E,mB,WAmBA,OAAA,C,G,E,M,C,E,W,WASA,OAAA,C,G,E,M,C,E,S,WAaA,OAAA,C,G,E,M,C,E,S,WAQA,OAAA,C,G,E,M,C,E,mB,WAOA,OAAA,C,G,E,M,C,E,sB,WAOA,OAAA,C,G,E,M,C,E,oB,WAOA,OAAA,C,G,E,M,C,E,uB,WAUA,OAAA,C,G,E,M,C,E,U,WAWA,OAAA,C,G,E,M,C,E,S,WAOA,OAAA,C,G,E,M,C,E,O,WAWA,OAAA,C,G,E,M,C,E,oB,WAKA,OAAA,C,G,E,M,C,E,qB,WAMA,OAAA,C,G,E,M,C,E,mB,WAMA,OAAA,C,G,E,M,C,E,gB,WASA,OAAA,C,G,E,M,C,E,mB,WAOA,OAAA,C,G,E,M,C,E,iB,WAMA,OAAA,C,G,E,M,C,E,gB,WAYA,OAAA,C,G,E,M,C,E,e,WAMA,OAAA,C,G,E,M,C,E,c,WAMA,OAAA,C,G,E,M,C,E,e,WAQA,OAAA,C,G,E,M,C,E,c,WAOA,OAAA,C,G,E,M,C,E,e,WAEA,OAAA,C,G,E,M,C,E,Y,WACA,OAAA,C,G,E,M,C,E,qB,WACA,OAAA,C,G,E,M,C,E,e,WACA,OAAA,C,G,E,M,C,E,gB,WACA,OAAA,C,G,E,M,C,E,qB,WACA,OAAA,C,G,E,M,C,E,yB,WACA,OAAA,C,G,E,M,C,E,gB,WAMA,OAAA,C,G,E,M,C,E,a,WAMA,OAAA,C,GAvPb,IAAA,EAAA,EAAA,aACA,EAAA,EAAA,YAMa,EAA+B,AAAoB,aAApB,OAAO,SAA2B,SAAW,CAAC,EAM7E,EAAgB,SAAA,CAAtB,EAA8B,OAAA,EAAI,aAAa,CAAC,E,EAK1C,EAAyB,WAAM,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","sources":["<anon>","src/api/edrys.ts","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/yjs/dist/yjs.mjs","node_modules/yjs/src/utils/AbstractConnector.js","node_modules/yjs/src/utils/DeleteSet.js","node_modules/yjs/src/utils/Doc.js","node_modules/yjs/src/utils/UpdateDecoder.js","node_modules/yjs/src/utils/UpdateEncoder.js","node_modules/yjs/src/utils/encoding.js","node_modules/yjs/src/utils/EventHandler.js","node_modules/yjs/src/utils/ID.js","node_modules/yjs/src/utils/isParentOf.js","node_modules/yjs/src/utils/logging.js","node_modules/yjs/src/utils/PermanentUserData.js","node_modules/yjs/src/utils/RelativePosition.js","node_modules/yjs/src/utils/Snapshot.js","node_modules/yjs/src/utils/StructStore.js","node_modules/yjs/src/utils/Transaction.js","node_modules/yjs/src/utils/UndoManager.js","node_modules/yjs/src/utils/updates.js","node_modules/yjs/src/utils/YEvent.js","node_modules/yjs/src/types/AbstractType.js","node_modules/yjs/src/types/YArray.js","node_modules/yjs/src/types/YMap.js","node_modules/yjs/src/types/YText.js","node_modules/yjs/src/types/YXmlFragment.js","node_modules/yjs/src/types/YXmlElement.js","node_modules/yjs/src/types/YXmlEvent.js","node_modules/yjs/src/types/YXmlHook.js","node_modules/yjs/src/types/YXmlText.js","node_modules/yjs/src/structs/AbstractStruct.js","node_modules/yjs/src/structs/GC.js","node_modules/yjs/src/structs/ContentBinary.js","node_modules/yjs/src/structs/ContentDeleted.js","node_modules/yjs/src/structs/ContentDoc.js","node_modules/yjs/src/structs/ContentEmbed.js","node_modules/yjs/src/structs/ContentFormat.js","node_modules/yjs/src/structs/ContentJSON.js","node_modules/yjs/src/structs/ContentAny.js","node_modules/yjs/src/structs/ContentString.js","node_modules/yjs/src/structs/ContentType.js","node_modules/yjs/src/structs/Item.js","node_modules/yjs/src/structs/Skip.js","node_modules/yjs/src/index.js","node_modules/@swc/helpers/esm/_assert_this_initialized.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js","node_modules/@swc/helpers/esm/_get.js","node_modules/@swc/helpers/esm/_super_prop_base.js","node_modules/@swc/helpers/esm/_get_prototype_of.js","node_modules/@swc/helpers/esm/_inherits.js","node_modules/@swc/helpers/esm/_set_prototype_of.js","node_modules/@swc/helpers/esm/_object_spread.js","node_modules/@swc/helpers/esm/_object_spread_props.js","node_modules/@swc/helpers/esm/_create_super.js","node_modules/@swc/helpers/esm/_is_native_reflect_construct.js","node_modules/@swc/helpers/esm/_possible_constructor_return.js","node_modules/@swc/helpers/esm/_type_of.js","node_modules/@swc/helpers/esm/_ts_generator.js","node_modules/tslib/tslib.es6.js","node_modules/lib0/observable.js","node_modules/lib0/map.js","node_modules/lib0/set.js","node_modules/lib0/array.js","node_modules/lib0/math.js","node_modules/lib0/encoding.js","node_modules/lib0/number.js","node_modules/lib0/binary.js","node_modules/lib0/string.js","node_modules/lib0/decoding.js","node_modules/lib0/error.js","node_modules/lib0/random.js","node_modules/lib0/webcrypto.js","node_modules/lib0/promise.js","node_modules/@swc/helpers/esm/_async_to_generator.js","node_modules/lib0/time.js","node_modules/lib0/metric.js","node_modules/lib0/buffer.js","node_modules/buffer/index.js","node_modules/base64-js/index.js","node_modules/ieee754/index.js","node_modules/lib0/environment.js","node_modules/process/browser.js","node_modules/lib0/conditions.js","node_modules/lib0/storage.js","node_modules/lib0/function.js","node_modules/lib0/object.js","node_modules/lib0/logging.js","node_modules/lib0/pair.js","node_modules/lib0/dom.js","node_modules/lib0/json.js","node_modules/lib0/eventloop.js","node_modules/lib0/logging.common.js","node_modules/lib0/symbol.js","node_modules/lib0/iterator.js","node_modules/y-protocols/awareness.js","src/api/awarenessManager.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"lAYKv\":[function(require,module,exports) {\n/**\n * This the Edrys javascript client library.\n * Properties:\n *  Edrys.ready\n *  Edrys.role\n *  Edrys.username\n *  Edrys.module\n *  Edrys.liveClass (this is reactive, meaning setting a property on it will also update it in real time)\n *  Edrys.liveRoom (also reactive)\n *  Edrys.liveUser (also reactive)\n * Functions:\n *  Edrys.sendMessage(subject, body)\n *  Edrys.onMessage(({from, subject, body}) => { // Called when a message is received in your room })\n *  Edrys.onUpdate(() => { // Called when any Edrys properties change })\n *  Edrys.onReady(() => { // Called when Edrys is ready })\n */ var _slicedToArray = require(\"@swc/helpers/_/_sliced_to_array\");\nvar _toConsumableArray = require(\"@swc/helpers/_/_to_consumable_array\");\nvar _yjs = require(\"yjs\");\nvar _awarenessJs = require(\"y-protocols/awareness.js\");\nvar _awarenessManager = require(\"./awarenessManager\");\nvar EXTERN = \"extern\";\nvar awareness;\nvar awarenessManager;\nvar doc;\nwindow[\"Edrys\"] = {\n    origin: \"*\",\n    ready: false,\n    role: undefined,\n    username: undefined,\n    liveClass: undefined,\n    liveRoom: undefined,\n    liveUser: undefined,\n    module: undefined,\n    class_id: undefined,\n    onReady: function(handler) {\n        if (window[\"Edrys\"].ready) handler(window[\"Edrys\"]);\n        else window.addEventListener(\"$Edrys.ready\", function(e) {\n            handler(window[\"Edrys\"]);\n        });\n    },\n    onUpdate: function(handler) {\n        window.addEventListener(\"$Edrys.update\", function(e) {\n            handler(window[\"Edrys\"]);\n        });\n    },\n    onMessage: function(handler) {\n        var promiscuous = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        window.addEventListener(\"$Edrys.message\", function(e) {\n            var _window_Edrys_module;\n            var customEvent = e;\n            if (!promiscuous && customEvent.detail.module != ((_window_Edrys_module = window[\"Edrys\"].module) === null || _window_Edrys_module === void 0 ? void 0 : _window_Edrys_module.url)) return;\n            handler(customEvent.detail);\n        });\n    },\n    sendMessage: function(subject, body, user) {\n        if (typeof subject !== \"string\") subject = JSON.stringify(subject);\n        if (typeof body !== \"string\") body = JSON.stringify(body);\n        window.parent.postMessage({\n            event: \"message\",\n            subject: subject,\n            body: body,\n            module: window[\"Edrys\"].module.url,\n            user: user\n        }, window[\"Edrys\"].origin);\n    },\n    setItem: function(key, value) {\n        localStorage.setItem(\"\".concat(window[\"Edrys\"].class_id, \".\").concat(window[\"Edrys\"].liveUser.room, \".\").concat(key), value);\n    },\n    getItem: function(key) {\n        return localStorage.getItem(\"\".concat(window[\"Edrys\"].class_id, \".\").concat(window[\"Edrys\"].liveUser.room, \".\").concat(key));\n    },\n    clearState: function(key) {\n        doc.getMap(\"rooms\").get(window[\"Edrys\"].liveUser.room)[\"delete\"](key);\n    },\n    getState: function(key, type, value) {\n        if (type === \"Awareness\") return awarenessManager.getAwareness(window[\"Edrys\"].liveUser.room + \".\" + key);\n        var map = doc.getMap(\"rooms\").get(window[\"Edrys\"].liveUser.room);\n        if (map.has(key)) return map.get(key);\n        var state;\n        switch(type){\n            case \"Map\":\n                state = new _yjs.Map();\n                break;\n            case \"Array\":\n                state = new _yjs.Array();\n                break;\n            case \"Text\":\n                state = new _yjs.Text();\n                break;\n            case \"XmlFragment\":\n                state = new _yjs.XmlFragment();\n                break;\n            case \"XmlText\":\n                state = new _yjs.XmlText();\n                break;\n            case \"XmlElement\":\n                state = new _yjs.XmlElement();\n                break;\n            default:\n                state = value;\n                break;\n        }\n        map.set(key, state);\n        return state;\n    }\n};\nvar edrysProxyValidator = function(path) {\n    return {\n        get: function(target, key) {\n            if (key == \"isProxy\") return true;\n            var prop = target[key];\n            if (typeof prop == \"undefined\") return;\n            if (!prop.isProxy && typeof prop === \"object\") target[key] = new Proxy(prop, edrysProxyValidator((0, _toConsumableArray._)(path).concat([\n                key\n            ])));\n            return target[key];\n        },\n        set: function(target, key, value) {\n            if (!path.includes(\"__ob__\")) {\n                var path_ = (0, _toConsumableArray._)(path).concat([\n                    key\n                ]);\n                window.parent.postMessage({\n                    event: \"update\",\n                    path: path_,\n                    value: value\n                }, window[\"Edrys\"].origin);\n            }\n            target[key] = value;\n            return true;\n        }\n    };\n};\nfunction update() {\n    var liveClass = {\n        users: doc.getMap(\"users\").toJSON(),\n        rooms: doc.getMap(\"rooms\").toJSON()\n    };\n    Object.entries(liveClass.rooms).forEach(function(param) {\n        var _param = (0, _slicedToArray._)(param, 2), name = _param[0], data = _param[1];\n        return {\n            name: name,\n            data: data\n        };\n    });\n    Object.entries(liveClass.users).forEach(function(param) {\n        var _param = (0, _slicedToArray._)(param, 2), n = _param[0], u = _param[1];\n        u.name = n;\n    });\n    window[\"Edrys\"].liveClass = new Proxy(liveClass, edrysProxyValidator(\"\"));\n    window[\"Edrys\"].liveUser = liveClass.users[window[\"Edrys\"].username];\n    window[\"Edrys\"].liveRoom = liveClass.rooms[window[\"Edrys\"].liveUser.room];\n}\nwindow.addEventListener(\"message\", function(e) {\n    switch(e.data.event){\n        case \"update\":\n            window[\"Edrys\"].origin = e.data.origin;\n            window[\"Edrys\"].role = e.data.role;\n            window[\"Edrys\"].username = e.data.username;\n            window[\"Edrys\"].module = e.data.module;\n            if (!doc) {\n                doc = new _yjs.Doc();\n                awareness = new _awarenessJs.Awareness(doc);\n                awarenessManager = new (0, _awarenessManager.RoomAwarenessManager)(awareness);\n                doc.getMap(\"users\");\n                doc.getMap(\"rooms\");\n                doc.on(\"update\", function(state, origin) {\n                    update();\n                    dispatchEvent(new CustomEvent(\"$Edrys.update\", {\n                        bubbles: false\n                    }));\n                    if (origin === EXTERN) return; // Ignore this transaction\n                    window.parent.postMessage({\n                        event: \"state\",\n                        data: state\n                    }, window[\"Edrys\"].origin);\n                });\n                awareness.on(\"update\", function(param, origin) {\n                    var added = param.added, updated = param.updated, removed = param.removed;\n                    if (origin !== EXTERN) {\n                        var changedClients = added.concat(updated, removed);\n                        // Send the update to the parent window\n                        window.parent.postMessage({\n                            event: \"awareness\",\n                            data: _awarenessJs.encodeAwarenessUpdate(awareness, changedClients)\n                        }, window[\"Edrys\"].origin);\n                    }\n                });\n            }\n            try {\n                window[\"Edrys\"].module.config = JSON.parse(e.data.module.config);\n            } catch (e) {}\n            try {\n                window[\"Edrys\"].module.studentConfig = JSON.parse(e.data.module.studentConfig);\n            } catch (e) {}\n            try {\n                window[\"Edrys\"].module.teacherConfig = JSON.parse(e.data.module.teacherConfig);\n            } catch (e) {}\n            try {\n                window[\"Edrys\"].module.stationConfig = JSON.parse(e.data.module.stationConfig);\n            } catch (e) {}\n            window[\"Edrys\"].class_id = e.data.class_id;\n            if (e.data.liveClass) _yjs.applyUpdate(doc, e.data.liveClass, EXTERN);\n            if (e.data.awareness) _awarenessJs.applyAwarenessUpdate(awareness, e.data.awareness, EXTERN);\n            if (!window[\"Edrys\"].ready) {\n                window[\"Edrys\"].ready = true;\n                dispatchEvent(new CustomEvent(\"$Edrys.ready\", {\n                    bubbles: false,\n                    detail: e.data\n                }));\n            }\n            break;\n        case \"message\":\n            break;\n        case \"echo\":\n            console.log(\"ECHO:\", e.data);\n            break;\n        default:\n            break;\n    }\n    dispatchEvent(new CustomEvent(\"$Edrys.\" + e.data.event, {\n        bubbles: false,\n        detail: e.data\n    }));\n}, false);\n\n},{\"@swc/helpers/_/_sliced_to_array\":\"hvLP1\",\"@swc/helpers/_/_to_consumable_array\":\"glvYM\",\"yjs\":\"6xWYU\",\"y-protocols/awareness.js\":\"7jOWD\",\"./awarenessManager\":\"6DPKa\"}],\"hvLP1\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _sliced_to_array;\n});\nvar _arrayWithHolesJs = require(\"./_array_with_holes.js\");\nvar _iterableToArrayLimitJs = require(\"./_iterable_to_array_limit.js\");\nvar _nonIterableRestJs = require(\"./_non_iterable_rest.js\");\nvar _unsupportedIterableToArrayJs = require(\"./_unsupported_iterable_to_array.js\");\nfunction _sliced_to_array(arr, i) {\n    return (0, _arrayWithHolesJs._)(arr) || (0, _iterableToArrayLimitJs._)(arr, i) || (0, _unsupportedIterableToArrayJs._)(arr, i) || (0, _nonIterableRestJs._)();\n}\n\n},{\"./_array_with_holes.js\":\"2Wpfh\",\"./_iterable_to_array_limit.js\":\"6gVzP\",\"./_non_iterable_rest.js\":\"5j8xZ\",\"./_unsupported_iterable_to_array.js\":\"j8Sxs\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"2Wpfh\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _array_with_holes;\n});\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"7qSmP\":[function(require,module,exports) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        \"default\": a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, \"__esModule\", {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === \"default\" || key === \"__esModule\" || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function get() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports[\"export\"] = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}],\"6gVzP\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _iterable_to_array_limit;\n});\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"5j8xZ\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _non_iterable_rest;\n});\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"j8Sxs\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _unsupported_iterable_to_array;\n});\nvar _arrayLikeToArrayJs = require(\"./_array_like_to_array.js\");\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, _arrayLikeToArrayJs._)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, _arrayLikeToArrayJs._)(o, minLen);\n}\n\n},{\"./_array_like_to_array.js\":\"ccXeM\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"ccXeM\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _array_like_to_array;\n});\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"glvYM\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _to_consumable_array;\n});\nvar _arrayWithoutHolesJs = require(\"./_array_without_holes.js\");\nvar _iterableToArrayJs = require(\"./_iterable_to_array.js\");\nvar _nonIterableSpreadJs = require(\"./_non_iterable_spread.js\");\nvar _unsupportedIterableToArrayJs = require(\"./_unsupported_iterable_to_array.js\");\nfunction _to_consumable_array(arr) {\n    return (0, _arrayWithoutHolesJs._)(arr) || (0, _iterableToArrayJs._)(arr) || (0, _unsupportedIterableToArrayJs._)(arr) || (0, _nonIterableSpreadJs._)();\n}\n\n},{\"./_array_without_holes.js\":\"6W3YD\",\"./_iterable_to_array.js\":\"fS4OO\",\"./_non_iterable_spread.js\":\"lRJN3\",\"./_unsupported_iterable_to_array.js\":\"j8Sxs\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"6W3YD\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _array_without_holes;\n});\nvar _arrayLikeToArrayJs = require(\"./_array_like_to_array.js\");\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return (0, _arrayLikeToArrayJs._)(arr);\n}\n\n},{\"./_array_like_to_array.js\":\"ccXeM\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"fS4OO\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _iterable_to_array;\n});\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"lRJN3\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _non_iterable_spread;\n});\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"6xWYU\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"AbsolutePosition\", function() {\n    return AbsolutePosition;\n});\nparcelHelpers.export(exports, \"AbstractConnector\", function() {\n    return AbstractConnector;\n});\nparcelHelpers.export(exports, \"AbstractStruct\", function() {\n    return AbstractStruct;\n});\nparcelHelpers.export(exports, \"AbstractType\", function() {\n    return AbstractType;\n});\nparcelHelpers.export(exports, \"Array\", function() {\n    return YArray;\n});\nparcelHelpers.export(exports, \"ContentAny\", function() {\n    return ContentAny;\n});\nparcelHelpers.export(exports, \"ContentBinary\", function() {\n    return ContentBinary;\n});\nparcelHelpers.export(exports, \"ContentDeleted\", function() {\n    return ContentDeleted;\n});\nparcelHelpers.export(exports, \"ContentDoc\", function() {\n    return ContentDoc;\n});\nparcelHelpers.export(exports, \"ContentEmbed\", function() {\n    return ContentEmbed;\n});\nparcelHelpers.export(exports, \"ContentFormat\", function() {\n    return ContentFormat;\n});\nparcelHelpers.export(exports, \"ContentJSON\", function() {\n    return ContentJSON;\n});\nparcelHelpers.export(exports, \"ContentString\", function() {\n    return ContentString;\n});\nparcelHelpers.export(exports, \"ContentType\", function() {\n    return ContentType;\n});\nparcelHelpers.export(exports, \"Doc\", function() {\n    return Doc;\n});\nparcelHelpers.export(exports, \"GC\", function() {\n    return GC;\n});\nparcelHelpers.export(exports, \"ID\", function() {\n    return ID;\n});\nparcelHelpers.export(exports, \"Item\", function() {\n    return Item;\n});\nparcelHelpers.export(exports, \"Map\", function() {\n    return YMap;\n});\nparcelHelpers.export(exports, \"PermanentUserData\", function() {\n    return PermanentUserData;\n});\nparcelHelpers.export(exports, \"RelativePosition\", function() {\n    return RelativePosition;\n});\nparcelHelpers.export(exports, \"Skip\", function() {\n    return Skip;\n});\nparcelHelpers.export(exports, \"Snapshot\", function() {\n    return Snapshot;\n});\nparcelHelpers.export(exports, \"Text\", function() {\n    return YText;\n});\nparcelHelpers.export(exports, \"Transaction\", function() {\n    return Transaction;\n});\nparcelHelpers.export(exports, \"UndoManager\", function() {\n    return UndoManager;\n});\nparcelHelpers.export(exports, \"UpdateDecoderV1\", function() {\n    return UpdateDecoderV1;\n});\nparcelHelpers.export(exports, \"UpdateDecoderV2\", function() {\n    return UpdateDecoderV2;\n});\nparcelHelpers.export(exports, \"UpdateEncoderV1\", function() {\n    return UpdateEncoderV1;\n});\nparcelHelpers.export(exports, \"UpdateEncoderV2\", function() {\n    return UpdateEncoderV2;\n});\nparcelHelpers.export(exports, \"XmlElement\", function() {\n    return YXmlElement;\n});\nparcelHelpers.export(exports, \"XmlFragment\", function() {\n    return YXmlFragment;\n});\nparcelHelpers.export(exports, \"XmlHook\", function() {\n    return YXmlHook;\n});\nparcelHelpers.export(exports, \"XmlText\", function() {\n    return YXmlText;\n});\nparcelHelpers.export(exports, \"YArrayEvent\", function() {\n    return YArrayEvent;\n});\nparcelHelpers.export(exports, \"YEvent\", function() {\n    return YEvent;\n});\nparcelHelpers.export(exports, \"YMapEvent\", function() {\n    return YMapEvent;\n});\nparcelHelpers.export(exports, \"YTextEvent\", function() {\n    return YTextEvent;\n});\nparcelHelpers.export(exports, \"YXmlEvent\", function() {\n    return YXmlEvent;\n});\nparcelHelpers.export(exports, \"applyUpdate\", function() {\n    return applyUpdate;\n});\nparcelHelpers.export(exports, \"applyUpdateV2\", function() {\n    return applyUpdateV2;\n});\nparcelHelpers.export(exports, \"cleanupYTextFormatting\", function() {\n    return cleanupYTextFormatting;\n});\nparcelHelpers.export(exports, \"compareIDs\", function() {\n    return compareIDs;\n});\nparcelHelpers.export(exports, \"compareRelativePositions\", function() {\n    return compareRelativePositions;\n});\nparcelHelpers.export(exports, \"convertUpdateFormatV1ToV2\", function() {\n    return convertUpdateFormatV1ToV2;\n});\nparcelHelpers.export(exports, \"convertUpdateFormatV2ToV1\", function() {\n    return convertUpdateFormatV2ToV1;\n});\nparcelHelpers.export(exports, \"createAbsolutePositionFromRelativePosition\", function() {\n    return createAbsolutePositionFromRelativePosition;\n});\nparcelHelpers.export(exports, \"createDeleteSet\", function() {\n    return createDeleteSet;\n});\nparcelHelpers.export(exports, \"createDeleteSetFromStructStore\", function() {\n    return createDeleteSetFromStructStore;\n});\nparcelHelpers.export(exports, \"createDocFromSnapshot\", function() {\n    return createDocFromSnapshot;\n});\nparcelHelpers.export(exports, \"createID\", function() {\n    return createID;\n});\nparcelHelpers.export(exports, \"createRelativePositionFromJSON\", function() {\n    return createRelativePositionFromJSON;\n});\nparcelHelpers.export(exports, \"createRelativePositionFromTypeIndex\", function() {\n    return createRelativePositionFromTypeIndex;\n});\nparcelHelpers.export(exports, \"createSnapshot\", function() {\n    return createSnapshot;\n});\nparcelHelpers.export(exports, \"decodeRelativePosition\", function() {\n    return decodeRelativePosition;\n});\nparcelHelpers.export(exports, \"decodeSnapshot\", function() {\n    return decodeSnapshot;\n});\nparcelHelpers.export(exports, \"decodeSnapshotV2\", function() {\n    return decodeSnapshotV2;\n});\nparcelHelpers.export(exports, \"decodeStateVector\", function() {\n    return decodeStateVector;\n});\nparcelHelpers.export(exports, \"decodeUpdate\", function() {\n    return decodeUpdate;\n});\nparcelHelpers.export(exports, \"decodeUpdateV2\", function() {\n    return decodeUpdateV2;\n});\nparcelHelpers.export(exports, \"diffUpdate\", function() {\n    return diffUpdate;\n});\nparcelHelpers.export(exports, \"diffUpdateV2\", function() {\n    return diffUpdateV2;\n});\nparcelHelpers.export(exports, \"emptySnapshot\", function() {\n    return emptySnapshot;\n});\nparcelHelpers.export(exports, \"encodeRelativePosition\", function() {\n    return encodeRelativePosition;\n});\nparcelHelpers.export(exports, \"encodeSnapshot\", function() {\n    return encodeSnapshot;\n});\nparcelHelpers.export(exports, \"encodeSnapshotV2\", function() {\n    return encodeSnapshotV2;\n});\nparcelHelpers.export(exports, \"encodeStateAsUpdate\", function() {\n    return encodeStateAsUpdate;\n});\nparcelHelpers.export(exports, \"encodeStateAsUpdateV2\", function() {\n    return encodeStateAsUpdateV2;\n});\nparcelHelpers.export(exports, \"encodeStateVector\", function() {\n    return encodeStateVector;\n});\nparcelHelpers.export(exports, \"encodeStateVectorFromUpdate\", function() {\n    return encodeStateVectorFromUpdate;\n});\nparcelHelpers.export(exports, \"encodeStateVectorFromUpdateV2\", function() {\n    return encodeStateVectorFromUpdateV2;\n});\nparcelHelpers.export(exports, \"equalDeleteSets\", function() {\n    return equalDeleteSets;\n});\nparcelHelpers.export(exports, \"equalSnapshots\", function() {\n    return equalSnapshots;\n});\nparcelHelpers.export(exports, \"findIndexSS\", function() {\n    return findIndexSS;\n});\nparcelHelpers.export(exports, \"findRootTypeKey\", function() {\n    return findRootTypeKey;\n});\nparcelHelpers.export(exports, \"getItem\", function() {\n    return getItem;\n});\nparcelHelpers.export(exports, \"getState\", function() {\n    return getState;\n});\nparcelHelpers.export(exports, \"getTypeChildren\", function() {\n    return getTypeChildren;\n});\nparcelHelpers.export(exports, \"isDeleted\", function() {\n    return isDeleted;\n});\nparcelHelpers.export(exports, \"isParentOf\", function() {\n    return isParentOf;\n});\nparcelHelpers.export(exports, \"iterateDeletedStructs\", function() {\n    return iterateDeletedStructs;\n});\nparcelHelpers.export(exports, \"logType\", function() {\n    return logType;\n});\nparcelHelpers.export(exports, \"logUpdate\", function() {\n    return logUpdate;\n});\nparcelHelpers.export(exports, \"logUpdateV2\", function() {\n    return logUpdateV2;\n});\nparcelHelpers.export(exports, \"mergeDeleteSets\", function() {\n    return mergeDeleteSets;\n});\nparcelHelpers.export(exports, \"mergeUpdates\", function() {\n    return mergeUpdates;\n});\nparcelHelpers.export(exports, \"mergeUpdatesV2\", function() {\n    return mergeUpdatesV2;\n});\nparcelHelpers.export(exports, \"obfuscateUpdate\", function() {\n    return obfuscateUpdate;\n});\nparcelHelpers.export(exports, \"obfuscateUpdateV2\", function() {\n    return obfuscateUpdateV2;\n});\nparcelHelpers.export(exports, \"parseUpdateMeta\", function() {\n    return parseUpdateMeta;\n});\nparcelHelpers.export(exports, \"parseUpdateMetaV2\", function() {\n    return parseUpdateMetaV2;\n});\nparcelHelpers.export(exports, \"readUpdate\", function() {\n    return readUpdate;\n});\nparcelHelpers.export(exports, \"readUpdateV2\", function() {\n    return readUpdateV2;\n});\nparcelHelpers.export(exports, \"relativePositionToJSON\", function() {\n    return relativePositionToJSON;\n});\nparcelHelpers.export(exports, \"snapshot\", function() {\n    return snapshot;\n});\nparcelHelpers.export(exports, \"snapshotContainsUpdate\", function() {\n    return snapshotContainsUpdate;\n});\nparcelHelpers.export(exports, \"transact\", function() {\n    return transact;\n});\nparcelHelpers.export(exports, \"tryGc\", function() {\n    return tryGc;\n});\nparcelHelpers.export(exports, \"typeListToArraySnapshot\", function() {\n    return typeListToArraySnapshot;\n});\nparcelHelpers.export(exports, \"typeMapGetAllSnapshot\", function() {\n    return typeMapGetAllSnapshot;\n});\nparcelHelpers.export(exports, \"typeMapGetSnapshot\", function() {\n    return typeMapGetSnapshot;\n});\nvar _assertThisInitialized = require(\"@swc/helpers/_/_assert_this_initialized\");\nvar _classCallCheck = require(\"@swc/helpers/_/_class_call_check\");\nvar _createClass = require(\"@swc/helpers/_/_create_class\");\nvar _defineProperty = require(\"@swc/helpers/_/_define_property\");\nvar _get = require(\"@swc/helpers/_/_get\");\nvar _getPrototypeOf = require(\"@swc/helpers/_/_get_prototype_of\");\nvar _inherits = require(\"@swc/helpers/_/_inherits\");\nvar _objectSpread = require(\"@swc/helpers/_/_object_spread\");\nvar _objectSpreadProps = require(\"@swc/helpers/_/_object_spread_props\");\nvar _slicedToArray = require(\"@swc/helpers/_/_sliced_to_array\");\nvar _toConsumableArray = require(\"@swc/helpers/_/_to_consumable_array\");\nvar _createSuper = require(\"@swc/helpers/_/_create_super\");\nvar _tsGenerator = require(\"@swc/helpers/_/_ts_generator\");\nvar _observable = require(\"lib0/observable\");\nvar _array = require(\"lib0/array\");\nvar _math = require(\"lib0/math\");\nvar _map = require(\"lib0/map\");\nvar _encoding = require(\"lib0/encoding\");\nvar _decoding = require(\"lib0/decoding\");\nvar _random = require(\"lib0/random\");\nvar _promise = require(\"lib0/promise\");\nvar _buffer = require(\"lib0/buffer\");\nvar _error = require(\"lib0/error\");\nvar _binary = require(\"lib0/binary\");\nvar _function = require(\"lib0/function\");\nvar _set = require(\"lib0/set\");\nvar _logging = require(\"lib0/logging\");\nvar _time = require(\"lib0/time\");\nvar _string = require(\"lib0/string\");\nvar _iterator = require(\"lib0/iterator\");\nvar _object = require(\"lib0/object\");\nvar _environment = require(\"lib0/environment\");\nvar global = arguments[3];\n/**\n * This is an abstract interface that all Connectors should implement to keep them interchangeable.\n *\n * @note This interface is experimental and it is not advised to actually inherit this class.\n *       It just serves as typing information.\n *\n * @extends {ObservableV2<any>}\n */ var AbstractConnector = /*#__PURE__*/ function(ObservableV2) {\n    \"use strict\";\n    (0, _inherits._)(AbstractConnector, ObservableV2);\n    var _super = (0, _createSuper._)(AbstractConnector);\n    function AbstractConnector(ydoc, awareness) {\n        (0, _classCallCheck._)(this, AbstractConnector);\n        var _this;\n        _this = _super.call(this);\n        _this.doc = ydoc;\n        _this.awareness = awareness;\n        return _this;\n    }\n    return AbstractConnector;\n}((0, _observable.ObservableV2));\nvar DeleteItem = function DeleteItem(clock, len) {\n    \"use strict\";\n    (0, _classCallCheck._)(this, DeleteItem);\n    /**\n     * @type {number}\n     */ this.clock = clock;\n    /**\n     * @type {number}\n     */ this.len = len;\n};\n/**\n * We no longer maintain a DeleteStore. DeleteSet is a temporary object that is created when needed.\n * - When created in a transaction, it must only be accessed after sorting, and merging\n *   - This DeleteSet is send to other clients\n * - We do not create a DeleteSet when we send a sync message. The DeleteSet message is created directly from StructStore\n * - We read a DeleteSet as part of a sync/update message. In this case the DeleteSet is already sorted and merged.\n */ var DeleteSet = function DeleteSet() {\n    \"use strict\";\n    (0, _classCallCheck._)(this, DeleteSet);\n    /**\n     * @type {Map<number,Array<DeleteItem>>}\n     */ this.clients = new Map();\n};\n/**\n * Iterate over all structs that the DeleteSet gc's.\n *\n * @param {Transaction} transaction\n * @param {DeleteSet} ds\n * @param {function(GC|Item):void} f\n *\n * @function\n */ var iterateDeletedStructs = function(transaction, ds, f) {\n    return ds.clients.forEach(function(deletes, clientid) {\n        var structs = /** @type {Array<GC|Item>} */ transaction.doc.store.clients.get(clientid);\n        for(var i = 0; i < deletes.length; i++){\n            var del = deletes[i];\n            iterateStructs(transaction, structs, del.clock, del.len, f);\n        }\n    });\n};\n/**\n * @param {Array<DeleteItem>} dis\n * @param {number} clock\n * @return {number|null}\n *\n * @private\n * @function\n */ var findIndexDS = function(dis, clock) {\n    var left = 0;\n    var right = dis.length - 1;\n    while(left <= right){\n        var midindex = _math.floor((left + right) / 2);\n        var mid = dis[midindex];\n        var midclock = mid.clock;\n        if (midclock <= clock) {\n            if (clock < midclock + mid.len) return midindex;\n            left = midindex + 1;\n        } else right = midindex - 1;\n    }\n    return null;\n};\n/**\n * @param {DeleteSet} ds\n * @param {ID} id\n * @return {boolean}\n *\n * @private\n * @function\n */ var isDeleted = function(ds, id) {\n    var dis = ds.clients.get(id.client);\n    return dis !== undefined && findIndexDS(dis, id.clock) !== null;\n};\n/**\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */ var sortAndMergeDeleteSet = function(ds) {\n    ds.clients.forEach(function(dels) {\n        dels.sort(function(a, b) {\n            return a.clock - b.clock;\n        });\n        // merge items without filtering or splicing the array\n        // i is the current pointer\n        // j refers to the current insert position for the pointed item\n        // try to merge dels[i] into dels[j-1] or set dels[j]=dels[i]\n        var i, j;\n        for(i = 1, j = 1; i < dels.length; i++){\n            var left = dels[j - 1];\n            var right = dels[i];\n            if (left.clock + left.len >= right.clock) left.len = _math.max(left.len, right.clock + right.len - left.clock);\n            else {\n                if (j < i) dels[j] = right;\n                j++;\n            }\n        }\n        dels.length = j;\n    });\n};\n/**\n * @param {Array<DeleteSet>} dss\n * @return {DeleteSet} A fresh DeleteSet\n */ var mergeDeleteSets = function(dss) {\n    var _loop = function(dssI) {\n        dss[dssI].clients.forEach(function(delsLeft, client) {\n            if (!merged.clients.has(client)) {\n                // Write all missing keys from current ds and all following.\n                // If merged already contains `client` current ds has already been added.\n                /**\n         * @type {Array<DeleteItem>}\n         */ var dels = delsLeft.slice();\n                for(var i = dssI + 1; i < dss.length; i++)_array.appendTo(dels, dss[i].clients.get(client) || []);\n                merged.clients.set(client, dels);\n            }\n        });\n    };\n    var merged = new DeleteSet();\n    for(var dssI = 0; dssI < dss.length; dssI++)_loop(dssI);\n    sortAndMergeDeleteSet(merged);\n    return merged;\n};\n/**\n * @param {DeleteSet} ds\n * @param {number} client\n * @param {number} clock\n * @param {number} length\n *\n * @private\n * @function\n */ var addToDeleteSet = function(ds, client, clock, length) {\n    _map.setIfUndefined(ds.clients, client, function() {\n        return /** @type {Array<DeleteItem>} */ [];\n    }).push(new DeleteItem(clock, length));\n};\nvar createDeleteSet = function() {\n    return new DeleteSet();\n};\n/**\n * @param {StructStore} ss\n * @return {DeleteSet} Merged and sorted DeleteSet\n *\n * @private\n * @function\n */ var createDeleteSetFromStructStore = function(ss) {\n    var ds = createDeleteSet();\n    ss.clients.forEach(function(structs, client) {\n        /**\n     * @type {Array<DeleteItem>}\n     */ var dsitems = [];\n        for(var i = 0; i < structs.length; i++){\n            var struct = structs[i];\n            if (struct.deleted) {\n                var clock = struct.id.clock;\n                var len = struct.length;\n                if (i + 1 < structs.length) for(var next = structs[i + 1]; i + 1 < structs.length && next.deleted; next = structs[++i + 1])len += next.length;\n                dsitems.push(new DeleteItem(clock, len));\n            }\n        }\n        if (dsitems.length > 0) ds.clients.set(client, dsitems);\n    });\n    return ds;\n};\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */ var writeDeleteSet = function(encoder, ds) {\n    _encoding.writeVarUint(encoder.restEncoder, ds.clients.size);\n    // Ensure that the delete set is written in a deterministic order\n    _array.from(ds.clients.entries()).sort(function(a, b) {\n        return b[0] - a[0];\n    }).forEach(function(param) {\n        var _param = (0, _slicedToArray._)(param, 2), client = _param[0], dsitems = _param[1];\n        encoder.resetDsCurVal();\n        _encoding.writeVarUint(encoder.restEncoder, client);\n        var len = dsitems.length;\n        _encoding.writeVarUint(encoder.restEncoder, len);\n        for(var i = 0; i < len; i++){\n            var item = dsitems[i];\n            encoder.writeDsClock(item.clock);\n            encoder.writeDsLen(item.len);\n        }\n    });\n};\n/**\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @return {DeleteSet}\n *\n * @private\n * @function\n */ var readDeleteSet = function(decoder) {\n    var _loop = function(i) {\n        decoder.resetDsCurVal();\n        var client = _decoding.readVarUint(decoder.restDecoder);\n        var numberOfDeletes = _decoding.readVarUint(decoder.restDecoder);\n        if (numberOfDeletes > 0) {\n            var dsField = _map.setIfUndefined(ds.clients, client, function() {\n                return /** @type {Array<DeleteItem>} */ [];\n            });\n            for(var i1 = 0; i1 < numberOfDeletes; i1++)dsField.push(new DeleteItem(decoder.readDsClock(), decoder.readDsLen()));\n        }\n    };\n    var ds = new DeleteSet();\n    var numClients = _decoding.readVarUint(decoder.restDecoder);\n    for(var i = 0; i < numClients; i++)_loop(i);\n    return ds;\n};\n/**\n * @todo YDecoder also contains references to String and other Decoders. Would make sense to exchange YDecoder.toUint8Array for YDecoder.DsToUint8Array()..\n */ /**\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @return {Uint8Array|null} Returns a v2 update containing all deletes that couldn't be applied yet; or null if all deletes were applied successfully.\n *\n * @private\n * @function\n */ var readAndApplyDeleteSet = function(decoder, transaction, store) {\n    var unappliedDS = new DeleteSet();\n    var numClients = _decoding.readVarUint(decoder.restDecoder);\n    for(var i = 0; i < numClients; i++){\n        decoder.resetDsCurVal();\n        var client = _decoding.readVarUint(decoder.restDecoder);\n        var numberOfDeletes = _decoding.readVarUint(decoder.restDecoder);\n        var structs = store.clients.get(client) || [];\n        var state = getState(store, client);\n        for(var i1 = 0; i1 < numberOfDeletes; i1++){\n            var clock = decoder.readDsClock();\n            var clockEnd = clock + decoder.readDsLen();\n            if (clock < state) {\n                if (state < clockEnd) addToDeleteSet(unappliedDS, client, state, clockEnd - state);\n                var index = findIndexSS(structs, clock);\n                /**\n         * We can ignore the case of GC and Delete structs, because we are going to skip them\n         * @type {Item}\n         */ // @ts-ignore\n                var struct = structs[index];\n                // split the first item if necessary\n                if (!struct.deleted && struct.id.clock < clock) {\n                    structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));\n                    index++; // increase we now want to use the next struct\n                }\n                while(index < structs.length){\n                    // @ts-ignore\n                    struct = structs[index++];\n                    if (struct.id.clock < clockEnd) {\n                        if (!struct.deleted) {\n                            if (clockEnd < struct.id.clock + struct.length) structs.splice(index, 0, splitItem(transaction, struct, clockEnd - struct.id.clock));\n                            struct[\"delete\"](transaction);\n                        }\n                    } else break;\n                }\n            } else addToDeleteSet(unappliedDS, client, clock, clockEnd - clock);\n        }\n    }\n    if (unappliedDS.clients.size > 0) {\n        var ds = new UpdateEncoderV2();\n        _encoding.writeVarUint(ds.restEncoder, 0); // encode 0 structs\n        writeDeleteSet(ds, unappliedDS);\n        return ds.toUint8Array();\n    }\n    return null;\n};\n/**\n * @param {DeleteSet} ds1\n * @param {DeleteSet} ds2\n */ var equalDeleteSets = function(ds1, ds2) {\n    if (ds1.clients.size !== ds2.clients.size) return false;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = ds1.clients.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var _step_value = (0, _slicedToArray._)(_step.value, 2), client = _step_value[0], deleteItems1 = _step_value[1];\n            var deleteItems2 = /** @type {Array<import('../internals.js').DeleteItem>} */ ds2.clients.get(client);\n            if (deleteItems2 === undefined || deleteItems1.length !== deleteItems2.length) return false;\n            for(var i = 0; i < deleteItems1.length; i++){\n                var di1 = deleteItems1[i];\n                var di2 = deleteItems2[i];\n                if (di1.clock !== di2.clock || di1.len !== di2.len) return false;\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                _iterator[\"return\"]();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return true;\n};\n/**\n * @module Y\n */ var generateNewClientId = _random.uint32;\n/**\n * @typedef {Object} DocOpts\n * @property {boolean} [DocOpts.gc=true] Disable garbage collection (default: gc=true)\n * @property {function(Item):boolean} [DocOpts.gcFilter] Will be called before an Item is garbage collected. Return false to keep the Item.\n * @property {string} [DocOpts.guid] Define a globally unique identifier for this document\n * @property {string | null} [DocOpts.collectionid] Associate this document with a collection. This only plays a role if your provider has a concept of collection.\n * @property {any} [DocOpts.meta] Any kind of meta information you want to associate with this document. If this is a subdocument, remote peers will store the meta information as well.\n * @property {boolean} [DocOpts.autoLoad] If a subdocument, automatically load document. If this is a subdocument, remote peers will load the document as well automatically.\n * @property {boolean} [DocOpts.shouldLoad] Whether the document should be synced by the provider now. This is toggled to true when you call ydoc.load()\n */ /**\n * @typedef {Object} DocEvents\n * @property {function(Doc):void} DocEvents.destroy\n * @property {function(Doc):void} DocEvents.load\n * @property {function(boolean, Doc):void} DocEvents.sync\n * @property {function(Uint8Array, any, Doc, Transaction):void} DocEvents.update\n * @property {function(Uint8Array, any, Doc, Transaction):void} DocEvents.updateV2\n * @property {function(Doc):void} DocEvents.beforeAllTransactions\n * @property {function(Transaction, Doc):void} DocEvents.beforeTransaction\n * @property {function(Transaction, Doc):void} DocEvents.beforeObserverCalls\n * @property {function(Transaction, Doc):void} DocEvents.afterTransaction\n * @property {function(Transaction, Doc):void} DocEvents.afterTransactionCleanup\n * @property {function(Doc, Array<Transaction>):void} DocEvents.afterAllTransactions\n * @property {function({ loaded: Set<Doc>, added: Set<Doc>, removed: Set<Doc> }, Doc, Transaction):void} DocEvents.subdocs\n */ /**\n * A Yjs instance handles the state of shared data.\n * @extends ObservableV2<DocEvents>\n */ var Doc = /*#__PURE__*/ function(ObservableV2) {\n    \"use strict\";\n    (0, _inherits._)(Doc, ObservableV2);\n    var _super = (0, _createSuper._)(Doc);\n    function Doc() {\n        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref_guid = _ref.guid, guid = _ref_guid === void 0 ? _random.uuidv4() : _ref_guid, _ref_collectionid = _ref.collectionid, collectionid = _ref_collectionid === void 0 ? null : _ref_collectionid, _ref_gc = _ref.gc, gc = _ref_gc === void 0 ? true : _ref_gc, _ref_gcFilter = _ref.gcFilter, gcFilter = _ref_gcFilter === void 0 ? function() {\n            return true;\n        } : _ref_gcFilter, _ref_meta = _ref.meta, meta = _ref_meta === void 0 ? null : _ref_meta, _ref_autoLoad = _ref.autoLoad, autoLoad = _ref_autoLoad === void 0 ? false : _ref_autoLoad, _ref_shouldLoad = _ref.shouldLoad, shouldLoad = _ref_shouldLoad === void 0 ? true : _ref_shouldLoad;\n        (0, _classCallCheck._)(this, Doc);\n        var _this;\n        _this = _super.call(this);\n        _this.gc = gc;\n        _this.gcFilter = gcFilter;\n        _this.clientID = generateNewClientId();\n        _this.guid = guid;\n        _this.collectionid = collectionid;\n        /**\n     * @type {Map<string, AbstractType<YEvent<any>>>}\n     */ _this.share = new Map();\n        _this.store = new StructStore();\n        /**\n     * @type {Transaction | null}\n     */ _this._transaction = null;\n        /**\n     * @type {Array<Transaction>}\n     */ _this._transactionCleanups = [];\n        /**\n     * @type {Set<Doc>}\n     */ _this.subdocs = new Set();\n        /**\n     * If this document is a subdocument - a document integrated into another document - then _item is defined.\n     * @type {Item?}\n     */ _this._item = null;\n        _this.shouldLoad = shouldLoad;\n        _this.autoLoad = autoLoad;\n        _this.meta = meta;\n        /**\n     * This is set to true when the persistence provider loaded the document from the database or when the `sync` event fires.\n     * Note that not all providers implement this feature. Provider authors are encouraged to fire the `load` event when the doc content is loaded from the database.\n     *\n     * @type {boolean}\n     */ _this.isLoaded = false;\n        /**\n     * This is set to true when the connection provider has successfully synced with a backend.\n     * Note that when using peer-to-peer providers this event may not provide very useful.\n     * Also note that not all providers implement this feature. Provider authors are encouraged to fire\n     * the `sync` event when the doc has been synced (with `true` as a parameter) or if connection is\n     * lost (with false as a parameter).\n     */ _this.isSynced = false;\n        _this.isDestroyed = false;\n        /**\n     * Promise that resolves once the document has been loaded from a presistence provider.\n     */ _this.whenLoaded = _promise.create(function(resolve) {\n            _this.on(\"load\", function() {\n                _this.isLoaded = true;\n                resolve((0, _assertThisInitialized._)(_this));\n            });\n        });\n        var provideSyncedPromise = function() {\n            return _promise.create(function(resolve) {\n                /**\n       * @param {boolean} isSynced\n       */ var eventHandler = function(isSynced) {\n                    if (isSynced === undefined || isSynced === true) {\n                        _this.off(\"sync\", eventHandler);\n                        resolve();\n                    }\n                };\n                _this.on(\"sync\", eventHandler);\n            });\n        };\n        _this.on(\"sync\", function(isSynced) {\n            if (isSynced === false && _this.isSynced) _this.whenSynced = provideSyncedPromise();\n            _this.isSynced = isSynced === undefined || isSynced === true;\n            if (_this.isSynced && !_this.isLoaded) _this.emit(\"load\", [\n                (0, _assertThisInitialized._)(_this)\n            ]);\n        });\n        /**\n     * Promise that resolves once the document has been synced with a backend.\n     * This promise is recreated when the connection is lost.\n     * Note the documentation about the `isSynced` property.\n     */ _this.whenSynced = provideSyncedPromise();\n        return _this;\n    }\n    (0, _createClass._)(Doc, [\n        {\n            /**\n   * Notify the parent document that you request to load data into this subdocument (if it is a subdocument).\n   *\n   * `load()` might be used in the future to request any provider to load the most current data.\n   *\n   * It is safe to call `load()` multiple times.\n   */ key: \"load\",\n            value: function load() {\n                var _this = this;\n                var item = this._item;\n                if (item !== null && !this.shouldLoad) transact(/** @type {any} */ item.parent.doc, function(transaction) {\n                    transaction.subdocsLoaded.add(_this);\n                }, null, true);\n                this.shouldLoad = true;\n            }\n        },\n        {\n            key: \"getSubdocs\",\n            value: function getSubdocs() {\n                return this.subdocs;\n            }\n        },\n        {\n            key: \"getSubdocGuids\",\n            value: function getSubdocGuids() {\n                return new Set(_array.from(this.subdocs).map(function(doc) {\n                    return doc.guid;\n                }));\n            }\n        },\n        {\n            /**\n   * Changes that happen inside of a transaction are bundled. This means that\n   * the observer fires _after_ the transaction is finished and that all changes\n   * that happened inside of the transaction are sent as one message to the\n   * other peers.\n   *\n   * @template T\n   * @param {function(Transaction):T} f The function that should be executed as a transaction\n   * @param {any} [origin] Origin of who started the transaction. Will be stored on transaction.origin\n   * @return T\n   *\n   * @public\n   */ key: \"transact\",\n            value: function transact1(f) {\n                var origin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n                return transact(this, f, origin);\n            }\n        },\n        {\n            /**\n   * Define a shared data type.\n   *\n   * Multiple calls of `ydoc.get(name, TypeConstructor)` yield the same result\n   * and do not overwrite each other. I.e.\n   * `ydoc.get(name, Y.Array) === ydoc.get(name, Y.Array)`\n   *\n   * After this method is called, the type is also available on `ydoc.share.get(name)`.\n   *\n   * *Best Practices:*\n   * Define all types right after the Y.Doc instance is created and store them in a separate object.\n   * Also use the typed methods `getText(name)`, `getArray(name)`, ..\n   *\n   * @template {typeof AbstractType<any>} Type\n   * @example\n   *   const ydoc = new Y.Doc(..)\n   *   const appState = {\n   *     document: ydoc.getText('document')\n   *     comments: ydoc.getArray('comments')\n   *   }\n   *\n   * @param {string} name\n   * @param {Type} TypeConstructor The constructor of the type definition. E.g. Y.Text, Y.Array, Y.Map, ...\n   * @return {InstanceType<Type>} The created type. Constructed with TypeConstructor\n   *\n   * @public\n   */ key: \"get\",\n            value: function get(name) {\n                var _this = this;\n                var TypeConstructor = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : /** @type {any} */ AbstractType;\n                var type = _map.setIfUndefined(this.share, name, function() {\n                    // @ts-ignore\n                    var t = new TypeConstructor();\n                    t._integrate(_this, null);\n                    return t;\n                });\n                var Constr = type.constructor;\n                if (TypeConstructor !== AbstractType && Constr !== TypeConstructor) {\n                    if (Constr === AbstractType) {\n                        // @ts-ignore\n                        var t = new TypeConstructor();\n                        t._map = type._map;\n                        type._map.forEach(/** @param {Item?} n */ function(n) {\n                            for(; n !== null; n = n.left)// @ts-ignore\n                            n.parent = t;\n                        });\n                        t._start = type._start;\n                        for(var n = t._start; n !== null; n = n.right)n.parent = t;\n                        t._length = type._length;\n                        this.share.set(name, t);\n                        t._integrate(this, null);\n                        return /** @type {InstanceType<Type>} */ t;\n                    } else throw new Error(\"Type with the name \".concat(name, \" has already been defined with a different constructor\"));\n                }\n                return /** @type {InstanceType<Type>} */ type;\n            }\n        },\n        {\n            /**\n   * @template T\n   * @param {string} [name]\n   * @return {YArray<T>}\n   *\n   * @public\n   */ key: \"getArray\",\n            value: function getArray() {\n                var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n                return /** @type {YArray<T>} */ this.get(name, YArray);\n            }\n        },\n        {\n            /**\n   * @param {string} [name]\n   * @return {YText}\n   *\n   * @public\n   */ key: \"getText\",\n            value: function getText() {\n                var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n                return this.get(name, YText);\n            }\n        },\n        {\n            /**\n   * @template T\n   * @param {string} [name]\n   * @return {YMap<T>}\n   *\n   * @public\n   */ key: \"getMap\",\n            value: function getMap() {\n                var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n                return /** @type {YMap<T>} */ this.get(name, YMap);\n            }\n        },\n        {\n            /**\n   * @param {string} [name]\n   * @return {YXmlElement}\n   *\n   * @public\n   */ key: \"getXmlElement\",\n            value: function getXmlElement() {\n                var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n                return /** @type {YXmlElement<{[key:string]:string}>} */ this.get(name, YXmlElement);\n            }\n        },\n        {\n            /**\n   * @param {string} [name]\n   * @return {YXmlFragment}\n   *\n   * @public\n   */ key: \"getXmlFragment\",\n            value: function getXmlFragment() {\n                var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n                return this.get(name, YXmlFragment);\n            }\n        },\n        {\n            /**\n   * Converts the entire document into a js object, recursively traversing each yjs type\n   * Doesn't log types that have not been defined (using ydoc.getType(..)).\n   *\n   * @deprecated Do not use this method and rather call toJSON directly on the shared types.\n   *\n   * @return {Object<string, any>}\n   */ key: \"toJSON\",\n            value: function toJSON() {\n                /**\n     * @type {Object<string, any>}\n     */ var doc = {};\n                this.share.forEach(function(value, key) {\n                    doc[key] = value.toJSON();\n                });\n                return doc;\n            }\n        },\n        {\n            /**\n   * Emit `destroy` event and unregister all event handlers.\n   */ key: \"destroy\",\n            value: function destroy() {\n                var _this = this;\n                this.isDestroyed = true;\n                _array.from(this.subdocs).forEach(function(subdoc) {\n                    return subdoc.destroy();\n                });\n                var item = this._item;\n                if (item !== null) {\n                    this._item = null;\n                    var content = /** @type {ContentDoc} */ item.content;\n                    content.doc = new Doc((0, _objectSpreadProps._)((0, _objectSpread._)({\n                        guid: this.guid\n                    }, content.opts), {\n                        shouldLoad: false\n                    }));\n                    content.doc._item = item;\n                    transact(/** @type {any} */ item.parent.doc, function(transaction) {\n                        var doc = content.doc;\n                        if (!item.deleted) transaction.subdocsAdded.add(doc);\n                        transaction.subdocsRemoved.add(_this);\n                    }, null, true);\n                }\n                // @ts-ignore\n                this.emit(\"destroyed\", [\n                    true\n                ]); // DEPRECATED!\n                this.emit(\"destroy\", [\n                    this\n                ]);\n                (0, _get._)((0, _getPrototypeOf._)(Doc.prototype), \"destroy\", this).call(this);\n            }\n        }\n    ]);\n    return Doc;\n}((0, _observable.ObservableV2));\nvar DSDecoderV1 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function DSDecoderV1(decoder) {\n        (0, _classCallCheck._)(this, DSDecoderV1);\n        this.restDecoder = decoder;\n    }\n    (0, _createClass._)(DSDecoderV1, [\n        {\n            key: \"resetDsCurVal\",\n            value: function resetDsCurVal() {\n            // nop\n            }\n        },\n        {\n            /**\n   * @return {number}\n   */ key: \"readDsClock\",\n            value: function readDsClock() {\n                return _decoding.readVarUint(this.restDecoder);\n            }\n        },\n        {\n            /**\n   * @return {number}\n   */ key: \"readDsLen\",\n            value: function readDsLen() {\n                return _decoding.readVarUint(this.restDecoder);\n            }\n        }\n    ]);\n    return DSDecoderV1;\n}();\nvar UpdateDecoderV1 = /*#__PURE__*/ function(DSDecoderV1) {\n    \"use strict\";\n    (0, _inherits._)(UpdateDecoderV1, DSDecoderV1);\n    var _super = (0, _createSuper._)(UpdateDecoderV1);\n    function UpdateDecoderV1() {\n        (0, _classCallCheck._)(this, UpdateDecoderV1);\n        return _super.apply(this, arguments);\n    }\n    (0, _createClass._)(UpdateDecoderV1, [\n        {\n            /**\n   * @return {ID}\n   */ key: \"readLeftID\",\n            value: function readLeftID() {\n                return createID(_decoding.readVarUint(this.restDecoder), _decoding.readVarUint(this.restDecoder));\n            }\n        },\n        {\n            /**\n   * @return {ID}\n   */ key: \"readRightID\",\n            value: function readRightID() {\n                return createID(_decoding.readVarUint(this.restDecoder), _decoding.readVarUint(this.restDecoder));\n            }\n        },\n        {\n            /**\n   * Read the next client id.\n   * Use this in favor of readID whenever possible to reduce the number of objects created.\n   */ key: \"readClient\",\n            value: function readClient() {\n                return _decoding.readVarUint(this.restDecoder);\n            }\n        },\n        {\n            /**\n   * @return {number} info An unsigned 8-bit integer\n   */ key: \"readInfo\",\n            value: function readInfo() {\n                return _decoding.readUint8(this.restDecoder);\n            }\n        },\n        {\n            /**\n   * @return {string}\n   */ key: \"readString\",\n            value: function readString() {\n                return _decoding.readVarString(this.restDecoder);\n            }\n        },\n        {\n            /**\n   * @return {boolean} isKey\n   */ key: \"readParentInfo\",\n            value: function readParentInfo() {\n                return _decoding.readVarUint(this.restDecoder) === 1;\n            }\n        },\n        {\n            /**\n   * @return {number} info An unsigned 8-bit integer\n   */ key: \"readTypeRef\",\n            value: function readTypeRef() {\n                return _decoding.readVarUint(this.restDecoder);\n            }\n        },\n        {\n            /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @return {number} len\n   */ key: \"readLen\",\n            value: function readLen() {\n                return _decoding.readVarUint(this.restDecoder);\n            }\n        },\n        {\n            /**\n   * @return {any}\n   */ key: \"readAny\",\n            value: function readAny() {\n                return _decoding.readAny(this.restDecoder);\n            }\n        },\n        {\n            /**\n   * @return {Uint8Array}\n   */ key: \"readBuf\",\n            value: function readBuf() {\n                return _buffer.copyUint8Array(_decoding.readVarUint8Array(this.restDecoder));\n            }\n        },\n        {\n            /**\n   * Legacy implementation uses JSON parse. We use any-decoding in v2.\n   *\n   * @return {any}\n   */ key: \"readJSON\",\n            value: function readJSON() {\n                return JSON.parse(_decoding.readVarString(this.restDecoder));\n            }\n        },\n        {\n            /**\n   * @return {string}\n   */ key: \"readKey\",\n            value: function readKey() {\n                return _decoding.readVarString(this.restDecoder);\n            }\n        }\n    ]);\n    return UpdateDecoderV1;\n}(DSDecoderV1);\nvar DSDecoderV2 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function DSDecoderV2(decoder) {\n        (0, _classCallCheck._)(this, DSDecoderV2);\n        /**\n     * @private\n     */ this.dsCurrVal = 0;\n        this.restDecoder = decoder;\n    }\n    (0, _createClass._)(DSDecoderV2, [\n        {\n            key: \"resetDsCurVal\",\n            value: function resetDsCurVal() {\n                this.dsCurrVal = 0;\n            }\n        },\n        {\n            /**\n   * @return {number}\n   */ key: \"readDsClock\",\n            value: function readDsClock() {\n                this.dsCurrVal += _decoding.readVarUint(this.restDecoder);\n                return this.dsCurrVal;\n            }\n        },\n        {\n            /**\n   * @return {number}\n   */ key: \"readDsLen\",\n            value: function readDsLen() {\n                var diff = _decoding.readVarUint(this.restDecoder) + 1;\n                this.dsCurrVal += diff;\n                return diff;\n            }\n        }\n    ]);\n    return DSDecoderV2;\n}();\nvar UpdateDecoderV2 = /*#__PURE__*/ function(DSDecoderV2) {\n    \"use strict\";\n    (0, _inherits._)(UpdateDecoderV2, DSDecoderV2);\n    var _super = (0, _createSuper._)(UpdateDecoderV2);\n    function UpdateDecoderV2(decoder) {\n        (0, _classCallCheck._)(this, UpdateDecoderV2);\n        var _this;\n        _this = _super.call(this, decoder);\n        /**\n     * List of cached keys. If the keys[id] does not exist, we read a new key\n     * from stringEncoder and push it to keys.\n     *\n     * @type {Array<string>}\n     */ _this.keys = [];\n        _decoding.readVarUint(decoder); // read feature flag - currently unused\n        _this.keyClockDecoder = new _decoding.IntDiffOptRleDecoder(_decoding.readVarUint8Array(decoder));\n        _this.clientDecoder = new _decoding.UintOptRleDecoder(_decoding.readVarUint8Array(decoder));\n        _this.leftClockDecoder = new _decoding.IntDiffOptRleDecoder(_decoding.readVarUint8Array(decoder));\n        _this.rightClockDecoder = new _decoding.IntDiffOptRleDecoder(_decoding.readVarUint8Array(decoder));\n        _this.infoDecoder = new _decoding.RleDecoder(_decoding.readVarUint8Array(decoder), _decoding.readUint8);\n        _this.stringDecoder = new _decoding.StringDecoder(_decoding.readVarUint8Array(decoder));\n        _this.parentInfoDecoder = new _decoding.RleDecoder(_decoding.readVarUint8Array(decoder), _decoding.readUint8);\n        _this.typeRefDecoder = new _decoding.UintOptRleDecoder(_decoding.readVarUint8Array(decoder));\n        _this.lenDecoder = new _decoding.UintOptRleDecoder(_decoding.readVarUint8Array(decoder));\n        return _this;\n    }\n    (0, _createClass._)(UpdateDecoderV2, [\n        {\n            /**\n   * @return {ID}\n   */ key: \"readLeftID\",\n            value: function readLeftID() {\n                return new ID(this.clientDecoder.read(), this.leftClockDecoder.read());\n            }\n        },\n        {\n            /**\n   * @return {ID}\n   */ key: \"readRightID\",\n            value: function readRightID() {\n                return new ID(this.clientDecoder.read(), this.rightClockDecoder.read());\n            }\n        },\n        {\n            /**\n   * Read the next client id.\n   * Use this in favor of readID whenever possible to reduce the number of objects created.\n   */ key: \"readClient\",\n            value: function readClient() {\n                return this.clientDecoder.read();\n            }\n        },\n        {\n            /**\n   * @return {number} info An unsigned 8-bit integer\n   */ key: \"readInfo\",\n            value: function readInfo() {\n                return /** @type {number} */ this.infoDecoder.read();\n            }\n        },\n        {\n            /**\n   * @return {string}\n   */ key: \"readString\",\n            value: function readString() {\n                return this.stringDecoder.read();\n            }\n        },\n        {\n            /**\n   * @return {boolean}\n   */ key: \"readParentInfo\",\n            value: function readParentInfo() {\n                return this.parentInfoDecoder.read() === 1;\n            }\n        },\n        {\n            /**\n   * @return {number} An unsigned 8-bit integer\n   */ key: \"readTypeRef\",\n            value: function readTypeRef() {\n                return this.typeRefDecoder.read();\n            }\n        },\n        {\n            /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @return {number}\n   */ key: \"readLen\",\n            value: function readLen() {\n                return this.lenDecoder.read();\n            }\n        },\n        {\n            /**\n   * @return {any}\n   */ key: \"readAny\",\n            value: function readAny() {\n                return _decoding.readAny(this.restDecoder);\n            }\n        },\n        {\n            /**\n   * @return {Uint8Array}\n   */ key: \"readBuf\",\n            value: function readBuf() {\n                return _decoding.readVarUint8Array(this.restDecoder);\n            }\n        },\n        {\n            /**\n   * This is mainly here for legacy purposes.\n   *\n   * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n   *\n   * @return {any}\n   */ key: \"readJSON\",\n            value: function readJSON() {\n                return _decoding.readAny(this.restDecoder);\n            }\n        },\n        {\n            /**\n   * @return {string}\n   */ key: \"readKey\",\n            value: function readKey() {\n                var keyClock = this.keyClockDecoder.read();\n                if (keyClock < this.keys.length) return this.keys[keyClock];\n                else {\n                    var key = this.stringDecoder.read();\n                    this.keys.push(key);\n                    return key;\n                }\n            }\n        }\n    ]);\n    return UpdateDecoderV2;\n}(DSDecoderV2);\nvar DSEncoderV1 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function DSEncoderV1() {\n        (0, _classCallCheck._)(this, DSEncoderV1);\n        this.restEncoder = _encoding.createEncoder();\n    }\n    (0, _createClass._)(DSEncoderV1, [\n        {\n            key: \"toUint8Array\",\n            value: function toUint8Array() {\n                return _encoding.toUint8Array(this.restEncoder);\n            }\n        },\n        {\n            key: \"resetDsCurVal\",\n            value: function resetDsCurVal() {\n            // nop\n            }\n        },\n        {\n            /**\n   * @param {number} clock\n   */ key: \"writeDsClock\",\n            value: function writeDsClock(clock) {\n                _encoding.writeVarUint(this.restEncoder, clock);\n            }\n        },\n        {\n            /**\n   * @param {number} len\n   */ key: \"writeDsLen\",\n            value: function writeDsLen(len) {\n                _encoding.writeVarUint(this.restEncoder, len);\n            }\n        }\n    ]);\n    return DSEncoderV1;\n}();\nvar UpdateEncoderV1 = /*#__PURE__*/ function(DSEncoderV1) {\n    \"use strict\";\n    (0, _inherits._)(UpdateEncoderV1, DSEncoderV1);\n    var _super = (0, _createSuper._)(UpdateEncoderV1);\n    function UpdateEncoderV1() {\n        (0, _classCallCheck._)(this, UpdateEncoderV1);\n        return _super.apply(this, arguments);\n    }\n    (0, _createClass._)(UpdateEncoderV1, [\n        {\n            /**\n   * @param {ID} id\n   */ key: \"writeLeftID\",\n            value: function writeLeftID(id) {\n                _encoding.writeVarUint(this.restEncoder, id.client);\n                _encoding.writeVarUint(this.restEncoder, id.clock);\n            }\n        },\n        {\n            /**\n   * @param {ID} id\n   */ key: \"writeRightID\",\n            value: function writeRightID(id) {\n                _encoding.writeVarUint(this.restEncoder, id.client);\n                _encoding.writeVarUint(this.restEncoder, id.clock);\n            }\n        },\n        {\n            /**\n   * Use writeClient and writeClock instead of writeID if possible.\n   * @param {number} client\n   */ key: \"writeClient\",\n            value: function writeClient(client) {\n                _encoding.writeVarUint(this.restEncoder, client);\n            }\n        },\n        {\n            /**\n   * @param {number} info An unsigned 8-bit integer\n   */ key: \"writeInfo\",\n            value: function writeInfo(info) {\n                _encoding.writeUint8(this.restEncoder, info);\n            }\n        },\n        {\n            /**\n   * @param {string} s\n   */ key: \"writeString\",\n            value: function writeString(s) {\n                _encoding.writeVarString(this.restEncoder, s);\n            }\n        },\n        {\n            /**\n   * @param {boolean} isYKey\n   */ key: \"writeParentInfo\",\n            value: function writeParentInfo(isYKey) {\n                _encoding.writeVarUint(this.restEncoder, isYKey ? 1 : 0);\n            }\n        },\n        {\n            /**\n   * @param {number} info An unsigned 8-bit integer\n   */ key: \"writeTypeRef\",\n            value: function writeTypeRef(info) {\n                _encoding.writeVarUint(this.restEncoder, info);\n            }\n        },\n        {\n            /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @param {number} len\n   */ key: \"writeLen\",\n            value: function writeLen(len) {\n                _encoding.writeVarUint(this.restEncoder, len);\n            }\n        },\n        {\n            /**\n   * @param {any} any\n   */ key: \"writeAny\",\n            value: function writeAny(any) {\n                _encoding.writeAny(this.restEncoder, any);\n            }\n        },\n        {\n            /**\n   * @param {Uint8Array} buf\n   */ key: \"writeBuf\",\n            value: function writeBuf(buf) {\n                _encoding.writeVarUint8Array(this.restEncoder, buf);\n            }\n        },\n        {\n            /**\n   * @param {any} embed\n   */ key: \"writeJSON\",\n            value: function writeJSON(embed) {\n                _encoding.writeVarString(this.restEncoder, JSON.stringify(embed));\n            }\n        },\n        {\n            /**\n   * @param {string} key\n   */ key: \"writeKey\",\n            value: function writeKey(key) {\n                _encoding.writeVarString(this.restEncoder, key);\n            }\n        }\n    ]);\n    return UpdateEncoderV1;\n}(DSEncoderV1);\nvar DSEncoderV2 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function DSEncoderV2() {\n        (0, _classCallCheck._)(this, DSEncoderV2);\n        this.restEncoder = _encoding.createEncoder(); // encodes all the rest / non-optimized\n        this.dsCurrVal = 0;\n    }\n    (0, _createClass._)(DSEncoderV2, [\n        {\n            key: \"toUint8Array\",\n            value: function toUint8Array() {\n                return _encoding.toUint8Array(this.restEncoder);\n            }\n        },\n        {\n            key: \"resetDsCurVal\",\n            value: function resetDsCurVal() {\n                this.dsCurrVal = 0;\n            }\n        },\n        {\n            /**\n   * @param {number} clock\n   */ key: \"writeDsClock\",\n            value: function writeDsClock(clock) {\n                var diff = clock - this.dsCurrVal;\n                this.dsCurrVal = clock;\n                _encoding.writeVarUint(this.restEncoder, diff);\n            }\n        },\n        {\n            /**\n   * @param {number} len\n   */ key: \"writeDsLen\",\n            value: function writeDsLen(len) {\n                if (len === 0) _error.unexpectedCase();\n                _encoding.writeVarUint(this.restEncoder, len - 1);\n                this.dsCurrVal += len;\n            }\n        }\n    ]);\n    return DSEncoderV2;\n}();\nvar UpdateEncoderV2 = /*#__PURE__*/ function(DSEncoderV2) {\n    \"use strict\";\n    (0, _inherits._)(UpdateEncoderV2, DSEncoderV2);\n    var _super = (0, _createSuper._)(UpdateEncoderV2);\n    function UpdateEncoderV2() {\n        (0, _classCallCheck._)(this, UpdateEncoderV2);\n        var _this;\n        _this = _super.call(this);\n        /**\n     * @type {Map<string,number>}\n     */ _this.keyMap = new Map();\n        /**\n     * Refers to the next uniqe key-identifier to me used.\n     * See writeKey method for more information.\n     *\n     * @type {number}\n     */ _this.keyClock = 0;\n        _this.keyClockEncoder = new _encoding.IntDiffOptRleEncoder();\n        _this.clientEncoder = new _encoding.UintOptRleEncoder();\n        _this.leftClockEncoder = new _encoding.IntDiffOptRleEncoder();\n        _this.rightClockEncoder = new _encoding.IntDiffOptRleEncoder();\n        _this.infoEncoder = new _encoding.RleEncoder(_encoding.writeUint8);\n        _this.stringEncoder = new _encoding.StringEncoder();\n        _this.parentInfoEncoder = new _encoding.RleEncoder(_encoding.writeUint8);\n        _this.typeRefEncoder = new _encoding.UintOptRleEncoder();\n        _this.lenEncoder = new _encoding.UintOptRleEncoder();\n        return _this;\n    }\n    (0, _createClass._)(UpdateEncoderV2, [\n        {\n            key: \"toUint8Array\",\n            value: function toUint8Array() {\n                var encoder = _encoding.createEncoder();\n                _encoding.writeVarUint(encoder, 0); // this is a feature flag that we might use in the future\n                _encoding.writeVarUint8Array(encoder, this.keyClockEncoder.toUint8Array());\n                _encoding.writeVarUint8Array(encoder, this.clientEncoder.toUint8Array());\n                _encoding.writeVarUint8Array(encoder, this.leftClockEncoder.toUint8Array());\n                _encoding.writeVarUint8Array(encoder, this.rightClockEncoder.toUint8Array());\n                _encoding.writeVarUint8Array(encoder, _encoding.toUint8Array(this.infoEncoder));\n                _encoding.writeVarUint8Array(encoder, this.stringEncoder.toUint8Array());\n                _encoding.writeVarUint8Array(encoder, _encoding.toUint8Array(this.parentInfoEncoder));\n                _encoding.writeVarUint8Array(encoder, this.typeRefEncoder.toUint8Array());\n                _encoding.writeVarUint8Array(encoder, this.lenEncoder.toUint8Array());\n                // @note The rest encoder is appended! (note the missing var)\n                _encoding.writeUint8Array(encoder, _encoding.toUint8Array(this.restEncoder));\n                return _encoding.toUint8Array(encoder);\n            }\n        },\n        {\n            /**\n   * @param {ID} id\n   */ key: \"writeLeftID\",\n            value: function writeLeftID(id) {\n                this.clientEncoder.write(id.client);\n                this.leftClockEncoder.write(id.clock);\n            }\n        },\n        {\n            /**\n   * @param {ID} id\n   */ key: \"writeRightID\",\n            value: function writeRightID(id) {\n                this.clientEncoder.write(id.client);\n                this.rightClockEncoder.write(id.clock);\n            }\n        },\n        {\n            /**\n   * @param {number} client\n   */ key: \"writeClient\",\n            value: function writeClient(client) {\n                this.clientEncoder.write(client);\n            }\n        },\n        {\n            /**\n   * @param {number} info An unsigned 8-bit integer\n   */ key: \"writeInfo\",\n            value: function writeInfo(info) {\n                this.infoEncoder.write(info);\n            }\n        },\n        {\n            /**\n   * @param {string} s\n   */ key: \"writeString\",\n            value: function writeString(s) {\n                this.stringEncoder.write(s);\n            }\n        },\n        {\n            /**\n   * @param {boolean} isYKey\n   */ key: \"writeParentInfo\",\n            value: function writeParentInfo(isYKey) {\n                this.parentInfoEncoder.write(isYKey ? 1 : 0);\n            }\n        },\n        {\n            /**\n   * @param {number} info An unsigned 8-bit integer\n   */ key: \"writeTypeRef\",\n            value: function writeTypeRef(info) {\n                this.typeRefEncoder.write(info);\n            }\n        },\n        {\n            /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @param {number} len\n   */ key: \"writeLen\",\n            value: function writeLen(len) {\n                this.lenEncoder.write(len);\n            }\n        },\n        {\n            /**\n   * @param {any} any\n   */ key: \"writeAny\",\n            value: function writeAny(any) {\n                _encoding.writeAny(this.restEncoder, any);\n            }\n        },\n        {\n            /**\n   * @param {Uint8Array} buf\n   */ key: \"writeBuf\",\n            value: function writeBuf(buf) {\n                _encoding.writeVarUint8Array(this.restEncoder, buf);\n            }\n        },\n        {\n            /**\n   * This is mainly here for legacy purposes.\n   *\n   * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n   *\n   * @param {any} embed\n   */ key: \"writeJSON\",\n            value: function writeJSON(embed) {\n                _encoding.writeAny(this.restEncoder, embed);\n            }\n        },\n        {\n            /**\n   * Property keys are often reused. For example, in y-prosemirror the key `bold` might\n   * occur very often. For a 3d application, the key `position` might occur very often.\n   *\n   * We cache these keys in a Map and refer to them via a unique number.\n   *\n   * @param {string} key\n   */ key: \"writeKey\",\n            value: function writeKey(key) {\n                var clock = this.keyMap.get(key);\n                if (clock === undefined) {\n                    /**\n       * @todo uncomment to introduce this feature finally\n       *\n       * Background. The ContentFormat object was always encoded using writeKey, but the decoder used to use readString.\n       * Furthermore, I forgot to set the keyclock. So everything was working fine.\n       *\n       * However, this feature here is basically useless as it is not being used (it actually only consumes extra memory).\n       *\n       * I don't know yet how to reintroduce this feature..\n       *\n       * Older clients won't be able to read updates when we reintroduce this feature. So this should probably be done using a flag.\n       *\n       */ // this.keyMap.set(key, this.keyClock)\n                    this.keyClockEncoder.write(this.keyClock++);\n                    this.stringEncoder.write(key);\n                } else this.keyClockEncoder.write(clock);\n            }\n        }\n    ]);\n    return UpdateEncoderV2;\n}(DSEncoderV2);\n/**\n * @module encoding\n */ /*\n * We use the first five bits in the info flag for determining the type of the struct.\n *\n * 0: GC\n * 1: Item with Deleted content\n * 2: Item with JSON content\n * 3: Item with Binary content\n * 4: Item with String content\n * 5: Item with Embed content (for richtext content)\n * 6: Item with Format content (a formatting marker for richtext content)\n * 7: Item with Type\n */ /**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Array<GC|Item>} structs All structs by `client`\n * @param {number} client\n * @param {number} clock write structs starting with `ID(client,clock)`\n *\n * @function\n */ var writeStructs = function(encoder, structs, client, clock) {\n    // write first id\n    clock = _math.max(clock, structs[0].id.clock); // make sure the first id exists\n    var startNewStructs = findIndexSS(structs, clock);\n    // write # encoded structs\n    _encoding.writeVarUint(encoder.restEncoder, structs.length - startNewStructs);\n    encoder.writeClient(client);\n    _encoding.writeVarUint(encoder.restEncoder, clock);\n    var firstStruct = structs[startNewStructs];\n    // write first struct with an offset\n    firstStruct.write(encoder, clock - firstStruct.id.clock);\n    for(var i = startNewStructs + 1; i < structs.length; i++)structs[i].write(encoder, 0);\n};\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {StructStore} store\n * @param {Map<number,number>} _sm\n *\n * @private\n * @function\n */ var writeClientsStructs = function(encoder, store, _sm) {\n    // we filter all valid _sm entries into sm\n    var sm = new Map();\n    _sm.forEach(function(clock, client) {\n        // only write if new structs are available\n        if (getState(store, client) > clock) sm.set(client, clock);\n    });\n    getStateVector(store).forEach(function(_clock, client) {\n        if (!_sm.has(client)) sm.set(client, 0);\n    });\n    // write # states that were updated\n    _encoding.writeVarUint(encoder.restEncoder, sm.size);\n    // Write items with higher client ids first\n    // This heavily improves the conflict algorithm.\n    _array.from(sm.entries()).sort(function(a, b) {\n        return b[0] - a[0];\n    }).forEach(function(param) {\n        var _param = (0, _slicedToArray._)(param, 2), client = _param[0], clock = _param[1];\n        writeStructs(encoder, /** @type {Array<GC|Item>} */ store.clients.get(client), client, clock);\n    });\n};\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder The decoder object to read data from.\n * @param {Doc} doc\n * @return {Map<number, { i: number, refs: Array<Item | GC> }>}\n *\n * @private\n * @function\n */ var readClientsStructRefs = function(decoder, doc) {\n    /**\n   * @type {Map<number, { i: number, refs: Array<Item | GC> }>}\n   */ var clientRefs = _map.create();\n    var numOfStateUpdates = _decoding.readVarUint(decoder.restDecoder);\n    for(var i = 0; i < numOfStateUpdates; i++){\n        var numberOfStructs = _decoding.readVarUint(decoder.restDecoder);\n        /**\n     * @type {Array<GC|Item>}\n     */ var refs = new Array(numberOfStructs);\n        var client = decoder.readClient();\n        var clock = _decoding.readVarUint(decoder.restDecoder);\n        // const start = performance.now()\n        clientRefs.set(client, {\n            i: 0,\n            refs: refs\n        });\n        for(var i1 = 0; i1 < numberOfStructs; i1++){\n            var info = decoder.readInfo();\n            switch(_binary.BITS5 & info){\n                case 0:\n                    {\n                        var len = decoder.readLen();\n                        refs[i1] = new GC(createID(client, clock), len);\n                        clock += len;\n                        break;\n                    }\n                case 10:\n                    {\n                        // @todo we could reduce the amount of checks by adding Skip struct to clientRefs so we know that something is missing.\n                        var len1 = _decoding.readVarUint(decoder.restDecoder);\n                        refs[i1] = new Skip(createID(client, clock), len1);\n                        clock += len1;\n                        break;\n                    }\n                default:\n                    {\n                        /**\n           * The optimized implementation doesn't use any variables because inlining variables is faster.\n           * Below a non-optimized version is shown that implements the basic algorithm with\n           * a few comments\n           */ var cantCopyParentInfo = (info & (_binary.BIT7 | _binary.BIT8)) === 0;\n                        // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n                        // and we read the next string as parentYKey.\n                        // It indicates how we store/retrieve parent from `y.share`\n                        // @type {string|null}\n                        var struct = new Item(createID(client, clock), null, (info & _binary.BIT8) === _binary.BIT8 ? decoder.readLeftID() : null, null, (info & _binary.BIT7) === _binary.BIT7 ? decoder.readRightID() : null, cantCopyParentInfo ? decoder.readParentInfo() ? doc.get(decoder.readString()) : decoder.readLeftID() : null, cantCopyParentInfo && (info & _binary.BIT6) === _binary.BIT6 ? decoder.readString() : null, readItemContent(decoder, info) // item content\n                        );\n                        /* A non-optimized implementation of the above algorithm:\n\n          // The item that was originally to the left of this item.\n          const origin = (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null\n          // The item that was originally to the right of this item.\n          const rightOrigin = (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null\n          const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0\n          const hasParentYKey = cantCopyParentInfo ? decoder.readParentInfo() : false\n          // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n          // and we read the next string as parentYKey.\n          // It indicates how we store/retrieve parent from `y.share`\n          // @type {string|null}\n          const parentYKey = cantCopyParentInfo && hasParentYKey ? decoder.readString() : null\n\n          const struct = new Item(\n            createID(client, clock),\n            null, // left\n            origin, // origin\n            null, // right\n            rightOrigin, // right origin\n            cantCopyParentInfo && !hasParentYKey ? decoder.readLeftID() : (parentYKey !== null ? doc.get(parentYKey) : null), // parent\n            cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n            readItemContent(decoder, info) // item content\n          )\n          */ refs[i1] = struct;\n                        clock += struct.length;\n                    }\n            }\n        }\n    // console.log('time to read: ', performance.now() - start) // @todo remove\n    }\n    return clientRefs;\n};\n/**\n * Resume computing structs generated by struct readers.\n *\n * While there is something to do, we integrate structs in this order\n * 1. top element on stack, if stack is not empty\n * 2. next element from current struct reader (if empty, use next struct reader)\n *\n * If struct causally depends on another struct (ref.missing), we put next reader of\n * `ref.id.client` on top of stack.\n *\n * At some point we find a struct that has no causal dependencies,\n * then we start emptying the stack.\n *\n * It is not possible to have circles: i.e. struct1 (from client1) depends on struct2 (from client2)\n * depends on struct3 (from client1). Therefore the max stack size is eqaul to `structReaders.length`.\n *\n * This method is implemented in a way so that we can resume computation if this update\n * causally depends on another update.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {Map<number, { i: number, refs: (GC | Item)[] }>} clientsStructRefs\n * @return { null | { update: Uint8Array, missing: Map<number,number> } }\n *\n * @private\n * @function\n */ var integrateStructs = function(transaction, store, clientsStructRefs) {\n    /**\n   * @type {Array<Item | GC>}\n   */ var stack = [];\n    // sort them so that we take the higher id first, in case of conflicts the lower id will probably not conflict with the id from the higher user.\n    var clientsStructRefsIds = _array.from(clientsStructRefs.keys()).sort(function(a, b) {\n        return a - b;\n    });\n    if (clientsStructRefsIds.length === 0) return null;\n    var getNextStructTarget = function() {\n        if (clientsStructRefsIds.length === 0) return null;\n        var nextStructsTarget = /** @type {{i:number,refs:Array<GC|Item>}} */ clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]);\n        while(nextStructsTarget.refs.length === nextStructsTarget.i){\n            clientsStructRefsIds.pop();\n            if (clientsStructRefsIds.length > 0) nextStructsTarget = /** @type {{i:number,refs:Array<GC|Item>}} */ clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]);\n            else return null;\n        }\n        return nextStructsTarget;\n    };\n    var curStructsTarget = getNextStructTarget();\n    if (curStructsTarget === null) return null;\n    /**\n   * @type {StructStore}\n   */ var restStructs = new StructStore();\n    var missingSV = new Map();\n    /**\n   * @param {number} client\n   * @param {number} clock\n   */ var updateMissingSv = function(client, clock) {\n        var mclock = missingSV.get(client);\n        if (mclock == null || mclock > clock) missingSV.set(client, clock);\n    };\n    /**\n   * @type {GC|Item}\n   */ var stackHead = /** @type {any} */ curStructsTarget.refs[/** @type {any} */ curStructsTarget.i++];\n    // caching the state because it is used very often\n    var state = new Map();\n    var addStackToRestSS = function() {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            var _loop = function() {\n                var item = _step.value;\n                var client = item.id.client;\n                var unapplicableItems = clientsStructRefs.get(client);\n                if (unapplicableItems) {\n                    // decrement because we weren't able to apply previous operation\n                    unapplicableItems.i--;\n                    restStructs.clients.set(client, unapplicableItems.refs.slice(unapplicableItems.i));\n                    clientsStructRefs[\"delete\"](client);\n                    unapplicableItems.i = 0;\n                    unapplicableItems.refs = [];\n                } else // item was the last item on clientsStructRefs and the field was already cleared. Add item to restStructs and continue\n                restStructs.clients.set(client, [\n                    item\n                ]);\n                // remove client from clientsStructRefsIds to prevent users from applying the same update again\n                clientsStructRefsIds = clientsStructRefsIds.filter(function(c) {\n                    return c !== client;\n                });\n            };\n            for(var _iterator = stack[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                    _iterator[\"return\"]();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        stack.length = 0;\n    };\n    // iterate over all struct readers until we are done\n    while(true){\n        if (stackHead.constructor !== Skip) {\n            var localClock = _map.setIfUndefined(state, stackHead.id.client, function() {\n                return getState(store, stackHead.id.client);\n            });\n            var offset = localClock - stackHead.id.clock;\n            if (offset < 0) {\n                // update from the same client is missing\n                stack.push(stackHead);\n                updateMissingSv(stackHead.id.client, stackHead.id.clock - 1);\n                // hid a dead wall, add all items from stack to restSS\n                addStackToRestSS();\n            } else {\n                var missing = stackHead.getMissing(transaction, store);\n                if (missing !== null) {\n                    stack.push(stackHead);\n                    // get the struct reader that has the missing struct\n                    /**\n           * @type {{ refs: Array<GC|Item>, i: number }}\n           */ var structRefs = clientsStructRefs.get(/** @type {number} */ missing) || {\n                        refs: [],\n                        i: 0\n                    };\n                    if (structRefs.refs.length === structRefs.i) {\n                        // This update message causally depends on another update message that doesn't exist yet\n                        updateMissingSv(/** @type {number} */ missing, getState(store, missing));\n                        addStackToRestSS();\n                    } else {\n                        stackHead = structRefs.refs[structRefs.i++];\n                        continue;\n                    }\n                } else if (offset === 0 || offset < stackHead.length) {\n                    // all fine, apply the stackhead\n                    stackHead.integrate(transaction, offset);\n                    state.set(stackHead.id.client, stackHead.id.clock + stackHead.length);\n                }\n            }\n        }\n        // iterate to next stackHead\n        if (stack.length > 0) stackHead = /** @type {GC|Item} */ stack.pop();\n        else if (curStructsTarget !== null && curStructsTarget.i < curStructsTarget.refs.length) stackHead = /** @type {GC|Item} */ curStructsTarget.refs[curStructsTarget.i++];\n        else {\n            curStructsTarget = getNextStructTarget();\n            if (curStructsTarget === null) break;\n            else stackHead = /** @type {GC|Item} */ curStructsTarget.refs[curStructsTarget.i++];\n        }\n    }\n    if (restStructs.clients.size > 0) {\n        var encoder = new UpdateEncoderV2();\n        writeClientsStructs(encoder, restStructs, new Map());\n        // write empty deleteset\n        // writeDeleteSet(encoder, new DeleteSet())\n        _encoding.writeVarUint(encoder.restEncoder, 0); // => no need for an extra function call, just write 0 deletes\n        return {\n            missing: missingSV,\n            update: encoder.toUint8Array()\n        };\n    }\n    return null;\n};\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n *\n * @private\n * @function\n */ var writeStructsFromTransaction = function(encoder, transaction) {\n    return writeClientsStructs(encoder, transaction.doc.store, transaction.beforeState);\n};\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts a decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n * @param {UpdateDecoderV1 | UpdateDecoderV2} [structDecoder]\n *\n * @function\n */ var readUpdateV2 = function(decoder, ydoc, transactionOrigin) {\n    var structDecoder = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : new UpdateDecoderV2(decoder);\n    return transact(ydoc, function(transaction) {\n        // force that transaction.local is set to non-local\n        transaction.local = false;\n        var retry = false;\n        var doc = transaction.doc;\n        var store = doc.store;\n        // let start = performance.now()\n        var ss = readClientsStructRefs(structDecoder, doc);\n        // console.log('time to read structs: ', performance.now() - start) // @todo remove\n        // start = performance.now()\n        // console.log('time to merge: ', performance.now() - start) // @todo remove\n        // start = performance.now()\n        var restStructs = integrateStructs(transaction, store, ss);\n        var pending = store.pendingStructs;\n        if (pending) {\n            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n            try {\n                // check if we can apply something\n                for(var _iterator = pending.missing[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                    var _step_value = (0, _slicedToArray._)(_step.value, 2), client = _step_value[0], clock = _step_value[1];\n                    if (clock < getState(store, client)) {\n                        retry = true;\n                        break;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                        _iterator[\"return\"]();\n                    }\n                } finally{\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n            if (restStructs) {\n                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                try {\n                    // merge restStructs into store.pending\n                    for(var _iterator1 = restStructs.missing[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                        var _step_value1 = (0, _slicedToArray._)(_step1.value, 2), client1 = _step_value1[0], clock1 = _step_value1[1];\n                        var mclock = pending.missing.get(client1);\n                        if (mclock == null || mclock > clock1) pending.missing.set(client1, clock1);\n                    }\n                } catch (err) {\n                    _didIteratorError1 = true;\n                    _iteratorError1 = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion1 && _iterator1[\"return\"] != null) {\n                            _iterator1[\"return\"]();\n                        }\n                    } finally{\n                        if (_didIteratorError1) {\n                            throw _iteratorError1;\n                        }\n                    }\n                }\n                pending.update = mergeUpdatesV2([\n                    pending.update,\n                    restStructs.update\n                ]);\n            }\n        } else store.pendingStructs = restStructs;\n        // console.log('time to integrate: ', performance.now() - start) // @todo remove\n        // start = performance.now()\n        var dsRest = readAndApplyDeleteSet(structDecoder, transaction, store);\n        if (store.pendingDs) {\n            // @todo we could make a lower-bound state-vector check as we do above\n            var pendingDSUpdate = new UpdateDecoderV2(_decoding.createDecoder(store.pendingDs));\n            _decoding.readVarUint(pendingDSUpdate.restDecoder); // read 0 structs, because we only encode deletes in pendingdsupdate\n            var dsRest2 = readAndApplyDeleteSet(pendingDSUpdate, transaction, store);\n            if (dsRest && dsRest2) // case 1: ds1 != null && ds2 != null\n            store.pendingDs = mergeUpdatesV2([\n                dsRest,\n                dsRest2\n            ]);\n            else // case 2: ds1 != null\n            // case 3: ds2 != null\n            // case 4: ds1 == null && ds2 == null\n            store.pendingDs = dsRest || dsRest2;\n        } else // Either dsRest == null && pendingDs == null OR dsRest != null\n        store.pendingDs = dsRest;\n        // console.log('time to cleanup: ', performance.now() - start) // @todo remove\n        // start = performance.now()\n        // console.log('time to resume delete readers: ', performance.now() - start) // @todo remove\n        // start = performance.now()\n        if (retry) {\n            var update = /** @type {{update: Uint8Array}} */ store.pendingStructs.update;\n            store.pendingStructs = null;\n            applyUpdateV2(transaction.doc, update);\n        }\n    }, transactionOrigin, false);\n};\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts a decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */ var readUpdate = function(decoder, ydoc, transactionOrigin) {\n    return readUpdateV2(decoder, ydoc, transactionOrigin, new UpdateDecoderV1(decoder));\n};\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n *\n * @function\n */ var applyUpdateV2 = function(ydoc, update, transactionOrigin) {\n    var YDecoder = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : UpdateDecoderV2;\n    var decoder = _decoding.createDecoder(update);\n    readUpdateV2(decoder, ydoc, transactionOrigin, new YDecoder(decoder));\n};\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */ var applyUpdate = function(ydoc, update, transactionOrigin) {\n    return applyUpdateV2(ydoc, update, transactionOrigin, UpdateDecoderV1);\n};\n/**\n * Write all the document as a single update message. If you specify the state of the remote client (`targetStateVector`) it will\n * only write the operations that are missing.\n *\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Doc} doc\n * @param {Map<number,number>} [targetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n *\n * @function\n */ var writeStateAsUpdate = function(encoder, doc) {\n    var targetStateVector = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new Map();\n    writeClientsStructs(encoder, doc.store, targetStateVector);\n    writeDeleteSet(encoder, createDeleteSetFromStructStore(doc.store));\n};\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @param {UpdateEncoderV1 | UpdateEncoderV2} [encoder]\n * @return {Uint8Array}\n *\n * @function\n */ var encodeStateAsUpdateV2 = function(doc) {\n    var encodedTargetStateVector = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new Uint8Array([\n        0\n    ]), encoder = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new UpdateEncoderV2();\n    var targetStateVector = decodeStateVector(encodedTargetStateVector);\n    writeStateAsUpdate(encoder, doc, targetStateVector);\n    var updates = [\n        encoder.toUint8Array()\n    ];\n    // also add the pending updates (if there are any)\n    if (doc.store.pendingDs) updates.push(doc.store.pendingDs);\n    if (doc.store.pendingStructs) updates.push(diffUpdateV2(doc.store.pendingStructs.update, encodedTargetStateVector));\n    if (updates.length > 1) {\n        if (encoder.constructor === UpdateEncoderV1) return mergeUpdates(updates.map(function(update, i) {\n            return i === 0 ? update : convertUpdateFormatV2ToV1(update);\n        }));\n        else if (encoder.constructor === UpdateEncoderV2) return mergeUpdatesV2(updates);\n    }\n    return updates[0];\n};\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @return {Uint8Array}\n *\n * @function\n */ var encodeStateAsUpdate = function(doc, encodedTargetStateVector) {\n    return encodeStateAsUpdateV2(doc, encodedTargetStateVector, new UpdateEncoderV1());\n};\n/**\n * Read state vector from Decoder and return as Map\n *\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */ var readStateVector = function(decoder) {\n    var ss = new Map();\n    var ssLength = _decoding.readVarUint(decoder.restDecoder);\n    for(var i = 0; i < ssLength; i++){\n        var client = _decoding.readVarUint(decoder.restDecoder);\n        var clock = _decoding.readVarUint(decoder.restDecoder);\n        ss.set(client, clock);\n    }\n    return ss;\n};\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */ // export const decodeStateVectorV2 = decodedState => readStateVector(new DSDecoderV2(decoding.createDecoder(decodedState)))\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */ var decodeStateVector = function(decodedState) {\n    return readStateVector(new DSDecoderV1(_decoding.createDecoder(decodedState)));\n};\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {Map<number,number>} sv\n * @function\n */ var writeStateVector = function(encoder, sv) {\n    _encoding.writeVarUint(encoder.restEncoder, sv.size);\n    _array.from(sv.entries()).sort(function(a, b) {\n        return b[0] - a[0];\n    }).forEach(function(param) {\n        var _param = (0, _slicedToArray._)(param, 2), client = _param[0], clock = _param[1];\n        _encoding.writeVarUint(encoder.restEncoder, client); // @todo use a special client decoder that is based on mapping\n        _encoding.writeVarUint(encoder.restEncoder, clock);\n    });\n    return encoder;\n};\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {Doc} doc\n *\n * @function\n */ var writeDocumentStateVector = function(encoder, doc) {\n    return writeStateVector(encoder, getStateVector(doc.store));\n};\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc|Map<number,number>} doc\n * @param {DSEncoderV1 | DSEncoderV2} [encoder]\n * @return {Uint8Array}\n *\n * @function\n */ var encodeStateVectorV2 = function(doc) {\n    var encoder = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new DSEncoderV2();\n    if (doc instanceof Map) writeStateVector(encoder, doc);\n    else writeDocumentStateVector(encoder, doc);\n    return encoder.toUint8Array();\n};\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc|Map<number,number>} doc\n * @return {Uint8Array}\n *\n * @function\n */ var encodeStateVector = function(doc) {\n    return encodeStateVectorV2(doc, new DSEncoderV1());\n};\n/**\n * General event handler implementation.\n *\n * @template ARG0, ARG1\n *\n * @private\n */ var EventHandler = function EventHandler() {\n    \"use strict\";\n    (0, _classCallCheck._)(this, EventHandler);\n    /**\n     * @type {Array<function(ARG0, ARG1):void>}\n     */ this.l = [];\n};\n/**\n * @template ARG0,ARG1\n * @returns {EventHandler<ARG0,ARG1>}\n *\n * @private\n * @function\n */ var createEventHandler = function() {\n    return new EventHandler();\n};\n/**\n * Adds an event listener that is called when\n * {@link EventHandler#callEventListeners} is called.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler.\n *\n * @private\n * @function\n */ var addEventHandlerListener = function(eventHandler, f) {\n    return eventHandler.l.push(f);\n};\n/**\n * Removes an event listener.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler that was added with\n *                     {@link EventHandler#addEventListener}\n *\n * @private\n * @function\n */ var removeEventHandlerListener = function(eventHandler, f) {\n    var l = eventHandler.l;\n    var len = l.length;\n    eventHandler.l = l.filter(function(g) {\n        return f !== g;\n    });\n    if (len === eventHandler.l.length) console.error(\"[yjs] Tried to remove event handler that doesn't exist.\");\n};\n/**\n * Call all event listeners that were added via\n * {@link EventHandler#addEventListener}.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {ARG0} arg0\n * @param {ARG1} arg1\n *\n * @private\n * @function\n */ var callEventHandlerListeners = function(eventHandler, arg0, arg1) {\n    return _function.callAll(eventHandler.l, [\n        arg0,\n        arg1\n    ]);\n};\nvar ID = function ID(client, clock) {\n    \"use strict\";\n    (0, _classCallCheck._)(this, ID);\n    /**\n     * Client id\n     * @type {number}\n     */ this.client = client;\n    /**\n     * unique per client id, continuous number\n     * @type {number}\n     */ this.clock = clock;\n};\n/**\n * @param {ID | null} a\n * @param {ID | null} b\n * @return {boolean}\n *\n * @function\n */ var compareIDs = function(a, b) {\n    return a === b || a !== null && b !== null && a.client === b.client && a.clock === b.clock;\n};\n/**\n * @param {number} client\n * @param {number} clock\n *\n * @private\n * @function\n */ var createID = function(client, clock) {\n    return new ID(client, clock);\n};\n/**\n * @param {encoding.Encoder} encoder\n * @param {ID} id\n *\n * @private\n * @function\n */ var writeID = function(encoder, id) {\n    _encoding.writeVarUint(encoder, id.client);\n    _encoding.writeVarUint(encoder, id.clock);\n};\n/**\n * Read ID.\n * * If first varUint read is 0xFFFFFF a RootID is returned.\n * * Otherwise an ID is returned\n *\n * @param {decoding.Decoder} decoder\n * @return {ID}\n *\n * @private\n * @function\n */ var readID = function(decoder) {\n    return createID(_decoding.readVarUint(decoder), _decoding.readVarUint(decoder));\n};\n/**\n * The top types are mapped from y.share.get(keyname) => type.\n * `type` does not store any information about the `keyname`.\n * This function finds the correct `keyname` for `type` and throws otherwise.\n *\n * @param {AbstractType<any>} type\n * @return {string}\n *\n * @private\n * @function\n */ var findRootTypeKey = function(type) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        // @ts-ignore _y must be defined, otherwise unexpected case\n        for(var _iterator = type.doc.share.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var _step_value = (0, _slicedToArray._)(_step.value, 2), key = _step_value[0], value = _step_value[1];\n            if (value === type) return key;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                _iterator[\"return\"]();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    throw _error.unexpectedCase();\n};\n/**\n * Check if `parent` is a parent of `child`.\n *\n * @param {AbstractType<any>} parent\n * @param {Item|null} child\n * @return {Boolean} Whether `parent` is a parent of `child`.\n *\n * @private\n * @function\n */ var isParentOf = function(parent, child) {\n    while(child !== null){\n        if (child.parent === parent) return true;\n        child = /** @type {AbstractType<any>} */ child.parent._item;\n    }\n    return false;\n};\n/**\n * Convenient helper to log type information.\n *\n * Do not use in productive systems as the output can be immense!\n *\n * @param {AbstractType<any>} type\n */ var logType = function(type) {\n    var res = [];\n    var n = type._start;\n    while(n){\n        res.push(n);\n        n = n.right;\n    }\n    console.log(\"Children: \", res);\n    console.log(\"Children content: \", res.filter(function(m) {\n        return !m.deleted;\n    }).map(function(m) {\n        return m.content;\n    }));\n};\nvar PermanentUserData = /*#__PURE__*/ function() {\n    \"use strict\";\n    function PermanentUserData(doc) {\n        var _this = this;\n        var storeType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : doc.getMap(\"users\");\n        (0, _classCallCheck._)(this, PermanentUserData);\n        /**\n     * @type {Map<string,DeleteSet>}\n     */ var dss = new Map();\n        this.yusers = storeType;\n        this.doc = doc;\n        /**\n     * Maps from clientid to userDescription\n     *\n     * @type {Map<number,string>}\n     */ this.clients = new Map();\n        this.dss = dss;\n        /**\n     * @param {YMap<any>} user\n     * @param {string} userDescription\n     */ var initUser = function(user, userDescription) {\n            /**\n       * @type {YArray<Uint8Array>}\n       */ var ds = user.get(\"ds\");\n            var ids = user.get(\"ids\");\n            var addClientId = /** @param {number} clientid */ function(clientid) {\n                return _this.clients.set(clientid, userDescription);\n            };\n            ds.observe(/** @param {YArrayEvent<any>} event */ function(event) {\n                event.changes.added.forEach(function(item) {\n                    item.content.getContent().forEach(function(encodedDs) {\n                        if (encodedDs instanceof Uint8Array) _this.dss.set(userDescription, mergeDeleteSets([\n                            _this.dss.get(userDescription) || createDeleteSet(),\n                            readDeleteSet(new DSDecoderV1(_decoding.createDecoder(encodedDs)))\n                        ]));\n                    });\n                });\n            });\n            _this.dss.set(userDescription, mergeDeleteSets(ds.map(function(encodedDs) {\n                return readDeleteSet(new DSDecoderV1(_decoding.createDecoder(encodedDs)));\n            })));\n            ids.observe(/** @param {YArrayEvent<any>} event */ function(event) {\n                return event.changes.added.forEach(function(item) {\n                    return item.content.getContent().forEach(addClientId);\n                });\n            });\n            ids.forEach(addClientId);\n        };\n        // observe users\n        storeType.observe(function(event) {\n            event.keysChanged.forEach(function(userDescription) {\n                return initUser(storeType.get(userDescription), userDescription);\n            });\n        });\n        // add intial data\n        storeType.forEach(initUser);\n    }\n    (0, _createClass._)(PermanentUserData, [\n        {\n            /**\n   * @param {Doc} doc\n   * @param {number} clientid\n   * @param {string} userDescription\n   * @param {Object} conf\n   * @param {function(Transaction, DeleteSet):boolean} [conf.filter]\n   */ key: \"setUserMapping\",\n            value: function setUserMapping(doc, clientid, userDescription) {\n                var _this = this;\n                var _ref = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, _ref_filter = _ref.filter, filter = _ref_filter === void 0 ? function() {\n                    return true;\n                } : _ref_filter;\n                var users = this.yusers;\n                var user = users.get(userDescription);\n                if (!user) {\n                    user = new YMap();\n                    user.set(\"ids\", new YArray());\n                    user.set(\"ds\", new YArray());\n                    users.set(userDescription, user);\n                }\n                user.get(\"ids\").push([\n                    clientid\n                ]);\n                users.observe(function(_event) {\n                    setTimeout(function() {\n                        var userOverwrite = users.get(userDescription);\n                        if (userOverwrite !== user) {\n                            // user was overwritten, port all data over to the next user object\n                            // @todo Experiment with Y.Sets here\n                            user = userOverwrite;\n                            // @todo iterate over old type\n                            _this.clients.forEach(function(_userDescription, clientid) {\n                                if (userDescription === _userDescription) user.get(\"ids\").push([\n                                    clientid\n                                ]);\n                            });\n                            var encoder = new DSEncoderV1();\n                            var ds = _this.dss.get(userDescription);\n                            if (ds) {\n                                writeDeleteSet(encoder, ds);\n                                user.get(\"ds\").push([\n                                    encoder.toUint8Array()\n                                ]);\n                            }\n                        }\n                    }, 0);\n                });\n                doc.on(\"afterTransaction\", /** @param {Transaction} transaction */ function(transaction) {\n                    setTimeout(function() {\n                        var yds = user.get(\"ds\");\n                        var ds = transaction.deleteSet;\n                        if (transaction.local && ds.clients.size > 0 && filter(transaction, ds)) {\n                            var encoder = new DSEncoderV1();\n                            writeDeleteSet(encoder, ds);\n                            yds.push([\n                                encoder.toUint8Array()\n                            ]);\n                        }\n                    });\n                });\n            }\n        },\n        {\n            /**\n   * @param {number} clientid\n   * @return {any}\n   */ key: \"getUserByClientId\",\n            value: function getUserByClientId(clientid) {\n                return this.clients.get(clientid) || null;\n            }\n        },\n        {\n            /**\n   * @param {ID} id\n   * @return {string | null}\n   */ key: \"getUserByDeletedId\",\n            value: function getUserByDeletedId(id) {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.dss.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var _step_value = (0, _slicedToArray._)(_step.value, 2), userDescription = _step_value[0], ds = _step_value[1];\n                        if (isDeleted(ds, id)) return userDescription;\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                            _iterator[\"return\"]();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return null;\n            }\n        }\n    ]);\n    return PermanentUserData;\n}();\n/**\n * A relative position is based on the Yjs model and is not affected by document changes.\n * E.g. If you place a relative position before a certain character, it will always point to this character.\n * If you place a relative position at the end of a type, it will always point to the end of the type.\n *\n * A numeric position is often unsuited for user selections, because it does not change when content is inserted\n * before or after.\n *\n * ```Insert(0, 'x')('a|bc') = 'xa|bc'``` Where | is the relative position.\n *\n * One of the properties must be defined.\n *\n * @example\n *   // Current cursor position is at position 10\n *   const relativePosition = createRelativePositionFromIndex(yText, 10)\n *   // modify yText\n *   yText.insert(0, 'abc')\n *   yText.delete(3, 10)\n *   // Compute the cursor position\n *   const absolutePosition = createAbsolutePositionFromRelativePosition(y, relativePosition)\n *   absolutePosition.type === yText // => true\n *   console.log('cursor location is ' + absolutePosition.index) // => cursor location is 3\n *\n */ var RelativePosition = function RelativePosition(type, tname, item) {\n    \"use strict\";\n    var assoc = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;\n    (0, _classCallCheck._)(this, RelativePosition);\n    /**\n     * @type {ID|null}\n     */ this.type = type;\n    /**\n     * @type {string|null}\n     */ this.tname = tname;\n    /**\n     * @type {ID | null}\n     */ this.item = item;\n    /**\n     * A relative position is associated to a specific character. By default\n     * assoc >= 0, the relative position is associated to the character\n     * after the meant position.\n     * I.e. position 1 in 'ab' is associated to character 'b'.\n     *\n     * If assoc < 0, then the relative position is associated to the caharacter\n     * before the meant position.\n     *\n     * @type {number}\n     */ this.assoc = assoc;\n};\n/**\n * @param {RelativePosition} rpos\n * @return {any}\n */ var relativePositionToJSON = function(rpos) {\n    var json = {};\n    if (rpos.type) json.type = rpos.type;\n    if (rpos.tname) json.tname = rpos.tname;\n    if (rpos.item) json.item = rpos.item;\n    if (rpos.assoc != null) json.assoc = rpos.assoc;\n    return json;\n};\n/**\n * @param {any} json\n * @return {RelativePosition}\n *\n * @function\n */ var createRelativePositionFromJSON = function(json) {\n    var _json_tname;\n    return new RelativePosition(json.type == null ? null : createID(json.type.client, json.type.clock), (_json_tname = json.tname) !== null && _json_tname !== void 0 ? _json_tname : null, json.item == null ? null : createID(json.item.client, json.item.clock), json.assoc == null ? 0 : json.assoc);\n};\nvar AbsolutePosition = function AbsolutePosition(type, index) {\n    \"use strict\";\n    var assoc = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    (0, _classCallCheck._)(this, AbsolutePosition);\n    /**\n     * @type {AbstractType<any>}\n     */ this.type = type;\n    /**\n     * @type {number}\n     */ this.index = index;\n    this.assoc = assoc;\n};\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @param {number} [assoc]\n *\n * @function\n */ var createAbsolutePosition = function(type, index) {\n    var assoc = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    return new AbsolutePosition(type, index, assoc);\n};\n/**\n * @param {AbstractType<any>} type\n * @param {ID|null} item\n * @param {number} [assoc]\n *\n * @function\n */ var createRelativePosition = function(type, item, assoc) {\n    var typeid = null;\n    var tname = null;\n    if (type._item === null) tname = findRootTypeKey(type);\n    else typeid = createID(type._item.id.client, type._item.id.clock);\n    return new RelativePosition(typeid, tname, item, assoc);\n};\n/**\n * Create a relativePosition based on a absolute position.\n *\n * @param {AbstractType<any>} type The base type (e.g. YText or YArray).\n * @param {number} index The absolute position.\n * @param {number} [assoc]\n * @return {RelativePosition}\n *\n * @function\n */ var createRelativePositionFromTypeIndex = function(type, index) {\n    var assoc = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    var t = type._start;\n    if (assoc < 0) {\n        // associated to the left character or the beginning of a type, increment index if possible.\n        if (index === 0) return createRelativePosition(type, null, assoc);\n        index--;\n    }\n    while(t !== null){\n        if (!t.deleted && t.countable) {\n            if (t.length > index) // case 1: found position somewhere in the linked list\n            return createRelativePosition(type, createID(t.id.client, t.id.clock + index), assoc);\n            index -= t.length;\n        }\n        if (t.right === null && assoc < 0) // left-associated position, return last available id\n        return createRelativePosition(type, t.lastId, assoc);\n        t = t.right;\n    }\n    return createRelativePosition(type, null, assoc);\n};\n/**\n * @param {encoding.Encoder} encoder\n * @param {RelativePosition} rpos\n *\n * @function\n */ var writeRelativePosition = function(encoder, rpos) {\n    var type = rpos.type, tname = rpos.tname, item = rpos.item, assoc = rpos.assoc;\n    if (item !== null) {\n        _encoding.writeVarUint(encoder, 0);\n        writeID(encoder, item);\n    } else if (tname !== null) {\n        // case 2: found position at the end of the list and type is stored in y.share\n        _encoding.writeUint8(encoder, 1);\n        _encoding.writeVarString(encoder, tname);\n    } else if (type !== null) {\n        // case 3: found position at the end of the list and type is attached to an item\n        _encoding.writeUint8(encoder, 2);\n        writeID(encoder, type);\n    } else throw _error.unexpectedCase();\n    _encoding.writeVarInt(encoder, assoc);\n    return encoder;\n};\n/**\n * @param {RelativePosition} rpos\n * @return {Uint8Array}\n */ var encodeRelativePosition = function(rpos) {\n    var encoder = _encoding.createEncoder();\n    writeRelativePosition(encoder, rpos);\n    return _encoding.toUint8Array(encoder);\n};\n/**\n * @param {decoding.Decoder} decoder\n * @return {RelativePosition}\n *\n * @function\n */ var readRelativePosition = function(decoder) {\n    var type = null;\n    var tname = null;\n    var itemID = null;\n    switch(_decoding.readVarUint(decoder)){\n        case 0:\n            // case 1: found position somewhere in the linked list\n            itemID = readID(decoder);\n            break;\n        case 1:\n            // case 2: found position at the end of the list and type is stored in y.share\n            tname = _decoding.readVarString(decoder);\n            break;\n        case 2:\n            // case 3: found position at the end of the list and type is attached to an item\n            type = readID(decoder);\n    }\n    var assoc = _decoding.hasContent(decoder) ? _decoding.readVarInt(decoder) : 0;\n    return new RelativePosition(type, tname, itemID, assoc);\n};\n/**\n * @param {Uint8Array} uint8Array\n * @return {RelativePosition}\n */ var decodeRelativePosition = function(uint8Array) {\n    return readRelativePosition(_decoding.createDecoder(uint8Array));\n};\n/**\n * Transform a relative position to an absolute position.\n *\n * If you want to share the relative position with other users, you should set\n * `followUndoneDeletions` to false to get consistent results across all clients.\n *\n * When calculating the absolute position, we try to follow the \"undone deletions\". This yields\n * better results for the user who performed undo. However, only the user who performed the undo\n * will get the better results, the other users don't know which operations recreated a deleted\n * range of content. There is more information in this ticket: https://github.com/yjs/yjs/issues/638\n *\n * @param {RelativePosition} rpos\n * @param {Doc} doc\n * @param {boolean} followUndoneDeletions - whether to follow undone deletions - see https://github.com/yjs/yjs/issues/638\n * @return {AbsolutePosition|null}\n *\n * @function\n */ var createAbsolutePositionFromRelativePosition = function(rpos, doc) {\n    var followUndoneDeletions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;\n    var store = doc.store;\n    var rightID = rpos.item;\n    var typeID = rpos.type;\n    var tname = rpos.tname;\n    var assoc = rpos.assoc;\n    var type = null;\n    var index = 0;\n    if (rightID !== null) {\n        if (getState(store, rightID.client) <= rightID.clock) return null;\n        var res = followUndoneDeletions ? followRedone(store, rightID) : {\n            item: getItem(store, rightID),\n            diff: 0\n        };\n        var right = res.item;\n        if (!(right instanceof Item)) return null;\n        type = /** @type {AbstractType<any>} */ right.parent;\n        if (type._item === null || !type._item.deleted) {\n            index = right.deleted || !right.countable ? 0 : res.diff + (assoc >= 0 ? 0 : 1); // adjust position based on left association if necessary\n            var n = right.left;\n            while(n !== null){\n                if (!n.deleted && n.countable) index += n.length;\n                n = n.left;\n            }\n        }\n    } else {\n        if (tname !== null) type = doc.get(tname);\n        else if (typeID !== null) {\n            if (getState(store, typeID.client) <= typeID.clock) // type does not exist yet\n            return null;\n            var item = (followUndoneDeletions ? followRedone(store, typeID) : {\n                item: getItem(store, typeID)\n            }).item;\n            if (item instanceof Item && item.content instanceof ContentType) type = item.content.type;\n            else // struct is garbage collected\n            return null;\n        } else throw _error.unexpectedCase();\n        if (assoc >= 0) index = type._length;\n        else index = 0;\n    }\n    return createAbsolutePosition(type, index, rpos.assoc);\n};\n/**\n * @param {RelativePosition|null} a\n * @param {RelativePosition|null} b\n * @return {boolean}\n *\n * @function\n */ var compareRelativePositions = function(a, b) {\n    return a === b || a !== null && b !== null && a.tname === b.tname && compareIDs(a.item, b.item) && compareIDs(a.type, b.type) && a.assoc === b.assoc;\n};\nvar Snapshot = function Snapshot(ds, sv) {\n    \"use strict\";\n    (0, _classCallCheck._)(this, Snapshot);\n    /**\n     * @type {DeleteSet}\n     */ this.ds = ds;\n    /**\n     * State Map\n     * @type {Map<number,number>}\n     */ this.sv = sv;\n};\n/**\n * @param {Snapshot} snap1\n * @param {Snapshot} snap2\n * @return {boolean}\n */ var equalSnapshots = function(snap1, snap2) {\n    var ds1 = snap1.ds.clients;\n    var ds2 = snap2.ds.clients;\n    var sv1 = snap1.sv;\n    var sv2 = snap2.sv;\n    if (sv1.size !== sv2.size || ds1.size !== ds2.size) return false;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = sv1.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var _step_value = (0, _slicedToArray._)(_step.value, 2), key = _step_value[0], value = _step_value[1];\n            if (sv2.get(key) !== value) return false;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                _iterator[\"return\"]();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n    try {\n        for(var _iterator1 = ds1.entries()[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n            var _step_value1 = (0, _slicedToArray._)(_step1.value, 2), client = _step_value1[0], dsitems1 = _step_value1[1];\n            var dsitems2 = ds2.get(client) || [];\n            if (dsitems1.length !== dsitems2.length) return false;\n            for(var i = 0; i < dsitems1.length; i++){\n                var dsitem1 = dsitems1[i];\n                var dsitem2 = dsitems2[i];\n                if (dsitem1.clock !== dsitem2.clock || dsitem1.len !== dsitem2.len) return false;\n            }\n        }\n    } catch (err) {\n        _didIteratorError1 = true;\n        _iteratorError1 = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion1 && _iterator1[\"return\"] != null) {\n                _iterator1[\"return\"]();\n            }\n        } finally{\n            if (_didIteratorError1) {\n                throw _iteratorError1;\n            }\n        }\n    }\n    return true;\n};\n/**\n * @param {Snapshot} snapshot\n * @param {DSEncoderV1 | DSEncoderV2} [encoder]\n * @return {Uint8Array}\n */ var encodeSnapshotV2 = function(snapshot) {\n    var encoder = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new DSEncoderV2();\n    writeDeleteSet(encoder, snapshot.ds);\n    writeStateVector(encoder, snapshot.sv);\n    return encoder.toUint8Array();\n};\n/**\n * @param {Snapshot} snapshot\n * @return {Uint8Array}\n */ var encodeSnapshot = function(snapshot) {\n    return encodeSnapshotV2(snapshot, new DSEncoderV1());\n};\n/**\n * @param {Uint8Array} buf\n * @param {DSDecoderV1 | DSDecoderV2} [decoder]\n * @return {Snapshot}\n */ var decodeSnapshotV2 = function(buf) {\n    var decoder = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new DSDecoderV2(_decoding.createDecoder(buf));\n    return new Snapshot(readDeleteSet(decoder), readStateVector(decoder));\n};\n/**\n * @param {Uint8Array} buf\n * @return {Snapshot}\n */ var decodeSnapshot = function(buf) {\n    return decodeSnapshotV2(buf, new DSDecoderV1(_decoding.createDecoder(buf)));\n};\n/**\n * @param {DeleteSet} ds\n * @param {Map<number,number>} sm\n * @return {Snapshot}\n */ var createSnapshot = function(ds, sm) {\n    return new Snapshot(ds, sm);\n};\nvar emptySnapshot = createSnapshot(createDeleteSet(), new Map());\n/**\n * @param {Doc} doc\n * @return {Snapshot}\n */ var snapshot = function(doc) {\n    return createSnapshot(createDeleteSetFromStructStore(doc.store), getStateVector(doc.store));\n};\n/**\n * @param {Item} item\n * @param {Snapshot|undefined} snapshot\n *\n * @protected\n * @function\n */ var isVisible = function(item, snapshot) {\n    return snapshot === undefined ? !item.deleted : snapshot.sv.has(item.id.client) && (snapshot.sv.get(item.id.client) || 0) > item.id.clock && !isDeleted(snapshot.ds, item.id);\n};\n/**\n * @param {Transaction} transaction\n * @param {Snapshot} snapshot\n */ var splitSnapshotAffectedStructs = function(transaction, snapshot) {\n    var meta = _map.setIfUndefined(transaction.meta, splitSnapshotAffectedStructs, _set.create);\n    var store = transaction.doc.store;\n    // check if we already split for this snapshot\n    if (!meta.has(snapshot)) {\n        snapshot.sv.forEach(function(clock, client) {\n            if (clock < getState(store, client)) getItemCleanStart(transaction, createID(client, clock));\n        });\n        iterateDeletedStructs(transaction, snapshot.ds, function(_item) {});\n        meta.add(snapshot);\n    }\n};\n/**\n * @example\n *  const ydoc = new Y.Doc({ gc: false })\n *  ydoc.getText().insert(0, 'world!')\n *  const snapshot = Y.snapshot(ydoc)\n *  ydoc.getText().insert(0, 'hello ')\n *  const restored = Y.createDocFromSnapshot(ydoc, snapshot)\n *  assert(restored.getText().toString() === 'world!')\n *\n * @param {Doc} originDoc\n * @param {Snapshot} snapshot\n * @param {Doc} [newDoc] Optionally, you may define the Yjs document that receives the data from originDoc\n * @return {Doc}\n */ var createDocFromSnapshot = function(originDoc, snapshot) {\n    var newDoc = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new Doc();\n    if (originDoc.gc) // we should not try to restore a GC-ed document, because some of the restored items might have their content deleted\n    throw new Error(\"Garbage-collection must be disabled in `originDoc`!\");\n    var sv = snapshot.sv, ds = snapshot.ds;\n    var encoder = new UpdateEncoderV2();\n    originDoc.transact(function(transaction) {\n        var size = 0;\n        sv.forEach(function(clock) {\n            if (clock > 0) size++;\n        });\n        _encoding.writeVarUint(encoder.restEncoder, size);\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            // splitting the structs before writing them to the encoder\n            for(var _iterator = sv[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var _step_value = (0, _slicedToArray._)(_step.value, 2), client = _step_value[0], clock = _step_value[1];\n                if (clock === 0) continue;\n                if (clock < getState(originDoc.store, client)) getItemCleanStart(transaction, createID(client, clock));\n                var structs = originDoc.store.clients.get(client) || [];\n                var lastStructIndex = findIndexSS(structs, clock - 1);\n                // write # encoded structs\n                _encoding.writeVarUint(encoder.restEncoder, lastStructIndex + 1);\n                encoder.writeClient(client);\n                // first clock written is 0\n                _encoding.writeVarUint(encoder.restEncoder, 0);\n                for(var i = 0; i <= lastStructIndex; i++)structs[i].write(encoder, 0);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                    _iterator[\"return\"]();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        writeDeleteSet(encoder, ds);\n    });\n    applyUpdateV2(newDoc, encoder.toUint8Array(), \"snapshot\");\n    return newDoc;\n};\n/**\n * @param {Snapshot} snapshot\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} [YDecoder]\n */ var snapshotContainsUpdateV2 = function(snapshot, update) {\n    var YDecoder = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : UpdateDecoderV2;\n    var updateDecoder = new YDecoder(_decoding.createDecoder(update));\n    var lazyDecoder = new LazyStructReader(updateDecoder, false);\n    for(var curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()){\n        if ((snapshot.sv.get(curr.id.client) || 0) < curr.id.clock + curr.length) return false;\n    }\n    var mergedDS = mergeDeleteSets([\n        snapshot.ds,\n        readDeleteSet(updateDecoder)\n    ]);\n    return equalDeleteSets(snapshot.ds, mergedDS);\n};\n/**\n * @param {Snapshot} snapshot\n * @param {Uint8Array} update\n */ var snapshotContainsUpdate = function(snapshot, update) {\n    return snapshotContainsUpdateV2(snapshot, update, UpdateDecoderV1);\n};\nvar StructStore = function StructStore() {\n    \"use strict\";\n    (0, _classCallCheck._)(this, StructStore);\n    /**\n     * @type {Map<number,Array<GC|Item>>}\n     */ this.clients = new Map();\n    /**\n     * @type {null | { missing: Map<number, number>, update: Uint8Array }}\n     */ this.pendingStructs = null;\n    /**\n     * @type {null | Uint8Array}\n     */ this.pendingDs = null;\n};\n/**\n * Return the states as a Map<client,clock>.\n * Note that clock refers to the next expected clock id.\n *\n * @param {StructStore} store\n * @return {Map<number,number>}\n *\n * @public\n * @function\n */ var getStateVector = function(store) {\n    var sm = new Map();\n    store.clients.forEach(function(structs, client) {\n        var struct = structs[structs.length - 1];\n        sm.set(client, struct.id.clock + struct.length);\n    });\n    return sm;\n};\n/**\n * @param {StructStore} store\n * @param {number} client\n * @return {number}\n *\n * @public\n * @function\n */ var getState = function(store, client) {\n    var structs = store.clients.get(client);\n    if (structs === undefined) return 0;\n    var lastStruct = structs[structs.length - 1];\n    return lastStruct.id.clock + lastStruct.length;\n};\n/**\n * @param {StructStore} store\n * @param {GC|Item} struct\n *\n * @private\n * @function\n */ var addStruct = function(store, struct) {\n    var structs = store.clients.get(struct.id.client);\n    if (structs === undefined) {\n        structs = [];\n        store.clients.set(struct.id.client, structs);\n    } else {\n        var lastStruct = structs[structs.length - 1];\n        if (lastStruct.id.clock + lastStruct.length !== struct.id.clock) throw _error.unexpectedCase();\n    }\n    structs.push(struct);\n};\n/**\n * Perform a binary search on a sorted array\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n * @return {number}\n *\n * @private\n * @function\n */ var findIndexSS = function(structs, clock) {\n    var left = 0;\n    var right = structs.length - 1;\n    var mid = structs[right];\n    var midclock = mid.id.clock;\n    if (midclock === clock) return right;\n    // @todo does it even make sense to pivot the search?\n    // If a good split misses, it might actually increase the time to find the correct item.\n    // Currently, the only advantage is that search with pivoting might find the item on the first try.\n    var midindex = _math.floor(clock / (midclock + mid.length - 1) * right); // pivoting the search\n    while(left <= right){\n        mid = structs[midindex];\n        midclock = mid.id.clock;\n        if (midclock <= clock) {\n            if (clock < midclock + mid.length) return midindex;\n            left = midindex + 1;\n        } else right = midindex - 1;\n        midindex = _math.floor((left + right) / 2);\n    }\n    // Always check state before looking for a struct in StructStore\n    // Therefore the case of not finding a struct is unexpected\n    throw _error.unexpectedCase();\n};\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {GC|Item}\n *\n * @private\n * @function\n */ var find = function(store, id) {\n    /**\n   * @type {Array<GC|Item>}\n   */ // @ts-ignore\n    var structs = store.clients.get(id.client);\n    return structs[findIndexSS(structs, id.clock)];\n};\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n * @private\n * @function\n */ var getItem = /** @type {function(StructStore,ID):Item} */ find;\n/**\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n */ var findIndexCleanStart = function(transaction, structs, clock) {\n    var index = findIndexSS(structs, clock);\n    var struct = structs[index];\n    if (struct.id.clock < clock && struct instanceof Item) {\n        structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));\n        return index + 1;\n    }\n    return index;\n};\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */ var getItemCleanStart = function(transaction, id) {\n    var structs = /** @type {Array<Item>} */ transaction.doc.store.clients.get(id.client);\n    return structs[findIndexCleanStart(transaction, structs, id.clock)];\n};\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */ var getItemCleanEnd = function(transaction, store, id) {\n    /**\n   * @type {Array<Item>}\n   */ // @ts-ignore\n    var structs = store.clients.get(id.client);\n    var index = findIndexSS(structs, id.clock);\n    var struct = structs[index];\n    if (id.clock !== struct.id.clock + struct.length - 1 && struct.constructor !== GC) structs.splice(index + 1, 0, splitItem(transaction, struct, id.clock - struct.id.clock + 1));\n    return struct;\n};\n/**\n * Replace `item` with `newitem` in store\n * @param {StructStore} store\n * @param {GC|Item} struct\n * @param {GC|Item} newStruct\n *\n * @private\n * @function\n */ var replaceStruct = function(store, struct, newStruct) {\n    var structs = /** @type {Array<GC|Item>} */ store.clients.get(struct.id.client);\n    structs[findIndexSS(structs, struct.id.clock)] = newStruct;\n};\n/**\n * Iterate over a range of structs\n *\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clockStart Inclusive start\n * @param {number} len\n * @param {function(GC|Item):void} f\n *\n * @function\n */ var iterateStructs = function(transaction, structs, clockStart, len, f) {\n    if (len === 0) return;\n    var clockEnd = clockStart + len;\n    var index = findIndexCleanStart(transaction, structs, clockStart);\n    var struct;\n    do {\n        struct = structs[index++];\n        if (clockEnd < struct.id.clock + struct.length) findIndexCleanStart(transaction, structs, clockEnd);\n        f(struct);\n    }while (index < structs.length && structs[index].id.clock < clockEnd);\n};\n/**\n * A transaction is created for every change on the Yjs model. It is possible\n * to bundle changes on the Yjs model in a single transaction to\n * minimize the number on messages sent and the number of observer calls.\n * If possible the user of this library should bundle as many changes as\n * possible. Here is an example to illustrate the advantages of bundling:\n *\n * @example\n * const ydoc = new Y.Doc()\n * const map = ydoc.getMap('map')\n * // Log content when change is triggered\n * map.observe(() => {\n *   console.log('change triggered')\n * })\n * // Each change on the map type triggers a log message:\n * map.set('a', 0) // => \"change triggered\"\n * map.set('b', 0) // => \"change triggered\"\n * // When put in a transaction, it will trigger the log after the transaction:\n * ydoc.transact(() => {\n *   map.set('a', 1)\n *   map.set('b', 1)\n * }) // => \"change triggered\"\n *\n * @public\n */ var Transaction = function Transaction(doc, origin, local) {\n    \"use strict\";\n    (0, _classCallCheck._)(this, Transaction);\n    /**\n     * The Yjs instance.\n     * @type {Doc}\n     */ this.doc = doc;\n    /**\n     * Describes the set of deleted items by ids\n     * @type {DeleteSet}\n     */ this.deleteSet = new DeleteSet();\n    /**\n     * Holds the state before the transaction started.\n     * @type {Map<Number,Number>}\n     */ this.beforeState = getStateVector(doc.store);\n    /**\n     * Holds the state after the transaction.\n     * @type {Map<Number,Number>}\n     */ this.afterState = new Map();\n    /**\n     * All types that were directly modified (property added or child\n     * inserted/deleted). New types are not included in this Set.\n     * Maps from type to parentSubs (`item.parentSub = null` for YArray)\n     * @type {Map<AbstractType<YEvent<any>>,Set<String|null>>}\n     */ this.changed = new Map();\n    /**\n     * Stores the events for the types that observe also child elements.\n     * It is mainly used by `observeDeep`.\n     * @type {Map<AbstractType<YEvent<any>>,Array<YEvent<any>>>}\n     */ this.changedParentTypes = new Map();\n    /**\n     * @type {Array<AbstractStruct>}\n     */ this._mergeStructs = [];\n    /**\n     * @type {any}\n     */ this.origin = origin;\n    /**\n     * Stores meta information on the transaction\n     * @type {Map<any,any>}\n     */ this.meta = new Map();\n    /**\n     * Whether this change originates from this doc.\n     * @type {boolean}\n     */ this.local = local;\n    /**\n     * @type {Set<Doc>}\n     */ this.subdocsAdded = new Set();\n    /**\n     * @type {Set<Doc>}\n     */ this.subdocsRemoved = new Set();\n    /**\n     * @type {Set<Doc>}\n     */ this.subdocsLoaded = new Set();\n    /**\n     * @type {boolean}\n     */ this._needFormattingCleanup = false;\n};\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n * @return {boolean} Whether data was written.\n */ var writeUpdateMessageFromTransaction = function(encoder, transaction) {\n    if (transaction.deleteSet.clients.size === 0 && !_map.any(transaction.afterState, function(clock, client) {\n        return transaction.beforeState.get(client) !== clock;\n    })) return false;\n    sortAndMergeDeleteSet(transaction.deleteSet);\n    writeStructsFromTransaction(encoder, transaction);\n    writeDeleteSet(encoder, transaction.deleteSet);\n    return true;\n};\n/**\n * If `type.parent` was added in current transaction, `type` technically\n * did not change, it was just added and we should not fire events for `type`.\n *\n * @param {Transaction} transaction\n * @param {AbstractType<YEvent<any>>} type\n * @param {string|null} parentSub\n */ var addChangedTypeToTransaction = function(transaction, type, parentSub) {\n    var item = type._item;\n    if (item === null || item.id.clock < (transaction.beforeState.get(item.id.client) || 0) && !item.deleted) _map.setIfUndefined(transaction.changed, type, _set.create).add(parentSub);\n};\n/**\n * @param {Array<AbstractStruct>} structs\n * @param {number} pos\n * @return {number} # of merged structs\n */ var tryToMergeWithLefts = function(structs, pos) {\n    var right = structs[pos];\n    var left = structs[pos - 1];\n    var i = pos;\n    for(; i > 0; right = left, left = structs[--i - 1]){\n        if (left.deleted === right.deleted && left.constructor === right.constructor) {\n            if (left.mergeWith(right)) {\n                if (right instanceof Item && right.parentSub !== null && /** @type {AbstractType<any>} */ right.parent._map.get(right.parentSub) === right) /** @type {AbstractType<any>} */ right.parent._map.set(right.parentSub, /** @type {Item} */ left);\n                continue;\n            }\n        }\n        break;\n    }\n    var merged = pos - i;\n    if (merged) // remove all merged structs from the array\n    structs.splice(pos + 1 - merged, merged);\n    return merged;\n};\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */ var tryGcDeleteSet = function(ds, store, gcFilter) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = ds.clients.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var _step_value = (0, _slicedToArray._)(_step.value, 2), client = _step_value[0], deleteItems = _step_value[1];\n            var structs = /** @type {Array<GC|Item>} */ store.clients.get(client);\n            for(var di = deleteItems.length - 1; di >= 0; di--){\n                var deleteItem = deleteItems[di];\n                var endDeleteItemClock = deleteItem.clock + deleteItem.len;\n                for(var si = findIndexSS(structs, deleteItem.clock), struct = structs[si]; si < structs.length && struct.id.clock < endDeleteItemClock; struct = structs[++si]){\n                    var struct1 = structs[si];\n                    if (deleteItem.clock + deleteItem.len <= struct1.id.clock) break;\n                    if (struct1 instanceof Item && struct1.deleted && !struct1.keep && gcFilter(struct1)) struct1.gc(store, false);\n                }\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                _iterator[\"return\"]();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n};\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n */ var tryMergeDeleteSet = function(ds, store) {\n    // try to merge deleted / gc'd items\n    // merge from right to left for better efficiency and so we don't miss any merge targets\n    ds.clients.forEach(function(deleteItems, client) {\n        var structs = /** @type {Array<GC|Item>} */ store.clients.get(client);\n        for(var di = deleteItems.length - 1; di >= 0; di--){\n            var deleteItem = deleteItems[di];\n            // start with merging the item next to the last deleted item\n            var mostRightIndexToCheck = _math.min(structs.length - 1, 1 + findIndexSS(structs, deleteItem.clock + deleteItem.len - 1));\n            for(var si = mostRightIndexToCheck, struct = structs[si]; si > 0 && struct.id.clock >= deleteItem.clock; struct = structs[si])si -= 1 + tryToMergeWithLefts(structs, si);\n        }\n    });\n};\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */ var tryGc = function(ds, store, gcFilter) {\n    tryGcDeleteSet(ds, store, gcFilter);\n    tryMergeDeleteSet(ds, store);\n};\n/**\n * @param {Array<Transaction>} transactionCleanups\n * @param {number} i\n */ var cleanupTransactions = function(transactionCleanups, i) {\n    if (i < transactionCleanups.length) {\n        var transaction = transactionCleanups[i];\n        var doc = transaction.doc;\n        var store = doc.store;\n        var ds = transaction.deleteSet;\n        var mergeStructs = transaction._mergeStructs;\n        try {\n            sortAndMergeDeleteSet(ds);\n            transaction.afterState = getStateVector(transaction.doc.store);\n            doc.emit(\"beforeObserverCalls\", [\n                transaction,\n                doc\n            ]);\n            /**\n       * An array of event callbacks.\n       *\n       * Each callback is called even if the other ones throw errors.\n       *\n       * @type {Array<function():void>}\n       */ var fs = [];\n            // observe events on changed types\n            transaction.changed.forEach(function(subs, itemtype) {\n                return fs.push(function() {\n                    if (itemtype._item === null || !itemtype._item.deleted) itemtype._callObserver(transaction, subs);\n                });\n            });\n            fs.push(function() {\n                // deep observe events\n                transaction.changedParentTypes.forEach(function(events, type) {\n                    // We need to think about the possibility that the user transforms the\n                    // Y.Doc in the event.\n                    if (type._dEH.l.length > 0 && (type._item === null || !type._item.deleted)) {\n                        events = events.filter(function(event) {\n                            return event.target._item === null || !event.target._item.deleted;\n                        });\n                        events.forEach(function(event) {\n                            event.currentTarget = type;\n                            // path is relative to the current target\n                            event._path = null;\n                        });\n                        // sort events by path length so that top-level events are fired first.\n                        events.sort(function(event1, event2) {\n                            return event1.path.length - event2.path.length;\n                        });\n                        // We don't need to check for events.length\n                        // because we know it has at least one element\n                        callEventHandlerListeners(type._dEH, events, transaction);\n                    }\n                });\n            });\n            fs.push(function() {\n                return doc.emit(\"afterTransaction\", [\n                    transaction,\n                    doc\n                ]);\n            });\n            (0, _function.callAll)(fs, []);\n            if (transaction._needFormattingCleanup) cleanupYTextAfterTransaction(transaction);\n        } finally{\n            // Replace deleted items with ItemDeleted / GC.\n            // This is where content is actually remove from the Yjs Doc.\n            if (doc.gc) tryGcDeleteSet(ds, store, doc.gcFilter);\n            tryMergeDeleteSet(ds, store);\n            // on all affected store.clients props, try to merge\n            transaction.afterState.forEach(function(clock, client) {\n                var beforeClock = transaction.beforeState.get(client) || 0;\n                if (beforeClock !== clock) {\n                    var structs = /** @type {Array<GC|Item>} */ store.clients.get(client);\n                    // we iterate from right to left so we can safely remove entries\n                    var firstChangePos = _math.max(findIndexSS(structs, beforeClock), 1);\n                    for(var _$i = structs.length - 1; _$i >= firstChangePos;)_$i -= 1 + tryToMergeWithLefts(structs, _$i);\n                }\n            });\n            // try to merge mergeStructs\n            // @todo: it makes more sense to transform mergeStructs to a DS, sort it, and merge from right to left\n            //        but at the moment DS does not handle duplicates\n            for(var _$i = mergeStructs.length - 1; _$i >= 0; _$i--){\n                var _mergeStructs_i_id = mergeStructs[_$i].id, client = _mergeStructs_i_id.client, clock = _mergeStructs_i_id.clock;\n                var structs = /** @type {Array<GC|Item>} */ store.clients.get(client);\n                var replacedStructPos = findIndexSS(structs, clock);\n                if (replacedStructPos + 1 < structs.length) {\n                    if (tryToMergeWithLefts(structs, replacedStructPos + 1) > 1) continue; // no need to perform next check, both are already merged\n                }\n                if (replacedStructPos > 0) tryToMergeWithLefts(structs, replacedStructPos);\n            }\n            if (!transaction.local && transaction.afterState.get(doc.clientID) !== transaction.beforeState.get(doc.clientID)) {\n                _logging.print(_logging.ORANGE, _logging.BOLD, \"[yjs] \", _logging.UNBOLD, _logging.RED, \"Changed the client-id because another client seems to be using it.\");\n                doc.clientID = generateNewClientId();\n            }\n            // @todo Merge all the transactions into one and provide send the data as a single update message\n            doc.emit(\"afterTransactionCleanup\", [\n                transaction,\n                doc\n            ]);\n            if (doc._observers.has(\"update\")) {\n                var encoder = new UpdateEncoderV1();\n                var hasContent = writeUpdateMessageFromTransaction(encoder, transaction);\n                if (hasContent) doc.emit(\"update\", [\n                    encoder.toUint8Array(),\n                    transaction.origin,\n                    doc,\n                    transaction\n                ]);\n            }\n            if (doc._observers.has(\"updateV2\")) {\n                var encoder1 = new UpdateEncoderV2();\n                var hasContent1 = writeUpdateMessageFromTransaction(encoder1, transaction);\n                if (hasContent1) doc.emit(\"updateV2\", [\n                    encoder1.toUint8Array(),\n                    transaction.origin,\n                    doc,\n                    transaction\n                ]);\n            }\n            var subdocsAdded = transaction.subdocsAdded, subdocsLoaded = transaction.subdocsLoaded, subdocsRemoved = transaction.subdocsRemoved;\n            if (subdocsAdded.size > 0 || subdocsRemoved.size > 0 || subdocsLoaded.size > 0) {\n                subdocsAdded.forEach(function(subdoc) {\n                    subdoc.clientID = doc.clientID;\n                    if (subdoc.collectionid == null) subdoc.collectionid = doc.collectionid;\n                    doc.subdocs.add(subdoc);\n                });\n                subdocsRemoved.forEach(function(subdoc) {\n                    return doc.subdocs[\"delete\"](subdoc);\n                });\n                doc.emit(\"subdocs\", [\n                    {\n                        loaded: subdocsLoaded,\n                        added: subdocsAdded,\n                        removed: subdocsRemoved\n                    },\n                    doc,\n                    transaction\n                ]);\n                subdocsRemoved.forEach(function(subdoc) {\n                    return subdoc.destroy();\n                });\n            }\n            if (transactionCleanups.length <= i + 1) {\n                doc._transactionCleanups = [];\n                doc.emit(\"afterAllTransactions\", [\n                    doc,\n                    transactionCleanups\n                ]);\n            } else cleanupTransactions(transactionCleanups, i + 1);\n        }\n    }\n};\n/**\n * Implements the functionality of `y.transact(()=>{..})`\n *\n * @template T\n * @param {Doc} doc\n * @param {function(Transaction):T} f\n * @param {any} [origin=true]\n * @return {T}\n *\n * @function\n */ var transact = function(doc, f) {\n    var origin = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null, local = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;\n    var transactionCleanups = doc._transactionCleanups;\n    var initialCall = false;\n    /**\n   * @type {any}\n   */ var result = null;\n    if (doc._transaction === null) {\n        initialCall = true;\n        doc._transaction = new Transaction(doc, origin, local);\n        transactionCleanups.push(doc._transaction);\n        if (transactionCleanups.length === 1) doc.emit(\"beforeAllTransactions\", [\n            doc\n        ]);\n        doc.emit(\"beforeTransaction\", [\n            doc._transaction,\n            doc\n        ]);\n    }\n    try {\n        result = f(doc._transaction);\n    } finally{\n        if (initialCall) {\n            var finishCleanup = doc._transaction === transactionCleanups[0];\n            doc._transaction = null;\n            if (finishCleanup) // The first transaction ended, now process observer calls.\n            // Observer call may create new transactions for which we need to call the observers and do cleanup.\n            // We don't want to nest these calls, so we execute these calls one after\n            // another.\n            // Also we need to ensure that all cleanups are called, even if the\n            // observes throw errors.\n            // This file is full of hacky try {} finally {} blocks to ensure that an\n            // event can throw errors and also that the cleanup is called.\n            cleanupTransactions(transactionCleanups, 0);\n        }\n    }\n    return result;\n};\nvar StackItem = function StackItem(deletions, insertions) {\n    \"use strict\";\n    (0, _classCallCheck._)(this, StackItem);\n    this.insertions = insertions;\n    this.deletions = deletions;\n    /**\n     * Use this to save and restore metadata like selection range\n     */ this.meta = new Map();\n};\n/**\n * @param {Transaction} tr\n * @param {UndoManager} um\n * @param {StackItem} stackItem\n */ var clearUndoManagerStackItem = function(tr, um, stackItem) {\n    iterateDeletedStructs(tr, stackItem.deletions, function(item) {\n        if (item instanceof Item && um.scope.some(function(type) {\n            return isParentOf(type, item);\n        })) keepItem(item, false);\n    });\n};\n/**\n * @param {UndoManager} undoManager\n * @param {Array<StackItem>} stack\n * @param {'undo'|'redo'} eventType\n * @return {StackItem?}\n */ var popStackItem = function(undoManager, stack, eventType) {\n    /**\n   * Keep a reference to the transaction so we can fire the event with the changedParentTypes\n   * @type {any}\n   */ var _tr = null;\n    var doc = undoManager.doc;\n    var scope = undoManager.scope;\n    transact(doc, function(transaction) {\n        var _loop = function() {\n            var store = doc.store;\n            var stackItem = /** @type {StackItem} */ stack.pop();\n            /**\n       * @type {Set<Item>}\n       */ var itemsToRedo = new Set();\n            /**\n       * @type {Array<Item>}\n       */ var itemsToDelete = [];\n            var performedChange = false;\n            iterateDeletedStructs(transaction, stackItem.insertions, function(struct) {\n                if (struct instanceof Item) {\n                    if (struct.redone !== null) {\n                        var _followRedone = followRedone(store, struct.id), item = _followRedone.item, diff = _followRedone.diff;\n                        if (diff > 0) item = getItemCleanStart(transaction, createID(item.id.client, item.id.clock + diff));\n                        struct = item;\n                    }\n                    if (!struct.deleted && scope.some(function(type) {\n                        return isParentOf(type, /** @type {Item} */ struct);\n                    })) itemsToDelete.push(struct);\n                }\n            });\n            iterateDeletedStructs(transaction, stackItem.deletions, function(struct) {\n                if (struct instanceof Item && scope.some(function(type) {\n                    return isParentOf(type, struct);\n                }) && // Never redo structs in stackItem.insertions because they were created and deleted in the same capture interval.\n                !isDeleted(stackItem.insertions, struct.id)) itemsToRedo.add(struct);\n            });\n            itemsToRedo.forEach(function(struct) {\n                performedChange = redoItem(transaction, struct, itemsToRedo, stackItem.insertions, undoManager.ignoreRemoteMapChanges, undoManager) !== null || performedChange;\n            });\n            // We want to delete in reverse order so that children are deleted before\n            // parents, so we have more information available when items are filtered.\n            for(var i = itemsToDelete.length - 1; i >= 0; i--){\n                var item = itemsToDelete[i];\n                if (undoManager.deleteFilter(item)) {\n                    item[\"delete\"](transaction);\n                    performedChange = true;\n                }\n            }\n            undoManager.currStackItem = performedChange ? stackItem : null;\n        };\n        while(stack.length > 0 && undoManager.currStackItem === null)_loop();\n        transaction.changed.forEach(function(subProps, type) {\n            // destroy search marker if necessary\n            if (subProps.has(null) && type._searchMarker) type._searchMarker.length = 0;\n        });\n        _tr = transaction;\n    }, undoManager);\n    var res = undoManager.currStackItem;\n    if (res != null) {\n        var changedParentTypes = _tr.changedParentTypes;\n        undoManager.emit(\"stack-item-popped\", [\n            {\n                stackItem: res,\n                type: eventType,\n                changedParentTypes: changedParentTypes,\n                origin: undoManager\n            },\n            undoManager\n        ]);\n        undoManager.currStackItem = null;\n    }\n    return res;\n};\n/**\n * @typedef {Object} UndoManagerOptions\n * @property {number} [UndoManagerOptions.captureTimeout=500]\n * @property {function(Transaction):boolean} [UndoManagerOptions.captureTransaction] Do not capture changes of a Transaction if result false.\n * @property {function(Item):boolean} [UndoManagerOptions.deleteFilter=()=>true] Sometimes\n * it is necessary to filter what an Undo/Redo operation can delete. If this\n * filter returns false, the type/item won't be deleted even it is in the\n * undo/redo scope.\n * @property {Set<any>} [UndoManagerOptions.trackedOrigins=new Set([null])]\n * @property {boolean} [ignoreRemoteMapChanges] Experimental. By default, the UndoManager will never overwrite remote changes. Enable this property to enable overwriting remote changes on key-value changes (Y.Map, properties on Y.Xml, etc..).\n * @property {Doc} [doc] The document that this UndoManager operates on. Only needed if typeScope is empty.\n */ /**\n * @typedef {Object} StackItemEvent\n * @property {StackItem} StackItemEvent.stackItem\n * @property {any} StackItemEvent.origin\n * @property {'undo'|'redo'} StackItemEvent.type\n * @property {Map<AbstractType<YEvent<any>>,Array<YEvent<any>>>} StackItemEvent.changedParentTypes\n */ /**\n * Fires 'stack-item-added' event when a stack item was added to either the undo- or\n * the redo-stack. You may store additional stack information via the\n * metadata property on `event.stackItem.meta` (it is a `Map` of metadata properties).\n * Fires 'stack-item-popped' event when a stack item was popped from either the\n * undo- or the redo-stack. You may restore the saved stack information from `event.stackItem.meta`.\n *\n * @extends {ObservableV2<{'stack-item-added':function(StackItemEvent, UndoManager):void, 'stack-item-popped': function(StackItemEvent, UndoManager):void, 'stack-cleared': function({ undoStackCleared: boolean, redoStackCleared: boolean }):void, 'stack-item-updated': function(StackItemEvent, UndoManager):void }>}\n */ var UndoManager = /*#__PURE__*/ function(ObservableV2) {\n    \"use strict\";\n    (0, _inherits._)(UndoManager, ObservableV2);\n    var _super = (0, _createSuper._)(UndoManager);\n    function UndoManager(typeScope) {\n        var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref_captureTimeout = _ref.captureTimeout, captureTimeout = _ref_captureTimeout === void 0 ? 500 : _ref_captureTimeout, _ref_captureTransaction = _ref.captureTransaction, captureTransaction = _ref_captureTransaction === void 0 ? function(_tr) {\n            return true;\n        } : _ref_captureTransaction, _ref_deleteFilter = _ref.deleteFilter, deleteFilter = _ref_deleteFilter === void 0 ? function() {\n            return true;\n        } : _ref_deleteFilter, _ref_trackedOrigins = _ref.trackedOrigins, trackedOrigins = _ref_trackedOrigins === void 0 ? new Set([\n            null\n        ]) : _ref_trackedOrigins, _ref_ignoreRemoteMapChanges = _ref.ignoreRemoteMapChanges, ignoreRemoteMapChanges = _ref_ignoreRemoteMapChanges === void 0 ? false : _ref_ignoreRemoteMapChanges, _ref_doc = _ref.doc, doc = _ref_doc === void 0 ? /** @type {Doc} */ _array.isArray(typeScope) ? typeScope[0].doc : typeScope.doc : _ref_doc;\n        (0, _classCallCheck._)(this, UndoManager);\n        var _this;\n        _this = _super.call(this);\n        /**\n     * @type {Array<AbstractType<any>>}\n     */ _this.scope = [];\n        _this.doc = doc;\n        _this.addToScope(typeScope);\n        _this.deleteFilter = deleteFilter;\n        trackedOrigins.add((0, _assertThisInitialized._)(_this));\n        _this.trackedOrigins = trackedOrigins;\n        _this.captureTransaction = captureTransaction;\n        /**\n     * @type {Array<StackItem>}\n     */ _this.undoStack = [];\n        /**\n     * @type {Array<StackItem>}\n     */ _this.redoStack = [];\n        /**\n     * Whether the client is currently undoing (calling UndoManager.undo)\n     *\n     * @type {boolean}\n     */ _this.undoing = false;\n        _this.redoing = false;\n        /**\n     * The currently popped stack item if UndoManager.undoing or UndoManager.redoing\n     *\n     * @type {StackItem|null}\n     */ _this.currStackItem = null;\n        _this.lastChange = 0;\n        _this.ignoreRemoteMapChanges = ignoreRemoteMapChanges;\n        _this.captureTimeout = captureTimeout;\n        /**\n     * @param {Transaction} transaction\n     */ _this.afterTransactionHandler = function(transaction) {\n            // Only track certain transactions\n            if (!_this.captureTransaction(transaction) || !_this.scope.some(function(type) {\n                return transaction.changedParentTypes.has(type);\n            }) || !_this.trackedOrigins.has(transaction.origin) && (!transaction.origin || !_this.trackedOrigins.has(transaction.origin.constructor))) return;\n            var undoing = _this.undoing;\n            var redoing = _this.redoing;\n            var stack = undoing ? _this.redoStack : _this.undoStack;\n            if (undoing) _this.stopCapturing(); // next undo should not be appended to last stack item\n            else if (!redoing) // neither undoing nor redoing: delete redoStack\n            _this.clear(false, true);\n            var insertions = new DeleteSet();\n            transaction.afterState.forEach(function(endClock, client) {\n                var startClock = transaction.beforeState.get(client) || 0;\n                var len = endClock - startClock;\n                if (len > 0) addToDeleteSet(insertions, client, startClock, len);\n            });\n            var now = _time.getUnixTime();\n            var didAdd = false;\n            if (_this.lastChange > 0 && now - _this.lastChange < _this.captureTimeout && stack.length > 0 && !undoing && !redoing) {\n                // append change to last stack op\n                var lastOp = stack[stack.length - 1];\n                lastOp.deletions = mergeDeleteSets([\n                    lastOp.deletions,\n                    transaction.deleteSet\n                ]);\n                lastOp.insertions = mergeDeleteSets([\n                    lastOp.insertions,\n                    insertions\n                ]);\n            } else {\n                // create a new stack op\n                stack.push(new StackItem(transaction.deleteSet, insertions));\n                didAdd = true;\n            }\n            if (!undoing && !redoing) _this.lastChange = now;\n            // make sure that deleted structs are not gc'd\n            iterateDeletedStructs(transaction, transaction.deleteSet, /** @param {Item|GC} item */ function(item) {\n                if (item instanceof Item && _this.scope.some(function(type) {\n                    return isParentOf(type, item);\n                })) keepItem(item, true);\n            });\n            /**\n       * @type {[StackItemEvent, UndoManager]}\n       */ var changeEvent = [\n                {\n                    stackItem: stack[stack.length - 1],\n                    origin: transaction.origin,\n                    type: undoing ? \"redo\" : \"undo\",\n                    changedParentTypes: transaction.changedParentTypes\n                },\n                (0, _assertThisInitialized._)(_this)\n            ];\n            if (didAdd) _this.emit(\"stack-item-added\", changeEvent);\n            else _this.emit(\"stack-item-updated\", changeEvent);\n        };\n        _this.doc.on(\"afterTransaction\", _this.afterTransactionHandler);\n        _this.doc.on(\"destroy\", function() {\n            _this.destroy();\n        });\n        return _this;\n    }\n    (0, _createClass._)(UndoManager, [\n        {\n            /**\n   * @param {Array<AbstractType<any>> | AbstractType<any>} ytypes\n   */ key: \"addToScope\",\n            value: function addToScope(ytypes) {\n                var _this = this;\n                ytypes = _array.isArray(ytypes) ? ytypes : [\n                    ytypes\n                ];\n                ytypes.forEach(function(ytype) {\n                    if (_this.scope.every(function(yt) {\n                        return yt !== ytype;\n                    })) {\n                        if (ytype.doc !== _this.doc) _logging.warn(\"[yjs#509] Not same Y.Doc\"); // use MultiDocUndoManager instead. also see https://github.com/yjs/yjs/issues/509\n                        _this.scope.push(ytype);\n                    }\n                });\n            }\n        },\n        {\n            /**\n   * @param {any} origin\n   */ key: \"addTrackedOrigin\",\n            value: function addTrackedOrigin(origin) {\n                this.trackedOrigins.add(origin);\n            }\n        },\n        {\n            /**\n   * @param {any} origin\n   */ key: \"removeTrackedOrigin\",\n            value: function removeTrackedOrigin(origin) {\n                this.trackedOrigins[\"delete\"](origin);\n            }\n        },\n        {\n            key: \"clear\",\n            value: function clear() {\n                var _this = this;\n                var clearUndoStack = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true, clearRedoStack = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n                if (clearUndoStack && this.canUndo() || clearRedoStack && this.canRedo()) this.doc.transact(function(tr) {\n                    if (clearUndoStack) {\n                        _this.undoStack.forEach(function(item) {\n                            return clearUndoManagerStackItem(tr, _this, item);\n                        });\n                        _this.undoStack = [];\n                    }\n                    if (clearRedoStack) {\n                        _this.redoStack.forEach(function(item) {\n                            return clearUndoManagerStackItem(tr, _this, item);\n                        });\n                        _this.redoStack = [];\n                    }\n                    _this.emit(\"stack-cleared\", [\n                        {\n                            undoStackCleared: clearUndoStack,\n                            redoStackCleared: clearRedoStack\n                        }\n                    ]);\n                });\n            }\n        },\n        {\n            /**\n   * UndoManager merges Undo-StackItem if they are created within time-gap\n   * smaller than `options.captureTimeout`. Call `um.stopCapturing()` so that the next\n   * StackItem won't be merged.\n   *\n   *\n   * @example\n   *     // without stopCapturing\n   *     ytext.insert(0, 'a')\n   *     ytext.insert(1, 'b')\n   *     um.undo()\n   *     ytext.toString() // => '' (note that 'ab' was removed)\n   *     // with stopCapturing\n   *     ytext.insert(0, 'a')\n   *     um.stopCapturing()\n   *     ytext.insert(0, 'b')\n   *     um.undo()\n   *     ytext.toString() // => 'a' (note that only 'b' was removed)\n   *\n   */ key: \"stopCapturing\",\n            value: function stopCapturing() {\n                this.lastChange = 0;\n            }\n        },\n        {\n            /**\n   * Undo last changes on type.\n   *\n   * @return {StackItem?} Returns StackItem if a change was applied\n   */ key: \"undo\",\n            value: function undo() {\n                this.undoing = true;\n                var res;\n                try {\n                    res = popStackItem(this, this.undoStack, \"undo\");\n                } finally{\n                    this.undoing = false;\n                }\n                return res;\n            }\n        },\n        {\n            /**\n   * Redo last undo operation.\n   *\n   * @return {StackItem?} Returns StackItem if a change was applied\n   */ key: \"redo\",\n            value: function redo() {\n                this.redoing = true;\n                var res;\n                try {\n                    res = popStackItem(this, this.redoStack, \"redo\");\n                } finally{\n                    this.redoing = false;\n                }\n                return res;\n            }\n        },\n        {\n            /**\n   * Are undo steps available?\n   *\n   * @return {boolean} `true` if undo is possible\n   */ key: \"canUndo\",\n            value: function canUndo() {\n                return this.undoStack.length > 0;\n            }\n        },\n        {\n            /**\n   * Are redo steps available?\n   *\n   * @return {boolean} `true` if redo is possible\n   */ key: \"canRedo\",\n            value: function canRedo() {\n                return this.redoStack.length > 0;\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function destroy() {\n                this.trackedOrigins[\"delete\"](this);\n                this.doc.off(\"afterTransaction\", this.afterTransactionHandler);\n                (0, _get._)((0, _getPrototypeOf._)(UndoManager.prototype), \"destroy\", this).call(this);\n            }\n        }\n    ]);\n    return UndoManager;\n}((0, _observable.ObservableV2));\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n */ function lazyStructReaderGenerator(decoder) {\n    var numOfStateUpdates, i, numberOfStructs, client, clock, i1, info, len, cantCopyParentInfo, struct, len1;\n    return (0, _tsGenerator._)(this, function(_state) {\n        switch(_state.label){\n            case 0:\n                numOfStateUpdates = _decoding.readVarUint(decoder.restDecoder);\n                i = 0;\n                _state.label = 1;\n            case 1:\n                if (!(i < numOfStateUpdates)) return [\n                    3,\n                    10\n                ];\n                numberOfStructs = _decoding.readVarUint(decoder.restDecoder);\n                client = decoder.readClient();\n                clock = _decoding.readVarUint(decoder.restDecoder);\n                i1 = 0;\n                _state.label = 2;\n            case 2:\n                if (!(i1 < numberOfStructs)) return [\n                    3,\n                    9\n                ];\n                info = decoder.readInfo();\n                if (!(info === 10)) return [\n                    3,\n                    4\n                ];\n                len = _decoding.readVarUint(decoder.restDecoder);\n                return [\n                    4,\n                    new Skip(createID(client, clock), len)\n                ];\n            case 3:\n                _state.sent();\n                clock += len;\n                return [\n                    3,\n                    8\n                ];\n            case 4:\n                if (!((_binary.BITS5 & info) !== 0)) return [\n                    3,\n                    6\n                ];\n                cantCopyParentInfo = (info & (_binary.BIT7 | _binary.BIT8)) === 0;\n                // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n                // and we read the next string as parentYKey.\n                // It indicates how we store/retrieve parent from `y.share`\n                // @type {string|null}\n                struct = new Item(createID(client, clock), null, (info & _binary.BIT8) === _binary.BIT8 ? decoder.readLeftID() : null, null, (info & _binary.BIT7) === _binary.BIT7 ? decoder.readRightID() : null, // @ts-ignore Force writing a string here.\n                cantCopyParentInfo ? decoder.readParentInfo() ? decoder.readString() : decoder.readLeftID() : null, cantCopyParentInfo && (info & _binary.BIT6) === _binary.BIT6 ? decoder.readString() : null, readItemContent(decoder, info) // item content\n                );\n                return [\n                    4,\n                    struct\n                ];\n            case 5:\n                _state.sent();\n                clock += struct.length;\n                return [\n                    3,\n                    8\n                ];\n            case 6:\n                len1 = decoder.readLen();\n                return [\n                    4,\n                    new GC(createID(client, clock), len1)\n                ];\n            case 7:\n                _state.sent();\n                clock += len1;\n                _state.label = 8;\n            case 8:\n                i1++;\n                return [\n                    3,\n                    2\n                ];\n            case 9:\n                i++;\n                return [\n                    3,\n                    1\n                ];\n            case 10:\n                return [\n                    2\n                ];\n        }\n    });\n}\nvar LazyStructReader = /*#__PURE__*/ function() {\n    \"use strict\";\n    function LazyStructReader(decoder, filterSkips) {\n        (0, _classCallCheck._)(this, LazyStructReader);\n        this.gen = lazyStructReaderGenerator(decoder);\n        /**\n     * @type {null | Item | Skip | GC}\n     */ this.curr = null;\n        this.done = false;\n        this.filterSkips = filterSkips;\n        this.next();\n    }\n    (0, _createClass._)(LazyStructReader, [\n        {\n            /**\n   * @return {Item | GC | Skip |null}\n   */ key: \"next\",\n            value: function next() {\n                // ignore \"Skip\" structs\n                do this.curr = this.gen.next().value || null;\n                while (this.filterSkips && this.curr !== null && this.curr.constructor === Skip);\n                return this.curr;\n            }\n        }\n    ]);\n    return LazyStructReader;\n}();\n/**\n * @param {Uint8Array} update\n *\n */ var logUpdate = function(update) {\n    return logUpdateV2(update, UpdateDecoderV1);\n};\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} [YDecoder]\n *\n */ var logUpdateV2 = function(update) {\n    var YDecoder = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : UpdateDecoderV2;\n    var structs = [];\n    var updateDecoder = new YDecoder(_decoding.createDecoder(update));\n    var lazyDecoder = new LazyStructReader(updateDecoder, false);\n    for(var curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next())structs.push(curr);\n    _logging.print(\"Structs: \", structs);\n    var ds = readDeleteSet(updateDecoder);\n    _logging.print(\"DeleteSet: \", ds);\n};\n/**\n * @param {Uint8Array} update\n *\n */ var decodeUpdate = function(update) {\n    return decodeUpdateV2(update, UpdateDecoderV1);\n};\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} [YDecoder]\n *\n */ var decodeUpdateV2 = function(update) {\n    var YDecoder = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : UpdateDecoderV2;\n    var structs = [];\n    var updateDecoder = new YDecoder(_decoding.createDecoder(update));\n    var lazyDecoder = new LazyStructReader(updateDecoder, false);\n    for(var curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next())structs.push(curr);\n    return {\n        structs: structs,\n        ds: readDeleteSet(updateDecoder)\n    };\n};\nvar LazyStructWriter = function LazyStructWriter(encoder) {\n    \"use strict\";\n    (0, _classCallCheck._)(this, LazyStructWriter);\n    this.currClient = 0;\n    this.startClock = 0;\n    this.written = 0;\n    this.encoder = encoder;\n    /**\n     * We want to write operations lazily, but also we need to know beforehand how many operations we want to write for each client.\n     *\n     * This kind of meta-information (#clients, #structs-per-client-written) is written to the restEncoder.\n     *\n     * We fragment the restEncoder and store a slice of it per-client until we know how many clients there are.\n     * When we flush (toUint8Array) we write the restEncoder using the fragments and the meta-information.\n     *\n     * @type {Array<{ written: number, restEncoder: Uint8Array }>}\n     */ this.clientStructs = [];\n};\n/**\n * @param {Array<Uint8Array>} updates\n * @return {Uint8Array}\n */ var mergeUpdates = function(updates) {\n    return mergeUpdatesV2(updates, UpdateDecoderV1, UpdateEncoderV1);\n};\n/**\n * @param {Uint8Array} update\n * @param {typeof DSEncoderV1 | typeof DSEncoderV2} YEncoder\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} YDecoder\n * @return {Uint8Array}\n */ var encodeStateVectorFromUpdateV2 = function(update) {\n    var YEncoder = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DSEncoderV2, YDecoder = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : UpdateDecoderV2;\n    var encoder = new YEncoder();\n    var updateDecoder = new LazyStructReader(new YDecoder(_decoding.createDecoder(update)), false);\n    var curr = updateDecoder.curr;\n    if (curr !== null) {\n        var size = 0;\n        var currClient = curr.id.client;\n        var stopCounting = curr.id.clock !== 0; // must start at 0\n        var currClock = stopCounting ? 0 : curr.id.clock + curr.length;\n        for(; curr !== null; curr = updateDecoder.next()){\n            if (currClient !== curr.id.client) {\n                if (currClock !== 0) {\n                    size++;\n                    // We found a new client\n                    // write what we have to the encoder\n                    _encoding.writeVarUint(encoder.restEncoder, currClient);\n                    _encoding.writeVarUint(encoder.restEncoder, currClock);\n                }\n                currClient = curr.id.client;\n                currClock = 0;\n                stopCounting = curr.id.clock !== 0;\n            }\n            // we ignore skips\n            if (curr.constructor === Skip) stopCounting = true;\n            if (!stopCounting) currClock = curr.id.clock + curr.length;\n        }\n        // write what we have\n        if (currClock !== 0) {\n            size++;\n            _encoding.writeVarUint(encoder.restEncoder, currClient);\n            _encoding.writeVarUint(encoder.restEncoder, currClock);\n        }\n        // prepend the size of the state vector\n        var enc = _encoding.createEncoder();\n        _encoding.writeVarUint(enc, size);\n        _encoding.writeBinaryEncoder(enc, encoder.restEncoder);\n        encoder.restEncoder = enc;\n        return encoder.toUint8Array();\n    } else {\n        _encoding.writeVarUint(encoder.restEncoder, 0);\n        return encoder.toUint8Array();\n    }\n};\n/**\n * @param {Uint8Array} update\n * @return {Uint8Array}\n */ var encodeStateVectorFromUpdate = function(update) {\n    return encodeStateVectorFromUpdateV2(update, DSEncoderV1, UpdateDecoderV1);\n};\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} YDecoder\n * @return {{ from: Map<number,number>, to: Map<number,number> }}\n */ var parseUpdateMetaV2 = function(update) {\n    var YDecoder = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : UpdateDecoderV2;\n    /**\n   * @type {Map<number, number>}\n   */ var from = new Map();\n    /**\n   * @type {Map<number, number>}\n   */ var to = new Map();\n    var updateDecoder = new LazyStructReader(new YDecoder(_decoding.createDecoder(update)), false);\n    var curr = updateDecoder.curr;\n    if (curr !== null) {\n        var currClient = curr.id.client;\n        var currClock = curr.id.clock;\n        // write the beginning to `from`\n        from.set(currClient, currClock);\n        for(; curr !== null; curr = updateDecoder.next()){\n            if (currClient !== curr.id.client) {\n                // We found a new client\n                // write the end to `to`\n                to.set(currClient, currClock);\n                // write the beginning to `from`\n                from.set(curr.id.client, curr.id.clock);\n                // update currClient\n                currClient = curr.id.client;\n            }\n            currClock = curr.id.clock + curr.length;\n        }\n        // write the end to `to`\n        to.set(currClient, currClock);\n    }\n    return {\n        from: from,\n        to: to\n    };\n};\n/**\n * @param {Uint8Array} update\n * @return {{ from: Map<number,number>, to: Map<number,number> }}\n */ var parseUpdateMeta = function(update) {\n    return parseUpdateMetaV2(update, UpdateDecoderV1);\n};\n/**\n * This method is intended to slice any kind of struct and retrieve the right part.\n * It does not handle side-effects, so it should only be used by the lazy-encoder.\n *\n * @param {Item | GC | Skip} left\n * @param {number} diff\n * @return {Item | GC}\n */ var sliceStruct = function(left, diff) {\n    if (left.constructor === GC) {\n        var _left_id = left.id, client = _left_id.client, clock = _left_id.clock;\n        return new GC(createID(client, clock + diff), left.length - diff);\n    } else if (left.constructor === Skip) {\n        var _left_id1 = left.id, client1 = _left_id1.client, clock1 = _left_id1.clock;\n        return new Skip(createID(client1, clock1 + diff), left.length - diff);\n    } else {\n        var leftItem = /** @type {Item} */ left;\n        var _leftItem_id = leftItem.id, client2 = _leftItem_id.client, clock2 = _leftItem_id.clock;\n        return new Item(createID(client2, clock2 + diff), null, createID(client2, clock2 + diff - 1), null, leftItem.rightOrigin, leftItem.parent, leftItem.parentSub, leftItem.content.splice(diff));\n    }\n};\n/**\n *\n * This function works similarly to `readUpdateV2`.\n *\n * @param {Array<Uint8Array>} updates\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n * @param {typeof UpdateEncoderV1 | typeof UpdateEncoderV2} [YEncoder]\n * @return {Uint8Array}\n */ var mergeUpdatesV2 = function(updates) {\n    var _loop = function() {\n        // Write higher clients first ⇒ sort by clientID & clock and remove decoders without content\n        lazyStructDecoders = lazyStructDecoders.filter(function(dec) {\n            return dec.curr !== null;\n        });\n        lazyStructDecoders.sort(/** @type {function(any,any):number} */ function(dec1, dec2) {\n            if (dec1.curr.id.client === dec2.curr.id.client) {\n                var clockDiff = dec1.curr.id.clock - dec2.curr.id.clock;\n                if (clockDiff === 0) // @todo remove references to skip since the structDecoders must filter Skips.\n                return dec1.curr.constructor === dec2.curr.constructor ? 0 : dec1.curr.constructor === Skip ? 1 : -1 // we are filtering skips anyway.\n                ;\n                else return clockDiff;\n            } else return dec2.curr.id.client - dec1.curr.id.client;\n        });\n        if (lazyStructDecoders.length === 0) return \"break\";\n        var currDecoder = lazyStructDecoders[0];\n        // write from currDecoder until the next operation is from another client or if filler-struct\n        // then we need to reorder the decoders and find the next operation to write\n        var firstClient = /** @type {Item | GC} */ currDecoder.curr.id.client;\n        if (currWrite !== null) {\n            var curr = /** @type {Item | GC | null} */ currDecoder.curr;\n            var iterated = false;\n            // iterate until we find something that we haven't written already\n            // remember: first the high client-ids are written\n            while(curr !== null && curr.id.clock + curr.length <= currWrite.struct.id.clock + currWrite.struct.length && curr.id.client >= currWrite.struct.id.client){\n                curr = currDecoder.next();\n                iterated = true;\n            }\n            if (curr === null || // current decoder is empty\n            curr.id.client !== firstClient || // check whether there is another decoder that has has updates from `firstClient`\n            iterated && curr.id.clock > currWrite.struct.id.clock + currWrite.struct.length // the above while loop was used and we are potentially missing updates\n            ) return \"continue\";\n            if (firstClient !== currWrite.struct.id.client) {\n                writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n                currWrite = {\n                    struct: curr,\n                    offset: 0\n                };\n                currDecoder.next();\n            } else if (currWrite.struct.id.clock + currWrite.struct.length < curr.id.clock) {\n                // @todo write currStruct & set currStruct = Skip(clock = currStruct.id.clock + currStruct.length, length = curr.id.clock - self.clock)\n                if (currWrite.struct.constructor === Skip) // extend existing skip\n                currWrite.struct.length = curr.id.clock + curr.length - currWrite.struct.id.clock;\n                else {\n                    writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n                    var diff = curr.id.clock - currWrite.struct.id.clock - currWrite.struct.length;\n                    /**\n             * @type {Skip}\n             */ var struct = new Skip(createID(firstClient, currWrite.struct.id.clock + currWrite.struct.length), diff);\n                    currWrite = {\n                        struct: struct,\n                        offset: 0\n                    };\n                }\n            } else {\n                var diff1 = currWrite.struct.id.clock + currWrite.struct.length - curr.id.clock;\n                if (diff1 > 0) {\n                    if (currWrite.struct.constructor === Skip) // prefer to slice Skip because the other struct might contain more information\n                    currWrite.struct.length -= diff1;\n                    else curr = sliceStruct(curr, diff1);\n                }\n                if (!currWrite.struct.mergeWith(/** @type {any} */ curr)) {\n                    writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n                    currWrite = {\n                        struct: curr,\n                        offset: 0\n                    };\n                    currDecoder.next();\n                }\n            }\n        } else {\n            currWrite = {\n                struct: /** @type {Item | GC} */ currDecoder.curr,\n                offset: 0\n            };\n            currDecoder.next();\n        }\n        for(var next = currDecoder.curr; next !== null && next.id.client === firstClient && next.id.clock === currWrite.struct.id.clock + currWrite.struct.length && next.constructor !== Skip; next = currDecoder.next()){\n            writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n            currWrite = {\n                struct: next,\n                offset: 0\n            };\n        }\n    };\n    var YDecoder = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : UpdateDecoderV2, YEncoder = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : UpdateEncoderV2;\n    if (updates.length === 1) return updates[0];\n    var updateDecoders = updates.map(function(update) {\n        return new YDecoder(_decoding.createDecoder(update));\n    });\n    var lazyStructDecoders = updateDecoders.map(function(decoder) {\n        return new LazyStructReader(decoder, true);\n    });\n    /**\n   * @todo we don't need offset because we always slice before\n   * @type {null | { struct: Item | GC | Skip, offset: number }}\n   */ var currWrite = null;\n    var updateEncoder = new YEncoder();\n    // write structs lazily\n    var lazyStructEncoder = new LazyStructWriter(updateEncoder);\n    // Note: We need to ensure that all lazyStructDecoders are fully consumed\n    // Note: Should merge document updates whenever possible - even from different updates\n    // Note: Should handle that some operations cannot be applied yet ()\n    while(true){\n        var _ret = _loop();\n        if (_ret === \"break\") break;\n    }\n    if (currWrite !== null) {\n        writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n        currWrite = null;\n    }\n    finishLazyStructWriting(lazyStructEncoder);\n    var dss = updateDecoders.map(function(decoder) {\n        return readDeleteSet(decoder);\n    });\n    var ds = mergeDeleteSets(dss);\n    writeDeleteSet(updateEncoder, ds);\n    return updateEncoder.toUint8Array();\n};\n/**\n * @param {Uint8Array} update\n * @param {Uint8Array} sv\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n * @param {typeof UpdateEncoderV1 | typeof UpdateEncoderV2} [YEncoder]\n */ var diffUpdateV2 = function(update, sv) {\n    var YDecoder = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : UpdateDecoderV2, YEncoder = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : UpdateEncoderV2;\n    var state = decodeStateVector(sv);\n    var encoder = new YEncoder();\n    var lazyStructWriter = new LazyStructWriter(encoder);\n    var decoder = new YDecoder(_decoding.createDecoder(update));\n    var reader = new LazyStructReader(decoder, false);\n    while(reader.curr){\n        var curr = reader.curr;\n        var currClient = curr.id.client;\n        var svClock = state.get(currClient) || 0;\n        if (reader.curr.constructor === Skip) {\n            // the first written struct shouldn't be a skip\n            reader.next();\n            continue;\n        }\n        if (curr.id.clock + curr.length > svClock) {\n            writeStructToLazyStructWriter(lazyStructWriter, curr, _math.max(svClock - curr.id.clock, 0));\n            reader.next();\n            while(reader.curr && reader.curr.id.client === currClient){\n                writeStructToLazyStructWriter(lazyStructWriter, reader.curr, 0);\n                reader.next();\n            }\n        } else // read until something new comes up\n        while(reader.curr && reader.curr.id.client === currClient && reader.curr.id.clock + reader.curr.length <= svClock)reader.next();\n    }\n    finishLazyStructWriting(lazyStructWriter);\n    // write ds\n    var ds = readDeleteSet(decoder);\n    writeDeleteSet(encoder, ds);\n    return encoder.toUint8Array();\n};\n/**\n * @param {Uint8Array} update\n * @param {Uint8Array} sv\n */ var diffUpdate = function(update, sv) {\n    return diffUpdateV2(update, sv, UpdateDecoderV1, UpdateEncoderV1);\n};\n/**\n * @param {LazyStructWriter} lazyWriter\n */ var flushLazyStructWriter = function(lazyWriter) {\n    if (lazyWriter.written > 0) {\n        lazyWriter.clientStructs.push({\n            written: lazyWriter.written,\n            restEncoder: _encoding.toUint8Array(lazyWriter.encoder.restEncoder)\n        });\n        lazyWriter.encoder.restEncoder = _encoding.createEncoder();\n        lazyWriter.written = 0;\n    }\n};\n/**\n * @param {LazyStructWriter} lazyWriter\n * @param {Item | GC} struct\n * @param {number} offset\n */ var writeStructToLazyStructWriter = function(lazyWriter, struct, offset) {\n    // flush curr if we start another client\n    if (lazyWriter.written > 0 && lazyWriter.currClient !== struct.id.client) flushLazyStructWriter(lazyWriter);\n    if (lazyWriter.written === 0) {\n        lazyWriter.currClient = struct.id.client;\n        // write next client\n        lazyWriter.encoder.writeClient(struct.id.client);\n        // write startClock\n        _encoding.writeVarUint(lazyWriter.encoder.restEncoder, struct.id.clock + offset);\n    }\n    struct.write(lazyWriter.encoder, offset);\n    lazyWriter.written++;\n};\n/**\n * Call this function when we collected all parts and want to\n * put all the parts together. After calling this method,\n * you can continue using the UpdateEncoder.\n *\n * @param {LazyStructWriter} lazyWriter\n */ var finishLazyStructWriting = function(lazyWriter) {\n    flushLazyStructWriter(lazyWriter);\n    // this is a fresh encoder because we called flushCurr\n    var restEncoder = lazyWriter.encoder.restEncoder;\n    /**\n   * Now we put all the fragments together.\n   * This works similarly to `writeClientsStructs`\n   */ // write # states that were updated - i.e. the clients\n    _encoding.writeVarUint(restEncoder, lazyWriter.clientStructs.length);\n    for(var i = 0; i < lazyWriter.clientStructs.length; i++){\n        var partStructs = lazyWriter.clientStructs[i];\n        /**\n     * Works similarly to `writeStructs`\n     */ // write # encoded structs\n        _encoding.writeVarUint(restEncoder, partStructs.written);\n        // write the rest of the fragment\n        _encoding.writeUint8Array(restEncoder, partStructs.restEncoder);\n    }\n};\n/**\n * @param {Uint8Array} update\n * @param {function(Item|GC|Skip):Item|GC|Skip} blockTransformer\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} YDecoder\n * @param {typeof UpdateEncoderV2 | typeof UpdateEncoderV1 } YEncoder\n */ var convertUpdateFormat = function(update, blockTransformer, YDecoder, YEncoder) {\n    var updateDecoder = new YDecoder(_decoding.createDecoder(update));\n    var lazyDecoder = new LazyStructReader(updateDecoder, false);\n    var updateEncoder = new YEncoder();\n    var lazyWriter = new LazyStructWriter(updateEncoder);\n    for(var curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next())writeStructToLazyStructWriter(lazyWriter, blockTransformer(curr), 0);\n    finishLazyStructWriting(lazyWriter);\n    var ds = readDeleteSet(updateDecoder);\n    writeDeleteSet(updateEncoder, ds);\n    return updateEncoder.toUint8Array();\n};\n/**\n * @typedef {Object} ObfuscatorOptions\n * @property {boolean} [ObfuscatorOptions.formatting=true]\n * @property {boolean} [ObfuscatorOptions.subdocs=true]\n * @property {boolean} [ObfuscatorOptions.yxml=true] Whether to obfuscate nodeName / hookName\n */ /**\n * @param {ObfuscatorOptions} obfuscator\n */ var createObfuscator = function() {\n    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref_formatting = _ref.formatting, formatting = _ref_formatting === void 0 ? true : _ref_formatting, _ref_subdocs = _ref.subdocs, subdocs = _ref_subdocs === void 0 ? true : _ref_subdocs, _ref_yxml = _ref.yxml, yxml = _ref_yxml === void 0 ? true : _ref_yxml;\n    var i = 0;\n    var mapKeyCache = _map.create();\n    var nodeNameCache = _map.create();\n    var formattingKeyCache = _map.create();\n    var formattingValueCache = _map.create();\n    formattingValueCache.set(null, null); // end of a formatting range should always be the end of a formatting range\n    /**\n   * @param {Item|GC|Skip} block\n   * @return {Item|GC|Skip}\n   */ return function(block) {\n        switch(block.constructor){\n            case GC:\n            case Skip:\n                return block;\n            case Item:\n                {\n                    var item = /** @type {Item} */ block;\n                    var content = item.content;\n                    switch(content.constructor){\n                        case ContentDeleted:\n                            break;\n                        case ContentType:\n                            if (yxml) {\n                                var type = /** @type {ContentType} */ content.type;\n                                if (type instanceof YXmlElement) type.nodeName = _map.setIfUndefined(nodeNameCache, type.nodeName, function() {\n                                    return \"node-\" + i;\n                                });\n                                if (type instanceof YXmlHook) type.hookName = _map.setIfUndefined(nodeNameCache, type.hookName, function() {\n                                    return \"hook-\" + i;\n                                });\n                            }\n                            break;\n                        case ContentAny:\n                            {\n                                var c = /** @type {ContentAny} */ content;\n                                c.arr = c.arr.map(function() {\n                                    return i;\n                                });\n                                break;\n                            }\n                        case ContentBinary:\n                            {\n                                var c1 = /** @type {ContentBinary} */ content;\n                                c1.content = new Uint8Array([\n                                    i\n                                ]);\n                                break;\n                            }\n                        case ContentDoc:\n                            {\n                                var c2 = /** @type {ContentDoc} */ content;\n                                if (subdocs) {\n                                    c2.opts = {};\n                                    c2.doc.guid = i + \"\";\n                                }\n                                break;\n                            }\n                        case ContentEmbed:\n                            {\n                                var c3 = /** @type {ContentEmbed} */ content;\n                                c3.embed = {};\n                                break;\n                            }\n                        case ContentFormat:\n                            {\n                                var c4 = /** @type {ContentFormat} */ content;\n                                if (formatting) {\n                                    c4.key = _map.setIfUndefined(formattingKeyCache, c4.key, function() {\n                                        return i + \"\";\n                                    });\n                                    c4.value = _map.setIfUndefined(formattingValueCache, c4.value, function() {\n                                        return {\n                                            i: i\n                                        };\n                                    });\n                                }\n                                break;\n                            }\n                        case ContentJSON:\n                            {\n                                var c5 = /** @type {ContentJSON} */ content;\n                                c5.arr = c5.arr.map(function() {\n                                    return i;\n                                });\n                                break;\n                            }\n                        case ContentString:\n                            {\n                                var c6 = /** @type {ContentString} */ content;\n                                c6.str = _string.repeat(i % 10 + \"\", c6.str.length);\n                                break;\n                            }\n                        default:\n                            // unknown content type\n                            _error.unexpectedCase();\n                    }\n                    if (item.parentSub) item.parentSub = _map.setIfUndefined(mapKeyCache, item.parentSub, function() {\n                        return i + \"\";\n                    });\n                    i++;\n                    return block;\n                }\n            default:\n                // unknown block-type\n                _error.unexpectedCase();\n        }\n    };\n};\n/**\n * This function obfuscates the content of a Yjs update. This is useful to share\n * buggy Yjs documents while significantly limiting the possibility that a\n * developer can on the user. Note that it might still be possible to deduce\n * some information by analyzing the \"structure\" of the document or by analyzing\n * the typing behavior using the CRDT-related metadata that is still kept fully\n * intact.\n *\n * @param {Uint8Array} update\n * @param {ObfuscatorOptions} [opts]\n */ var obfuscateUpdate = function(update, opts) {\n    return convertUpdateFormat(update, createObfuscator(opts), UpdateDecoderV1, UpdateEncoderV1);\n};\n/**\n * @param {Uint8Array} update\n * @param {ObfuscatorOptions} [opts]\n */ var obfuscateUpdateV2 = function(update, opts) {\n    return convertUpdateFormat(update, createObfuscator(opts), UpdateDecoderV2, UpdateEncoderV2);\n};\n/**\n * @param {Uint8Array} update\n */ var convertUpdateFormatV1ToV2 = function(update) {\n    return convertUpdateFormat(update, _function.id, UpdateDecoderV1, UpdateEncoderV2);\n};\n/**\n * @param {Uint8Array} update\n */ var convertUpdateFormatV2ToV1 = function(update) {\n    return convertUpdateFormat(update, _function.id, UpdateDecoderV2, UpdateEncoderV1);\n};\nvar errorComputeChanges = \"You must not compute changes after the event-handler fired.\";\n/**\n * @template {AbstractType<any>} T\n * YEvent describes the changes on a YType.\n */ var YEvent = /*#__PURE__*/ function() {\n    \"use strict\";\n    function YEvent(target, transaction) {\n        (0, _classCallCheck._)(this, YEvent);\n        /**\n     * The type on which this event was created on.\n     * @type {T}\n     */ this.target = target;\n        /**\n     * The current target on which the observe callback is called.\n     * @type {AbstractType<any>}\n     */ this.currentTarget = target;\n        /**\n     * The transaction that triggered this event.\n     * @type {Transaction}\n     */ this.transaction = transaction;\n        /**\n     * @type {Object|null}\n     */ this._changes = null;\n        /**\n     * @type {null | Map<string, { action: 'add' | 'update' | 'delete', oldValue: any, newValue: any }>}\n     */ this._keys = null;\n        /**\n     * @type {null | Array<{ insert?: string | Array<any> | object | AbstractType<any>, retain?: number, delete?: number, attributes?: Object<string, any> }>}\n     */ this._delta = null;\n        /**\n     * @type {Array<string|number>|null}\n     */ this._path = null;\n    }\n    (0, _createClass._)(YEvent, [\n        {\n            key: \"path\",\n            get: /**\n   * Computes the path from `y` to the changed type.\n   *\n   * @todo v14 should standardize on path: Array<{parent, index}> because that is easier to work with.\n   *\n   * The following property holds:\n   * @example\n   *   let type = y\n   *   event.path.forEach(dir => {\n   *     type = type.get(dir)\n   *   })\n   *   type === event.target // => true\n   */ function get() {\n                return this._path || (this._path = getPathTo(this.currentTarget, this.target));\n            }\n        },\n        {\n            /**\n   * Check if a struct is deleted by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */ key: \"deletes\",\n            value: function deletes(struct) {\n                return isDeleted(this.transaction.deleteSet, struct.id);\n            }\n        },\n        {\n            key: \"keys\",\n            get: /**\n   * @type {Map<string, { action: 'add' | 'update' | 'delete', oldValue: any, newValue: any }>}\n   */ function get() {\n                var _this = this;\n                if (this._keys === null) {\n                    if (this.transaction.doc._transactionCleanups.length === 0) throw _error.create(errorComputeChanges);\n                    var keys = new Map();\n                    var target = this.target;\n                    var changed = /** @type Set<string|null> */ this.transaction.changed.get(target);\n                    changed.forEach(function(key) {\n                        if (key !== null) {\n                            var item = /** @type {Item} */ target._map.get(key);\n                            /**\n           * @type {'delete' | 'add' | 'update'}\n           */ var action;\n                            var oldValue;\n                            if (_this.adds(item)) {\n                                var prev = item.left;\n                                while(prev !== null && _this.adds(prev))prev = prev.left;\n                                if (_this.deletes(item)) {\n                                    if (prev !== null && _this.deletes(prev)) {\n                                        action = \"delete\";\n                                        oldValue = _array.last(prev.content.getContent());\n                                    } else return;\n                                } else if (prev !== null && _this.deletes(prev)) {\n                                    action = \"update\";\n                                    oldValue = _array.last(prev.content.getContent());\n                                } else {\n                                    action = \"add\";\n                                    oldValue = undefined;\n                                }\n                            } else {\n                                if (_this.deletes(item)) {\n                                    action = \"delete\";\n                                    oldValue = _array.last(/** @type {Item} */ item.content.getContent());\n                                } else return; // nop\n                            }\n                            keys.set(key, {\n                                action: action,\n                                oldValue: oldValue\n                            });\n                        }\n                    });\n                    this._keys = keys;\n                }\n                return this._keys;\n            }\n        },\n        {\n            key: \"delta\",\n            get: /**\n   * This is a computed property. Note that this can only be safely computed during the\n   * event call. Computing this property after other changes happened might result in\n   * unexpected behavior (incorrect computation of deltas). A safe way to collect changes\n   * is to store the `changes` or the `delta` object. Avoid storing the `transaction` object.\n   *\n   * @type {Array<{insert?: string | Array<any> | object | AbstractType<any>, retain?: number, delete?: number, attributes?: Object<string, any>}>}\n   */ function get() {\n                return this.changes.delta;\n            }\n        },\n        {\n            /**\n   * Check if a struct is added by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */ key: \"adds\",\n            value: function adds(struct) {\n                return struct.id.clock >= (this.transaction.beforeState.get(struct.id.client) || 0);\n            }\n        },\n        {\n            key: \"changes\",\n            get: /**\n   * This is a computed property. Note that this can only be safely computed during the\n   * event call. Computing this property after other changes happened might result in\n   * unexpected behavior (incorrect computation of deltas). A safe way to collect changes\n   * is to store the `changes` or the `delta` object. Avoid storing the `transaction` object.\n   *\n   * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}\n   */ function get() {\n                var changes = this._changes;\n                if (changes === null) {\n                    if (this.transaction.doc._transactionCleanups.length === 0) throw _error.create(errorComputeChanges);\n                    var target = this.target;\n                    var added = _set.create();\n                    var deleted = _set.create();\n                    /**\n       * @type {Array<{insert:Array<any>}|{delete:number}|{retain:number}>}\n       */ var delta = [];\n                    changes = {\n                        added: added,\n                        deleted: deleted,\n                        delta: delta,\n                        keys: this.keys\n                    };\n                    var changed = /** @type Set<string|null> */ this.transaction.changed.get(target);\n                    if (changed.has(null)) {\n                        /**\n         * @type {any}\n         */ var lastOp = null;\n                        var packOp = function() {\n                            if (lastOp) delta.push(lastOp);\n                        };\n                        for(var item = target._start; item !== null; item = item.right){\n                            if (item.deleted) {\n                                if (this.deletes(item) && !this.adds(item)) {\n                                    if (lastOp === null || lastOp[\"delete\"] === undefined) {\n                                        packOp();\n                                        lastOp = {\n                                            \"delete\": 0\n                                        };\n                                    }\n                                    lastOp[\"delete\"] += item.length;\n                                    deleted.add(item);\n                                } // else nop\n                            } else if (this.adds(item)) {\n                                if (lastOp === null || lastOp.insert === undefined) {\n                                    packOp();\n                                    lastOp = {\n                                        insert: []\n                                    };\n                                }\n                                lastOp.insert = lastOp.insert.concat(item.content.getContent());\n                                added.add(item);\n                            } else {\n                                if (lastOp === null || lastOp.retain === undefined) {\n                                    packOp();\n                                    lastOp = {\n                                        retain: 0\n                                    };\n                                }\n                                lastOp.retain += item.length;\n                            }\n                        }\n                        if (lastOp !== null && lastOp.retain === undefined) packOp();\n                    }\n                    this._changes = changes;\n                }\n                return /** @type {any} */ changes;\n            }\n        }\n    ]);\n    return YEvent;\n}();\n/**\n * Compute the path from this type to the specified target.\n *\n * @example\n *   // `child` should be accessible via `type.get(path[0]).get(path[1])..`\n *   const path = type.getPathTo(child)\n *   // assuming `type instanceof YArray`\n *   console.log(path) // might look like => [2, 'key1']\n *   child === type.get(path[0]).get(path[1])\n *\n * @param {AbstractType<any>} parent\n * @param {AbstractType<any>} child target\n * @return {Array<string|number>} Path to the target\n *\n * @private\n * @function\n */ var getPathTo = function(parent, child) {\n    var path = [];\n    while(child._item !== null && child !== parent){\n        if (child._item.parentSub !== null) // parent is map-ish\n        path.unshift(child._item.parentSub);\n        else {\n            // parent is array-ish\n            var i = 0;\n            var c = /** @type {AbstractType<any>} */ child._item.parent._start;\n            while(c !== child._item && c !== null){\n                if (!c.deleted && c.countable) i += c.length;\n                c = c.right;\n            }\n            path.unshift(i);\n        }\n        child = /** @type {AbstractType<any>} */ child._item.parent;\n    }\n    return path;\n};\n/**\n * https://docs.yjs.dev/getting-started/working-with-shared-types#caveats\n */ var warnPrematureAccess = function() {\n    _logging.warn(\"Invalid access: Add Yjs type to a document before reading data.\");\n};\nvar maxSearchMarker = 80;\n/**\n * A unique timestamp that identifies each marker.\n *\n * Time is relative,.. this is more like an ever-increasing clock.\n *\n * @type {number}\n */ var globalSearchMarkerTimestamp = 0;\nvar ArraySearchMarker = function ArraySearchMarker(p, index) {\n    \"use strict\";\n    (0, _classCallCheck._)(this, ArraySearchMarker);\n    p.marker = true;\n    this.p = p;\n    this.index = index;\n    this.timestamp = globalSearchMarkerTimestamp++;\n};\n/**\n * @param {ArraySearchMarker} marker\n */ var refreshMarkerTimestamp = function(marker) {\n    marker.timestamp = globalSearchMarkerTimestamp++;\n};\n/**\n * This is rather complex so this function is the only thing that should overwrite a marker\n *\n * @param {ArraySearchMarker} marker\n * @param {Item} p\n * @param {number} index\n */ var overwriteMarker = function(marker, p, index) {\n    marker.p.marker = false;\n    marker.p = p;\n    p.marker = true;\n    marker.index = index;\n    marker.timestamp = globalSearchMarkerTimestamp++;\n};\n/**\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {Item} p\n * @param {number} index\n */ var markPosition = function(searchMarker, p, index) {\n    if (searchMarker.length >= maxSearchMarker) {\n        // override oldest marker (we don't want to create more objects)\n        var marker = searchMarker.reduce(function(a, b) {\n            return a.timestamp < b.timestamp ? a : b;\n        });\n        overwriteMarker(marker, p, index);\n        return marker;\n    } else {\n        // create new marker\n        var pm = new ArraySearchMarker(p, index);\n        searchMarker.push(pm);\n        return pm;\n    }\n};\n/**\n * Search marker help us to find positions in the associative array faster.\n *\n * They speed up the process of finding a position without much bookkeeping.\n *\n * A maximum of `maxSearchMarker` objects are created.\n *\n * This function always returns a refreshed marker (updated timestamp)\n *\n * @param {AbstractType<any>} yarray\n * @param {number} index\n */ var findMarker = function(yarray, index) {\n    if (yarray._start === null || index === 0 || yarray._searchMarker === null) return null;\n    var marker = yarray._searchMarker.length === 0 ? null : yarray._searchMarker.reduce(function(a, b) {\n        return _math.abs(index - a.index) < _math.abs(index - b.index) ? a : b;\n    });\n    var p = yarray._start;\n    var pindex = 0;\n    if (marker !== null) {\n        p = marker.p;\n        pindex = marker.index;\n        refreshMarkerTimestamp(marker); // we used it, we might need to use it again\n    }\n    // iterate to right if possible\n    while(p.right !== null && pindex < index){\n        if (!p.deleted && p.countable) {\n            if (index < pindex + p.length) break;\n            pindex += p.length;\n        }\n        p = p.right;\n    }\n    // iterate to left if necessary (might be that pindex > index)\n    while(p.left !== null && pindex > index){\n        p = p.left;\n        if (!p.deleted && p.countable) pindex -= p.length;\n    }\n    // we want to make sure that p can't be merged with left, because that would screw up everything\n    // in that cas just return what we have (it is most likely the best marker anyway)\n    // iterate to left until p can't be merged with left\n    while(p.left !== null && p.left.id.client === p.id.client && p.left.id.clock + p.left.length === p.id.clock){\n        p = p.left;\n        if (!p.deleted && p.countable) pindex -= p.length;\n    }\n    // @todo remove!\n    // assure position\n    // {\n    //   let start = yarray._start\n    //   let pos = 0\n    //   while (start !== p) {\n    //     if (!start.deleted && start.countable) {\n    //       pos += start.length\n    //     }\n    //     start = /** @type {Item} */ (start.right)\n    //   }\n    //   if (pos !== pindex) {\n    //     debugger\n    //     throw new Error('Gotcha position fail!')\n    //   }\n    // }\n    // if (marker) {\n    //   if (window.lengthes == null) {\n    //     window.lengthes = []\n    //     window.getLengthes = () => window.lengthes.sort((a, b) => a - b)\n    //   }\n    //   window.lengthes.push(marker.index - pindex)\n    //   console.log('distance', marker.index - pindex, 'len', p && p.parent.length)\n    // }\n    if (marker !== null && _math.abs(marker.index - pindex) < /** @type {YText|YArray<any>} */ p.parent.length / maxSearchMarker) {\n        // adjust existing marker\n        overwriteMarker(marker, p, pindex);\n        return marker;\n    } else // create new marker\n    return markPosition(yarray._searchMarker, p, pindex);\n};\n/**\n * Update markers when a change happened.\n *\n * This should be called before doing a deletion!\n *\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {number} index\n * @param {number} len If insertion, len is positive. If deletion, len is negative.\n */ var updateMarkerChanges = function(searchMarker, index, len) {\n    for(var i = searchMarker.length - 1; i >= 0; i--){\n        var m = searchMarker[i];\n        if (len > 0) {\n            /**\n       * @type {Item|null}\n       */ var p = m.p;\n            p.marker = false;\n            // Ideally we just want to do a simple position comparison, but this will only work if\n            // search markers don't point to deleted items for formats.\n            // Iterate marker to prev undeleted countable position so we know what to do when updating a position\n            while(p && (p.deleted || !p.countable)){\n                p = p.left;\n                if (p && !p.deleted && p.countable) // adjust position. the loop should break now\n                m.index -= p.length;\n            }\n            if (p === null || p.marker === true) {\n                // remove search marker if updated position is null or if position is already marked\n                searchMarker.splice(i, 1);\n                continue;\n            }\n            m.p = p;\n            p.marker = true;\n        }\n        if (index < m.index || len > 0 && index === m.index) m.index = _math.max(index, m.index + len);\n    }\n};\n/**\n * Accumulate all (list) children of a type and return them as an Array.\n *\n * @param {AbstractType<any>} t\n * @return {Array<Item>}\n */ var getTypeChildren = function(t) {\n    var _t_doc;\n    (_t_doc = t.doc) !== null && _t_doc !== void 0 ? _t_doc : warnPrematureAccess();\n    var s = t._start;\n    var arr = [];\n    while(s){\n        arr.push(s);\n        s = s.right;\n    }\n    return arr;\n};\n/**\n * Call event listeners with an event. This will also add an event to all\n * parents (for `.observeDeep` handlers).\n *\n * @template EventType\n * @param {AbstractType<EventType>} type\n * @param {Transaction} transaction\n * @param {EventType} event\n */ var callTypeObservers = function(type, transaction, event) {\n    var changedType = type;\n    var changedParentTypes = transaction.changedParentTypes;\n    while(true){\n        // @ts-ignore\n        _map.setIfUndefined(changedParentTypes, type, function() {\n            return [];\n        }).push(event);\n        if (type._item === null) break;\n        type = /** @type {AbstractType<any>} */ type._item.parent;\n    }\n    callEventHandlerListeners(changedType._eH, event, transaction);\n};\n/**\n * @template EventType\n * Abstract Yjs Type class\n */ var AbstractType = /*#__PURE__*/ function() {\n    \"use strict\";\n    function AbstractType() {\n        (0, _classCallCheck._)(this, AbstractType);\n        /**\n     * @type {Item|null}\n     */ this._item = null;\n        /**\n     * @type {Map<string,Item>}\n     */ this._map = new Map();\n        /**\n     * @type {Item|null}\n     */ this._start = null;\n        /**\n     * @type {Doc|null}\n     */ this.doc = null;\n        this._length = 0;\n        /**\n     * Event handlers\n     * @type {EventHandler<EventType,Transaction>}\n     */ this._eH = createEventHandler();\n        /**\n     * Deep event handlers\n     * @type {EventHandler<Array<YEvent<any>>,Transaction>}\n     */ this._dEH = createEventHandler();\n        /**\n     * @type {null | Array<ArraySearchMarker>}\n     */ this._searchMarker = null;\n    }\n    (0, _createClass._)(AbstractType, [\n        {\n            key: \"parent\",\n            get: /**\n   * @return {AbstractType<any>|null}\n   */ function get() {\n                return this._item ? /** @type {AbstractType<any>} */ this._item.parent : null;\n            }\n        },\n        {\n            /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item|null} item\n   */ key: \"_integrate\",\n            value: function _integrate(y, item) {\n                this.doc = y;\n                this._item = item;\n            }\n        },\n        {\n            /**\n   * @return {AbstractType<EventType>}\n   */ key: \"_copy\",\n            value: function _copy() {\n                throw _error.methodUnimplemented();\n            }\n        },\n        {\n            /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {AbstractType<EventType>}\n   */ key: \"clone\",\n            value: function clone() {\n                throw _error.methodUnimplemented();\n            }\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} _encoder\n   */ key: \"_write\",\n            value: function _write(_encoder) {}\n        },\n        {\n            key: \"_first\",\n            get: /**\n   * The first non-deleted item\n   */ function get() {\n                var n = this._start;\n                while(n !== null && n.deleted)n = n.right;\n                return n;\n            }\n        },\n        {\n            /**\n   * Creates YEvent and calls all type observers.\n   * Must be implemented by each type.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} _parentSubs Keys changed on this type. `null` if list was modified.\n   */ key: \"_callObserver\",\n            value: function _callObserver(transaction, _parentSubs) {\n                if (!transaction.local && this._searchMarker) this._searchMarker.length = 0;\n            }\n        },\n        {\n            /**\n   * Observe all events that are created on this type.\n   *\n   * @param {function(EventType, Transaction):void} f Observer function\n   */ key: \"observe\",\n            value: function observe(f) {\n                addEventHandlerListener(this._eH, f);\n            }\n        },\n        {\n            /**\n   * Observe all events that are created by this type and its children.\n   *\n   * @param {function(Array<YEvent<any>>,Transaction):void} f Observer function\n   */ key: \"observeDeep\",\n            value: function observeDeep(f) {\n                addEventHandlerListener(this._dEH, f);\n            }\n        },\n        {\n            /**\n   * Unregister an observer function.\n   *\n   * @param {function(EventType,Transaction):void} f Observer function\n   */ key: \"unobserve\",\n            value: function unobserve(f) {\n                removeEventHandlerListener(this._eH, f);\n            }\n        },\n        {\n            /**\n   * Unregister an observer function.\n   *\n   * @param {function(Array<YEvent<any>>,Transaction):void} f Observer function\n   */ key: \"unobserveDeep\",\n            value: function unobserveDeep(f) {\n                removeEventHandlerListener(this._dEH, f);\n            }\n        },\n        {\n            /**\n   * @abstract\n   * @return {any}\n   */ key: \"toJSON\",\n            value: function toJSON() {}\n        }\n    ]);\n    return AbstractType;\n}();\n/**\n * @param {AbstractType<any>} type\n * @param {number} start\n * @param {number} end\n * @return {Array<any>}\n *\n * @private\n * @function\n */ var typeListSlice = function(type, start, end) {\n    var _type_doc;\n    (_type_doc = type.doc) !== null && _type_doc !== void 0 ? _type_doc : warnPrematureAccess();\n    if (start < 0) start = type._length + start;\n    if (end < 0) end = type._length + end;\n    var len = end - start;\n    var cs = [];\n    var n = type._start;\n    while(n !== null && len > 0){\n        if (n.countable && !n.deleted) {\n            var c = n.content.getContent();\n            if (c.length <= start) start -= c.length;\n            else {\n                for(var i = start; i < c.length && len > 0; i++){\n                    cs.push(c[i]);\n                    len--;\n                }\n                start = 0;\n            }\n        }\n        n = n.right;\n    }\n    return cs;\n};\n/**\n * @param {AbstractType<any>} type\n * @return {Array<any>}\n *\n * @private\n * @function\n */ var typeListToArray = function(type) {\n    var _type_doc;\n    (_type_doc = type.doc) !== null && _type_doc !== void 0 ? _type_doc : warnPrematureAccess();\n    var cs = [];\n    var n = type._start;\n    while(n !== null){\n        if (n.countable && !n.deleted) {\n            var c = n.content.getContent();\n            for(var i = 0; i < c.length; i++)cs.push(c[i]);\n        }\n        n = n.right;\n    }\n    return cs;\n};\n/**\n * @param {AbstractType<any>} type\n * @param {Snapshot} snapshot\n * @return {Array<any>}\n *\n * @private\n * @function\n */ var typeListToArraySnapshot = function(type, snapshot) {\n    var cs = [];\n    var n = type._start;\n    while(n !== null){\n        if (n.countable && isVisible(n, snapshot)) {\n            var c = n.content.getContent();\n            for(var i = 0; i < c.length; i++)cs.push(c[i]);\n        }\n        n = n.right;\n    }\n    return cs;\n};\n/**\n * Executes a provided function on once on every element of this YArray.\n *\n * @param {AbstractType<any>} type\n * @param {function(any,number,any):void} f A function to execute on every element of this YArray.\n *\n * @private\n * @function\n */ var typeListForEach = function(type, f) {\n    var index = 0;\n    var n = type._start;\n    var _type_doc;\n    (_type_doc = type.doc) !== null && _type_doc !== void 0 ? _type_doc : warnPrematureAccess();\n    while(n !== null){\n        if (n.countable && !n.deleted) {\n            var c = n.content.getContent();\n            for(var i = 0; i < c.length; i++)f(c[i], index++, type);\n        }\n        n = n.right;\n    }\n};\n/**\n * @template C,R\n * @param {AbstractType<any>} type\n * @param {function(C,number,AbstractType<any>):R} f\n * @return {Array<R>}\n *\n * @private\n * @function\n */ var typeListMap = function(type, f) {\n    /**\n   * @type {Array<any>}\n   */ var result = [];\n    typeListForEach(type, function(c, i) {\n        result.push(f(c, i, type));\n    });\n    return result;\n};\n/**\n * @param {AbstractType<any>} type\n * @return {IterableIterator<any>}\n *\n * @private\n * @function\n */ var typeListCreateIterator = function(type) {\n    var n = type._start;\n    /**\n   * @type {Array<any>|null}\n   */ var currentContent = null;\n    var currentContentIndex = 0;\n    var _obj;\n    return _obj = {}, (0, _defineProperty._)(_obj, Symbol.iterator, function() {\n        return this;\n    }), (0, _defineProperty._)(_obj, \"next\", function() {\n        // find some content\n        if (currentContent === null) {\n            while(n !== null && n.deleted)n = n.right;\n            // check if we reached the end, no need to check currentContent, because it does not exist\n            if (n === null) return {\n                done: true,\n                value: undefined\n            };\n            // we found n, so we can set currentContent\n            currentContent = n.content.getContent();\n            currentContentIndex = 0;\n            n = n.right; // we used the content of n, now iterate to next\n        }\n        var value = currentContent[currentContentIndex++];\n        // check if we need to empty currentContent\n        if (currentContent.length <= currentContentIndex) currentContent = null;\n        return {\n            done: false,\n            value: value\n        };\n    }), _obj;\n};\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @return {any}\n *\n * @private\n * @function\n */ var typeListGet = function(type, index) {\n    var _type_doc;\n    (_type_doc = type.doc) !== null && _type_doc !== void 0 ? _type_doc : warnPrematureAccess();\n    var marker = findMarker(type, index);\n    var n = type._start;\n    if (marker !== null) {\n        n = marker.p;\n        index -= marker.index;\n    }\n    for(; n !== null; n = n.right)if (!n.deleted && n.countable) {\n        if (index < n.length) return n.content.getContent()[index];\n        index -= n.length;\n    }\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {Item?} referenceItem\n * @param {Array<Object<string,any>|Array<any>|boolean|number|null|string|Uint8Array>} content\n *\n * @private\n * @function\n */ var typeListInsertGenericsAfter = function(transaction, parent, referenceItem, content) {\n    var left = referenceItem;\n    var doc = transaction.doc;\n    var ownClientId = doc.clientID;\n    var store = doc.store;\n    var right = referenceItem === null ? parent._start : referenceItem.right;\n    /**\n   * @type {Array<Object|Array<any>|number|null>}\n   */ var jsonContent = [];\n    var packJsonContent = function() {\n        if (jsonContent.length > 0) {\n            left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentAny(jsonContent));\n            left.integrate(transaction, 0);\n            jsonContent = [];\n        }\n    };\n    content.forEach(function(c) {\n        if (c === null) jsonContent.push(c);\n        else switch(c.constructor){\n            case Number:\n            case Object:\n            case Boolean:\n            case Array:\n            case String:\n                jsonContent.push(c);\n                break;\n            default:\n                packJsonContent();\n                switch(c.constructor){\n                    case Uint8Array:\n                    case ArrayBuffer:\n                        left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentBinary(new Uint8Array(/** @type {Uint8Array} */ c)));\n                        left.integrate(transaction, 0);\n                        break;\n                    case Doc:\n                        left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentDoc(/** @type {Doc} */ c));\n                        left.integrate(transaction, 0);\n                        break;\n                    default:\n                        if (c instanceof AbstractType) {\n                            left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentType(c));\n                            left.integrate(transaction, 0);\n                        } else throw new Error(\"Unexpected content type in insert operation\");\n                }\n        }\n    });\n    packJsonContent();\n};\nvar lengthExceeded = function() {\n    return _error.create(\"Length exceeded!\");\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {Array<Object<string,any>|Array<any>|number|null|string|Uint8Array>} content\n *\n * @private\n * @function\n */ var typeListInsertGenerics = function(transaction, parent, index, content) {\n    if (index > parent._length) throw lengthExceeded();\n    if (index === 0) {\n        if (parent._searchMarker) updateMarkerChanges(parent._searchMarker, index, content.length);\n        return typeListInsertGenericsAfter(transaction, parent, null, content);\n    }\n    var startIndex = index;\n    var marker = findMarker(parent, index);\n    var n = parent._start;\n    if (marker !== null) {\n        n = marker.p;\n        index -= marker.index;\n        // we need to iterate one to the left so that the algorithm works\n        if (index === 0) {\n            // @todo refactor this as it actually doesn't consider formats\n            n = n.prev; // important! get the left undeleted item so that we can actually decrease index\n            index += n && n.countable && !n.deleted ? n.length : 0;\n        }\n    }\n    for(; n !== null; n = n.right)if (!n.deleted && n.countable) {\n        if (index <= n.length) {\n            if (index < n.length) // insert in-between\n            getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index));\n            break;\n        }\n        index -= n.length;\n    }\n    if (parent._searchMarker) updateMarkerChanges(parent._searchMarker, startIndex, content.length);\n    return typeListInsertGenericsAfter(transaction, parent, n, content);\n};\n/**\n * Pushing content is special as we generally want to push after the last item. So we don't have to update\n * the serach marker.\n *\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {Array<Object<string,any>|Array<any>|number|null|string|Uint8Array>} content\n *\n * @private\n * @function\n */ var typeListPushGenerics = function(transaction, parent, content) {\n    // Use the marker with the highest index and iterate to the right.\n    var marker = (parent._searchMarker || []).reduce(function(maxMarker, currMarker) {\n        return currMarker.index > maxMarker.index ? currMarker : maxMarker;\n    }, {\n        index: 0,\n        p: parent._start\n    });\n    var n = marker.p;\n    if (n) while(n.right)n = n.right;\n    return typeListInsertGenericsAfter(transaction, parent, n, content);\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {number} length\n *\n * @private\n * @function\n */ var typeListDelete = function(transaction, parent, index, length) {\n    if (length === 0) return;\n    var startIndex = index;\n    var startLength = length;\n    var marker = findMarker(parent, index);\n    var n = parent._start;\n    if (marker !== null) {\n        n = marker.p;\n        index -= marker.index;\n    }\n    // compute the first item to be deleted\n    for(; n !== null && index > 0; n = n.right)if (!n.deleted && n.countable) {\n        if (index < n.length) getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index));\n        index -= n.length;\n    }\n    // delete all items until done\n    while(length > 0 && n !== null){\n        if (!n.deleted) {\n            if (length < n.length) getItemCleanStart(transaction, createID(n.id.client, n.id.clock + length));\n            n[\"delete\"](transaction);\n            length -= n.length;\n        }\n        n = n.right;\n    }\n    if (length > 0) throw lengthExceeded();\n    if (parent._searchMarker) updateMarkerChanges(parent._searchMarker, startIndex, -startLength + length /* in case we remove the above exception */ );\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n *\n * @private\n * @function\n */ var typeMapDelete = function(transaction, parent, key) {\n    var c = parent._map.get(key);\n    if (c !== undefined) c[\"delete\"](transaction);\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Object|number|null|Array<any>|string|Uint8Array|AbstractType<any>} value\n *\n * @private\n * @function\n */ var typeMapSet = function(transaction, parent, key, value) {\n    var left = parent._map.get(key) || null;\n    var doc = transaction.doc;\n    var ownClientId = doc.clientID;\n    var content;\n    if (value == null) content = new ContentAny([\n        value\n    ]);\n    else switch(value.constructor){\n        case Number:\n        case Object:\n        case Boolean:\n        case Array:\n        case String:\n            content = new ContentAny([\n                value\n            ]);\n            break;\n        case Uint8Array:\n            content = new ContentBinary(/** @type {Uint8Array} */ value);\n            break;\n        case Doc:\n            content = new ContentDoc(/** @type {Doc} */ value);\n            break;\n        default:\n            if (value instanceof AbstractType) content = new ContentType(value);\n            else throw new Error(\"Unexpected content type\");\n    }\n    new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, null, null, parent, key, content).integrate(transaction, 0);\n};\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */ var typeMapGet = function(parent, key) {\n    var _parent_doc;\n    (_parent_doc = parent.doc) !== null && _parent_doc !== void 0 ? _parent_doc : warnPrematureAccess();\n    var val = parent._map.get(key);\n    return val !== undefined && !val.deleted ? val.content.getContent()[val.length - 1] : undefined;\n};\n/**\n * @param {AbstractType<any>} parent\n * @return {Object<string,Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined>}\n *\n * @private\n * @function\n */ var typeMapGetAll = function(parent) {\n    /**\n   * @type {Object<string,any>}\n   */ var res = {};\n    var _parent_doc;\n    (_parent_doc = parent.doc) !== null && _parent_doc !== void 0 ? _parent_doc : warnPrematureAccess();\n    parent._map.forEach(function(value, key) {\n        if (!value.deleted) res[key] = value.content.getContent()[value.length - 1];\n    });\n    return res;\n};\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {boolean}\n *\n * @private\n * @function\n */ var typeMapHas = function(parent, key) {\n    var _parent_doc;\n    (_parent_doc = parent.doc) !== null && _parent_doc !== void 0 ? _parent_doc : warnPrematureAccess();\n    var val = parent._map.get(key);\n    return val !== undefined && !val.deleted;\n};\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Snapshot} snapshot\n * @return {Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */ var typeMapGetSnapshot = function(parent, key, snapshot) {\n    var v = parent._map.get(key) || null;\n    while(v !== null && (!snapshot.sv.has(v.id.client) || v.id.clock >= (snapshot.sv.get(v.id.client) || 0)))v = v.left;\n    return v !== null && isVisible(v, snapshot) ? v.content.getContent()[v.length - 1] : undefined;\n};\n/**\n * @param {AbstractType<any>} parent\n * @param {Snapshot} snapshot\n * @return {Object<string,Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined>}\n *\n * @private\n * @function\n */ var typeMapGetAllSnapshot = function(parent, snapshot) {\n    /**\n   * @type {Object<string,any>}\n   */ var res = {};\n    parent._map.forEach(function(value, key) {\n        /**\n     * @type {Item|null}\n     */ var v = value;\n        while(v !== null && (!snapshot.sv.has(v.id.client) || v.id.clock >= (snapshot.sv.get(v.id.client) || 0)))v = v.left;\n        if (v !== null && isVisible(v, snapshot)) res[key] = v.content.getContent()[v.length - 1];\n    });\n    return res;\n};\n/**\n * @param {AbstractType<any> & { _map: Map<string, Item> }} type\n * @return {IterableIterator<Array<any>>}\n *\n * @private\n * @function\n */ var createMapIterator = function(type) {\n    var _type_doc;\n    (_type_doc = type.doc) !== null && _type_doc !== void 0 ? _type_doc : warnPrematureAccess();\n    return _iterator.iteratorFilter(type._map.entries(), /** @param {any} entry */ function(entry) {\n        return !entry[1].deleted;\n    });\n};\n/**\n * @module YArray\n */ /**\n * Event that describes the changes on a YArray\n * @template T\n * @extends YEvent<YArray<T>>\n */ var YArrayEvent = /*#__PURE__*/ function(YEvent) {\n    \"use strict\";\n    (0, _inherits._)(YArrayEvent, YEvent);\n    var _super = (0, _createSuper._)(YArrayEvent);\n    function YArrayEvent() {\n        (0, _classCallCheck._)(this, YArrayEvent);\n        return _super.apply(this, arguments);\n    }\n    return YArrayEvent;\n}(YEvent);\n/**\n * A shared Array implementation.\n * @template T\n * @extends AbstractType<YArrayEvent<T>>\n * @implements {Iterable<T>}\n */ var YArray = /*#__PURE__*/ function(AbstractType1) {\n    \"use strict\";\n    (0, _inherits._)(YArray, AbstractType1);\n    var _super = (0, _createSuper._)(YArray);\n    function YArray() {\n        (0, _classCallCheck._)(this, YArray);\n        var _this;\n        _this = _super.call(this);\n        /**\n     * @type {Array<any>?}\n     * @private\n     */ _this._prelimContent = [];\n        /**\n     * @type {Array<ArraySearchMarker>}\n     */ _this._searchMarker = [];\n        return _this;\n    }\n    (0, _createClass._)(YArray, [\n        {\n            /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */ key: \"_integrate\",\n            value: function _integrate(y, item) {\n                (0, _get._)((0, _getPrototypeOf._)(YArray.prototype), \"_integrate\", this).call(this, y, item);\n                this.insert(0, /** @type {Array<any>} */ this._prelimContent);\n                this._prelimContent = null;\n            }\n        },\n        {\n            /**\n   * @return {YArray<T>}\n   */ key: \"_copy\",\n            value: function _copy() {\n                return new YArray();\n            }\n        },\n        {\n            /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YArray<T>}\n   */ key: \"clone\",\n            value: function clone() {\n                /**\n     * @type {YArray<T>}\n     */ var arr = new YArray();\n                arr.insert(0, this.toArray().map(function(el) {\n                    return el instanceof AbstractType ? /** @type {typeof el} */ el.clone() : el;\n                }));\n                return arr;\n            }\n        },\n        {\n            key: \"length\",\n            get: function get() {\n                var _this_doc;\n                (_this_doc = this.doc) !== null && _this_doc !== void 0 ? _this_doc : warnPrematureAccess();\n                return this._length;\n            }\n        },\n        {\n            /**\n   * Creates YArrayEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */ key: \"_callObserver\",\n            value: function _callObserver(transaction, parentSubs) {\n                (0, _get._)((0, _getPrototypeOf._)(YArray.prototype), \"_callObserver\", this).call(this, transaction, parentSubs);\n                callTypeObservers(this, transaction, new YArrayEvent(this, transaction));\n            }\n        },\n        {\n            /**\n   * Inserts new content at an index.\n   *\n   * Important: This function expects an array of content. Not just a content\n   * object. The reason for this \"weirdness\" is that inserting several elements\n   * is very efficient when it is done as a single operation.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  yarray.insert(0, ['a'])\n   *  // Insert numbers 1, 2 at position 1\n   *  yarray.insert(1, [1, 2])\n   *\n   * @param {number} index The index to insert content at.\n   * @param {Array<T>} content The array of content\n   */ key: \"insert\",\n            value: function insert(index, content) {\n                var _this = this;\n                var /** @type {Array<any>} */ _this__prelimContent;\n                if (this.doc !== null) transact(this.doc, function(transaction) {\n                    typeListInsertGenerics(transaction, _this, index, /** @type {any} */ content);\n                });\n                else (_this__prelimContent = this._prelimContent).splice.apply(_this__prelimContent, [\n                    index,\n                    0\n                ].concat((0, _toConsumableArray._)(content)));\n            }\n        },\n        {\n            /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to append.\n   *\n   * @todo Use the following implementation in all types.\n   */ key: \"push\",\n            value: function push(content) {\n                var _this = this;\n                var /** @type {Array<any>} */ _this__prelimContent;\n                if (this.doc !== null) transact(this.doc, function(transaction) {\n                    typeListPushGenerics(transaction, _this, /** @type {any} */ content);\n                });\n                else (_this__prelimContent = this._prelimContent).push.apply(_this__prelimContent, (0, _toConsumableArray._)(content));\n            }\n        },\n        {\n            /**\n   * Prepends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to prepend.\n   */ key: \"unshift\",\n            value: function unshift(content) {\n                this.insert(0, content);\n            }\n        },\n        {\n            /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} length The number of elements to remove. Defaults to 1.\n   */ key: \"delete\",\n            value: function _delete(index) {\n                var _this = this;\n                var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n                if (this.doc !== null) transact(this.doc, function(transaction) {\n                    typeListDelete(transaction, _this, index, length);\n                });\n                else /** @type {Array<any>} */ this._prelimContent.splice(index, length);\n            }\n        },\n        {\n            /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {T}\n   */ key: \"get\",\n            value: function get(index) {\n                return typeListGet(this, index);\n            }\n        },\n        {\n            /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<T>}\n   */ key: \"toArray\",\n            value: function toArray() {\n                return typeListToArray(this);\n            }\n        },\n        {\n            /**\n   * Returns a portion of this YArray into a JavaScript Array selected\n   * from start to end (end not included).\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @return {Array<T>}\n   */ key: \"slice\",\n            value: function slice() {\n                var start = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, end = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.length;\n                return typeListSlice(this, start, end);\n            }\n        },\n        {\n            /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Array<any>}\n   */ key: \"toJSON\",\n            value: function toJSON() {\n                return this.map(function(c) {\n                    return c instanceof AbstractType ? c.toJSON() : c;\n                });\n            }\n        },\n        {\n            /**\n   * Returns an Array with the result of calling a provided function on every\n   * element of this YArray.\n   *\n   * @template M\n   * @param {function(T,number,YArray<T>):M} f Function that produces an element of the new Array\n   * @return {Array<M>} A new array with each element being the result of the\n   *                 callback function\n   */ key: \"map\",\n            value: function map(f) {\n                return typeListMap(this, /** @type {any} */ f);\n            }\n        },\n        {\n            /**\n   * Executes a provided function once on every element of this YArray.\n   *\n   * @param {function(T,number,YArray<T>):void} f A function to execute on every element of this YArray.\n   */ key: \"forEach\",\n            value: function forEach(f) {\n                typeListForEach(this, f);\n            }\n        },\n        {\n            /**\n   * @return {IterableIterator<T>}\n   */ key: Symbol.iterator,\n            value: function value() {\n                return typeListCreateIterator(this);\n            }\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */ key: \"_write\",\n            value: function _write(encoder) {\n                encoder.writeTypeRef(YArrayRefID);\n            }\n        }\n    ], [\n        {\n            key: \"from\",\n            value: /**\n   * Construct a new YArray containing the specified items.\n   * @template {Object<string,any>|Array<any>|number|null|string|Uint8Array} T\n   * @param {Array<T>} items\n   * @return {YArray<T>}\n   */ function from(items) {\n                /**\n     * @type {YArray<T>}\n     */ var a = new YArray();\n                a.push(items);\n                return a;\n            }\n        }\n    ]);\n    return YArray;\n}(AbstractType);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} _decoder\n *\n * @private\n * @function\n */ var readYArray = function(_decoder) {\n    return new YArray();\n};\n/**\n * @module YMap\n */ /**\n * @template T\n * @extends YEvent<YMap<T>>\n * Event that describes the changes on a YMap.\n */ var YMapEvent = /*#__PURE__*/ function(YEvent) {\n    \"use strict\";\n    (0, _inherits._)(YMapEvent, YEvent);\n    var _super = (0, _createSuper._)(YMapEvent);\n    function YMapEvent(ymap, transaction, subs) {\n        (0, _classCallCheck._)(this, YMapEvent);\n        var _this;\n        _this = _super.call(this, ymap, transaction);\n        _this.keysChanged = subs;\n        return _this;\n    }\n    return YMapEvent;\n}(YEvent);\n/**\n * @template MapType\n * A shared Map implementation.\n *\n * @extends AbstractType<YMapEvent<MapType>>\n * @implements {Iterable<[string, MapType]>}\n */ var YMap = /*#__PURE__*/ function(AbstractType1) {\n    \"use strict\";\n    (0, _inherits._)(YMap, AbstractType1);\n    var _super = (0, _createSuper._)(YMap);\n    function YMap(entries) {\n        (0, _classCallCheck._)(this, YMap);\n        var _this;\n        _this = _super.call(this);\n        /**\n     * @type {Map<string,any>?}\n     * @private\n     */ _this._prelimContent = null;\n        if (entries === undefined) _this._prelimContent = new Map();\n        else _this._prelimContent = new Map(entries);\n        return _this;\n    }\n    (0, _createClass._)(YMap, [\n        {\n            /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */ key: \"_integrate\",\n            value: function _integrate(y, item) {\n                var _this = this;\n                (0, _get._)((0, _getPrototypeOf._)(YMap.prototype), \"_integrate\", this).call(this, y, item); /** @type {Map<string, any>} */ \n                this._prelimContent.forEach(function(value, key) {\n                    _this.set(key, value);\n                });\n                this._prelimContent = null;\n            }\n        },\n        {\n            /**\n   * @return {YMap<MapType>}\n   */ key: \"_copy\",\n            value: function _copy() {\n                return new YMap();\n            }\n        },\n        {\n            /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YMap<MapType>}\n   */ key: \"clone\",\n            value: function clone() {\n                /**\n     * @type {YMap<MapType>}\n     */ var map = new YMap();\n                this.forEach(function(value, key) {\n                    map.set(key, value instanceof AbstractType ? /** @type {typeof value} */ value.clone() : value);\n                });\n                return map;\n            }\n        },\n        {\n            /**\n   * Creates YMapEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */ key: \"_callObserver\",\n            value: function _callObserver(transaction, parentSubs) {\n                callTypeObservers(this, transaction, new YMapEvent(this, transaction, parentSubs));\n            }\n        },\n        {\n            /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Object<string,any>}\n   */ key: \"toJSON\",\n            value: function toJSON() {\n                var _this_doc;\n                (_this_doc = this.doc) !== null && _this_doc !== void 0 ? _this_doc : warnPrematureAccess();\n                /**\n     * @type {Object<string,MapType>}\n     */ var map = {};\n                this._map.forEach(function(item, key) {\n                    if (!item.deleted) {\n                        var v = item.content.getContent()[item.length - 1];\n                        map[key] = v instanceof AbstractType ? v.toJSON() : v;\n                    }\n                });\n                return map;\n            }\n        },\n        {\n            key: \"size\",\n            get: /**\n   * Returns the size of the YMap (count of key/value pairs)\n   *\n   * @return {number}\n   */ function get() {\n                return (0, _toConsumableArray._)(createMapIterator(this)).length;\n            }\n        },\n        {\n            /**\n   * Returns the keys for each element in the YMap Type.\n   *\n   * @return {IterableIterator<string>}\n   */ key: \"keys\",\n            value: function keys() {\n                return _iterator.iteratorMap(createMapIterator(this), /** @param {any} v */ function(v) {\n                    return v[0];\n                });\n            }\n        },\n        {\n            /**\n   * Returns the values for each element in the YMap Type.\n   *\n   * @return {IterableIterator<MapType>}\n   */ key: \"values\",\n            value: function values() {\n                return _iterator.iteratorMap(createMapIterator(this), /** @param {any} v */ function(v) {\n                    return v[1].content.getContent()[v[1].length - 1];\n                });\n            }\n        },\n        {\n            /**\n   * Returns an Iterator of [key, value] pairs\n   *\n   * @return {IterableIterator<[string, MapType]>}\n   */ key: \"entries\",\n            value: function entries() {\n                return _iterator.iteratorMap(createMapIterator(this), /** @param {any} v */ function(v) {\n                    return /** @type {any} */ [\n                        v[0],\n                        v[1].content.getContent()[v[1].length - 1]\n                    ];\n                });\n            }\n        },\n        {\n            /**\n   * Executes a provided function on once on every key-value pair.\n   *\n   * @param {function(MapType,string,YMap<MapType>):void} f A function to execute on every element of this YArray.\n   */ key: \"forEach\",\n            value: function forEach(f) {\n                var _this = this;\n                var _this_doc;\n                (_this_doc = this.doc) !== null && _this_doc !== void 0 ? _this_doc : warnPrematureAccess();\n                this._map.forEach(function(item, key) {\n                    if (!item.deleted) f(item.content.getContent()[item.length - 1], key, _this);\n                });\n            }\n        },\n        {\n            /**\n   * Returns an Iterator of [key, value] pairs\n   *\n   * @return {IterableIterator<[string, MapType]>}\n   */ key: Symbol.iterator,\n            value: function value() {\n                return this.entries();\n            }\n        },\n        {\n            /**\n   * Remove a specified element from this YMap.\n   *\n   * @param {string} key The key of the element to remove.\n   */ key: \"delete\",\n            value: function _delete(key) {\n                var _this = this;\n                if (this.doc !== null) transact(this.doc, function(transaction) {\n                    typeMapDelete(transaction, _this, key);\n                });\n                else /** @type {Map<string, any>} */ this._prelimContent[\"delete\"](key);\n            }\n        },\n        {\n            /**\n   * Adds or updates an element with a specified key and value.\n   * @template {MapType} VAL\n   *\n   * @param {string} key The key of the element to add to this YMap\n   * @param {VAL} value The value of the element to add\n   * @return {VAL}\n   */ key: \"set\",\n            value: function set(key, value) {\n                var _this = this;\n                if (this.doc !== null) transact(this.doc, function(transaction) {\n                    typeMapSet(transaction, _this, key, /** @type {any} */ value);\n                });\n                else /** @type {Map<string, any>} */ this._prelimContent.set(key, value);\n                return value;\n            }\n        },\n        {\n            /**\n   * Returns a specified element from this YMap.\n   *\n   * @param {string} key\n   * @return {MapType|undefined}\n   */ key: \"get\",\n            value: function get(key) {\n                return /** @type {any} */ typeMapGet(this, key);\n            }\n        },\n        {\n            /**\n   * Returns a boolean indicating whether the specified key exists or not.\n   *\n   * @param {string} key The key to test.\n   * @return {boolean}\n   */ key: \"has\",\n            value: function has(key) {\n                return typeMapHas(this, key);\n            }\n        },\n        {\n            /**\n   * Removes all elements from this YMap.\n   */ key: \"clear\",\n            value: function clear() {\n                var _this = this;\n                if (this.doc !== null) transact(this.doc, function(transaction) {\n                    _this.forEach(function(_value, key, map) {\n                        typeMapDelete(transaction, map, key);\n                    });\n                });\n                else /** @type {Map<string, any>} */ this._prelimContent.clear();\n            }\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */ key: \"_write\",\n            value: function _write(encoder) {\n                encoder.writeTypeRef(YMapRefID);\n            }\n        }\n    ]);\n    return YMap;\n}(AbstractType);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} _decoder\n *\n * @private\n * @function\n */ var readYMap = function(_decoder) {\n    return new YMap();\n};\n/**\n * @module YText\n */ /**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */ var equalAttrs = function(a, b) {\n    return a === b || typeof a === \"object\" && typeof b === \"object\" && a && b && _object.equalFlat(a, b);\n};\nvar ItemTextListPosition = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ItemTextListPosition(left, right, index, currentAttributes) {\n        (0, _classCallCheck._)(this, ItemTextListPosition);\n        this.left = left;\n        this.right = right;\n        this.index = index;\n        this.currentAttributes = currentAttributes;\n    }\n    (0, _createClass._)(ItemTextListPosition, [\n        {\n            /**\n   * Only call this if you know that this.right is defined\n   */ key: \"forward\",\n            value: function forward() {\n                if (this.right === null) _error.unexpectedCase();\n                switch(this.right.content.constructor){\n                    case ContentFormat:\n                        if (!this.right.deleted) updateCurrentAttributes(this.currentAttributes, /** @type {ContentFormat} */ this.right.content);\n                        break;\n                    default:\n                        if (!this.right.deleted) this.index += this.right.length;\n                        break;\n                }\n                this.left = this.right;\n                this.right = this.right.right;\n            }\n        }\n    ]);\n    return ItemTextListPosition;\n}();\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} pos\n * @param {number} count steps to move forward\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */ var findNextPosition = function(transaction, pos, count) {\n    while(pos.right !== null && count > 0){\n        switch(pos.right.content.constructor){\n            case ContentFormat:\n                if (!pos.right.deleted) updateCurrentAttributes(pos.currentAttributes, /** @type {ContentFormat} */ pos.right.content);\n                break;\n            default:\n                if (!pos.right.deleted) {\n                    if (count < pos.right.length) // split right\n                    getItemCleanStart(transaction, createID(pos.right.id.client, pos.right.id.clock + count));\n                    pos.index += pos.right.length;\n                    count -= pos.right.length;\n                }\n                break;\n        }\n        pos.left = pos.right;\n        pos.right = pos.right.right;\n    // pos.forward() - we don't forward because that would halve the performance because we already do the checks above\n    }\n    return pos;\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {boolean} useSearchMarker\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */ var findPosition = function(transaction, parent, index, useSearchMarker) {\n    var currentAttributes = new Map();\n    var marker = useSearchMarker ? findMarker(parent, index) : null;\n    if (marker) {\n        var pos = new ItemTextListPosition(marker.p.left, marker.p, marker.index, currentAttributes);\n        return findNextPosition(transaction, pos, index - marker.index);\n    } else {\n        var pos1 = new ItemTextListPosition(null, parent._start, 0, currentAttributes);\n        return findNextPosition(transaction, pos1, index);\n    }\n};\n/**\n * Negate applied formats\n *\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Map<string,any>} negatedAttributes\n *\n * @private\n * @function\n */ var insertNegatedAttributes = function(transaction, parent, currPos, negatedAttributes) {\n    // check if we really need to remove attributes\n    while(currPos.right !== null && (currPos.right.deleted === true || currPos.right.content.constructor === ContentFormat && equalAttrs(negatedAttributes.get(/** @type {ContentFormat} */ currPos.right.content.key), /** @type {ContentFormat} */ currPos.right.content.value))){\n        if (!currPos.right.deleted) negatedAttributes[\"delete\"](/** @type {ContentFormat} */ currPos.right.content.key);\n        currPos.forward();\n    }\n    var doc = transaction.doc;\n    var ownClientId = doc.clientID;\n    negatedAttributes.forEach(function(val, key) {\n        var left = currPos.left;\n        var right = currPos.right;\n        var nextFormat = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));\n        nextFormat.integrate(transaction, 0);\n        currPos.right = nextFormat;\n        currPos.forward();\n    });\n};\n/**\n * @param {Map<string,any>} currentAttributes\n * @param {ContentFormat} format\n *\n * @private\n * @function\n */ var updateCurrentAttributes = function(currentAttributes, format) {\n    var key = format.key, value = format.value;\n    if (value === null) currentAttributes[\"delete\"](key);\n    else currentAttributes.set(key, value);\n};\n/**\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */ var minimizeAttributeChanges = function(currPos, attributes) {\n    // go right while attributes[right.key] === right.value (or right is deleted)\n    while(true){\n        var _attributes_currPos_right_content_key;\n        if (currPos.right === null) break;\n        else if (currPos.right.deleted || currPos.right.content.constructor === ContentFormat && equalAttrs((_attributes_currPos_right_content_key = attributes[/** @type {ContentFormat} */ currPos.right.content.key]) !== null && _attributes_currPos_right_content_key !== void 0 ? _attributes_currPos_right_content_key : null, /** @type {ContentFormat} */ currPos.right.content.value)) ;\n        else break;\n        currPos.forward();\n    }\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n * @return {Map<string,any>}\n *\n * @private\n * @function\n **/ var insertAttributes = function(transaction, parent, currPos, attributes) {\n    var doc = transaction.doc;\n    var ownClientId = doc.clientID;\n    var negatedAttributes = new Map();\n    // insert format-start items\n    for(var key in attributes){\n        var val = attributes[key];\n        var _currPos_currentAttributes_get;\n        var currentVal = (_currPos_currentAttributes_get = currPos.currentAttributes.get(key)) !== null && _currPos_currentAttributes_get !== void 0 ? _currPos_currentAttributes_get : null;\n        if (!equalAttrs(currentVal, val)) {\n            // save negated attribute (set null if currentVal undefined)\n            negatedAttributes.set(key, currentVal);\n            var left = currPos.left, right = currPos.right;\n            currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));\n            currPos.right.integrate(transaction, 0);\n            currPos.forward();\n        }\n    }\n    return negatedAttributes;\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {string|object|AbstractType<any>} text\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n **/ var insertText = function(transaction, parent, currPos, text, attributes) {\n    currPos.currentAttributes.forEach(function(_val, key) {\n        if (attributes[key] === undefined) attributes[key] = null;\n    });\n    var doc = transaction.doc;\n    var ownClientId = doc.clientID;\n    minimizeAttributeChanges(currPos, attributes);\n    var negatedAttributes = insertAttributes(transaction, parent, currPos, attributes);\n    // insert content\n    var content = text.constructor === String ? new ContentString(/** @type {string} */ text) : text instanceof AbstractType ? new ContentType(text) : new ContentEmbed(text);\n    var left = currPos.left, right = currPos.right, index = currPos.index;\n    if (parent._searchMarker) updateMarkerChanges(parent._searchMarker, currPos.index, content.getLength());\n    right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, content);\n    right.integrate(transaction, 0);\n    currPos.right = right;\n    currPos.index = index;\n    currPos.forward();\n    insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */ var formatText = function(transaction, parent, currPos, length, attributes) {\n    var doc = transaction.doc;\n    var ownClientId = doc.clientID;\n    minimizeAttributeChanges(currPos, attributes);\n    var negatedAttributes = insertAttributes(transaction, parent, currPos, attributes);\n    // iterate until first non-format or null is found\n    // delete all formats with attributes[format.key] != null\n    // also check the attributes after the first non-format as we do not want to insert redundant negated attributes there\n    // eslint-disable-next-line no-labels\n    iterationLoop: while(currPos.right !== null && (length > 0 || negatedAttributes.size > 0 && (currPos.right.deleted || currPos.right.content.constructor === ContentFormat))){\n        if (!currPos.right.deleted) switch(currPos.right.content.constructor){\n            case ContentFormat:\n                {\n                    var /** @type {ContentFormat} */ _currPos_right_content = currPos.right.content, key = _currPos_right_content.key, value = _currPos_right_content.value;\n                    var attr = attributes[key];\n                    if (attr !== undefined) {\n                        if (equalAttrs(attr, value)) negatedAttributes[\"delete\"](key);\n                        else {\n                            if (length === 0) break iterationLoop;\n                            negatedAttributes.set(key, value);\n                        }\n                        currPos.right[\"delete\"](transaction);\n                    } else currPos.currentAttributes.set(key, value);\n                    break;\n                }\n            default:\n                if (length < currPos.right.length) getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length));\n                length -= currPos.right.length;\n                break;\n        }\n        currPos.forward();\n    }\n    // Quill just assumes that the editor starts with a newline and that it always\n    // ends with a newline. We only insert that newline when a new newline is\n    // inserted - i.e when length is bigger than type.length\n    if (length > 0) {\n        var newlines = \"\";\n        for(; length > 0; length--)newlines += \"\\n\";\n        currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), currPos.left, currPos.left && currPos.left.lastId, currPos.right, currPos.right && currPos.right.id, parent, null, new ContentString(newlines));\n        currPos.right.integrate(transaction, 0);\n        currPos.forward();\n    }\n    insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);\n};\n/**\n * Call this function after string content has been deleted in order to\n * clean up formatting Items.\n *\n * @param {Transaction} transaction\n * @param {Item} start\n * @param {Item|null} curr exclusive end, automatically iterates to the next Content Item\n * @param {Map<string,any>} startAttributes\n * @param {Map<string,any>} currAttributes\n * @return {number} The amount of formatting Items deleted.\n *\n * @function\n */ var cleanupFormattingGap = function(transaction, start, curr, startAttributes, currAttributes) {\n    /**\n   * @type {Item|null}\n   */ var end = start;\n    /**\n   * @type {Map<string,ContentFormat>}\n   */ var endFormats = _map.create();\n    while(end && (!end.countable || end.deleted)){\n        if (!end.deleted && end.content.constructor === ContentFormat) {\n            var cf = /** @type {ContentFormat} */ end.content;\n            endFormats.set(cf.key, cf);\n        }\n        end = end.right;\n    }\n    var cleanups = 0;\n    var reachedCurr = false;\n    while(start !== end){\n        if (curr === start) reachedCurr = true;\n        if (!start.deleted) {\n            var content = start.content;\n            switch(content.constructor){\n                case ContentFormat:\n                    {\n                        var key = /** @type {ContentFormat} */ content.key, value = content.value;\n                        var _startAttributes_get;\n                        var startAttrValue = (_startAttributes_get = startAttributes.get(key)) !== null && _startAttributes_get !== void 0 ? _startAttributes_get : null;\n                        if (endFormats.get(key) !== content || startAttrValue === value) {\n                            // Either this format is overwritten or it is not necessary because the attribute already existed.\n                            start[\"delete\"](transaction);\n                            cleanups++;\n                            var _currAttributes_get;\n                            if (!reachedCurr && ((_currAttributes_get = currAttributes.get(key)) !== null && _currAttributes_get !== void 0 ? _currAttributes_get : null) === value && startAttrValue !== value) {\n                                if (startAttrValue === null) currAttributes[\"delete\"](key);\n                                else currAttributes.set(key, startAttrValue);\n                            }\n                        }\n                        if (!reachedCurr && !start.deleted) updateCurrentAttributes(currAttributes, /** @type {ContentFormat} */ content);\n                        break;\n                    }\n            }\n        }\n        start = /** @type {Item} */ start.right;\n    }\n    return cleanups;\n};\n/**\n * @param {Transaction} transaction\n * @param {Item | null} item\n */ var cleanupContextlessFormattingGap = function(transaction, item) {\n    // iterate until item.right is null or content\n    while(item && item.right && (item.right.deleted || !item.right.countable))item = item.right;\n    var attrs = new Set();\n    // iterate back until a content item is found\n    while(item && (item.deleted || !item.countable)){\n        if (!item.deleted && item.content.constructor === ContentFormat) {\n            var key = /** @type {ContentFormat} */ item.content.key;\n            if (attrs.has(key)) item[\"delete\"](transaction);\n            else attrs.add(key);\n        }\n        item = item.left;\n    }\n};\n/**\n * This function is experimental and subject to change / be removed.\n *\n * Ideally, we don't need this function at all. Formatting attributes should be cleaned up\n * automatically after each change. This function iterates twice over the complete YText type\n * and removes unnecessary formatting attributes. This is also helpful for testing.\n *\n * This function won't be exported anymore as soon as there is confidence that the YText type works as intended.\n *\n * @param {YText} type\n * @return {number} How many formatting attributes have been cleaned up.\n */ var cleanupYTextFormatting = function(type) {\n    var res = 0;\n    transact(/** @type {Doc} */ type.doc, function(transaction) {\n        var start = /** @type {Item} */ type._start;\n        var end = type._start;\n        var startAttributes = _map.create();\n        var currentAttributes = _map.copy(startAttributes);\n        while(end){\n            if (end.deleted === false) switch(end.content.constructor){\n                case ContentFormat:\n                    updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ end.content);\n                    break;\n                default:\n                    res += cleanupFormattingGap(transaction, start, end, startAttributes, currentAttributes);\n                    startAttributes = _map.copy(currentAttributes);\n                    start = end;\n                    break;\n            }\n            end = end.right;\n        }\n    });\n    return res;\n};\n/**\n * This will be called by the transction once the event handlers are called to potentially cleanup\n * formatting attributes.\n *\n * @param {Transaction} transaction\n */ var cleanupYTextAfterTransaction = function(transaction) {\n    /**\n   * @type {Set<YText>}\n   */ var needFullCleanup = new Set();\n    // check if another formatting item was inserted\n    var doc = transaction.doc;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = transaction.afterState.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var _step_value = (0, _slicedToArray._)(_step.value, 2), client = _step_value[0], afterClock = _step_value[1];\n            var clock = transaction.beforeState.get(client) || 0;\n            if (afterClock === clock) continue;\n            iterateStructs(transaction, /** @type {Array<Item|GC>} */ doc.store.clients.get(client), clock, afterClock, function(item) {\n                if (!item.deleted && /** @type {Item} */ item.content.constructor === ContentFormat && item.constructor !== GC) needFullCleanup.add(/** @type {any} */ item.parent);\n            });\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                _iterator[\"return\"]();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    // cleanup in a new transaction\n    transact(doc, function(t) {\n        iterateDeletedStructs(transaction, transaction.deleteSet, function(item) {\n            if (item instanceof GC || !/** @type {YText} */ item.parent._hasFormatting || needFullCleanup.has(/** @type {YText} */ item.parent)) return;\n            var parent = /** @type {YText} */ item.parent;\n            if (item.content.constructor === ContentFormat) needFullCleanup.add(parent);\n            else // If no formatting attribute was inserted or deleted, we can make due with contextless\n            // formatting cleanups.\n            // Contextless: it is not necessary to compute currentAttributes for the affected position.\n            cleanupContextlessFormattingGap(t, item);\n        });\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            // If a formatting item was inserted, we simply clean the whole type.\n            // We need to compute currentAttributes for the current position anyway.\n            for(var _iterator = needFullCleanup[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var yText = _step.value;\n                cleanupYTextFormatting(yText);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                    _iterator[\"return\"]();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    });\n};\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */ var deleteText = function(transaction, currPos, length) {\n    var startLength = length;\n    var startAttrs = _map.copy(currPos.currentAttributes);\n    var start = currPos.right;\n    while(length > 0 && currPos.right !== null){\n        if (currPos.right.deleted === false) switch(currPos.right.content.constructor){\n            case ContentType:\n            case ContentEmbed:\n            case ContentString:\n                if (length < currPos.right.length) getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length));\n                length -= currPos.right.length;\n                currPos.right[\"delete\"](transaction);\n                break;\n        }\n        currPos.forward();\n    }\n    if (start) cleanupFormattingGap(transaction, start, currPos.right, startAttrs, currPos.currentAttributes);\n    var parent = /** @type {AbstractType<any>} */ /** @type {Item} */ (currPos.left || currPos.right).parent;\n    if (parent._searchMarker) updateMarkerChanges(parent._searchMarker, currPos.index, -startLength + length);\n    return currPos;\n};\n/**\n * The Quill Delta format represents changes on a text document with\n * formatting information. For mor information visit {@link https://quilljs.com/docs/delta/|Quill Delta}\n *\n * @example\n *   {\n *     ops: [\n *       { insert: 'Gandalf', attributes: { bold: true } },\n *       { insert: ' the ' },\n *       { insert: 'Grey', attributes: { color: '#cccccc' } }\n *     ]\n *   }\n *\n */ /**\n  * Attributes that can be assigned to a selection of text.\n  *\n  * @example\n  *   {\n  *     bold: true,\n  *     font-size: '40px'\n  *   }\n  *\n  * @typedef {Object} TextAttributes\n  */ /**\n * @extends YEvent<YText>\n * Event that describes the changes on a YText type.\n */ var YTextEvent = /*#__PURE__*/ function(YEvent) {\n    \"use strict\";\n    (0, _inherits._)(YTextEvent, YEvent);\n    var _super = (0, _createSuper._)(YTextEvent);\n    function YTextEvent(ytext, transaction, subs) {\n        (0, _classCallCheck._)(this, YTextEvent);\n        var _this;\n        _this = _super.call(this, ytext, transaction);\n        /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */ _this.childListChanged = false;\n        /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */ _this.keysChanged = new Set();\n        subs.forEach(function(sub) {\n            if (sub === null) _this.childListChanged = true;\n            else _this.keysChanged.add(sub);\n        });\n        return _this;\n    }\n    (0, _createClass._)(YTextEvent, [\n        {\n            key: \"changes\",\n            get: /**\n   * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}\n   */ function get() {\n                if (this._changes === null) {\n                    /**\n       * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string|AbstractType<any>|object, delete?:number, retain?:number}>}}\n       */ var changes = {\n                        keys: this.keys,\n                        delta: this.delta,\n                        added: new Set(),\n                        deleted: new Set()\n                    };\n                    this._changes = changes;\n                }\n                return /** @type {any} */ this._changes;\n            }\n        },\n        {\n            key: \"delta\",\n            get: /**\n   * Compute the changes in the delta format.\n   * A {@link https://quilljs.com/docs/delta/|Quill Delta}) that represents the changes on the document.\n   *\n   * @type {Array<{insert?:string|object|AbstractType<any>, delete?:number, retain?:number, attributes?: Object<string,any>}>}\n   *\n   * @public\n   */ function get() {\n                var _this = this;\n                if (this._delta === null) {\n                    var y = /** @type {Doc} */ this.target.doc;\n                    /**\n       * @type {Array<{insert?:string|object|AbstractType<any>, delete?:number, retain?:number, attributes?: Object<string,any>}>}\n       */ var delta = [];\n                    transact(y, function(transaction) {\n                        var currentAttributes = new Map(); // saves all current attributes for insert\n                        var oldAttributes = new Map();\n                        var item = _this.target._start;\n                        /**\n         * @type {string?}\n         */ var action = null;\n                        /**\n         * @type {Object<string,any>}\n         */ var attributes = {}; // counts added or removed new attributes for retain\n                        /**\n         * @type {string|object}\n         */ var insert = \"\";\n                        var retain = 0;\n                        var deleteLen = 0;\n                        var addOp = function() {\n                            if (action !== null) {\n                                /**\n             * @type {any}\n             */ var op = null;\n                                switch(action){\n                                    case \"delete\":\n                                        if (deleteLen > 0) op = {\n                                            \"delete\": deleteLen\n                                        };\n                                        deleteLen = 0;\n                                        break;\n                                    case \"insert\":\n                                        if (typeof insert === \"object\" || insert.length > 0) {\n                                            op = {\n                                                insert: insert\n                                            };\n                                            if (currentAttributes.size > 0) {\n                                                op.attributes = {};\n                                                currentAttributes.forEach(function(value, key) {\n                                                    if (value !== null) op.attributes[key] = value;\n                                                });\n                                            }\n                                        }\n                                        insert = \"\";\n                                        break;\n                                    case \"retain\":\n                                        if (retain > 0) {\n                                            op = {\n                                                retain: retain\n                                            };\n                                            if (!_object.isEmpty(attributes)) op.attributes = _object.assign({}, attributes);\n                                        }\n                                        retain = 0;\n                                        break;\n                                }\n                                if (op) delta.push(op);\n                                action = null;\n                            }\n                        };\n                        while(item !== null){\n                            switch(item.content.constructor){\n                                case ContentType:\n                                case ContentEmbed:\n                                    if (_this.adds(item)) {\n                                        if (!_this.deletes(item)) {\n                                            addOp();\n                                            action = \"insert\";\n                                            insert = item.content.getContent()[0];\n                                            addOp();\n                                        }\n                                    } else if (_this.deletes(item)) {\n                                        if (action !== \"delete\") {\n                                            addOp();\n                                            action = \"delete\";\n                                        }\n                                        deleteLen += 1;\n                                    } else if (!item.deleted) {\n                                        if (action !== \"retain\") {\n                                            addOp();\n                                            action = \"retain\";\n                                        }\n                                        retain += 1;\n                                    }\n                                    break;\n                                case ContentString:\n                                    if (_this.adds(item)) {\n                                        if (!_this.deletes(item)) {\n                                            if (action !== \"insert\") {\n                                                addOp();\n                                                action = \"insert\";\n                                            }\n                                            insert += /** @type {ContentString} */ item.content.str;\n                                        }\n                                    } else if (_this.deletes(item)) {\n                                        if (action !== \"delete\") {\n                                            addOp();\n                                            action = \"delete\";\n                                        }\n                                        deleteLen += item.length;\n                                    } else if (!item.deleted) {\n                                        if (action !== \"retain\") {\n                                            addOp();\n                                            action = \"retain\";\n                                        }\n                                        retain += item.length;\n                                    }\n                                    break;\n                                case ContentFormat:\n                                    {\n                                        var /** @type {ContentFormat} */ _item_content = item.content, key = _item_content.key, value = _item_content.value;\n                                        if (_this.adds(item)) {\n                                            if (!_this.deletes(item)) {\n                                                var _currentAttributes_get;\n                                                var curVal = (_currentAttributes_get = currentAttributes.get(key)) !== null && _currentAttributes_get !== void 0 ? _currentAttributes_get : null;\n                                                if (!equalAttrs(curVal, value)) {\n                                                    if (action === \"retain\") addOp();\n                                                    var _oldAttributes_get;\n                                                    if (equalAttrs(value, (_oldAttributes_get = oldAttributes.get(key)) !== null && _oldAttributes_get !== void 0 ? _oldAttributes_get : null)) delete attributes[key];\n                                                    else attributes[key] = value;\n                                                } else if (value !== null) item[\"delete\"](transaction);\n                                            }\n                                        } else if (_this.deletes(item)) {\n                                            oldAttributes.set(key, value);\n                                            var _currentAttributes_get1;\n                                            var curVal1 = (_currentAttributes_get1 = currentAttributes.get(key)) !== null && _currentAttributes_get1 !== void 0 ? _currentAttributes_get1 : null;\n                                            if (!equalAttrs(curVal1, value)) {\n                                                if (action === \"retain\") addOp();\n                                                attributes[key] = curVal1;\n                                            }\n                                        } else if (!item.deleted) {\n                                            oldAttributes.set(key, value);\n                                            var attr = attributes[key];\n                                            if (attr !== undefined) {\n                                                if (!equalAttrs(attr, value)) {\n                                                    if (action === \"retain\") addOp();\n                                                    if (value === null) delete attributes[key];\n                                                    else attributes[key] = value;\n                                                } else if (attr !== null) item[\"delete\"](transaction);\n                                            }\n                                        }\n                                        if (!item.deleted) {\n                                            if (action === \"insert\") addOp();\n                                            updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ item.content);\n                                        }\n                                        break;\n                                    }\n                            }\n                            item = item.right;\n                        }\n                        addOp();\n                        while(delta.length > 0){\n                            var lastOp = delta[delta.length - 1];\n                            if (lastOp.retain !== undefined && lastOp.attributes === undefined) // retain delta's if they don't assign attributes\n                            delta.pop();\n                            else break;\n                        }\n                    });\n                    this._delta = delta;\n                }\n                return /** @type {any} */ this._delta;\n            }\n        }\n    ]);\n    return YTextEvent;\n}(YEvent);\n/**\n * Type that represents text with formatting information.\n *\n * This type replaces y-richtext as this implementation is able to handle\n * block formats (format information on a paragraph), embeds (complex elements\n * like pictures and videos), and text formats (**bold**, *italic*).\n *\n * @extends AbstractType<YTextEvent>\n */ var YText = /*#__PURE__*/ function(AbstractType) {\n    \"use strict\";\n    (0, _inherits._)(YText, AbstractType);\n    var _super = (0, _createSuper._)(YText);\n    function YText(string) {\n        (0, _classCallCheck._)(this, YText);\n        var _this;\n        _this = _super.call(this);\n        /**\n     * Array of pending operations on this type\n     * @type {Array<function():void>?}\n     */ _this._pending = string !== undefined ? [\n            function() {\n                return _this.insert(0, string);\n            }\n        ] : [];\n        /**\n     * @type {Array<ArraySearchMarker>|null}\n     */ _this._searchMarker = [];\n        /**\n     * Whether this YText contains formatting attributes.\n     * This flag is updated when a formatting item is integrated (see ContentFormat.integrate)\n     */ _this._hasFormatting = false;\n        return _this;\n    }\n    (0, _createClass._)(YText, [\n        {\n            key: \"length\",\n            get: /**\n   * Number of characters of this text type.\n   *\n   * @type {number}\n   */ function get() {\n                var _this_doc;\n                (_this_doc = this.doc) !== null && _this_doc !== void 0 ? _this_doc : warnPrematureAccess();\n                return this._length;\n            }\n        },\n        {\n            /**\n   * @param {Doc} y\n   * @param {Item} item\n   */ key: \"_integrate\",\n            value: function _integrate(y, item) {\n                (0, _get._)((0, _getPrototypeOf._)(YText.prototype), \"_integrate\", this).call(this, y, item);\n                try {\n                    /** @type {Array<function>} */ this._pending.forEach(function(f) {\n                        return f();\n                    });\n                } catch (e) {\n                    console.error(e);\n                }\n                this._pending = null;\n            }\n        },\n        {\n            key: \"_copy\",\n            value: function _copy() {\n                return new YText();\n            }\n        },\n        {\n            /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YText}\n   */ key: \"clone\",\n            value: function clone() {\n                var text = new YText();\n                text.applyDelta(this.toDelta());\n                return text;\n            }\n        },\n        {\n            /**\n   * Creates YTextEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */ key: \"_callObserver\",\n            value: function _callObserver(transaction, parentSubs) {\n                (0, _get._)((0, _getPrototypeOf._)(YText.prototype), \"_callObserver\", this).call(this, transaction, parentSubs);\n                var event = new YTextEvent(this, transaction, parentSubs);\n                callTypeObservers(this, transaction, event);\n                // If a remote change happened, we try to cleanup potential formatting duplicates.\n                if (!transaction.local && this._hasFormatting) transaction._needFormattingCleanup = true;\n            }\n        },\n        {\n            /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @public\n   */ key: \"toString\",\n            value: function toString() {\n                var _this_doc;\n                (_this_doc = this.doc) !== null && _this_doc !== void 0 ? _this_doc : warnPrematureAccess();\n                var str = \"\";\n                /**\n     * @type {Item|null}\n     */ var n = this._start;\n                while(n !== null){\n                    if (!n.deleted && n.countable && n.content.constructor === ContentString) str += /** @type {ContentString} */ n.content.str;\n                    n = n.right;\n                }\n                return str;\n            }\n        },\n        {\n            /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @return {string}\n   * @public\n   */ key: \"toJSON\",\n            value: function toJSON() {\n                return this.toString();\n            }\n        },\n        {\n            /**\n   * Apply a {@link Delta} on this shared YText type.\n   *\n   * @param {any} delta The changes to apply on this element.\n   * @param {object}  opts\n   * @param {boolean} [opts.sanitize] Sanitize input delta. Removes ending newlines if set to true.\n   *\n   *\n   * @public\n   */ key: \"applyDelta\",\n            value: function applyDelta(delta) {\n                var _this = this;\n                var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref_sanitize = _ref.sanitize, sanitize = _ref_sanitize === void 0 ? true : _ref_sanitize;\n                if (this.doc !== null) transact(this.doc, function(transaction) {\n                    var currPos = new ItemTextListPosition(null, _this._start, 0, new Map());\n                    for(var i = 0; i < delta.length; i++){\n                        var op = delta[i];\n                        if (op.insert !== undefined) {\n                            // Quill assumes that the content starts with an empty paragraph.\n                            // Yjs/Y.Text assumes that it starts empty. We always hide that\n                            // there is a newline at the end of the content.\n                            // If we omit this step, clients will see a different number of\n                            // paragraphs, but nothing bad will happen.\n                            var ins = !sanitize && typeof op.insert === \"string\" && i === delta.length - 1 && currPos.right === null && op.insert.slice(-1) === \"\\n\" ? op.insert.slice(0, -1) : op.insert;\n                            if (typeof ins !== \"string\" || ins.length > 0) insertText(transaction, _this, currPos, ins, op.attributes || {});\n                        } else if (op.retain !== undefined) formatText(transaction, _this, currPos, op.retain, op.attributes || {});\n                        else if (op[\"delete\"] !== undefined) deleteText(transaction, currPos, op[\"delete\"]);\n                    }\n                });\n                else /** @type {Array<function>} */ this._pending.push(function() {\n                    return _this.applyDelta(delta);\n                });\n            }\n        },\n        {\n            /**\n   * Returns the Delta representation of this YText type.\n   *\n   * @param {Snapshot} [snapshot]\n   * @param {Snapshot} [prevSnapshot]\n   * @param {function('removed' | 'added', ID):any} [computeYChange]\n   * @return {any} The Delta representation of this type.\n   *\n   * @public\n   */ key: \"toDelta\",\n            value: function toDelta(snapshot, prevSnapshot, computeYChange) {\n                var _this_doc;\n                (_this_doc = this.doc) !== null && _this_doc !== void 0 ? _this_doc : warnPrematureAccess();\n                /**\n     * @type{Array<any>}\n     */ var ops = [];\n                var currentAttributes = new Map();\n                var doc = /** @type {Doc} */ this.doc;\n                var str = \"\";\n                var n = this._start;\n                function packStr() {\n                    if (str.length > 0) {\n                        // pack str with attributes to ops\n                        /**\n         * @type {Object<string,any>}\n         */ var attributes = {};\n                        var addAttributes = false;\n                        currentAttributes.forEach(function(value, key) {\n                            addAttributes = true;\n                            attributes[key] = value;\n                        });\n                        /**\n         * @type {Object<string,any>}\n         */ var op = {\n                            insert: str\n                        };\n                        if (addAttributes) op.attributes = attributes;\n                        ops.push(op);\n                        str = \"\";\n                    }\n                }\n                var computeDelta = function() {\n                    var _loop = function() {\n                        if (isVisible(n, snapshot) || prevSnapshot !== undefined && isVisible(n, prevSnapshot)) switch(n.content.constructor){\n                            case ContentString:\n                                {\n                                    var cur = currentAttributes.get(\"ychange\");\n                                    if (snapshot !== undefined && !isVisible(n, snapshot)) {\n                                        if (cur === undefined || cur.user !== n.id.client || cur.type !== \"removed\") {\n                                            packStr();\n                                            currentAttributes.set(\"ychange\", computeYChange ? computeYChange(\"removed\", n.id) : {\n                                                type: \"removed\"\n                                            });\n                                        }\n                                    } else if (prevSnapshot !== undefined && !isVisible(n, prevSnapshot)) {\n                                        if (cur === undefined || cur.user !== n.id.client || cur.type !== \"added\") {\n                                            packStr();\n                                            currentAttributes.set(\"ychange\", computeYChange ? computeYChange(\"added\", n.id) : {\n                                                type: \"added\"\n                                            });\n                                        }\n                                    } else if (cur !== undefined) {\n                                        packStr();\n                                        currentAttributes[\"delete\"](\"ychange\");\n                                    }\n                                    str += /** @type {ContentString} */ n.content.str;\n                                    break;\n                                }\n                            case ContentType:\n                            case ContentEmbed:\n                                {\n                                    packStr();\n                                    /**\n               * @type {Object<string,any>}\n               */ var op = {\n                                        insert: n.content.getContent()[0]\n                                    };\n                                    if (currentAttributes.size > 0) {\n                                        var attrs = /** @type {Object<string,any>} */ {};\n                                        op.attributes = attrs;\n                                        currentAttributes.forEach(function(value, key) {\n                                            attrs[key] = value;\n                                        });\n                                    }\n                                    ops.push(op);\n                                    break;\n                                }\n                            case ContentFormat:\n                                if (isVisible(n, snapshot)) {\n                                    packStr();\n                                    updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ n.content);\n                                }\n                                break;\n                        }\n                        n = n.right;\n                    };\n                    while(n !== null)_loop();\n                    packStr();\n                };\n                if (snapshot || prevSnapshot) // snapshots are merged again after the transaction, so we need to keep the\n                // transaction alive until we are done\n                transact(doc, function(transaction) {\n                    if (snapshot) splitSnapshotAffectedStructs(transaction, snapshot);\n                    if (prevSnapshot) splitSnapshotAffectedStructs(transaction, prevSnapshot);\n                    computeDelta();\n                }, \"cleanup\");\n                else computeDelta();\n                return ops;\n            }\n        },\n        {\n            /**\n   * Insert text at a given index.\n   *\n   * @param {number} index The index at which to start inserting.\n   * @param {String} text The text to insert at the specified position.\n   * @param {TextAttributes} [attributes] Optionally define some formatting\n   *                                    information to apply on the inserted\n   *                                    Text.\n   * @public\n   */ key: \"insert\",\n            value: function insert(index, text, attributes) {\n                var _this = this;\n                if (text.length <= 0) return;\n                var y = this.doc;\n                if (y !== null) transact(y, function(transaction) {\n                    var pos = findPosition(transaction, _this, index, !attributes);\n                    if (!attributes) {\n                        attributes = {};\n                        // @ts-ignore\n                        pos.currentAttributes.forEach(function(v, k) {\n                            attributes[k] = v;\n                        });\n                    }\n                    insertText(transaction, _this, pos, text, attributes);\n                });\n                else /** @type {Array<function>} */ this._pending.push(function() {\n                    return _this.insert(index, text, attributes);\n                });\n            }\n        },\n        {\n            /**\n   * Inserts an embed at a index.\n   *\n   * @param {number} index The index to insert the embed at.\n   * @param {Object | AbstractType<any>} embed The Object that represents the embed.\n   * @param {TextAttributes} [attributes] Attribute information to apply on the\n   *                                    embed\n   *\n   * @public\n   */ key: \"insertEmbed\",\n            value: function insertEmbed(index, embed, attributes) {\n                var _this = this;\n                var y = this.doc;\n                if (y !== null) transact(y, function(transaction) {\n                    var pos = findPosition(transaction, _this, index, !attributes);\n                    insertText(transaction, _this, pos, embed, attributes || {});\n                });\n                else /** @type {Array<function>} */ this._pending.push(function() {\n                    return _this.insertEmbed(index, embed, attributes || {});\n                });\n            }\n        },\n        {\n            /**\n   * Deletes text starting from an index.\n   *\n   * @param {number} index Index at which to start deleting.\n   * @param {number} length The number of characters to remove. Defaults to 1.\n   *\n   * @public\n   */ key: \"delete\",\n            value: function _delete(index, length) {\n                var _this = this;\n                if (length === 0) return;\n                var y = this.doc;\n                if (y !== null) transact(y, function(transaction) {\n                    deleteText(transaction, findPosition(transaction, _this, index, true), length);\n                });\n                else /** @type {Array<function>} */ this._pending.push(function() {\n                    return _this[\"delete\"](index, length);\n                });\n            }\n        },\n        {\n            /**\n   * Assigns properties to a range of text.\n   *\n   * @param {number} index The position where to start formatting.\n   * @param {number} length The amount of characters to assign properties to.\n   * @param {TextAttributes} attributes Attribute information to apply on the\n   *                                    text.\n   *\n   * @public\n   */ key: \"format\",\n            value: function format(index, length, attributes) {\n                var _this = this;\n                if (length === 0) return;\n                var y = this.doc;\n                if (y !== null) transact(y, function(transaction) {\n                    var pos = findPosition(transaction, _this, index, false);\n                    if (pos.right === null) return;\n                    formatText(transaction, _this, pos, length, attributes);\n                });\n                else /** @type {Array<function>} */ this._pending.push(function() {\n                    return _this.format(index, length, attributes);\n                });\n            }\n        },\n        {\n            /**\n   * Removes an attribute.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */ key: \"removeAttribute\",\n            value: function removeAttribute(attributeName) {\n                var _this = this;\n                if (this.doc !== null) transact(this.doc, function(transaction) {\n                    typeMapDelete(transaction, _this, attributeName);\n                });\n                else /** @type {Array<function>} */ this._pending.push(function() {\n                    return _this.removeAttribute(attributeName);\n                });\n            }\n        },\n        {\n            /**\n   * Sets or updates an attribute.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that is to be set.\n   * @param {any} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */ key: \"setAttribute\",\n            value: function setAttribute(attributeName, attributeValue) {\n                var _this = this;\n                if (this.doc !== null) transact(this.doc, function(transaction) {\n                    typeMapSet(transaction, _this, attributeName, attributeValue);\n                });\n                else /** @type {Array<function>} */ this._pending.push(function() {\n                    return _this.setAttribute(attributeName, attributeValue);\n                });\n            }\n        },\n        {\n            /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {any} The queried attribute value.\n   *\n   * @public\n   */ key: \"getAttribute\",\n            value: function getAttribute(attributeName) {\n                return /** @type {any} */ typeMapGet(this, attributeName);\n            }\n        },\n        {\n            /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @return {Object<string, any>} A JSON Object that describes the attributes.\n   *\n   * @public\n   */ key: \"getAttributes\",\n            value: function getAttributes() {\n                return typeMapGetAll(this);\n            }\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */ key: \"_write\",\n            value: function _write(encoder) {\n                encoder.writeTypeRef(YTextRefID);\n            }\n        }\n    ]);\n    return YText;\n}(AbstractType);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} _decoder\n * @return {YText}\n *\n * @private\n * @function\n */ var readYText = function(_decoder) {\n    return new YText();\n};\n/**\n * @module YXml\n */ /**\n * Define the elements to which a set of CSS queries apply.\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}\n *\n * @example\n *   query = '.classSelector'\n *   query = 'nodeSelector'\n *   query = '#idSelector'\n *\n * @typedef {string} CSS_Selector\n */ /**\n * Dom filter function.\n *\n * @callback domFilter\n * @param {string} nodeName The nodeName of the element\n * @param {Map} attributes The map of attributes.\n * @return {boolean} Whether to include the Dom node in the YXmlElement.\n */ /**\n * Represents a subset of the nodes of a YXmlElement / YXmlFragment and a\n * position within them.\n *\n * Can be created with {@link YXmlFragment#createTreeWalker}\n *\n * @public\n * @implements {Iterable<YXmlElement|YXmlText|YXmlElement|YXmlHook>}\n */ var YXmlTreeWalker = /*#__PURE__*/ function() {\n    \"use strict\";\n    function YXmlTreeWalker(root) {\n        var f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {\n            return true;\n        };\n        (0, _classCallCheck._)(this, YXmlTreeWalker);\n        this._filter = f;\n        this._root = root;\n        /**\n     * @type {Item}\n     */ this._currentNode = /** @type {Item} */ root._start;\n        this._firstCall = true;\n        var _root_doc;\n        (_root_doc = root.doc) !== null && _root_doc !== void 0 ? _root_doc : warnPrematureAccess();\n    }\n    (0, _createClass._)(YXmlTreeWalker, [\n        {\n            key: Symbol.iterator,\n            value: function value() {\n                return this;\n            }\n        },\n        {\n            /**\n   * Get the next node.\n   *\n   * @return {IteratorResult<YXmlElement|YXmlText|YXmlHook>} The next node.\n   *\n   * @public\n   */ key: \"next\",\n            value: function next() {\n                /**\n     * @type {Item|null}\n     */ var n = this._currentNode;\n                var type = n && n.content && /** @type {any} */ n.content.type;\n                if (n !== null && (!this._firstCall || n.deleted || !this._filter(type))) do {\n                    type = /** @type {any} */ n.content.type;\n                    if (!n.deleted && (type.constructor === YXmlElement || type.constructor === YXmlFragment) && type._start !== null) // walk down in the tree\n                    n = type._start;\n                    else // walk right or up in the tree\n                    while(n !== null){\n                        if (n.right !== null) {\n                            n = n.right;\n                            break;\n                        } else if (n.parent === this._root) n = null;\n                        else n = /** @type {AbstractType<any>} */ n.parent._item;\n                    }\n                }while (n !== null && (n.deleted || !this._filter(/** @type {ContentType} */ n.content.type)));\n                this._firstCall = false;\n                if (n === null) // @ts-ignore\n                return {\n                    value: undefined,\n                    done: true\n                };\n                this._currentNode = n;\n                return {\n                    value: /** @type {any} */ n.content.type,\n                    done: false\n                };\n            }\n        }\n    ]);\n    return YXmlTreeWalker;\n}();\n/**\n * Represents a list of {@link YXmlElement}.and {@link YXmlText} types.\n * A YxmlFragment is similar to a {@link YXmlElement}, but it does not have a\n * nodeName and it does not have attributes. Though it can be bound to a DOM\n * element - in this case the attributes and the nodeName are not shared.\n *\n * @public\n * @extends AbstractType<YXmlEvent>\n */ var YXmlFragment = /*#__PURE__*/ function(AbstractType1) {\n    \"use strict\";\n    (0, _inherits._)(YXmlFragment, AbstractType1);\n    var _super = (0, _createSuper._)(YXmlFragment);\n    function YXmlFragment() {\n        (0, _classCallCheck._)(this, YXmlFragment);\n        var _this;\n        _this = _super.call(this);\n        /**\n     * @type {Array<any>|null}\n     */ _this._prelimContent = [];\n        return _this;\n    }\n    (0, _createClass._)(YXmlFragment, [\n        {\n            key: \"firstChild\",\n            get: /**\n   * @type {YXmlElement|YXmlText|null}\n   */ function get() {\n                var first = this._first;\n                return first ? first.content.getContent()[0] : null;\n            }\n        },\n        {\n            /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */ key: \"_integrate\",\n            value: function _integrate(y, item) {\n                (0, _get._)((0, _getPrototypeOf._)(YXmlFragment.prototype), \"_integrate\", this).call(this, y, item);\n                this.insert(0, /** @type {Array<any>} */ this._prelimContent);\n                this._prelimContent = null;\n            }\n        },\n        {\n            key: \"_copy\",\n            value: function _copy() {\n                return new YXmlFragment();\n            }\n        },\n        {\n            /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YXmlFragment}\n   */ key: \"clone\",\n            value: function clone() {\n                var el = new YXmlFragment();\n                // @ts-ignore\n                el.insert(0, this.toArray().map(function(item) {\n                    return item instanceof AbstractType ? item.clone() : item;\n                }));\n                return el;\n            }\n        },\n        {\n            key: \"length\",\n            get: function get() {\n                var _this_doc;\n                (_this_doc = this.doc) !== null && _this_doc !== void 0 ? _this_doc : warnPrematureAccess();\n                return this._prelimContent === null ? this._length : this._prelimContent.length;\n            }\n        },\n        {\n            /**\n   * Create a subtree of childNodes.\n   *\n   * @example\n   * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')\n   * for (let node in walker) {\n   *   // `node` is a div node\n   *   nop(node)\n   * }\n   *\n   * @param {function(AbstractType<any>):boolean} filter Function that is called on each child element and\n   *                          returns a Boolean indicating whether the child\n   *                          is to be included in the subtree.\n   * @return {YXmlTreeWalker} A subtree and a position within it.\n   *\n   * @public\n   */ key: \"createTreeWalker\",\n            value: function createTreeWalker(filter) {\n                return new YXmlTreeWalker(this, filter);\n            }\n        },\n        {\n            /**\n   * Returns the first YXmlElement that matches the query.\n   * Similar to DOM's {@link querySelector}.\n   *\n   * Query support:\n   *   - tagname\n   * TODO:\n   *   - id\n   *   - attribute\n   *\n   * @param {CSS_Selector} query The query on the children.\n   * @return {YXmlElement|YXmlText|YXmlHook|null} The first element that matches the query or null.\n   *\n   * @public\n   */ key: \"querySelector\",\n            value: function querySelector(query) {\n                query = query.toUpperCase();\n                // @ts-ignore\n                var iterator = new YXmlTreeWalker(this, function(element) {\n                    return element.nodeName && element.nodeName.toUpperCase() === query;\n                });\n                var next = iterator.next();\n                if (next.done) return null;\n                else return next.value;\n            }\n        },\n        {\n            /**\n   * Returns all YXmlElements that match the query.\n   * Similar to Dom's {@link querySelectorAll}.\n   *\n   * @todo Does not yet support all queries. Currently only query by tagName.\n   *\n   * @param {CSS_Selector} query The query on the children\n   * @return {Array<YXmlElement|YXmlText|YXmlHook|null>} The elements that match this query.\n   *\n   * @public\n   */ key: \"querySelectorAll\",\n            value: function querySelectorAll(query) {\n                query = query.toUpperCase();\n                // @ts-ignore\n                return _array.from(new YXmlTreeWalker(this, function(element) {\n                    return element.nodeName && element.nodeName.toUpperCase() === query;\n                }));\n            }\n        },\n        {\n            /**\n   * Creates YXmlEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */ key: \"_callObserver\",\n            value: function _callObserver(transaction, parentSubs) {\n                callTypeObservers(this, transaction, new YXmlEvent(this, parentSubs, transaction));\n            }\n        },\n        {\n            /**\n   * Get the string representation of all the children of this YXmlFragment.\n   *\n   * @return {string} The string representation of all children.\n   */ key: \"toString\",\n            value: function toString() {\n                return typeListMap(this, function(xml) {\n                    return xml.toString();\n                }).join(\"\");\n            }\n        },\n        {\n            /**\n   * @return {string}\n   */ key: \"toJSON\",\n            value: function toJSON() {\n                return this.toString();\n            }\n        },\n        {\n            /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */ key: \"toDOM\",\n            value: function toDOM() {\n                var _document = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document, hooks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, binding = arguments.length > 2 ? arguments[2] : void 0;\n                var fragment = _document.createDocumentFragment();\n                if (binding !== undefined) binding._createAssociation(fragment, this);\n                typeListForEach(this, function(xmlType) {\n                    fragment.insertBefore(xmlType.toDOM(_document, hooks, binding), null);\n                });\n                return fragment;\n            }\n        },\n        {\n            /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {number} index The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */ key: \"insert\",\n            value: function insert(index, content) {\n                var _this = this;\n                var // @ts-ignore _prelimContent is defined because this is not yet integrated\n                _this__prelimContent;\n                if (this.doc !== null) transact(this.doc, function(transaction) {\n                    typeListInsertGenerics(transaction, _this, index, content);\n                });\n                else (_this__prelimContent = this._prelimContent).splice.apply(_this__prelimContent, [\n                    index,\n                    0\n                ].concat((0, _toConsumableArray._)(content)));\n            }\n        },\n        {\n            /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {null|Item|YXmlElement|YXmlText} ref The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */ key: \"insertAfter\",\n            value: function insertAfter(ref, content) {\n                var _this = this;\n                if (this.doc !== null) transact(this.doc, function(transaction) {\n                    var refItem = ref && ref instanceof AbstractType ? ref._item : ref;\n                    typeListInsertGenericsAfter(transaction, _this, refItem, content);\n                });\n                else {\n                    var _pc;\n                    var pc = /** @type {Array<any>} */ this._prelimContent;\n                    var index = ref === null ? 0 : pc.findIndex(function(el) {\n                        return el === ref;\n                    }) + 1;\n                    if (index === 0 && ref !== null) throw _error.create(\"Reference item not found\");\n                    (_pc = pc).splice.apply(_pc, [\n                        index,\n                        0\n                    ].concat((0, _toConsumableArray._)(content)));\n                }\n            }\n        },\n        {\n            /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} [length=1] The number of elements to remove. Defaults to 1.\n   */ key: \"delete\",\n            value: function _delete(index) {\n                var _this = this;\n                var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n                if (this.doc !== null) transact(this.doc, function(transaction) {\n                    typeListDelete(transaction, _this, index, length);\n                });\n                else // @ts-ignore _prelimContent is defined because this is not yet integrated\n                this._prelimContent.splice(index, length);\n            }\n        },\n        {\n            /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<YXmlElement|YXmlText|YXmlHook>}\n   */ key: \"toArray\",\n            value: function toArray() {\n                return typeListToArray(this);\n            }\n        },\n        {\n            /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<YXmlElement|YXmlText>} content Array of content to append.\n   */ key: \"push\",\n            value: function push(content) {\n                this.insert(this.length, content);\n            }\n        },\n        {\n            /**\n   * Prepends content to this YArray.\n   *\n   * @param {Array<YXmlElement|YXmlText>} content Array of content to prepend.\n   */ key: \"unshift\",\n            value: function unshift(content) {\n                this.insert(0, content);\n            }\n        },\n        {\n            /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {YXmlElement|YXmlText}\n   */ key: \"get\",\n            value: function get(index) {\n                return typeListGet(this, index);\n            }\n        },\n        {\n            /**\n   * Returns a portion of this YXmlFragment into a JavaScript Array selected\n   * from start to end (end not included).\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @return {Array<YXmlElement|YXmlText>}\n   */ key: \"slice\",\n            value: function slice() {\n                var start = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, end = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.length;\n                return typeListSlice(this, start, end);\n            }\n        },\n        {\n            /**\n   * Executes a provided function on once on every child element.\n   *\n   * @param {function(YXmlElement|YXmlText,number, typeof self):void} f A function to execute on every element of this YArray.\n   */ key: \"forEach\",\n            value: function forEach(f) {\n                typeListForEach(this, f);\n            }\n        },\n        {\n            /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */ key: \"_write\",\n            value: function _write(encoder) {\n                encoder.writeTypeRef(YXmlFragmentRefID);\n            }\n        }\n    ]);\n    return YXmlFragment;\n}(AbstractType);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} _decoder\n * @return {YXmlFragment}\n *\n * @private\n * @function\n */ var readYXmlFragment = function(_decoder) {\n    return new YXmlFragment();\n};\n/**\n * @typedef {Object|number|null|Array<any>|string|Uint8Array|AbstractType<any>} ValueTypes\n */ /**\n * An YXmlElement imitates the behavior of a\n * https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element\n *\n * * An YXmlElement has attributes (key value pairs)\n * * An YXmlElement has childElements that must inherit from YXmlElement\n *\n * @template {{ [key: string]: ValueTypes }} [KV={ [key: string]: string }]\n */ var YXmlElement = /*#__PURE__*/ function(YXmlFragment) {\n    \"use strict\";\n    (0, _inherits._)(YXmlElement, YXmlFragment);\n    var _super = (0, _createSuper._)(YXmlElement);\n    function YXmlElement() {\n        var nodeName = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"UNDEFINED\";\n        (0, _classCallCheck._)(this, YXmlElement);\n        var _this;\n        _this = _super.call(this);\n        _this.nodeName = nodeName;\n        /**\n     * @type {Map<string, any>|null}\n     */ _this._prelimAttrs = new Map();\n        return _this;\n    }\n    (0, _createClass._)(YXmlElement, [\n        {\n            key: \"nextSibling\",\n            get: /**\n   * @type {YXmlElement|YXmlText|null}\n   */ function get() {\n                var n = this._item ? this._item.next : null;\n                return n ? /** @type {YXmlElement|YXmlText} */ /** @type {ContentType} */ n.content.type : null;\n            }\n        },\n        {\n            key: \"prevSibling\",\n            get: /**\n   * @type {YXmlElement|YXmlText|null}\n   */ function get() {\n                var n = this._item ? this._item.prev : null;\n                return n ? /** @type {YXmlElement|YXmlText} */ /** @type {ContentType} */ n.content.type : null;\n            }\n        },\n        {\n            /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */ key: \"_integrate\",\n            value: function _integrate(y, item) {\n                var _this = this;\n                (0, _get._)((0, _getPrototypeOf._)(YXmlElement.prototype), \"_integrate\", this).call(this, y, item);\n                /** @type {Map<string, any>} */ this._prelimAttrs.forEach(function(value, key) {\n                    _this.setAttribute(key, value);\n                });\n                this._prelimAttrs = null;\n            }\n        },\n        {\n            /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   *\n   * @return {YXmlElement}\n   */ key: \"_copy\",\n            value: function _copy() {\n                return new YXmlElement(this.nodeName);\n            }\n        },\n        {\n            /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YXmlElement<KV>}\n   */ key: \"clone\",\n            value: function clone() {\n                /**\n     * @type {YXmlElement<KV>}\n     */ var el = new YXmlElement(this.nodeName);\n                var attrs = this.getAttributes();\n                _object.forEach(attrs, function(value, key) {\n                    if (typeof value === \"string\") el.setAttribute(key, value);\n                });\n                // @ts-ignore\n                el.insert(0, this.toArray().map(function(item) {\n                    return item instanceof AbstractType ? item.clone() : item;\n                }));\n                return el;\n            }\n        },\n        {\n            /**\n   * Returns the XML serialization of this YXmlElement.\n   * The attributes are ordered by attribute-name, so you can easily use this\n   * method to compare YXmlElements\n   *\n   * @return {string} The string representation of this type.\n   *\n   * @public\n   */ key: \"toString\",\n            value: function toString() {\n                var attrs = this.getAttributes();\n                var stringBuilder = [];\n                var keys = [];\n                for(var key in attrs)keys.push(key);\n                keys.sort();\n                var keysLen = keys.length;\n                for(var i = 0; i < keysLen; i++){\n                    var key1 = keys[i];\n                    stringBuilder.push(key1 + '=\"' + attrs[key1] + '\"');\n                }\n                var nodeName = this.nodeName.toLocaleLowerCase();\n                var attrsString = stringBuilder.length > 0 ? \" \" + stringBuilder.join(\" \") : \"\";\n                return \"<\".concat(nodeName).concat(attrsString, \">\").concat((0, _get._)((0, _getPrototypeOf._)(YXmlElement.prototype), \"toString\", this).call(this), \"</\").concat(nodeName, \">\");\n            }\n        },\n        {\n            /**\n   * Removes an attribute from this YXmlElement.\n   *\n   * @param {string} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */ key: \"removeAttribute\",\n            value: function removeAttribute(attributeName) {\n                var _this = this;\n                if (this.doc !== null) transact(this.doc, function(transaction) {\n                    typeMapDelete(transaction, _this, attributeName);\n                });\n                else /** @type {Map<string,any>} */ this._prelimAttrs[\"delete\"](attributeName);\n            }\n        },\n        {\n            /**\n   * Sets or updates an attribute.\n   *\n   * @template {keyof KV & string} KEY\n   *\n   * @param {KEY} attributeName The attribute name that is to be set.\n   * @param {KV[KEY]} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */ key: \"setAttribute\",\n            value: function setAttribute(attributeName, attributeValue) {\n                var _this = this;\n                if (this.doc !== null) transact(this.doc, function(transaction) {\n                    typeMapSet(transaction, _this, attributeName, attributeValue);\n                });\n                else /** @type {Map<string, any>} */ this._prelimAttrs.set(attributeName, attributeValue);\n            }\n        },\n        {\n            /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @template {keyof KV & string} KEY\n   *\n   * @param {KEY} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {KV[KEY]|undefined} The queried attribute value.\n   *\n   * @public\n   */ key: \"getAttribute\",\n            value: function getAttribute(attributeName) {\n                return /** @type {any} */ typeMapGet(this, attributeName);\n            }\n        },\n        {\n            /**\n   * Returns whether an attribute exists\n   *\n   * @param {string} attributeName The attribute name to check for existence.\n   * @return {boolean} whether the attribute exists.\n   *\n   * @public\n   */ key: \"hasAttribute\",\n            value: function hasAttribute(attributeName) {\n                return /** @type {any} */ typeMapHas(this, attributeName);\n            }\n        },\n        {\n            /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @param {Snapshot} [snapshot]\n   * @return {{ [Key in Extract<keyof KV,string>]?: KV[Key]}} A JSON Object that describes the attributes.\n   *\n   * @public\n   */ key: \"getAttributes\",\n            value: function getAttributes(snapshot) {\n                return /** @type {any} */ snapshot ? typeMapGetAllSnapshot(this, snapshot) : typeMapGetAll(this);\n            }\n        },\n        {\n            /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */ key: \"toDOM\",\n            value: function toDOM() {\n                var _document = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document, hooks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, binding = arguments.length > 2 ? arguments[2] : void 0;\n                var dom = _document.createElement(this.nodeName);\n                var attrs = this.getAttributes();\n                for(var key in attrs){\n                    var value = attrs[key];\n                    if (typeof value === \"string\") dom.setAttribute(key, value);\n                }\n                typeListForEach(this, function(yxml) {\n                    dom.appendChild(yxml.toDOM(_document, hooks, binding));\n                });\n                if (binding !== undefined) binding._createAssociation(dom, this);\n                return dom;\n            }\n        },\n        {\n            /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */ key: \"_write\",\n            value: function _write(encoder) {\n                encoder.writeTypeRef(YXmlElementRefID);\n                encoder.writeKey(this.nodeName);\n            }\n        }\n    ]);\n    return YXmlElement;\n}(YXmlFragment);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlElement}\n *\n * @function\n */ var readYXmlElement = function(decoder) {\n    return new YXmlElement(decoder.readKey());\n};\n/**\n * @extends YEvent<YXmlElement|YXmlText|YXmlFragment>\n * An Event that describes changes on a YXml Element or Yxml Fragment\n */ var YXmlEvent = /*#__PURE__*/ function(YEvent) {\n    \"use strict\";\n    (0, _inherits._)(YXmlEvent, YEvent);\n    var _super = (0, _createSuper._)(YXmlEvent);\n    function YXmlEvent(target, subs, transaction) {\n        (0, _classCallCheck._)(this, YXmlEvent);\n        var _this;\n        _this = _super.call(this, target, transaction);\n        /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */ _this.childListChanged = false;\n        /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */ _this.attributesChanged = new Set();\n        subs.forEach(function(sub) {\n            if (sub === null) _this.childListChanged = true;\n            else _this.attributesChanged.add(sub);\n        });\n        return _this;\n    }\n    return YXmlEvent;\n}(YEvent);\n/**\n * You can manage binding to a custom type with YXmlHook.\n *\n * @extends {YMap<any>}\n */ var YXmlHook = /*#__PURE__*/ function(YMap) {\n    \"use strict\";\n    (0, _inherits._)(YXmlHook, YMap);\n    var _super = (0, _createSuper._)(YXmlHook);\n    function YXmlHook(hookName) {\n        (0, _classCallCheck._)(this, YXmlHook);\n        var _this;\n        _this = _super.call(this);\n        /**\n     * @type {string}\n     */ _this.hookName = hookName;\n        return _this;\n    }\n    (0, _createClass._)(YXmlHook, [\n        {\n            /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   */ key: \"_copy\",\n            value: function _copy() {\n                return new YXmlHook(this.hookName);\n            }\n        },\n        {\n            /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YXmlHook}\n   */ key: \"clone\",\n            value: function clone() {\n                var el = new YXmlHook(this.hookName);\n                this.forEach(function(value, key) {\n                    el.set(key, value);\n                });\n                return el;\n            }\n        },\n        {\n            /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object.<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type\n   * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */ key: \"toDOM\",\n            value: function toDOM() {\n                var _document = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document, hooks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, binding = arguments.length > 2 ? arguments[2] : void 0;\n                var hook = hooks[this.hookName];\n                var dom;\n                if (hook !== undefined) dom = hook.createDom(this);\n                else dom = document.createElement(this.hookName);\n                dom.setAttribute(\"data-yjs-hook\", this.hookName);\n                if (binding !== undefined) binding._createAssociation(dom, this);\n                return dom;\n            }\n        },\n        {\n            /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */ key: \"_write\",\n            value: function _write(encoder) {\n                encoder.writeTypeRef(YXmlHookRefID);\n                encoder.writeKey(this.hookName);\n            }\n        }\n    ]);\n    return YXmlHook;\n}(YMap);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlHook}\n *\n * @private\n * @function\n */ var readYXmlHook = function(decoder) {\n    return new YXmlHook(decoder.readKey());\n};\n/**\n * Represents text in a Dom Element. In the future this type will also handle\n * simple formatting information like bold and italic.\n */ var YXmlText = /*#__PURE__*/ function(YText) {\n    \"use strict\";\n    (0, _inherits._)(YXmlText, YText);\n    var _super = (0, _createSuper._)(YXmlText);\n    function YXmlText() {\n        (0, _classCallCheck._)(this, YXmlText);\n        return _super.apply(this, arguments);\n    }\n    (0, _createClass._)(YXmlText, [\n        {\n            key: \"nextSibling\",\n            get: /**\n   * @type {YXmlElement|YXmlText|null}\n   */ function get() {\n                var n = this._item ? this._item.next : null;\n                return n ? /** @type {YXmlElement|YXmlText} */ /** @type {ContentType} */ n.content.type : null;\n            }\n        },\n        {\n            key: \"prevSibling\",\n            get: /**\n   * @type {YXmlElement|YXmlText|null}\n   */ function get() {\n                var n = this._item ? this._item.prev : null;\n                return n ? /** @type {YXmlElement|YXmlText} */ /** @type {ContentType} */ n.content.type : null;\n            }\n        },\n        {\n            key: \"_copy\",\n            value: function _copy() {\n                return new YXmlText();\n            }\n        },\n        {\n            /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YXmlText}\n   */ key: \"clone\",\n            value: function clone() {\n                var text = new YXmlText();\n                text.applyDelta(this.toDelta());\n                return text;\n            }\n        },\n        {\n            /**\n   * Creates a Dom Element that mirrors this YXmlText.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Text} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */ key: \"toDOM\",\n            value: function toDOM() {\n                var _document = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document, hooks = arguments.length > 1 ? arguments[1] : void 0, binding = arguments.length > 2 ? arguments[2] : void 0;\n                var dom = _document.createTextNode(this.toString());\n                if (binding !== undefined) binding._createAssociation(dom, this);\n                return dom;\n            }\n        },\n        {\n            key: \"toString\",\n            value: function toString() {\n                // @ts-ignore\n                return this.toDelta().map(function(delta) {\n                    var _loop = function(nodeName) {\n                        var attrs = [];\n                        for(var key in delta.attributes[nodeName])attrs.push({\n                            key: key,\n                            value: delta.attributes[nodeName][key]\n                        });\n                        // sort attributes to get a unique order\n                        attrs.sort(function(a, b) {\n                            return a.key < b.key ? -1 : 1;\n                        });\n                        nestedNodes.push({\n                            nodeName: nodeName,\n                            attrs: attrs\n                        });\n                    };\n                    var nestedNodes = [];\n                    for(var nodeName in delta.attributes)_loop(nodeName);\n                    // sort node order to get a unique order\n                    nestedNodes.sort(function(a, b) {\n                        return a.nodeName < b.nodeName ? -1 : 1;\n                    });\n                    // now convert to dom string\n                    var str = \"\";\n                    for(var i = 0; i < nestedNodes.length; i++){\n                        var node = nestedNodes[i];\n                        str += \"<\".concat(node.nodeName);\n                        for(var j = 0; j < node.attrs.length; j++){\n                            var attr = node.attrs[j];\n                            str += \" \".concat(attr.key, '=\"').concat(attr.value, '\"');\n                        }\n                        str += \">\";\n                    }\n                    str += delta.insert;\n                    for(var i1 = nestedNodes.length - 1; i1 >= 0; i1--)str += \"</\".concat(nestedNodes[i1].nodeName, \">\");\n                    return str;\n                }).join(\"\");\n            }\n        },\n        {\n            /**\n   * @return {string}\n   */ key: \"toJSON\",\n            value: function toJSON() {\n                return this.toString();\n            }\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */ key: \"_write\",\n            value: function _write(encoder) {\n                encoder.writeTypeRef(YXmlTextRefID);\n            }\n        }\n    ]);\n    return YXmlText;\n}(YText);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlText}\n *\n * @private\n * @function\n */ var readYXmlText = function(decoder) {\n    return new YXmlText();\n};\nvar AbstractStruct = /*#__PURE__*/ function() {\n    \"use strict\";\n    function AbstractStruct(id, length) {\n        (0, _classCallCheck._)(this, AbstractStruct);\n        this.id = id;\n        this.length = length;\n    }\n    (0, _createClass._)(AbstractStruct, [\n        {\n            key: \"deleted\",\n            get: /**\n   * @type {boolean}\n   */ function get() {\n                throw _error.methodUnimplemented();\n            }\n        },\n        {\n            /**\n   * Merge this struct with the item to the right.\n   * This method is already assuming that `this.id.clock + this.length === this.id.clock`.\n   * Also this method does *not* remove right from StructStore!\n   * @param {AbstractStruct} right\n   * @return {boolean} wether this merged with right\n   */ key: \"mergeWith\",\n            value: function mergeWith(right) {\n                return false;\n            }\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   * @param {number} offset\n   * @param {number} encodingRef\n   */ key: \"write\",\n            value: function write(encoder, offset, encodingRef) {\n                throw _error.methodUnimplemented();\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */ key: \"integrate\",\n            value: function integrate(transaction, offset) {\n                throw _error.methodUnimplemented();\n            }\n        }\n    ]);\n    return AbstractStruct;\n}();\nvar structGCRefNumber = 0;\n/**\n * @private\n */ var GC = /*#__PURE__*/ function(AbstractStruct) {\n    \"use strict\";\n    (0, _inherits._)(GC, AbstractStruct);\n    var _super = (0, _createSuper._)(GC);\n    function GC() {\n        (0, _classCallCheck._)(this, GC);\n        return _super.apply(this, arguments);\n    }\n    (0, _createClass._)(GC, [\n        {\n            key: \"deleted\",\n            get: function get() {\n                return true;\n            }\n        },\n        {\n            key: \"delete\",\n            value: function _delete() {}\n        },\n        {\n            /**\n   * @param {GC} right\n   * @return {boolean}\n   */ key: \"mergeWith\",\n            value: function mergeWith(right) {\n                if (this.constructor !== right.constructor) return false;\n                this.length += right.length;\n                return true;\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */ key: \"integrate\",\n            value: function integrate(transaction, offset) {\n                if (offset > 0) {\n                    this.id.clock += offset;\n                    this.length -= offset;\n                }\n                addStruct(transaction.doc.store, this);\n            }\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */ key: \"write\",\n            value: function write(encoder, offset) {\n                encoder.writeInfo(structGCRefNumber);\n                encoder.writeLen(this.length - offset);\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */ key: \"getMissing\",\n            value: function getMissing(transaction, store) {\n                return null;\n            }\n        }\n    ]);\n    return GC;\n}(AbstractStruct);\nvar ContentBinary = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ContentBinary(content) {\n        (0, _classCallCheck._)(this, ContentBinary);\n        this.content = content;\n    }\n    (0, _createClass._)(ContentBinary, [\n        {\n            /**\n   * @return {number}\n   */ key: \"getLength\",\n            value: function getLength() {\n                return 1;\n            }\n        },\n        {\n            /**\n   * @return {Array<any>}\n   */ key: \"getContent\",\n            value: function getContent() {\n                return [\n                    this.content\n                ];\n            }\n        },\n        {\n            /**\n   * @return {boolean}\n   */ key: \"isCountable\",\n            value: function isCountable() {\n                return true;\n            }\n        },\n        {\n            /**\n   * @return {ContentBinary}\n   */ key: \"copy\",\n            value: function copy() {\n                return new ContentBinary(this.content);\n            }\n        },\n        {\n            /**\n   * @param {number} offset\n   * @return {ContentBinary}\n   */ key: \"splice\",\n            value: function splice(offset) {\n                throw _error.methodUnimplemented();\n            }\n        },\n        {\n            /**\n   * @param {ContentBinary} right\n   * @return {boolean}\n   */ key: \"mergeWith\",\n            value: function mergeWith(right) {\n                return false;\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */ key: \"integrate\",\n            value: function integrate(transaction, item) {}\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   */ key: \"delete\",\n            value: function _delete(transaction) {}\n        },\n        {\n            /**\n   * @param {StructStore} store\n   */ key: \"gc\",\n            value: function gc(store) {}\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */ key: \"write\",\n            value: function write(encoder, offset) {\n                encoder.writeBuf(this.content);\n            }\n        },\n        {\n            /**\n   * @return {number}\n   */ key: \"getRef\",\n            value: function getRef() {\n                return 3;\n            }\n        }\n    ]);\n    return ContentBinary;\n}();\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2 } decoder\n * @return {ContentBinary}\n */ var readContentBinary = function(decoder) {\n    return new ContentBinary(decoder.readBuf());\n};\nvar ContentDeleted = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ContentDeleted(len) {\n        (0, _classCallCheck._)(this, ContentDeleted);\n        this.len = len;\n    }\n    (0, _createClass._)(ContentDeleted, [\n        {\n            /**\n   * @return {number}\n   */ key: \"getLength\",\n            value: function getLength() {\n                return this.len;\n            }\n        },\n        {\n            /**\n   * @return {Array<any>}\n   */ key: \"getContent\",\n            value: function getContent() {\n                return [];\n            }\n        },\n        {\n            /**\n   * @return {boolean}\n   */ key: \"isCountable\",\n            value: function isCountable() {\n                return false;\n            }\n        },\n        {\n            /**\n   * @return {ContentDeleted}\n   */ key: \"copy\",\n            value: function copy() {\n                return new ContentDeleted(this.len);\n            }\n        },\n        {\n            /**\n   * @param {number} offset\n   * @return {ContentDeleted}\n   */ key: \"splice\",\n            value: function splice(offset) {\n                var right = new ContentDeleted(this.len - offset);\n                this.len = offset;\n                return right;\n            }\n        },\n        {\n            /**\n   * @param {ContentDeleted} right\n   * @return {boolean}\n   */ key: \"mergeWith\",\n            value: function mergeWith(right) {\n                this.len += right.len;\n                return true;\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */ key: \"integrate\",\n            value: function integrate(transaction, item) {\n                addToDeleteSet(transaction.deleteSet, item.id.client, item.id.clock, this.len);\n                item.markDeleted();\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   */ key: \"delete\",\n            value: function _delete(transaction) {}\n        },\n        {\n            /**\n   * @param {StructStore} store\n   */ key: \"gc\",\n            value: function gc(store) {}\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */ key: \"write\",\n            value: function write(encoder, offset) {\n                encoder.writeLen(this.len - offset);\n            }\n        },\n        {\n            /**\n   * @return {number}\n   */ key: \"getRef\",\n            value: function getRef() {\n                return 1;\n            }\n        }\n    ]);\n    return ContentDeleted;\n}();\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2 } decoder\n * @return {ContentDeleted}\n */ var readContentDeleted = function(decoder) {\n    return new ContentDeleted(decoder.readLen());\n};\n/**\n * @param {string} guid\n * @param {Object<string, any>} opts\n */ var createDocFromOpts = function(guid, opts) {\n    return new Doc((0, _objectSpreadProps._)((0, _objectSpread._)({\n        guid: guid\n    }, opts), {\n        shouldLoad: opts.shouldLoad || opts.autoLoad || false\n    }));\n};\n/**\n * @private\n */ var ContentDoc = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ContentDoc(doc) {\n        (0, _classCallCheck._)(this, ContentDoc);\n        if (doc._item) console.error(\"This document was already integrated as a sub-document. You should create a second instance instead with the same guid.\");\n        /**\n     * @type {Doc}\n     */ this.doc = doc;\n        /**\n     * @type {any}\n     */ var opts = {};\n        this.opts = opts;\n        if (!doc.gc) opts.gc = false;\n        if (doc.autoLoad) opts.autoLoad = true;\n        if (doc.meta !== null) opts.meta = doc.meta;\n    }\n    (0, _createClass._)(ContentDoc, [\n        {\n            /**\n   * @return {number}\n   */ key: \"getLength\",\n            value: function getLength() {\n                return 1;\n            }\n        },\n        {\n            /**\n   * @return {Array<any>}\n   */ key: \"getContent\",\n            value: function getContent() {\n                return [\n                    this.doc\n                ];\n            }\n        },\n        {\n            /**\n   * @return {boolean}\n   */ key: \"isCountable\",\n            value: function isCountable() {\n                return true;\n            }\n        },\n        {\n            /**\n   * @return {ContentDoc}\n   */ key: \"copy\",\n            value: function copy() {\n                return new ContentDoc(createDocFromOpts(this.doc.guid, this.opts));\n            }\n        },\n        {\n            /**\n   * @param {number} offset\n   * @return {ContentDoc}\n   */ key: \"splice\",\n            value: function splice(offset) {\n                throw _error.methodUnimplemented();\n            }\n        },\n        {\n            /**\n   * @param {ContentDoc} right\n   * @return {boolean}\n   */ key: \"mergeWith\",\n            value: function mergeWith(right) {\n                return false;\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */ key: \"integrate\",\n            value: function integrate(transaction, item) {\n                // this needs to be reflected in doc.destroy as well\n                this.doc._item = item;\n                transaction.subdocsAdded.add(this.doc);\n                if (this.doc.shouldLoad) transaction.subdocsLoaded.add(this.doc);\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   */ key: \"delete\",\n            value: function _delete(transaction) {\n                if (transaction.subdocsAdded.has(this.doc)) transaction.subdocsAdded[\"delete\"](this.doc);\n                else transaction.subdocsRemoved.add(this.doc);\n            }\n        },\n        {\n            /**\n   * @param {StructStore} store\n   */ key: \"gc\",\n            value: function gc(store) {}\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */ key: \"write\",\n            value: function write(encoder, offset) {\n                encoder.writeString(this.doc.guid);\n                encoder.writeAny(this.opts);\n            }\n        },\n        {\n            /**\n   * @return {number}\n   */ key: \"getRef\",\n            value: function getRef() {\n                return 9;\n            }\n        }\n    ]);\n    return ContentDoc;\n}();\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentDoc}\n */ var readContentDoc = function(decoder) {\n    return new ContentDoc(createDocFromOpts(decoder.readString(), decoder.readAny()));\n};\n/**\n * @private\n */ var ContentEmbed = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ContentEmbed(embed) {\n        (0, _classCallCheck._)(this, ContentEmbed);\n        this.embed = embed;\n    }\n    (0, _createClass._)(ContentEmbed, [\n        {\n            /**\n   * @return {number}\n   */ key: \"getLength\",\n            value: function getLength() {\n                return 1;\n            }\n        },\n        {\n            /**\n   * @return {Array<any>}\n   */ key: \"getContent\",\n            value: function getContent() {\n                return [\n                    this.embed\n                ];\n            }\n        },\n        {\n            /**\n   * @return {boolean}\n   */ key: \"isCountable\",\n            value: function isCountable() {\n                return true;\n            }\n        },\n        {\n            /**\n   * @return {ContentEmbed}\n   */ key: \"copy\",\n            value: function copy() {\n                return new ContentEmbed(this.embed);\n            }\n        },\n        {\n            /**\n   * @param {number} offset\n   * @return {ContentEmbed}\n   */ key: \"splice\",\n            value: function splice(offset) {\n                throw _error.methodUnimplemented();\n            }\n        },\n        {\n            /**\n   * @param {ContentEmbed} right\n   * @return {boolean}\n   */ key: \"mergeWith\",\n            value: function mergeWith(right) {\n                return false;\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */ key: \"integrate\",\n            value: function integrate(transaction, item) {}\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   */ key: \"delete\",\n            value: function _delete(transaction) {}\n        },\n        {\n            /**\n   * @param {StructStore} store\n   */ key: \"gc\",\n            value: function gc(store) {}\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */ key: \"write\",\n            value: function write(encoder, offset) {\n                encoder.writeJSON(this.embed);\n            }\n        },\n        {\n            /**\n   * @return {number}\n   */ key: \"getRef\",\n            value: function getRef() {\n                return 5;\n            }\n        }\n    ]);\n    return ContentEmbed;\n}();\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentEmbed}\n */ var readContentEmbed = function(decoder) {\n    return new ContentEmbed(decoder.readJSON());\n};\n/**\n * @private\n */ var ContentFormat = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ContentFormat(key, value) {\n        (0, _classCallCheck._)(this, ContentFormat);\n        this.key = key;\n        this.value = value;\n    }\n    (0, _createClass._)(ContentFormat, [\n        {\n            /**\n   * @return {number}\n   */ key: \"getLength\",\n            value: function getLength() {\n                return 1;\n            }\n        },\n        {\n            /**\n   * @return {Array<any>}\n   */ key: \"getContent\",\n            value: function getContent() {\n                return [];\n            }\n        },\n        {\n            /**\n   * @return {boolean}\n   */ key: \"isCountable\",\n            value: function isCountable() {\n                return false;\n            }\n        },\n        {\n            /**\n   * @return {ContentFormat}\n   */ key: \"copy\",\n            value: function copy() {\n                return new ContentFormat(this.key, this.value);\n            }\n        },\n        {\n            /**\n   * @param {number} _offset\n   * @return {ContentFormat}\n   */ key: \"splice\",\n            value: function splice(_offset) {\n                throw _error.methodUnimplemented();\n            }\n        },\n        {\n            /**\n   * @param {ContentFormat} _right\n   * @return {boolean}\n   */ key: \"mergeWith\",\n            value: function mergeWith(_right) {\n                return false;\n            }\n        },\n        {\n            /**\n   * @param {Transaction} _transaction\n   * @param {Item} item\n   */ key: \"integrate\",\n            value: function integrate(_transaction, item) {\n                // @todo searchmarker are currently unsupported for rich text documents\n                var p = /** @type {YText} */ item.parent;\n                p._searchMarker = null;\n                p._hasFormatting = true;\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   */ key: \"delete\",\n            value: function _delete(transaction) {}\n        },\n        {\n            /**\n   * @param {StructStore} store\n   */ key: \"gc\",\n            value: function gc(store) {}\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */ key: \"write\",\n            value: function write(encoder, offset) {\n                encoder.writeKey(this.key);\n                encoder.writeJSON(this.value);\n            }\n        },\n        {\n            /**\n   * @return {number}\n   */ key: \"getRef\",\n            value: function getRef() {\n                return 6;\n            }\n        }\n    ]);\n    return ContentFormat;\n}();\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentFormat}\n */ var readContentFormat = function(decoder) {\n    return new ContentFormat(decoder.readKey(), decoder.readJSON());\n};\n/**\n * @private\n */ var ContentJSON = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ContentJSON(arr) {\n        (0, _classCallCheck._)(this, ContentJSON);\n        /**\n     * @type {Array<any>}\n     */ this.arr = arr;\n    }\n    (0, _createClass._)(ContentJSON, [\n        {\n            /**\n   * @return {number}\n   */ key: \"getLength\",\n            value: function getLength() {\n                return this.arr.length;\n            }\n        },\n        {\n            /**\n   * @return {Array<any>}\n   */ key: \"getContent\",\n            value: function getContent() {\n                return this.arr;\n            }\n        },\n        {\n            /**\n   * @return {boolean}\n   */ key: \"isCountable\",\n            value: function isCountable() {\n                return true;\n            }\n        },\n        {\n            /**\n   * @return {ContentJSON}\n   */ key: \"copy\",\n            value: function copy() {\n                return new ContentJSON(this.arr);\n            }\n        },\n        {\n            /**\n   * @param {number} offset\n   * @return {ContentJSON}\n   */ key: \"splice\",\n            value: function splice(offset) {\n                var right = new ContentJSON(this.arr.slice(offset));\n                this.arr = this.arr.slice(0, offset);\n                return right;\n            }\n        },\n        {\n            /**\n   * @param {ContentJSON} right\n   * @return {boolean}\n   */ key: \"mergeWith\",\n            value: function mergeWith(right) {\n                this.arr = this.arr.concat(right.arr);\n                return true;\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */ key: \"integrate\",\n            value: function integrate(transaction, item) {}\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   */ key: \"delete\",\n            value: function _delete(transaction) {}\n        },\n        {\n            /**\n   * @param {StructStore} store\n   */ key: \"gc\",\n            value: function gc(store) {}\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */ key: \"write\",\n            value: function write(encoder, offset) {\n                var len = this.arr.length;\n                encoder.writeLen(len - offset);\n                for(var i = offset; i < len; i++){\n                    var c = this.arr[i];\n                    encoder.writeString(c === undefined ? \"undefined\" : JSON.stringify(c));\n                }\n            }\n        },\n        {\n            /**\n   * @return {number}\n   */ key: \"getRef\",\n            value: function getRef() {\n                return 2;\n            }\n        }\n    ]);\n    return ContentJSON;\n}();\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentJSON}\n */ var readContentJSON = function(decoder) {\n    var len = decoder.readLen();\n    var cs = [];\n    for(var i = 0; i < len; i++){\n        var c = decoder.readString();\n        if (c === \"undefined\") cs.push(undefined);\n        else cs.push(JSON.parse(c));\n    }\n    return new ContentJSON(cs);\n};\nvar isDevMode = _environment.getVariable(\"node_env\") === \"development\";\nvar ContentAny = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ContentAny(arr) {\n        (0, _classCallCheck._)(this, ContentAny);\n        /**\n     * @type {Array<any>}\n     */ this.arr = arr;\n        isDevMode && _object.deepFreeze(arr);\n    }\n    (0, _createClass._)(ContentAny, [\n        {\n            /**\n   * @return {number}\n   */ key: \"getLength\",\n            value: function getLength() {\n                return this.arr.length;\n            }\n        },\n        {\n            /**\n   * @return {Array<any>}\n   */ key: \"getContent\",\n            value: function getContent() {\n                return this.arr;\n            }\n        },\n        {\n            /**\n   * @return {boolean}\n   */ key: \"isCountable\",\n            value: function isCountable() {\n                return true;\n            }\n        },\n        {\n            /**\n   * @return {ContentAny}\n   */ key: \"copy\",\n            value: function copy() {\n                return new ContentAny(this.arr);\n            }\n        },\n        {\n            /**\n   * @param {number} offset\n   * @return {ContentAny}\n   */ key: \"splice\",\n            value: function splice(offset) {\n                var right = new ContentAny(this.arr.slice(offset));\n                this.arr = this.arr.slice(0, offset);\n                return right;\n            }\n        },\n        {\n            /**\n   * @param {ContentAny} right\n   * @return {boolean}\n   */ key: \"mergeWith\",\n            value: function mergeWith(right) {\n                this.arr = this.arr.concat(right.arr);\n                return true;\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */ key: \"integrate\",\n            value: function integrate(transaction, item) {}\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   */ key: \"delete\",\n            value: function _delete(transaction) {}\n        },\n        {\n            /**\n   * @param {StructStore} store\n   */ key: \"gc\",\n            value: function gc(store) {}\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */ key: \"write\",\n            value: function write(encoder, offset) {\n                var len = this.arr.length;\n                encoder.writeLen(len - offset);\n                for(var i = offset; i < len; i++){\n                    var c = this.arr[i];\n                    encoder.writeAny(c);\n                }\n            }\n        },\n        {\n            /**\n   * @return {number}\n   */ key: \"getRef\",\n            value: function getRef() {\n                return 8;\n            }\n        }\n    ]);\n    return ContentAny;\n}();\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentAny}\n */ var readContentAny = function(decoder) {\n    var len = decoder.readLen();\n    var cs = [];\n    for(var i = 0; i < len; i++)cs.push(decoder.readAny());\n    return new ContentAny(cs);\n};\n/**\n * @private\n */ var ContentString = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ContentString(str) {\n        (0, _classCallCheck._)(this, ContentString);\n        /**\n     * @type {string}\n     */ this.str = str;\n    }\n    (0, _createClass._)(ContentString, [\n        {\n            /**\n   * @return {number}\n   */ key: \"getLength\",\n            value: function getLength() {\n                return this.str.length;\n            }\n        },\n        {\n            /**\n   * @return {Array<any>}\n   */ key: \"getContent\",\n            value: function getContent() {\n                return this.str.split(\"\");\n            }\n        },\n        {\n            /**\n   * @return {boolean}\n   */ key: \"isCountable\",\n            value: function isCountable() {\n                return true;\n            }\n        },\n        {\n            /**\n   * @return {ContentString}\n   */ key: \"copy\",\n            value: function copy() {\n                return new ContentString(this.str);\n            }\n        },\n        {\n            /**\n   * @param {number} offset\n   * @return {ContentString}\n   */ key: \"splice\",\n            value: function splice(offset) {\n                var right = new ContentString(this.str.slice(offset));\n                this.str = this.str.slice(0, offset);\n                // Prevent encoding invalid documents because of splitting of surrogate pairs: https://github.com/yjs/yjs/issues/248\n                var firstCharCode = this.str.charCodeAt(offset - 1);\n                if (firstCharCode >= 0xD800 && firstCharCode <= 0xDBFF) {\n                    // Last character of the left split is the start of a surrogate utf16/ucs2 pair.\n                    // We don't support splitting of surrogate pairs because this may lead to invalid documents.\n                    // Replace the invalid character with a unicode replacement character (� / U+FFFD)\n                    this.str = this.str.slice(0, offset - 1) + \"\\uFFFD\";\n                    // replace right as well\n                    right.str = \"\\uFFFD\" + right.str.slice(1);\n                }\n                return right;\n            }\n        },\n        {\n            /**\n   * @param {ContentString} right\n   * @return {boolean}\n   */ key: \"mergeWith\",\n            value: function mergeWith(right) {\n                this.str += right.str;\n                return true;\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */ key: \"integrate\",\n            value: function integrate(transaction, item) {}\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   */ key: \"delete\",\n            value: function _delete(transaction) {}\n        },\n        {\n            /**\n   * @param {StructStore} store\n   */ key: \"gc\",\n            value: function gc(store) {}\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */ key: \"write\",\n            value: function write(encoder, offset) {\n                encoder.writeString(offset === 0 ? this.str : this.str.slice(offset));\n            }\n        },\n        {\n            /**\n   * @return {number}\n   */ key: \"getRef\",\n            value: function getRef() {\n                return 4;\n            }\n        }\n    ]);\n    return ContentString;\n}();\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentString}\n */ var readContentString = function(decoder) {\n    return new ContentString(decoder.readString());\n};\n/**\n * @type {Array<function(UpdateDecoderV1 | UpdateDecoderV2):AbstractType<any>>}\n * @private\n */ var typeRefs = [\n    readYArray,\n    readYMap,\n    readYText,\n    readYXmlElement,\n    readYXmlFragment,\n    readYXmlHook,\n    readYXmlText\n];\nvar YArrayRefID = 0;\nvar YMapRefID = 1;\nvar YTextRefID = 2;\nvar YXmlElementRefID = 3;\nvar YXmlFragmentRefID = 4;\nvar YXmlHookRefID = 5;\nvar YXmlTextRefID = 6;\n/**\n * @private\n */ var ContentType = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ContentType(type) {\n        (0, _classCallCheck._)(this, ContentType);\n        /**\n     * @type {AbstractType<any>}\n     */ this.type = type;\n    }\n    (0, _createClass._)(ContentType, [\n        {\n            /**\n   * @return {number}\n   */ key: \"getLength\",\n            value: function getLength() {\n                return 1;\n            }\n        },\n        {\n            /**\n   * @return {Array<any>}\n   */ key: \"getContent\",\n            value: function getContent() {\n                return [\n                    this.type\n                ];\n            }\n        },\n        {\n            /**\n   * @return {boolean}\n   */ key: \"isCountable\",\n            value: function isCountable() {\n                return true;\n            }\n        },\n        {\n            /**\n   * @return {ContentType}\n   */ key: \"copy\",\n            value: function copy() {\n                return new ContentType(this.type._copy());\n            }\n        },\n        {\n            /**\n   * @param {number} offset\n   * @return {ContentType}\n   */ key: \"splice\",\n            value: function splice(offset) {\n                throw _error.methodUnimplemented();\n            }\n        },\n        {\n            /**\n   * @param {ContentType} right\n   * @return {boolean}\n   */ key: \"mergeWith\",\n            value: function mergeWith(right) {\n                return false;\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */ key: \"integrate\",\n            value: function integrate(transaction, item) {\n                this.type._integrate(transaction.doc, item);\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   */ key: \"delete\",\n            value: function _delete(transaction) {\n                var item = this.type._start;\n                while(item !== null){\n                    if (!item.deleted) item[\"delete\"](transaction);\n                    else if (item.id.clock < (transaction.beforeState.get(item.id.client) || 0)) // This will be gc'd later and we want to merge it if possible\n                    // We try to merge all deleted items after each transaction,\n                    // but we have no knowledge about that this needs to be merged\n                    // since it is not in transaction.ds. Hence we add it to transaction._mergeStructs\n                    transaction._mergeStructs.push(item);\n                    item = item.right;\n                }\n                this.type._map.forEach(function(item) {\n                    if (!item.deleted) item[\"delete\"](transaction);\n                    else if (item.id.clock < (transaction.beforeState.get(item.id.client) || 0)) // same as above\n                    transaction._mergeStructs.push(item);\n                });\n                transaction.changed[\"delete\"](this.type);\n            }\n        },\n        {\n            /**\n   * @param {StructStore} store\n   */ key: \"gc\",\n            value: function gc(store) {\n                var item = this.type._start;\n                while(item !== null){\n                    item.gc(store, true);\n                    item = item.right;\n                }\n                this.type._start = null;\n                this.type._map.forEach(/** @param {Item | null} item */ function(item) {\n                    while(item !== null){\n                        item.gc(store, true);\n                        item = item.left;\n                    }\n                });\n                this.type._map = new Map();\n            }\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */ key: \"write\",\n            value: function write(encoder, offset) {\n                this.type._write(encoder);\n            }\n        },\n        {\n            /**\n   * @return {number}\n   */ key: \"getRef\",\n            value: function getRef() {\n                return 7;\n            }\n        }\n    ]);\n    return ContentType;\n}();\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentType}\n */ var readContentType = function(decoder) {\n    return new ContentType(typeRefs[decoder.readTypeRef()](decoder));\n};\n/**\n * @todo This should return several items\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {{item:Item, diff:number}}\n */ var followRedone = function(store, id) {\n    /**\n   * @type {ID|null}\n   */ var nextID = id;\n    var diff = 0;\n    var item;\n    do {\n        if (diff > 0) nextID = createID(nextID.client, nextID.clock + diff);\n        item = getItem(store, nextID);\n        diff = nextID.clock - item.id.clock;\n        nextID = item.redone;\n    }while (nextID !== null && item instanceof Item);\n    return {\n        item: item,\n        diff: diff\n    };\n};\n/**\n * Make sure that neither item nor any of its parents is ever deleted.\n *\n * This property does not persist when storing it into a database or when\n * sending it to other peers\n *\n * @param {Item|null} item\n * @param {boolean} keep\n */ var keepItem = function(item, keep) {\n    while(item !== null && item.keep !== keep){\n        item.keep = keep;\n        item = /** @type {AbstractType<any>} */ item.parent._item;\n    }\n};\n/**\n * Split leftItem into two items\n * @param {Transaction} transaction\n * @param {Item} leftItem\n * @param {number} diff\n * @return {Item}\n *\n * @function\n * @private\n */ var splitItem = function(transaction, leftItem, diff) {\n    // create rightItem\n    var _leftItem_id = leftItem.id, client = _leftItem_id.client, clock = _leftItem_id.clock;\n    var rightItem = new Item(createID(client, clock + diff), leftItem, createID(client, clock + diff - 1), leftItem.right, leftItem.rightOrigin, leftItem.parent, leftItem.parentSub, leftItem.content.splice(diff));\n    if (leftItem.deleted) rightItem.markDeleted();\n    if (leftItem.keep) rightItem.keep = true;\n    if (leftItem.redone !== null) rightItem.redone = createID(leftItem.redone.client, leftItem.redone.clock + diff);\n    // update left (do not set leftItem.rightOrigin as it will lead to problems when syncing)\n    leftItem.right = rightItem;\n    // update right\n    if (rightItem.right !== null) rightItem.right.left = rightItem;\n    // right is more specific.\n    transaction._mergeStructs.push(rightItem);\n    // update parent._map\n    if (rightItem.parentSub !== null && rightItem.right === null) /** @type {AbstractType<any>} */ rightItem.parent._map.set(rightItem.parentSub, rightItem);\n    leftItem.length = diff;\n    return rightItem;\n};\n/**\n * @param {Array<StackItem>} stack\n * @param {ID} id\n */ var isDeletedByUndoStack = function(stack, id) {\n    return _array.some(stack, /** @param {StackItem} s */ function(s) {\n        return isDeleted(s.deletions, id);\n    });\n};\n/**\n * Redoes the effect of this operation.\n *\n * @param {Transaction} transaction The Yjs instance.\n * @param {Item} item\n * @param {Set<Item>} redoitems\n * @param {DeleteSet} itemsToDelete\n * @param {boolean} ignoreRemoteMapChanges\n * @param {import('../utils/UndoManager.js').UndoManager} um\n *\n * @return {Item|null}\n *\n * @private\n */ var redoItem = function(transaction, item, redoitems, itemsToDelete, ignoreRemoteMapChanges, um) {\n    var doc = transaction.doc;\n    var store = doc.store;\n    var ownClientID = doc.clientID;\n    var redone = item.redone;\n    if (redone !== null) return getItemCleanStart(transaction, redone);\n    var parentItem = /** @type {AbstractType<any>} */ item.parent._item;\n    /**\n   * @type {Item|null}\n   */ var left = null;\n    /**\n   * @type {Item|null}\n   */ var right;\n    // make sure that parent is redone\n    if (parentItem !== null && parentItem.deleted === true) {\n        // try to undo parent if it will be undone anyway\n        if (parentItem.redone === null && (!redoitems.has(parentItem) || redoItem(transaction, parentItem, redoitems, itemsToDelete, ignoreRemoteMapChanges, um) === null)) return null;\n        while(parentItem.redone !== null)parentItem = getItemCleanStart(transaction, parentItem.redone);\n    }\n    var parentType = parentItem === null ? /** @type {AbstractType<any>} */ item.parent : /** @type {ContentType} */ parentItem.content.type;\n    if (item.parentSub === null) {\n        // Is an array item. Insert at the old position\n        left = item.left;\n        right = item;\n        // find next cloned_redo items\n        while(left !== null){\n            /**\n       * @type {Item|null}\n       */ var leftTrace = left;\n            // trace redone until parent matches\n            while(leftTrace !== null && /** @type {AbstractType<any>} */ leftTrace.parent._item !== parentItem)leftTrace = leftTrace.redone === null ? null : getItemCleanStart(transaction, leftTrace.redone);\n            if (leftTrace !== null && /** @type {AbstractType<any>} */ leftTrace.parent._item === parentItem) {\n                left = leftTrace;\n                break;\n            }\n            left = left.left;\n        }\n        while(right !== null){\n            /**\n       * @type {Item|null}\n       */ var rightTrace = right;\n            // trace redone until parent matches\n            while(rightTrace !== null && /** @type {AbstractType<any>} */ rightTrace.parent._item !== parentItem)rightTrace = rightTrace.redone === null ? null : getItemCleanStart(transaction, rightTrace.redone);\n            if (rightTrace !== null && /** @type {AbstractType<any>} */ rightTrace.parent._item === parentItem) {\n                right = rightTrace;\n                break;\n            }\n            right = right.right;\n        }\n    } else {\n        right = null;\n        if (item.right && !ignoreRemoteMapChanges) {\n            left = item;\n            // Iterate right while right is in itemsToDelete\n            // If it is intended to delete right while item is redone, we can expect that item should replace right.\n            while(left !== null && left.right !== null && (left.right.redone || isDeleted(itemsToDelete, left.right.id) || isDeletedByUndoStack(um.undoStack, left.right.id) || isDeletedByUndoStack(um.redoStack, left.right.id))){\n                left = left.right;\n                // follow redone\n                while(left.redone)left = getItemCleanStart(transaction, left.redone);\n            }\n            if (left && left.right !== null) // It is not possible to redo this item because it conflicts with a\n            // change from another client\n            return null;\n        } else left = parentType._map.get(item.parentSub) || null;\n    }\n    var nextClock = getState(store, ownClientID);\n    var nextId = createID(ownClientID, nextClock);\n    var redoneItem = new Item(nextId, left, left && left.lastId, right, right && right.id, parentType, item.parentSub, item.content.copy());\n    item.redone = nextId;\n    keepItem(redoneItem, true);\n    redoneItem.integrate(transaction, 0);\n    return redoneItem;\n};\n/**\n * Abstract class that represents any content.\n */ var Item = /*#__PURE__*/ function(AbstractStruct) {\n    \"use strict\";\n    (0, _inherits._)(Item, AbstractStruct);\n    var _super = (0, _createSuper._)(Item);\n    function Item(id, left, origin, right, rightOrigin, parent, parentSub, content) {\n        (0, _classCallCheck._)(this, Item);\n        var _this;\n        _this = _super.call(this, id, content.getLength());\n        /**\n     * The item that was originally to the left of this item.\n     * @type {ID | null}\n     */ _this.origin = origin;\n        /**\n     * The item that is currently to the left of this item.\n     * @type {Item | null}\n     */ _this.left = left;\n        /**\n     * The item that is currently to the right of this item.\n     * @type {Item | null}\n     */ _this.right = right;\n        /**\n     * The item that was originally to the right of this item.\n     * @type {ID | null}\n     */ _this.rightOrigin = rightOrigin;\n        /**\n     * @type {AbstractType<any>|ID|null}\n     */ _this.parent = parent;\n        /**\n     * If the parent refers to this item with some kind of key (e.g. YMap, the\n     * key is specified here. The key is then used to refer to the list in which\n     * to insert this item. If `parentSub = null` type._start is the list in\n     * which to insert to. Otherwise it is `parent._map`.\n     * @type {String | null}\n     */ _this.parentSub = parentSub;\n        /**\n     * If this type's effect is redone this type refers to the type that undid\n     * this operation.\n     * @type {ID | null}\n     */ _this.redone = null;\n        /**\n     * @type {AbstractContent}\n     */ _this.content = content;\n        /**\n     * bit1: keep\n     * bit2: countable\n     * bit3: deleted\n     * bit4: mark - mark node as fast-search-marker\n     * @type {number} byte\n     */ _this.info = _this.content.isCountable() ? _binary.BIT2 : 0;\n        return _this;\n    }\n    (0, _createClass._)(Item, [\n        {\n            key: \"marker\",\n            get: function get() {\n                return (this.info & _binary.BIT4) > 0;\n            },\n            set: /**\n   * This is used to mark the item as an indexed fast-search marker\n   *\n   * @type {boolean}\n   */ function set(isMarked) {\n                if ((this.info & _binary.BIT4) > 0 !== isMarked) this.info ^= _binary.BIT4;\n            }\n        },\n        {\n            key: \"keep\",\n            get: /**\n   * If true, do not garbage collect this Item.\n   */ function get() {\n                return (this.info & _binary.BIT1) > 0;\n            },\n            set: function set(doKeep) {\n                if (this.keep !== doKeep) this.info ^= _binary.BIT1;\n            }\n        },\n        {\n            key: \"countable\",\n            get: function get() {\n                return (this.info & _binary.BIT2) > 0;\n            }\n        },\n        {\n            key: \"deleted\",\n            get: /**\n   * Whether this item was deleted or not.\n   * @type {Boolean}\n   */ function get() {\n                return (this.info & _binary.BIT3) > 0;\n            },\n            set: function set(doDelete) {\n                if (this.deleted !== doDelete) this.info ^= _binary.BIT3;\n            }\n        },\n        {\n            key: \"markDeleted\",\n            value: function markDeleted() {\n                this.info |= _binary.BIT3;\n            }\n        },\n        {\n            /**\n   * Return the creator clientID of the missing op or define missing items and return null.\n   *\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */ key: \"getMissing\",\n            value: function getMissing(transaction, store) {\n                if (this.origin && this.origin.client !== this.id.client && this.origin.clock >= getState(store, this.origin.client)) return this.origin.client;\n                if (this.rightOrigin && this.rightOrigin.client !== this.id.client && this.rightOrigin.clock >= getState(store, this.rightOrigin.client)) return this.rightOrigin.client;\n                if (this.parent && this.parent.constructor === ID && this.id.client !== this.parent.client && this.parent.clock >= getState(store, this.parent.client)) return this.parent.client;\n                // We have all missing ids, now find the items\n                if (this.origin) {\n                    this.left = getItemCleanEnd(transaction, store, this.origin);\n                    this.origin = this.left.lastId;\n                }\n                if (this.rightOrigin) {\n                    this.right = getItemCleanStart(transaction, this.rightOrigin);\n                    this.rightOrigin = this.right.id;\n                }\n                if (this.left && this.left.constructor === GC || this.right && this.right.constructor === GC) this.parent = null;\n                else if (!this.parent) {\n                    // only set parent if this shouldn't be garbage collected\n                    if (this.left && this.left.constructor === Item) {\n                        this.parent = this.left.parent;\n                        this.parentSub = this.left.parentSub;\n                    }\n                    if (this.right && this.right.constructor === Item) {\n                        this.parent = this.right.parent;\n                        this.parentSub = this.right.parentSub;\n                    }\n                } else if (this.parent.constructor === ID) {\n                    var parentItem = getItem(store, this.parent);\n                    if (parentItem.constructor === GC) this.parent = null;\n                    else this.parent = /** @type {ContentType} */ parentItem.content.type;\n                }\n                return null;\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */ key: \"integrate\",\n            value: function integrate(transaction, offset) {\n                if (offset > 0) {\n                    this.id.clock += offset;\n                    this.left = getItemCleanEnd(transaction, transaction.doc.store, createID(this.id.client, this.id.clock - 1));\n                    this.origin = this.left.lastId;\n                    this.content = this.content.splice(offset);\n                    this.length -= offset;\n                }\n                if (this.parent) {\n                    if (!this.left && (!this.right || this.right.left !== null) || this.left && this.left.right !== this.right) {\n                        /**\n         * @type {Item|null}\n         */ var left = this.left;\n                        /**\n         * @type {Item|null}\n         */ var o;\n                        // set o to the first conflicting item\n                        if (left !== null) o = left.right;\n                        else if (this.parentSub !== null) {\n                            o = /** @type {AbstractType<any>} */ this.parent._map.get(this.parentSub) || null;\n                            while(o !== null && o.left !== null)o = o.left;\n                        } else o = /** @type {AbstractType<any>} */ this.parent._start;\n                        // TODO: use something like DeleteSet here (a tree implementation would be best)\n                        // @todo use global set definitions\n                        /**\n         * @type {Set<Item>}\n         */ var conflictingItems = new Set();\n                        /**\n         * @type {Set<Item>}\n         */ var itemsBeforeOrigin = new Set();\n                        // Let c in conflictingItems, b in itemsBeforeOrigin\n                        // ***{origin}bbbb{this}{c,b}{c,b}{o}***\n                        // Note that conflictingItems is a subset of itemsBeforeOrigin\n                        while(o !== null && o !== this.right){\n                            itemsBeforeOrigin.add(o);\n                            conflictingItems.add(o);\n                            if (compareIDs(this.origin, o.origin)) {\n                                // case 1\n                                if (o.id.client < this.id.client) {\n                                    left = o;\n                                    conflictingItems.clear();\n                                } else if (compareIDs(this.rightOrigin, o.rightOrigin)) break;\n                                 // else, o might be integrated before an item that this conflicts with. If so, we will find it in the next iterations\n                            } else if (o.origin !== null && itemsBeforeOrigin.has(getItem(transaction.doc.store, o.origin))) // case 2\n                            {\n                                if (!conflictingItems.has(getItem(transaction.doc.store, o.origin))) {\n                                    left = o;\n                                    conflictingItems.clear();\n                                }\n                            } else break;\n                            o = o.right;\n                        }\n                        this.left = left;\n                    }\n                    // reconnect left/right + update parent map/start if necessary\n                    if (this.left !== null) {\n                        var right = this.left.right;\n                        this.right = right;\n                        this.left.right = this;\n                    } else {\n                        var r;\n                        if (this.parentSub !== null) {\n                            r = /** @type {AbstractType<any>} */ this.parent._map.get(this.parentSub) || null;\n                            while(r !== null && r.left !== null)r = r.left;\n                        } else {\n                            r = /** @type {AbstractType<any>} */ this.parent._start; /** @type {AbstractType<any>} */ \n                            this.parent._start = this;\n                        }\n                        this.right = r;\n                    }\n                    if (this.right !== null) this.right.left = this;\n                    else if (this.parentSub !== null) {\n                        // set as current parent value if right === null and this is parentSub\n                        /** @type {AbstractType<any>} */ this.parent._map.set(this.parentSub, this);\n                        if (this.left !== null) // this is the current attribute value of parent. delete right\n                        this.left[\"delete\"](transaction);\n                    }\n                    // adjust length of parent\n                    if (this.parentSub === null && this.countable && !this.deleted) /** @type {AbstractType<any>} */ this.parent._length += this.length;\n                    addStruct(transaction.doc.store, this);\n                    this.content.integrate(transaction, this);\n                    // add parent to transaction.changed\n                    addChangedTypeToTransaction(transaction, /** @type {AbstractType<any>} */ this.parent, this.parentSub);\n                    if (/** @type {AbstractType<any>} */ this.parent._item !== null && /** @type {AbstractType<any>} */ this.parent._item.deleted || this.parentSub !== null && this.right !== null) // delete if parent is deleted or if this is not the current attribute value of parent\n                    this[\"delete\"](transaction);\n                } else // parent is not defined. Integrate GC struct instead\n                new GC(this.id, this.length).integrate(transaction, 0);\n            }\n        },\n        {\n            key: \"next\",\n            get: /**\n   * Returns the next non-deleted item\n   */ function get() {\n                var n = this.right;\n                while(n !== null && n.deleted)n = n.right;\n                return n;\n            }\n        },\n        {\n            key: \"prev\",\n            get: /**\n   * Returns the previous non-deleted item\n   */ function get() {\n                var n = this.left;\n                while(n !== null && n.deleted)n = n.left;\n                return n;\n            }\n        },\n        {\n            key: \"lastId\",\n            get: /**\n   * Computes the last content address of this Item.\n   */ function get() {\n                // allocating ids is pretty costly because of the amount of ids created, so we try to reuse whenever possible\n                return this.length === 1 ? this.id : createID(this.id.client, this.id.clock + this.length - 1);\n            }\n        },\n        {\n            /**\n   * Try to merge two items\n   *\n   * @param {Item} right\n   * @return {boolean}\n   */ key: \"mergeWith\",\n            value: function mergeWith(right) {\n                var _this = this;\n                if (this.constructor === right.constructor && compareIDs(right.origin, this.lastId) && this.right === right && compareIDs(this.rightOrigin, right.rightOrigin) && this.id.client === right.id.client && this.id.clock + this.length === right.id.clock && this.deleted === right.deleted && this.redone === null && right.redone === null && this.content.constructor === right.content.constructor && this.content.mergeWith(right.content)) {\n                    var searchMarker = /** @type {AbstractType<any>} */ this.parent._searchMarker;\n                    if (searchMarker) searchMarker.forEach(function(marker) {\n                        if (marker.p === right) {\n                            // right is going to be \"forgotten\" so we need to update the marker\n                            marker.p = _this;\n                            // adjust marker index\n                            if (!_this.deleted && _this.countable) marker.index -= _this.length;\n                        }\n                    });\n                    if (right.keep) this.keep = true;\n                    this.right = right.right;\n                    if (this.right !== null) this.right.left = this;\n                    this.length += right.length;\n                    return true;\n                }\n                return false;\n            }\n        },\n        {\n            /**\n   * Mark this Item as deleted.\n   *\n   * @param {Transaction} transaction\n   */ key: \"delete\",\n            value: function _delete(transaction) {\n                if (!this.deleted) {\n                    var parent = /** @type {AbstractType<any>} */ this.parent;\n                    // adjust the length of parent\n                    if (this.countable && this.parentSub === null) parent._length -= this.length;\n                    this.markDeleted();\n                    addToDeleteSet(transaction.deleteSet, this.id.client, this.id.clock, this.length);\n                    addChangedTypeToTransaction(transaction, parent, this.parentSub);\n                    this.content[\"delete\"](transaction);\n                }\n            }\n        },\n        {\n            /**\n   * @param {StructStore} store\n   * @param {boolean} parentGCd\n   */ key: \"gc\",\n            value: function gc(store, parentGCd) {\n                if (!this.deleted) throw _error.unexpectedCase();\n                this.content.gc(store);\n                if (parentGCd) replaceStruct(store, this, new GC(this.id, this.length));\n                else this.content = new ContentDeleted(this.length);\n            }\n        },\n        {\n            /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   * @param {number} offset\n   */ key: \"write\",\n            value: function write(encoder, offset) {\n                var origin = offset > 0 ? createID(this.id.client, this.id.clock + offset - 1) : this.origin;\n                var rightOrigin = this.rightOrigin;\n                var parentSub = this.parentSub;\n                var info = this.content.getRef() & _binary.BITS5 | (origin === null ? 0 : _binary.BIT8) | // origin is defined\n                (rightOrigin === null ? 0 : _binary.BIT7) | // right origin is defined\n                (parentSub === null ? 0 : _binary.BIT6); // parentSub is non-null\n                encoder.writeInfo(info);\n                if (origin !== null) encoder.writeLeftID(origin);\n                if (rightOrigin !== null) encoder.writeRightID(rightOrigin);\n                if (origin === null && rightOrigin === null) {\n                    var parent = /** @type {AbstractType<any>} */ this.parent;\n                    if (parent._item !== undefined) {\n                        var parentItem = parent._item;\n                        if (parentItem === null) {\n                            // parent type on y._map\n                            // find the correct key\n                            var ykey = findRootTypeKey(parent);\n                            encoder.writeParentInfo(true); // write parentYKey\n                            encoder.writeString(ykey);\n                        } else {\n                            encoder.writeParentInfo(false); // write parent id\n                            encoder.writeLeftID(parentItem.id);\n                        }\n                    } else if (parent.constructor === String) {\n                        encoder.writeParentInfo(true); // write parentYKey\n                        encoder.writeString(parent);\n                    } else if (parent.constructor === ID) {\n                        encoder.writeParentInfo(false); // write parent id\n                        encoder.writeLeftID(parent);\n                    } else _error.unexpectedCase();\n                    if (parentSub !== null) encoder.writeString(parentSub);\n                }\n                this.content.write(encoder, offset);\n            }\n        }\n    ]);\n    return Item;\n}(AbstractStruct);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @param {number} info\n */ var readItemContent = function(decoder, info) {\n    return contentRefs[info & _binary.BITS5](decoder);\n};\n/**\n * A lookup map for reading Item content.\n *\n * @type {Array<function(UpdateDecoderV1 | UpdateDecoderV2):AbstractContent>}\n */ var contentRefs = [\n    function() {\n        _error.unexpectedCase();\n    },\n    readContentDeleted,\n    readContentJSON,\n    readContentBinary,\n    readContentString,\n    readContentEmbed,\n    readContentFormat,\n    readContentType,\n    readContentAny,\n    readContentDoc,\n    function() {\n        _error.unexpectedCase();\n    } // 10 - Skip is not ItemContent\n];\nvar structSkipRefNumber = 10;\n/**\n * @private\n */ var Skip = /*#__PURE__*/ function(AbstractStruct) {\n    \"use strict\";\n    (0, _inherits._)(Skip, AbstractStruct);\n    var _super = (0, _createSuper._)(Skip);\n    function Skip() {\n        (0, _classCallCheck._)(this, Skip);\n        return _super.apply(this, arguments);\n    }\n    (0, _createClass._)(Skip, [\n        {\n            key: \"deleted\",\n            get: function get() {\n                return true;\n            }\n        },\n        {\n            key: \"delete\",\n            value: function _delete() {}\n        },\n        {\n            /**\n   * @param {Skip} right\n   * @return {boolean}\n   */ key: \"mergeWith\",\n            value: function mergeWith(right) {\n                if (this.constructor !== right.constructor) return false;\n                this.length += right.length;\n                return true;\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */ key: \"integrate\",\n            value: function integrate(transaction, offset) {\n                // skip structs cannot be integrated\n                _error.unexpectedCase();\n            }\n        },\n        {\n            /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */ key: \"write\",\n            value: function write(encoder, offset) {\n                encoder.writeInfo(structSkipRefNumber);\n                // write as VarUint because Skips can't make use of predictable length-encoding\n                _encoding.writeVarUint(encoder.restEncoder, this.length - offset);\n            }\n        },\n        {\n            /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */ key: \"getMissing\",\n            value: function getMissing(transaction, store) {\n                return null;\n            }\n        }\n    ]);\n    return Skip;\n}(AbstractStruct);\n/** eslint-env browser */ var glo = /** @type {any} */ typeof globalThis !== \"undefined\" ? globalThis : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {};\nvar importIdentifier = \"__ $YJS$ __\";\nif (glo[importIdentifier] === true) /**\n   * Dear reader of this message. Please take this seriously.\n   *\n   * If you see this message, make sure that you only import one version of Yjs. In many cases,\n   * your package manager installs two versions of Yjs that are used by different packages within your project.\n   * Another reason for this message is that some parts of your project use the commonjs version of Yjs\n   * and others use the EcmaScript version of Yjs.\n   *\n   * This often leads to issues that are hard to debug. We often need to perform constructor checks,\n   * e.g. `struct instanceof GC`. If you imported different versions of Yjs, it is impossible for us to\n   * do the constructor checks anymore - which might break the CRDT algorithm.\n   *\n   * https://github.com/yjs/yjs/issues/438\n   */ console.error(\"Yjs was already imported. This breaks constructor checks and will lead to issues! - https://github.com/yjs/yjs/issues/438\");\nglo[importIdentifier] = true;\n\n},{\"@swc/helpers/_/_assert_this_initialized\":\"klQmr\",\"@swc/helpers/_/_class_call_check\":\"6tPd8\",\"@swc/helpers/_/_create_class\":\"kdmA3\",\"@swc/helpers/_/_define_property\":\"3xmRB\",\"@swc/helpers/_/_get\":\"2invZ\",\"@swc/helpers/_/_get_prototype_of\":\"7kA23\",\"@swc/helpers/_/_inherits\":\"F8Yln\",\"@swc/helpers/_/_object_spread\":\"j01jQ\",\"@swc/helpers/_/_object_spread_props\":\"jpe5k\",\"@swc/helpers/_/_sliced_to_array\":\"hvLP1\",\"@swc/helpers/_/_to_consumable_array\":\"glvYM\",\"@swc/helpers/_/_create_super\":\"4DJgF\",\"@swc/helpers/_/_ts_generator\":\"6UgKg\",\"lib0/observable\":\"28UG3\",\"lib0/array\":\"4cUzV\",\"lib0/math\":\"2l7a2\",\"lib0/map\":\"gBEz7\",\"lib0/encoding\":\"i3bjT\",\"lib0/decoding\":\"bprzL\",\"lib0/random\":\"fpVbc\",\"lib0/promise\":\"5kKgU\",\"lib0/buffer\":\"1BdfW\",\"lib0/error\":\"jYzrA\",\"lib0/binary\":\"clP3G\",\"lib0/function\":\"jxxnY\",\"lib0/set\":\"8eTm4\",\"lib0/logging\":\"96K0t\",\"lib0/time\":\"U43St\",\"lib0/string\":\"4ya7r\",\"lib0/iterator\":\"geSv0\",\"lib0/object\":\"gdwvK\",\"lib0/environment\":\"dak8L\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"klQmr\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _assert_this_initialized;\n});\nfunction _assert_this_initialized(self) {\n    if (self === void 0) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return self;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"6tPd8\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _class_call_check;\n});\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"kdmA3\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _create_class;\n});\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"3xmRB\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _define_property;\n});\nfunction _define_property(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"2invZ\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _get;\n});\nvar _superPropBaseJs = require(\"./_super_prop_base.js\");\nfunction _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) _get = Reflect.get;\n    else _get = function get(target, property, receiver) {\n        var base = (0, _superPropBaseJs._)(target, property);\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n        if (desc.get) return desc.get.call(receiver || target);\n        return desc.value;\n    };\n    return _get(target, property, receiver || target);\n}\n\n},{\"./_super_prop_base.js\":\"8heIh\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"8heIh\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _super_prop_base;\n});\nvar _getPrototypeOfJs = require(\"./_get_prototype_of.js\");\nfunction _super_prop_base(object, property) {\n    while(!Object.prototype.hasOwnProperty.call(object, property)){\n        object = (0, _getPrototypeOfJs._)(object);\n        if (object === null) break;\n    }\n    return object;\n}\n\n},{\"./_get_prototype_of.js\":\"7kA23\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"7kA23\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _get_prototype_of;\n});\nfunction _get_prototype_of(o) {\n    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _get_prototype_of(o);\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"F8Yln\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _inherits;\n});\nvar _setPrototypeOfJs = require(\"./_set_prototype_of.js\");\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) throw new TypeError(\"Super expression must either be null or a function\");\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) (0, _setPrototypeOfJs._)(subClass, superClass);\n}\n\n},{\"./_set_prototype_of.js\":\"8hU9i\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"8hU9i\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _set_prototype_of;\n});\nfunction _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _set_prototype_of(o, p);\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"j01jQ\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _object_spread;\n});\nvar _definePropertyJs = require(\"./_define_property.js\");\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        }));\n        ownKeys.forEach(function(key) {\n            (0, _definePropertyJs._)(target, key, source[key]);\n        });\n    }\n    return target;\n}\n\n},{\"./_define_property.js\":\"3xmRB\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"jpe5k\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _object_spread_props;\n});\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    else ownKeys(Object(source)).forEach(function(key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n    return target;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"4DJgF\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _create_super;\n});\nvar _getPrototypeOfJs = require(\"./_get_prototype_of.js\");\nvar _isNativeReflectConstructJs = require(\"./_is_native_reflect_construct.js\");\nvar _possibleConstructorReturnJs = require(\"./_possible_constructor_return.js\");\nfunction _create_super(Derived) {\n    var hasNativeReflectConstruct = (0, _isNativeReflectConstructJs._)();\n    return function _createSuperInternal() {\n        var Super = (0, _getPrototypeOfJs._)(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = (0, _getPrototypeOfJs._)(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else result = Super.apply(this, arguments);\n        return (0, _possibleConstructorReturnJs._)(this, result);\n    };\n}\n\n},{\"./_get_prototype_of.js\":\"7kA23\",\"./_is_native_reflect_construct.js\":\"giogc\",\"./_possible_constructor_return.js\":\"iIgza\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"giogc\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _is_native_reflect_construct;\n});\nfunction _is_native_reflect_construct() {\n    // Since Reflect.construct can't be properly polyfilled, some\n    // implementations (e.g. core-js@2) don't set the correct internal slots.\n    // Those polyfills don't allow us to subclass built-ins, so we need to\n    // use our fallback implementation.\n    try {\n        // If the internal slots aren't set, this throws an error similar to\n        //   TypeError: this is not a Boolean object.\n        var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n    } catch (_) {}\n    return (_is_native_reflect_construct = function() {\n        return !!result;\n    })();\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"iIgza\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _possible_constructor_return;\n});\nvar _assertThisInitializedJs = require(\"./_assert_this_initialized.js\");\nvar _typeOfJs = require(\"./_type_of.js\");\nfunction _possible_constructor_return(self, call) {\n    if (call && ((0, _typeOfJs._)(call) === \"object\" || typeof call === \"function\")) return call;\n    return (0, _assertThisInitializedJs._)(self);\n}\n\n},{\"./_assert_this_initialized.js\":\"klQmr\",\"./_type_of.js\":\"3BgET\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"3BgET\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _type_of;\n});\nfunction _type_of(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"6UgKg\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return 0, _tslib.__generator;\n});\nvar _tslib = require(\"tslib\");\n\n},{\"tslib\":\"gZhDD\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"gZhDD\":[function(require,module,exports) {\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol, Iterator */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"__extends\", function() {\n    return __extends;\n});\nparcelHelpers.export(exports, \"__assign\", function() {\n    return __assign;\n});\nparcelHelpers.export(exports, \"__rest\", function() {\n    return __rest;\n});\nparcelHelpers.export(exports, \"__decorate\", function() {\n    return __decorate;\n});\nparcelHelpers.export(exports, \"__param\", function() {\n    return __param;\n});\nparcelHelpers.export(exports, \"__esDecorate\", function() {\n    return __esDecorate;\n});\nparcelHelpers.export(exports, \"__runInitializers\", function() {\n    return __runInitializers;\n});\nparcelHelpers.export(exports, \"__propKey\", function() {\n    return __propKey;\n});\nparcelHelpers.export(exports, \"__setFunctionName\", function() {\n    return __setFunctionName;\n});\nparcelHelpers.export(exports, \"__metadata\", function() {\n    return __metadata;\n});\nparcelHelpers.export(exports, \"__awaiter\", function() {\n    return __awaiter;\n});\nparcelHelpers.export(exports, \"__generator\", function() {\n    return __generator;\n});\nparcelHelpers.export(exports, \"__createBinding\", function() {\n    return __createBinding;\n});\nparcelHelpers.export(exports, \"__exportStar\", function() {\n    return __exportStar;\n});\nparcelHelpers.export(exports, \"__values\", function() {\n    return __values;\n});\nparcelHelpers.export(exports, \"__read\", function() {\n    return __read;\n});\n/** @deprecated */ parcelHelpers.export(exports, \"__spread\", function() {\n    return __spread;\n});\n/** @deprecated */ parcelHelpers.export(exports, \"__spreadArrays\", function() {\n    return __spreadArrays;\n});\nparcelHelpers.export(exports, \"__spreadArray\", function() {\n    return __spreadArray;\n});\nparcelHelpers.export(exports, \"__await\", function() {\n    return __await;\n});\nparcelHelpers.export(exports, \"__asyncGenerator\", function() {\n    return __asyncGenerator;\n});\nparcelHelpers.export(exports, \"__asyncDelegator\", function() {\n    return __asyncDelegator;\n});\nparcelHelpers.export(exports, \"__asyncValues\", function() {\n    return __asyncValues;\n});\nparcelHelpers.export(exports, \"__makeTemplateObject\", function() {\n    return __makeTemplateObject;\n});\nparcelHelpers.export(exports, \"__importStar\", function() {\n    return __importStar;\n});\nparcelHelpers.export(exports, \"__importDefault\", function() {\n    return __importDefault;\n});\nparcelHelpers.export(exports, \"__classPrivateFieldGet\", function() {\n    return __classPrivateFieldGet;\n});\nparcelHelpers.export(exports, \"__classPrivateFieldSet\", function() {\n    return __classPrivateFieldSet;\n});\nparcelHelpers.export(exports, \"__classPrivateFieldIn\", function() {\n    return __classPrivateFieldIn;\n});\nparcelHelpers.export(exports, \"__addDisposableResource\", function() {\n    return __addDisposableResource;\n});\nparcelHelpers.export(exports, \"__disposeResources\", function() {\n    return __disposeResources;\n});\nparcelHelpers.export(exports, \"__rewriteRelativeImportExtension\", function() {\n    return __rewriteRelativeImportExtension;\n});\nvar _typeOf = require(\"@swc/helpers/_/_type_of\");\nvar extendStatics = function extendStatics1(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function __assign1() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") {\n        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) {\n        if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n        return f;\n    }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for(var i = decorators.length - 1; i >= 0; i--){\n        var context = {};\n        for(var p in contextIn)context[p] = p === \"access\" ? {} : contextIn[p];\n        for(var p in contextIn.access)context.access[p] = contextIn.access[p];\n        context.addInitializer = function(f) {\n            if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n            extraInitializers.push(accept(f || null));\n        };\n        var result = (0, decorators[i])(kind === \"accessor\" ? {\n            get: descriptor.get,\n            set: descriptor.set\n        } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        } else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n}\nfunction __runInitializers(thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    return useValue ? value : void 0;\n}\nfunction __propKey(x) {\n    return (typeof x === \"undefined\" ? \"undefined\" : (0, _typeOf._)(x)) === \"symbol\" ? x : \"\".concat(x);\n}\nfunction __setFunctionName(f, name, prefix) {\n    if ((typeof name === \"undefined\" ? \"undefined\" : (0, _typeOf._)(name)) === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", {\n        configurable: true,\n        value: prefix ? \"\".concat(prefix, \" \", name) : name\n    });\n}\nfunction __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function sent() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nvar __createBinding = Object.create ? function __createBinding(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {\n        enumerable: true,\n        get: function get() {\n            return m[k];\n        }\n    };\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n};\nfunction __exportStar(m, o) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function next() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spread() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\nfunction __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) {\n        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function awaitReturn(f) {\n        return function(v) {\n            return Promise.resolve(v).then(f, reject);\n        };\n    }\n    function verb(n, f) {\n        if (g[n]) {\n            i[n] = function(v) {\n                return new Promise(function(a, b) {\n                    q.push([\n                        n,\n                        v,\n                        a,\n                        b\n                    ]) > 1 || resume(n, v);\n                });\n            };\n            if (f) i[n] = f(i[n]);\n        }\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: false\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) Object.defineProperty(cooked, \"raw\", {\n        value: raw\n    });\n    else cooked.raw = raw;\n    return cooked;\n}\nvar __setModuleDefault = Object.create ? function __setModuleDefault(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n};\nfunction __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n}\nfunction __importDefault(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n}\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\nfunction __classPrivateFieldIn(state, receiver) {\n    if (receiver === null || typeof receiver !== \"object\" && typeof receiver !== \"function\") throw new TypeError(\"Cannot use 'in' operator on non-object\");\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\nfunction __addDisposableResource(env, value, async) {\n    if (value !== null && value !== void 0) {\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n        var dispose, inner;\n        if (async) {\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n            dispose = value[Symbol.asyncDispose];\n        }\n        if (dispose === void 0) {\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n            dispose = value[Symbol.dispose];\n            if (async) inner = dispose;\n        }\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n        if (inner) dispose = function dispose() {\n            try {\n                inner.call(this);\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        };\n        env.stack.push({\n            value: value,\n            dispose: dispose,\n            async: async\n        });\n    } else if (async) env.stack.push({\n        async: true\n    });\n    return value;\n}\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function _SuppressedError(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nfunction __disposeResources(env) {\n    function fail(e) {\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n        env.hasError = true;\n    }\n    var r, s = 0;\n    function next() {\n        while(r = env.stack.pop())try {\n            if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n            if (r.dispose) {\n                var result = r.dispose.call(r.value);\n                if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {\n                    fail(e);\n                    return next();\n                });\n            } else s |= 1;\n        } catch (e) {\n            fail(e);\n        }\n        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n        if (env.hasError) throw env.error;\n    }\n    return next();\n}\nfunction __rewriteRelativeImportExtension(path, preserveJsx) {\n    if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function(m, tsx, d, ext, cm) {\n        return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : d + ext + \".\" + cm.toLowerCase() + \"js\";\n    });\n    return path;\n}\nexports.default = {\n    __extends: __extends,\n    __assign: __assign,\n    __rest: __rest,\n    __decorate: __decorate,\n    __param: __param,\n    __esDecorate: __esDecorate,\n    __runInitializers: __runInitializers,\n    __propKey: __propKey,\n    __setFunctionName: __setFunctionName,\n    __metadata: __metadata,\n    __awaiter: __awaiter,\n    __generator: __generator,\n    __createBinding: __createBinding,\n    __exportStar: __exportStar,\n    __values: __values,\n    __read: __read,\n    __spread: __spread,\n    __spreadArrays: __spreadArrays,\n    __spreadArray: __spreadArray,\n    __await: __await,\n    __asyncGenerator: __asyncGenerator,\n    __asyncDelegator: __asyncDelegator,\n    __asyncValues: __asyncValues,\n    __makeTemplateObject: __makeTemplateObject,\n    __importStar: __importStar,\n    __importDefault: __importDefault,\n    __classPrivateFieldGet: __classPrivateFieldGet,\n    __classPrivateFieldSet: __classPrivateFieldSet,\n    __classPrivateFieldIn: __classPrivateFieldIn,\n    __addDisposableResource: __addDisposableResource,\n    __disposeResources: __disposeResources,\n    __rewriteRelativeImportExtension: __rewriteRelativeImportExtension\n};\n\n},{\"@swc/helpers/_/_type_of\":\"3BgET\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"28UG3\":[function(require,module,exports) {\n/**\n * Observable class prototype.\n *\n * @module observable\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"ObservableV2\", function() {\n    return ObservableV2;\n});\nparcelHelpers.export(exports, \"Observable\", function() {\n    return Observable;\n});\nvar _classCallCheck = require(\"@swc/helpers/_/_class_call_check\");\nvar _createClass = require(\"@swc/helpers/_/_create_class\");\nvar _toConsumableArray = require(\"@swc/helpers/_/_to_consumable_array\");\nvar _mapJs = require(\"./map.js\");\nvar _setJs = require(\"./set.js\");\nvar _arrayJs = require(\"./array.js\");\nvar ObservableV2 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ObservableV2() {\n        (0, _classCallCheck._)(this, ObservableV2);\n        /**\n     * Some desc.\n     * @type {Map<string, Set<any>>}\n     */ this._observers = _mapJs.create();\n    }\n    (0, _createClass._)(ObservableV2, [\n        {\n            /**\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name\n   * @param {EVENTS[NAME]} f\n   */ key: \"on\",\n            value: function on(name, f) {\n                _mapJs.setIfUndefined(this._observers, /** @type {string} */ name, _setJs.create).add(f);\n                return f;\n            }\n        },\n        {\n            /**\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name\n   * @param {EVENTS[NAME]} f\n   */ key: \"once\",\n            value: function once(name, f) {\n                var _this = this;\n                /**\n     * @param  {...any} args\n     */ var _f = function() {\n                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                        args[_key] = arguments[_key];\n                    }\n                    _this.off(name, /** @type {any} */ _f);\n                    f.apply(void 0, (0, _toConsumableArray._)(args));\n                };\n                this.on(name, /** @type {any} */ _f);\n            }\n        },\n        {\n            /**\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name\n   * @param {EVENTS[NAME]} f\n   */ key: \"off\",\n            value: function off(name, f) {\n                var observers = this._observers.get(name);\n                if (observers !== undefined) {\n                    observers[\"delete\"](f);\n                    if (observers.size === 0) this._observers[\"delete\"](name);\n                }\n            }\n        },\n        {\n            /**\n   * Emit a named event. All registered event listeners that listen to the\n   * specified name will receive the event.\n   *\n   * @todo This should catch exceptions\n   *\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name The event name.\n   * @param {Parameters<EVENTS[NAME]>} args The arguments that are applied to the event listener.\n   */ key: \"emit\",\n            value: function emit(name, args) {\n                // copy all listeners to an array first to make sure that no event is emitted to listeners that are subscribed while the event handler is called.\n                return _arrayJs.from((this._observers.get(name) || _mapJs.create()).values()).forEach(function(f) {\n                    return f.apply(void 0, (0, _toConsumableArray._)(args));\n                });\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function destroy() {\n                this._observers = _mapJs.create();\n            }\n        }\n    ]);\n    return ObservableV2;\n}();\nvar Observable = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Observable() {\n        (0, _classCallCheck._)(this, Observable);\n        /**\n     * Some desc.\n     * @type {Map<N, any>}\n     */ this._observers = _mapJs.create();\n    }\n    (0, _createClass._)(Observable, [\n        {\n            /**\n   * @param {N} name\n   * @param {function} f\n   */ key: \"on\",\n            value: function on(name, f) {\n                _mapJs.setIfUndefined(this._observers, name, _setJs.create).add(f);\n            }\n        },\n        {\n            /**\n   * @param {N} name\n   * @param {function} f\n   */ key: \"once\",\n            value: function once(name, f) {\n                var _this = this;\n                /**\n     * @param  {...any} args\n     */ var _f = function() {\n                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                        args[_key] = arguments[_key];\n                    }\n                    _this.off(name, _f);\n                    f.apply(void 0, (0, _toConsumableArray._)(args));\n                };\n                this.on(name, _f);\n            }\n        },\n        {\n            /**\n   * @param {N} name\n   * @param {function} f\n   */ key: \"off\",\n            value: function off(name, f) {\n                var observers = this._observers.get(name);\n                if (observers !== undefined) {\n                    observers[\"delete\"](f);\n                    if (observers.size === 0) this._observers[\"delete\"](name);\n                }\n            }\n        },\n        {\n            /**\n   * Emit a named event. All registered event listeners that listen to the\n   * specified name will receive the event.\n   *\n   * @todo This should catch exceptions\n   *\n   * @param {N} name The event name.\n   * @param {Array<any>} args The arguments that are applied to the event listener.\n   */ key: \"emit\",\n            value: function emit(name, args) {\n                // copy all listeners to an array first to make sure that no event is emitted to listeners that are subscribed while the event handler is called.\n                return _arrayJs.from((this._observers.get(name) || _mapJs.create()).values()).forEach(function(f) {\n                    return f.apply(void 0, (0, _toConsumableArray._)(args));\n                });\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function destroy() {\n                this._observers = _mapJs.create();\n            }\n        }\n    ]);\n    return Observable;\n} /* c8 ignore end */ ();\n\n},{\"@swc/helpers/_/_class_call_check\":\"6tPd8\",\"@swc/helpers/_/_create_class\":\"kdmA3\",\"@swc/helpers/_/_to_consumable_array\":\"glvYM\",\"./map.js\":\"gBEz7\",\"./set.js\":\"8eTm4\",\"./array.js\":\"4cUzV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"gBEz7\":[function(require,module,exports) {\n/**\n * Utility module to work with key-value stores.\n *\n * @module map\n */ /**\n * Creates a new Map instance.\n *\n * @function\n * @return {Map<any, any>}\n *\n * @function\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"create\", function() {\n    return create;\n});\nparcelHelpers.export(exports, \"copy\", function() {\n    return copy;\n});\nparcelHelpers.export(exports, \"setIfUndefined\", function() {\n    return setIfUndefined;\n});\nparcelHelpers.export(exports, \"map\", function() {\n    return map;\n});\nparcelHelpers.export(exports, \"any\", function() {\n    return any;\n});\nparcelHelpers.export(exports, \"all\", function() {\n    return all;\n});\nvar _slicedToArray = require(\"@swc/helpers/_/_sliced_to_array\");\nvar create = function() {\n    return new Map();\n};\nvar copy = function(m) {\n    var r = create();\n    m.forEach(function(v, k) {\n        r.set(k, v);\n    });\n    return r;\n};\nvar setIfUndefined = function(map, key, createT) {\n    var set = map.get(key);\n    if (set === undefined) map.set(key, set = createT());\n    return set;\n};\nvar map = function(m, f) {\n    var res = [];\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = m[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var _step_value = (0, _slicedToArray._)(_step.value, 2), key = _step_value[0], value = _step_value[1];\n            res.push(f(value, key));\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                _iterator[\"return\"]();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return res;\n};\nvar any = function(m, f) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = m[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var _step_value = (0, _slicedToArray._)(_step.value, 2), key = _step_value[0], value = _step_value[1];\n            if (f(value, key)) return true;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                _iterator[\"return\"]();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return false;\n};\nvar all = function(m, f) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = m[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var _step_value = (0, _slicedToArray._)(_step.value, 2), key = _step_value[0], value = _step_value[1];\n            if (!f(value, key)) return false;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                _iterator[\"return\"]();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return true;\n};\n\n},{\"@swc/helpers/_/_sliced_to_array\":\"hvLP1\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"8eTm4\":[function(require,module,exports) {\n/**\n * Utility module to work with sets.\n *\n * @module set\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"create\", function() {\n    return create;\n});\nparcelHelpers.export(exports, \"toArray\", function() {\n    return toArray;\n});\nparcelHelpers.export(exports, \"first\", function() {\n    return first;\n});\nparcelHelpers.export(exports, \"from\", function() {\n    return from;\n});\nvar create = function() {\n    return new Set();\n};\nvar toArray = function(set) {\n    return Array.from(set);\n};\nvar first = function(set) {\n    var _set_values_next_value;\n    return (_set_values_next_value = set.values().next().value) !== null && _set_values_next_value !== void 0 ? _set_values_next_value : undefined;\n};\nvar from = function(entries) {\n    return new Set(entries);\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"4cUzV\":[function(require,module,exports) {\n/**\n * Utility module to work with Arrays.\n *\n * @module array\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"last\", function() {\n    return last;\n});\nparcelHelpers.export(exports, \"create\", function() {\n    return create;\n});\nparcelHelpers.export(exports, \"copy\", function() {\n    return copy;\n});\nparcelHelpers.export(exports, \"appendTo\", function() {\n    return appendTo;\n});\nparcelHelpers.export(exports, \"from\", function() {\n    return from;\n});\nparcelHelpers.export(exports, \"every\", function() {\n    return every;\n});\nparcelHelpers.export(exports, \"some\", function() {\n    return some;\n});\nparcelHelpers.export(exports, \"equalFlat\", function() {\n    return equalFlat;\n});\nparcelHelpers.export(exports, \"flatten\", function() {\n    return flatten;\n});\nparcelHelpers.export(exports, \"unfold\", function() {\n    return unfold;\n});\nparcelHelpers.export(exports, \"fold\", function() {\n    return fold;\n});\nparcelHelpers.export(exports, \"isArray\", function() {\n    return isArray;\n});\nparcelHelpers.export(exports, \"unique\", function() {\n    return unique;\n});\nparcelHelpers.export(exports, \"uniqueBy\", function() {\n    return uniqueBy;\n});\nparcelHelpers.export(exports, \"map\", function() {\n    return map;\n});\nvar _setJs = require(\"./set.js\");\nvar last = function(arr) {\n    return arr[arr.length - 1];\n};\nvar create = function() {\n    return /** @type {Array<C>} */ [];\n};\nvar copy = function(a) {\n    return /** @type {Array<D>} */ a.slice();\n};\nvar appendTo = function(dest, src) {\n    for(var i = 0; i < src.length; i++)dest.push(src[i]);\n};\nvar from = Array.from;\nvar every = function(arr, f) {\n    for(var i = 0; i < arr.length; i++){\n        if (!f(arr[i], i, arr)) return false;\n    }\n    return true;\n};\nvar some = function(arr, f) {\n    for(var i = 0; i < arr.length; i++){\n        if (f(arr[i], i, arr)) return true;\n    }\n    return false;\n};\nvar equalFlat = function(a, b) {\n    return a.length === b.length && every(a, function(item, index) {\n        return item === b[index];\n    });\n};\nvar flatten = function(arr) {\n    return fold(arr, /** @type {Array<ELEM>} */ [], function(acc, val) {\n        return acc.concat(val);\n    });\n};\nvar unfold = function(len, f) {\n    var array = new Array(len);\n    for(var i = 0; i < len; i++)array[i] = f(i, array);\n    return array;\n};\nvar fold = function(arr, seed, folder) {\n    return arr.reduce(folder, seed);\n};\nvar isArray = Array.isArray;\nvar unique = function(arr) {\n    return from(_setJs.from(arr));\n};\nvar uniqueBy = function(arr, mapper) {\n    /**\n   * @type {Set<M>}\n   */ var happened = _setJs.create();\n    /**\n   * @type {Array<T>}\n   */ var result = [];\n    for(var i = 0; i < arr.length; i++){\n        var el = arr[i];\n        var mapped = mapper(el);\n        if (!happened.has(mapped)) {\n            happened.add(mapped);\n            result.push(el);\n        }\n    }\n    return result;\n};\nvar map = function(arr, mapper) {\n    /**\n   * @type {Array<any>}\n   */ var res = Array(arr.length);\n    for(var i = 0; i < arr.length; i++)res[i] = mapper(/** @type {any} */ arr[i], i, /** @type {any} */ arr);\n    return /** @type {any} */ res;\n};\n\n},{\"./set.js\":\"8eTm4\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"2l7a2\":[function(require,module,exports) {\n/**\n * Common Math expressions.\n *\n * @module math\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"floor\", function() {\n    return floor;\n});\nparcelHelpers.export(exports, \"ceil\", function() {\n    return ceil;\n});\nparcelHelpers.export(exports, \"abs\", function() {\n    return abs;\n});\nparcelHelpers.export(exports, \"imul\", function() {\n    return imul;\n});\nparcelHelpers.export(exports, \"round\", function() {\n    return round;\n});\nparcelHelpers.export(exports, \"log10\", function() {\n    return log10;\n});\nparcelHelpers.export(exports, \"log2\", function() {\n    return log2;\n});\nparcelHelpers.export(exports, \"log\", function() {\n    return log;\n});\nparcelHelpers.export(exports, \"sqrt\", function() {\n    return sqrt;\n});\nparcelHelpers.export(exports, \"add\", function() {\n    return add;\n});\nparcelHelpers.export(exports, \"min\", function() {\n    return min;\n});\nparcelHelpers.export(exports, \"max\", function() {\n    return max;\n});\nparcelHelpers.export(exports, \"isNaN\", function() {\n    return isNaN;\n});\nparcelHelpers.export(exports, \"pow\", function() {\n    return pow;\n});\nparcelHelpers.export(exports, \"exp10\", function() {\n    return exp10;\n});\nparcelHelpers.export(exports, \"sign\", function() {\n    return sign;\n});\nparcelHelpers.export(exports, \"isNegativeZero\", function() {\n    return isNegativeZero;\n});\nvar floor = Math.floor;\nvar ceil = Math.ceil;\nvar abs = Math.abs;\nvar imul = Math.imul;\nvar round = Math.round;\nvar log10 = Math.log10;\nvar log2 = Math.log2;\nvar log = Math.log;\nvar sqrt = Math.sqrt;\nvar add = function(a, b) {\n    return a + b;\n};\nvar min = function(a, b) {\n    return a < b ? a : b;\n};\nvar max = function(a, b) {\n    return a > b ? a : b;\n};\nvar isNaN = Number.isNaN;\nvar pow = Math.pow;\nvar exp10 = function(exp) {\n    return Math.pow(10, exp);\n};\nvar sign = Math.sign;\nvar isNegativeZero = function(n) {\n    return n !== 0 ? n < 0 : 1 / n < 0;\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"i3bjT\":[function(require,module,exports) {\n/**\n * Efficient schema-less binary encoding with support for variable length encoding.\n *\n * Use [lib0/encoding] with [lib0/decoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module encoding\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"Encoder\", function() {\n    return Encoder;\n});\nparcelHelpers.export(exports, \"createEncoder\", function() {\n    return createEncoder;\n});\nparcelHelpers.export(exports, \"encode\", function() {\n    return encode;\n});\nparcelHelpers.export(exports, \"length\", function() {\n    return length;\n});\nparcelHelpers.export(exports, \"hasContent\", function() {\n    return hasContent;\n});\nparcelHelpers.export(exports, \"toUint8Array\", function() {\n    return toUint8Array;\n});\nparcelHelpers.export(exports, \"verifyLen\", function() {\n    return verifyLen;\n});\nparcelHelpers.export(exports, \"write\", function() {\n    return write;\n});\nparcelHelpers.export(exports, \"set\", function() {\n    return set;\n});\nparcelHelpers.export(exports, \"writeUint8\", function() {\n    return writeUint8;\n});\nparcelHelpers.export(exports, \"setUint8\", function() {\n    return setUint8;\n});\nparcelHelpers.export(exports, \"writeUint16\", function() {\n    return writeUint16;\n});\nparcelHelpers.export(exports, \"setUint16\", function() {\n    return setUint16;\n});\nparcelHelpers.export(exports, \"writeUint32\", function() {\n    return writeUint32;\n});\nparcelHelpers.export(exports, \"writeUint32BigEndian\", function() {\n    return writeUint32BigEndian;\n});\nparcelHelpers.export(exports, \"setUint32\", function() {\n    return setUint32;\n});\nparcelHelpers.export(exports, \"writeVarUint\", function() {\n    return writeVarUint;\n});\nparcelHelpers.export(exports, \"writeVarInt\", function() {\n    return writeVarInt;\n});\nparcelHelpers.export(exports, \"_writeVarStringNative\", function() {\n    return _writeVarStringNative;\n});\nparcelHelpers.export(exports, \"_writeVarStringPolyfill\", function() {\n    return _writeVarStringPolyfill;\n});\nparcelHelpers.export(exports, \"writeVarString\", function() {\n    return writeVarString;\n});\nparcelHelpers.export(exports, \"writeTerminatedString\", function() {\n    return writeTerminatedString;\n});\nparcelHelpers.export(exports, \"writeTerminatedUint8Array\", function() {\n    return writeTerminatedUint8Array;\n});\nparcelHelpers.export(exports, \"writeBinaryEncoder\", function() {\n    return writeBinaryEncoder;\n});\nparcelHelpers.export(exports, \"writeUint8Array\", function() {\n    return writeUint8Array;\n});\nparcelHelpers.export(exports, \"writeVarUint8Array\", function() {\n    return writeVarUint8Array;\n});\nparcelHelpers.export(exports, \"writeOnDataView\", function() {\n    return writeOnDataView;\n});\nparcelHelpers.export(exports, \"writeFloat32\", function() {\n    return writeFloat32;\n});\nparcelHelpers.export(exports, \"writeFloat64\", function() {\n    return writeFloat64;\n});\nparcelHelpers.export(exports, \"writeBigInt64\", function() {\n    return writeBigInt64;\n});\nparcelHelpers.export(exports, \"writeBigUint64\", function() {\n    return writeBigUint64;\n});\nparcelHelpers.export(exports, \"writeAny\", function() {\n    return writeAny;\n});\nparcelHelpers.export(exports, \"RleEncoder\", function() {\n    return RleEncoder;\n});\nparcelHelpers.export(exports, \"IntDiffEncoder\", function() {\n    return IntDiffEncoder;\n});\nparcelHelpers.export(exports, \"RleIntDiffEncoder\", function() {\n    return RleIntDiffEncoder;\n});\nparcelHelpers.export(exports, \"UintOptRleEncoder\", function() {\n    return UintOptRleEncoder;\n});\nparcelHelpers.export(exports, \"IncUintOptRleEncoder\", function() {\n    return IncUintOptRleEncoder;\n});\nparcelHelpers.export(exports, \"IntDiffOptRleEncoder\", function() {\n    return IntDiffOptRleEncoder;\n});\nparcelHelpers.export(exports, \"StringEncoder\", function() {\n    return StringEncoder;\n});\nvar _classCallCheck = require(\"@swc/helpers/_/_class_call_check\");\nvar _createClass = require(\"@swc/helpers/_/_create_class\");\nvar _inherits = require(\"@swc/helpers/_/_inherits\");\nvar _typeOf = require(\"@swc/helpers/_/_type_of\");\nvar _createSuper = require(\"@swc/helpers/_/_create_super\");\nvar _mathJs = require(\"./math.js\");\nvar _numberJs = require(\"./number.js\");\nvar _binaryJs = require(\"./binary.js\");\nvar _stringJs = require(\"./string.js\");\nvar _arrayJs = require(\"./array.js\");\nvar Encoder = function Encoder() {\n    \"use strict\";\n    (0, _classCallCheck._)(this, Encoder);\n    this.cpos = 0;\n    this.cbuf = new Uint8Array(100);\n    /**\n     * @type {Array<Uint8Array>}\n     */ this.bufs = [];\n};\nvar createEncoder = function() {\n    return new Encoder();\n};\nvar encode = function(f) {\n    var encoder = createEncoder();\n    f(encoder);\n    return toUint8Array(encoder);\n};\nvar length = function(encoder) {\n    var len = encoder.cpos;\n    for(var i = 0; i < encoder.bufs.length; i++)len += encoder.bufs[i].length;\n    return len;\n};\nvar hasContent = function(encoder) {\n    return encoder.cpos > 0 || encoder.bufs.length > 0;\n};\nvar toUint8Array = function(encoder) {\n    var uint8arr = new Uint8Array(length(encoder));\n    var curPos = 0;\n    for(var i = 0; i < encoder.bufs.length; i++){\n        var d = encoder.bufs[i];\n        uint8arr.set(d, curPos);\n        curPos += d.length;\n    }\n    uint8arr.set(new Uint8Array(encoder.cbuf.buffer, 0, encoder.cpos), curPos);\n    return uint8arr;\n};\nvar verifyLen = function(encoder, len) {\n    var bufferLen = encoder.cbuf.length;\n    if (bufferLen - encoder.cpos < len) {\n        encoder.bufs.push(new Uint8Array(encoder.cbuf.buffer, 0, encoder.cpos));\n        encoder.cbuf = new Uint8Array(_mathJs.max(bufferLen, len) * 2);\n        encoder.cpos = 0;\n    }\n};\nvar write = function(encoder, num) {\n    var bufferLen = encoder.cbuf.length;\n    if (encoder.cpos === bufferLen) {\n        encoder.bufs.push(encoder.cbuf);\n        encoder.cbuf = new Uint8Array(bufferLen * 2);\n        encoder.cpos = 0;\n    }\n    encoder.cbuf[encoder.cpos++] = num;\n};\nvar set = function(encoder, pos, num) {\n    var buffer = null;\n    // iterate all buffers and adjust position\n    for(var i = 0; i < encoder.bufs.length && buffer === null; i++){\n        var b = encoder.bufs[i];\n        if (pos < b.length) buffer = b // found buffer\n        ;\n        else pos -= b.length;\n    }\n    if (buffer === null) // use current buffer\n    buffer = encoder.cbuf;\n    buffer[pos] = num;\n};\nvar writeUint8 = write;\nvar setUint8 = set;\nvar writeUint16 = function(encoder, num) {\n    write(encoder, num & _binaryJs.BITS8);\n    write(encoder, num >>> 8 & _binaryJs.BITS8);\n};\nvar setUint16 = function(encoder, pos, num) {\n    set(encoder, pos, num & _binaryJs.BITS8);\n    set(encoder, pos + 1, num >>> 8 & _binaryJs.BITS8);\n};\nvar writeUint32 = function(encoder, num) {\n    for(var i = 0; i < 4; i++){\n        write(encoder, num & _binaryJs.BITS8);\n        num >>>= 8;\n    }\n};\nvar writeUint32BigEndian = function(encoder, num) {\n    for(var i = 3; i >= 0; i--)write(encoder, num >>> 8 * i & _binaryJs.BITS8);\n};\nvar setUint32 = function(encoder, pos, num) {\n    for(var i = 0; i < 4; i++){\n        set(encoder, pos + i, num & _binaryJs.BITS8);\n        num >>>= 8;\n    }\n};\nvar writeVarUint = function(encoder, num) {\n    while(num > _binaryJs.BITS7){\n        write(encoder, _binaryJs.BIT8 | _binaryJs.BITS7 & num);\n        num = _mathJs.floor(num / 128) // shift >>> 7\n        ;\n    }\n    write(encoder, _binaryJs.BITS7 & num);\n};\nvar writeVarInt = function(encoder, num) {\n    var isNegative = _mathJs.isNegativeZero(num);\n    if (isNegative) num = -num;\n    //             |- whether to continue reading         |- whether is negative     |- number\n    write(encoder, (num > _binaryJs.BITS6 ? _binaryJs.BIT8 : 0) | (isNegative ? _binaryJs.BIT7 : 0) | _binaryJs.BITS6 & num);\n    num = _mathJs.floor(num / 64) // shift >>> 6\n    ;\n    // We don't need to consider the case of num === 0 so we can use a different\n    // pattern here than above.\n    while(num > 0){\n        write(encoder, (num > _binaryJs.BITS7 ? _binaryJs.BIT8 : 0) | _binaryJs.BITS7 & num);\n        num = _mathJs.floor(num / 128) // shift >>> 7\n        ;\n    }\n};\n/**\n * A cache to store strings temporarily\n */ var _strBuffer = new Uint8Array(30000);\nvar _maxStrBSize = _strBuffer.length / 3;\nvar _writeVarStringNative = function(encoder, str) {\n    if (str.length < _maxStrBSize) {\n        // We can encode the string into the existing buffer\n        /* c8 ignore next */ var written = _stringJs.utf8TextEncoder.encodeInto(str, _strBuffer).written || 0;\n        writeVarUint(encoder, written);\n        for(var i = 0; i < written; i++)write(encoder, _strBuffer[i]);\n    } else writeVarUint8Array(encoder, _stringJs.encodeUtf8(str));\n};\nvar _writeVarStringPolyfill = function(encoder, str) {\n    var encodedString = unescape(encodeURIComponent(str));\n    var len = encodedString.length;\n    writeVarUint(encoder, len);\n    for(var i = 0; i < len; i++)write(encoder, /** @type {number} */ encodedString.codePointAt(i));\n};\nvar writeVarString = _stringJs.utf8TextEncoder && /** @type {any} */ _stringJs.utf8TextEncoder.encodeInto ? _writeVarStringNative : _writeVarStringPolyfill;\nvar writeTerminatedString = function(encoder, str) {\n    return writeTerminatedUint8Array(encoder, _stringJs.encodeUtf8(str));\n};\nvar writeTerminatedUint8Array = function(encoder, buf) {\n    for(var i = 0; i < buf.length; i++){\n        var b = buf[i];\n        if (b === 0 || b === 1) write(encoder, 1);\n        write(encoder, buf[i]);\n    }\n    write(encoder, 0);\n};\nvar writeBinaryEncoder = function(encoder, append) {\n    return writeUint8Array(encoder, toUint8Array(append));\n};\nvar writeUint8Array = function(encoder, uint8Array) {\n    var bufferLen = encoder.cbuf.length;\n    var cpos = encoder.cpos;\n    var leftCopyLen = _mathJs.min(bufferLen - cpos, uint8Array.length);\n    var rightCopyLen = uint8Array.length - leftCopyLen;\n    encoder.cbuf.set(uint8Array.subarray(0, leftCopyLen), cpos);\n    encoder.cpos += leftCopyLen;\n    if (rightCopyLen > 0) {\n        // Still something to write, write right half..\n        // Append new buffer\n        encoder.bufs.push(encoder.cbuf);\n        // must have at least size of remaining buffer\n        encoder.cbuf = new Uint8Array(_mathJs.max(bufferLen * 2, rightCopyLen));\n        // copy array\n        encoder.cbuf.set(uint8Array.subarray(leftCopyLen));\n        encoder.cpos = rightCopyLen;\n    }\n};\nvar writeVarUint8Array = function(encoder, uint8Array) {\n    writeVarUint(encoder, uint8Array.byteLength);\n    writeUint8Array(encoder, uint8Array);\n};\nvar writeOnDataView = function(encoder, len) {\n    verifyLen(encoder, len);\n    var dview = new DataView(encoder.cbuf.buffer, encoder.cpos, len);\n    encoder.cpos += len;\n    return dview;\n};\nvar writeFloat32 = function(encoder, num) {\n    return writeOnDataView(encoder, 4).setFloat32(0, num, false);\n};\nvar writeFloat64 = function(encoder, num) {\n    return writeOnDataView(encoder, 8).setFloat64(0, num, false);\n};\nvar writeBigInt64 = function(encoder, num) {\n    return /** @type {any} */ writeOnDataView(encoder, 8).setBigInt64(0, num, false);\n};\nvar writeBigUint64 = function(encoder, num) {\n    return /** @type {any} */ writeOnDataView(encoder, 8).setBigUint64(0, num, false);\n};\nvar floatTestBed = new DataView(new ArrayBuffer(4));\n/**\n * Check if a number can be encoded as a 32 bit float.\n *\n * @param {number} num\n * @return {boolean}\n */ var isFloat32 = function(num) {\n    floatTestBed.setFloat32(0, num);\n    return floatTestBed.getFloat32(0) === num;\n};\nvar writeAny = function(encoder, data) {\n    switch(typeof data === \"undefined\" ? \"undefined\" : (0, _typeOf._)(data)){\n        case \"string\":\n            // TYPE 119: STRING\n            write(encoder, 119);\n            writeVarString(encoder, data);\n            break;\n        case \"number\":\n            if (_numberJs.isInteger(data) && _mathJs.abs(data) <= _binaryJs.BITS31) {\n                // TYPE 125: INTEGER\n                write(encoder, 125);\n                writeVarInt(encoder, data);\n            } else if (isFloat32(data)) {\n                // TYPE 124: FLOAT32\n                write(encoder, 124);\n                writeFloat32(encoder, data);\n            } else {\n                // TYPE 123: FLOAT64\n                write(encoder, 123);\n                writeFloat64(encoder, data);\n            }\n            break;\n        case \"bigint\":\n            // TYPE 122: BigInt\n            write(encoder, 122);\n            writeBigInt64(encoder, data);\n            break;\n        case \"object\":\n            if (data === null) // TYPE 126: null\n            write(encoder, 126);\n            else if (_arrayJs.isArray(data)) {\n                // TYPE 117: Array\n                write(encoder, 117);\n                writeVarUint(encoder, data.length);\n                for(var i = 0; i < data.length; i++)writeAny(encoder, data[i]);\n            } else if (data instanceof Uint8Array) {\n                // TYPE 116: ArrayBuffer\n                write(encoder, 116);\n                writeVarUint8Array(encoder, data);\n            } else {\n                // TYPE 118: Object\n                write(encoder, 118);\n                var keys = Object.keys(data);\n                writeVarUint(encoder, keys.length);\n                for(var i1 = 0; i1 < keys.length; i1++){\n                    var key = keys[i1];\n                    writeVarString(encoder, key);\n                    writeAny(encoder, data[key]);\n                }\n            }\n            break;\n        case \"boolean\":\n            // TYPE 120/121: boolean (true/false)\n            write(encoder, data ? 120 : 121);\n            break;\n        default:\n            // TYPE 127: undefined\n            write(encoder, 127);\n    }\n};\nvar RleEncoder = /*#__PURE__*/ function(Encoder) {\n    \"use strict\";\n    (0, _inherits._)(RleEncoder, Encoder);\n    var _super = (0, _createSuper._)(RleEncoder);\n    function RleEncoder(writer) {\n        (0, _classCallCheck._)(this, RleEncoder);\n        var _this;\n        _this = _super.call(this);\n        /**\n     * The writer\n     */ _this.w = writer;\n        /**\n     * Current state\n     * @type {T|null}\n     */ _this.s = null;\n        _this.count = 0;\n        return _this;\n    }\n    (0, _createClass._)(RleEncoder, [\n        {\n            /**\n   * @param {T} v\n   */ key: \"write\",\n            value: function write(v) {\n                if (this.s === v) this.count++;\n                else {\n                    if (this.count > 0) // flush counter, unless this is the first value (count = 0)\n                    writeVarUint(this, this.count - 1) // since count is always > 0, we can decrement by one. non-standard encoding ftw\n                    ;\n                    this.count = 1;\n                    // write first value\n                    this.w(this, v);\n                    this.s = v;\n                }\n            }\n        }\n    ]);\n    return RleEncoder;\n}(Encoder);\nvar IntDiffEncoder = /*#__PURE__*/ function(Encoder) {\n    \"use strict\";\n    (0, _inherits._)(IntDiffEncoder, Encoder);\n    var _super = (0, _createSuper._)(IntDiffEncoder);\n    function IntDiffEncoder(start) {\n        (0, _classCallCheck._)(this, IntDiffEncoder);\n        var _this;\n        _this = _super.call(this);\n        /**\n     * Current state\n     * @type {number}\n     */ _this.s = start;\n        return _this;\n    }\n    (0, _createClass._)(IntDiffEncoder, [\n        {\n            /**\n   * @param {number} v\n   */ key: \"write\",\n            value: function write(v) {\n                writeVarInt(this, v - this.s);\n                this.s = v;\n            }\n        }\n    ]);\n    return IntDiffEncoder;\n}(Encoder);\nvar RleIntDiffEncoder = /*#__PURE__*/ function(Encoder) {\n    \"use strict\";\n    (0, _inherits._)(RleIntDiffEncoder, Encoder);\n    var _super = (0, _createSuper._)(RleIntDiffEncoder);\n    function RleIntDiffEncoder(start) {\n        (0, _classCallCheck._)(this, RleIntDiffEncoder);\n        var _this;\n        _this = _super.call(this);\n        /**\n     * Current state\n     * @type {number}\n     */ _this.s = start;\n        _this.count = 0;\n        return _this;\n    }\n    (0, _createClass._)(RleIntDiffEncoder, [\n        {\n            /**\n   * @param {number} v\n   */ key: \"write\",\n            value: function write(v) {\n                if (this.s === v && this.count > 0) this.count++;\n                else {\n                    if (this.count > 0) // flush counter, unless this is the first value (count = 0)\n                    writeVarUint(this, this.count - 1) // since count is always > 0, we can decrement by one. non-standard encoding ftw\n                    ;\n                    this.count = 1;\n                    // write first value\n                    writeVarInt(this, v - this.s);\n                    this.s = v;\n                }\n            }\n        }\n    ]);\n    return RleIntDiffEncoder;\n}(Encoder);\n/**\n * @param {UintOptRleEncoder} encoder\n */ var flushUintOptRleEncoder = function(encoder) {\n    if (encoder.count > 0) {\n        // flush counter, unless this is the first value (count = 0)\n        // case 1: just a single value. set sign to positive\n        // case 2: write several values. set sign to negative to indicate that there is a length coming\n        writeVarInt(encoder.encoder, encoder.count === 1 ? encoder.s : -encoder.s);\n        if (encoder.count > 1) writeVarUint(encoder.encoder, encoder.count - 2) // since count is always > 1, we can decrement by one. non-standard encoding ftw\n        ;\n    }\n};\nvar UintOptRleEncoder = /*#__PURE__*/ function() {\n    \"use strict\";\n    function UintOptRleEncoder() {\n        (0, _classCallCheck._)(this, UintOptRleEncoder);\n        this.encoder = new Encoder();\n        /**\n     * @type {number}\n     */ this.s = 0;\n        this.count = 0;\n    }\n    (0, _createClass._)(UintOptRleEncoder, [\n        {\n            /**\n   * @param {number} v\n   */ key: \"write\",\n            value: function write(v) {\n                if (this.s === v) this.count++;\n                else {\n                    flushUintOptRleEncoder(this);\n                    this.count = 1;\n                    this.s = v;\n                }\n            }\n        },\n        {\n            /**\n   * Flush the encoded state and transform this to a Uint8Array.\n   *\n   * Note that this should only be called once.\n   */ key: \"toUint8Array\",\n            value: function toUint8Array1() {\n                flushUintOptRleEncoder(this);\n                return toUint8Array(this.encoder);\n            }\n        }\n    ]);\n    return UintOptRleEncoder;\n}();\nvar IncUintOptRleEncoder = /*#__PURE__*/ function() {\n    \"use strict\";\n    function IncUintOptRleEncoder() {\n        (0, _classCallCheck._)(this, IncUintOptRleEncoder);\n        this.encoder = new Encoder();\n        /**\n     * @type {number}\n     */ this.s = 0;\n        this.count = 0;\n    }\n    (0, _createClass._)(IncUintOptRleEncoder, [\n        {\n            /**\n   * @param {number} v\n   */ key: \"write\",\n            value: function write(v) {\n                if (this.s + this.count === v) this.count++;\n                else {\n                    flushUintOptRleEncoder(this);\n                    this.count = 1;\n                    this.s = v;\n                }\n            }\n        },\n        {\n            /**\n   * Flush the encoded state and transform this to a Uint8Array.\n   *\n   * Note that this should only be called once.\n   */ key: \"toUint8Array\",\n            value: function toUint8Array1() {\n                flushUintOptRleEncoder(this);\n                return toUint8Array(this.encoder);\n            }\n        }\n    ]);\n    return IncUintOptRleEncoder;\n}();\n/**\n * @param {IntDiffOptRleEncoder} encoder\n */ var flushIntDiffOptRleEncoder = function(encoder) {\n    if (encoder.count > 0) {\n        //          31 bit making up the diff | wether to write the counter\n        // const encodedDiff = encoder.diff << 1 | (encoder.count === 1 ? 0 : 1)\n        var encodedDiff = encoder.diff * 2 + (encoder.count === 1 ? 0 : 1);\n        // flush counter, unless this is the first value (count = 0)\n        // case 1: just a single value. set first bit to positive\n        // case 2: write several values. set first bit to negative to indicate that there is a length coming\n        writeVarInt(encoder.encoder, encodedDiff);\n        if (encoder.count > 1) writeVarUint(encoder.encoder, encoder.count - 2) // since count is always > 1, we can decrement by one. non-standard encoding ftw\n        ;\n    }\n};\nvar IntDiffOptRleEncoder = /*#__PURE__*/ function() {\n    \"use strict\";\n    function IntDiffOptRleEncoder() {\n        (0, _classCallCheck._)(this, IntDiffOptRleEncoder);\n        this.encoder = new Encoder();\n        /**\n     * @type {number}\n     */ this.s = 0;\n        this.count = 0;\n        this.diff = 0;\n    }\n    (0, _createClass._)(IntDiffOptRleEncoder, [\n        {\n            /**\n   * @param {number} v\n   */ key: \"write\",\n            value: function write(v) {\n                if (this.diff === v - this.s) {\n                    this.s = v;\n                    this.count++;\n                } else {\n                    flushIntDiffOptRleEncoder(this);\n                    this.count = 1;\n                    this.diff = v - this.s;\n                    this.s = v;\n                }\n            }\n        },\n        {\n            /**\n   * Flush the encoded state and transform this to a Uint8Array.\n   *\n   * Note that this should only be called once.\n   */ key: \"toUint8Array\",\n            value: function toUint8Array1() {\n                flushIntDiffOptRleEncoder(this);\n                return toUint8Array(this.encoder);\n            }\n        }\n    ]);\n    return IntDiffOptRleEncoder;\n}();\nvar StringEncoder = /*#__PURE__*/ function() {\n    \"use strict\";\n    function StringEncoder() {\n        (0, _classCallCheck._)(this, StringEncoder);\n        /**\n     * @type {Array<string>}\n     */ this.sarr = [];\n        this.s = \"\";\n        this.lensE = new UintOptRleEncoder();\n    }\n    (0, _createClass._)(StringEncoder, [\n        {\n            /**\n   * @param {string} string\n   */ key: \"write\",\n            value: function write(string) {\n                this.s += string;\n                if (this.s.length > 19) {\n                    this.sarr.push(this.s);\n                    this.s = \"\";\n                }\n                this.lensE.write(string.length);\n            }\n        },\n        {\n            key: \"toUint8Array\",\n            value: function toUint8Array1() {\n                var encoder = new Encoder();\n                this.sarr.push(this.s);\n                this.s = \"\";\n                writeVarString(encoder, this.sarr.join(\"\"));\n                writeUint8Array(encoder, this.lensE.toUint8Array());\n                return toUint8Array(encoder);\n            }\n        }\n    ]);\n    return StringEncoder;\n}();\n\n},{\"@swc/helpers/_/_class_call_check\":\"6tPd8\",\"@swc/helpers/_/_create_class\":\"kdmA3\",\"@swc/helpers/_/_inherits\":\"F8Yln\",\"@swc/helpers/_/_type_of\":\"3BgET\",\"@swc/helpers/_/_create_super\":\"4DJgF\",\"./math.js\":\"2l7a2\",\"./number.js\":\"f66W1\",\"./binary.js\":\"clP3G\",\"./string.js\":\"4ya7r\",\"./array.js\":\"4cUzV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"f66W1\":[function(require,module,exports) {\n/**\n * Utility helpers for working with numbers.\n *\n * @module number\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"MAX_SAFE_INTEGER\", function() {\n    return MAX_SAFE_INTEGER;\n});\nparcelHelpers.export(exports, \"MIN_SAFE_INTEGER\", function() {\n    return MIN_SAFE_INTEGER;\n});\nparcelHelpers.export(exports, \"LOWEST_INT32\", function() {\n    return LOWEST_INT32;\n});\nparcelHelpers.export(exports, \"HIGHEST_INT32\", function() {\n    return HIGHEST_INT32;\n});\nparcelHelpers.export(exports, \"HIGHEST_UINT32\", function() {\n    return HIGHEST_UINT32;\n});\nparcelHelpers.export(exports, \"isInteger\", function() {\n    return isInteger;\n});\nparcelHelpers.export(exports, \"isNaN\", function() {\n    return isNaN;\n});\nparcelHelpers.export(exports, \"parseInt\", function() {\n    return parseInt;\n});\nparcelHelpers.export(exports, \"countBits\", function() {\n    return countBits;\n});\nvar _mathJs = require(\"./math.js\");\nvar _binaryJs = require(\"./binary.js\");\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER;\nvar MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER;\nvar LOWEST_INT32 = -2147483648;\nvar HIGHEST_INT32 = _binaryJs.BITS31;\nvar HIGHEST_UINT32 = _binaryJs.BITS32;\nvar isInteger = Number.isInteger || function(num) {\n    return typeof num === \"number\" && isFinite(num) && _mathJs.floor(num) === num;\n};\nvar isNaN = Number.isNaN;\nvar parseInt = Number.parseInt;\nvar countBits = function(n) {\n    n &= _binaryJs.BITS32;\n    var count = 0;\n    while(n){\n        n &= n - 1;\n        count++;\n    }\n    return count;\n};\n\n},{\"./math.js\":\"2l7a2\",\"./binary.js\":\"clP3G\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"clP3G\":[function(require,module,exports) {\n/* eslint-env browser */ /**\n * Binary data constants.\n *\n * @module binary\n */ /**\n * n-th bit activated.\n *\n * @type {number}\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"BIT1\", function() {\n    return BIT1;\n});\nparcelHelpers.export(exports, \"BIT2\", function() {\n    return BIT2;\n});\nparcelHelpers.export(exports, \"BIT3\", function() {\n    return BIT3;\n});\nparcelHelpers.export(exports, \"BIT4\", function() {\n    return BIT4;\n});\nparcelHelpers.export(exports, \"BIT5\", function() {\n    return BIT5;\n});\nparcelHelpers.export(exports, \"BIT6\", function() {\n    return BIT6;\n});\nparcelHelpers.export(exports, \"BIT7\", function() {\n    return BIT7;\n});\nparcelHelpers.export(exports, \"BIT8\", function() {\n    return BIT8;\n});\nparcelHelpers.export(exports, \"BIT9\", function() {\n    return BIT9;\n});\nparcelHelpers.export(exports, \"BIT10\", function() {\n    return BIT10;\n});\nparcelHelpers.export(exports, \"BIT11\", function() {\n    return BIT11;\n});\nparcelHelpers.export(exports, \"BIT12\", function() {\n    return BIT12;\n});\nparcelHelpers.export(exports, \"BIT13\", function() {\n    return BIT13;\n});\nparcelHelpers.export(exports, \"BIT14\", function() {\n    return BIT14;\n});\nparcelHelpers.export(exports, \"BIT15\", function() {\n    return BIT15;\n});\nparcelHelpers.export(exports, \"BIT16\", function() {\n    return BIT16;\n});\nparcelHelpers.export(exports, \"BIT17\", function() {\n    return BIT17;\n});\nparcelHelpers.export(exports, \"BIT18\", function() {\n    return BIT18;\n});\nparcelHelpers.export(exports, \"BIT19\", function() {\n    return BIT19;\n});\nparcelHelpers.export(exports, \"BIT20\", function() {\n    return BIT20;\n});\nparcelHelpers.export(exports, \"BIT21\", function() {\n    return BIT21;\n});\nparcelHelpers.export(exports, \"BIT22\", function() {\n    return BIT22;\n});\nparcelHelpers.export(exports, \"BIT23\", function() {\n    return BIT23;\n});\nparcelHelpers.export(exports, \"BIT24\", function() {\n    return BIT24;\n});\nparcelHelpers.export(exports, \"BIT25\", function() {\n    return BIT25;\n});\nparcelHelpers.export(exports, \"BIT26\", function() {\n    return BIT26;\n});\nparcelHelpers.export(exports, \"BIT27\", function() {\n    return BIT27;\n});\nparcelHelpers.export(exports, \"BIT28\", function() {\n    return BIT28;\n});\nparcelHelpers.export(exports, \"BIT29\", function() {\n    return BIT29;\n});\nparcelHelpers.export(exports, \"BIT30\", function() {\n    return BIT30;\n});\nparcelHelpers.export(exports, \"BIT31\", function() {\n    return BIT31;\n});\nparcelHelpers.export(exports, \"BIT32\", function() {\n    return BIT32;\n});\nparcelHelpers.export(exports, \"BITS0\", function() {\n    return BITS0;\n});\nparcelHelpers.export(exports, \"BITS1\", function() {\n    return BITS1;\n});\nparcelHelpers.export(exports, \"BITS2\", function() {\n    return BITS2;\n});\nparcelHelpers.export(exports, \"BITS3\", function() {\n    return BITS3;\n});\nparcelHelpers.export(exports, \"BITS4\", function() {\n    return BITS4;\n});\nparcelHelpers.export(exports, \"BITS5\", function() {\n    return BITS5;\n});\nparcelHelpers.export(exports, \"BITS6\", function() {\n    return BITS6;\n});\nparcelHelpers.export(exports, \"BITS7\", function() {\n    return BITS7;\n});\nparcelHelpers.export(exports, \"BITS8\", function() {\n    return BITS8;\n});\nparcelHelpers.export(exports, \"BITS9\", function() {\n    return BITS9;\n});\nparcelHelpers.export(exports, \"BITS10\", function() {\n    return BITS10;\n});\nparcelHelpers.export(exports, \"BITS11\", function() {\n    return BITS11;\n});\nparcelHelpers.export(exports, \"BITS12\", function() {\n    return BITS12;\n});\nparcelHelpers.export(exports, \"BITS13\", function() {\n    return BITS13;\n});\nparcelHelpers.export(exports, \"BITS14\", function() {\n    return BITS14;\n});\nparcelHelpers.export(exports, \"BITS15\", function() {\n    return BITS15;\n});\nparcelHelpers.export(exports, \"BITS16\", function() {\n    return BITS16;\n});\nparcelHelpers.export(exports, \"BITS17\", function() {\n    return BITS17;\n});\nparcelHelpers.export(exports, \"BITS18\", function() {\n    return BITS18;\n});\nparcelHelpers.export(exports, \"BITS19\", function() {\n    return BITS19;\n});\nparcelHelpers.export(exports, \"BITS20\", function() {\n    return BITS20;\n});\nparcelHelpers.export(exports, \"BITS21\", function() {\n    return BITS21;\n});\nparcelHelpers.export(exports, \"BITS22\", function() {\n    return BITS22;\n});\nparcelHelpers.export(exports, \"BITS23\", function() {\n    return BITS23;\n});\nparcelHelpers.export(exports, \"BITS24\", function() {\n    return BITS24;\n});\nparcelHelpers.export(exports, \"BITS25\", function() {\n    return BITS25;\n});\nparcelHelpers.export(exports, \"BITS26\", function() {\n    return BITS26;\n});\nparcelHelpers.export(exports, \"BITS27\", function() {\n    return BITS27;\n});\nparcelHelpers.export(exports, \"BITS28\", function() {\n    return BITS28;\n});\nparcelHelpers.export(exports, \"BITS29\", function() {\n    return BITS29;\n});\nparcelHelpers.export(exports, \"BITS30\", function() {\n    return BITS30;\n});\nparcelHelpers.export(exports, \"BITS31\", function() {\n    return BITS31;\n});\nparcelHelpers.export(exports, \"BITS32\", function() {\n    return BITS32;\n});\nvar BIT1 = 1;\nvar BIT2 = 2;\nvar BIT3 = 4;\nvar BIT4 = 8;\nvar BIT5 = 16;\nvar BIT6 = 32;\nvar BIT7 = 64;\nvar BIT8 = 128;\nvar BIT9 = 256;\nvar BIT10 = 512;\nvar BIT11 = 1024;\nvar BIT12 = 2048;\nvar BIT13 = 4096;\nvar BIT14 = 8192;\nvar BIT15 = 16384;\nvar BIT16 = 32768;\nvar BIT17 = 65536;\nvar BIT18 = 131072;\nvar BIT19 = 262144;\nvar BIT20 = 524288;\nvar BIT21 = 1048576;\nvar BIT22 = 2097152;\nvar BIT23 = 4194304;\nvar BIT24 = 8388608;\nvar BIT25 = 16777216;\nvar BIT26 = 33554432;\nvar BIT27 = 67108864;\nvar BIT28 = 134217728;\nvar BIT29 = 268435456;\nvar BIT30 = 536870912;\nvar BIT31 = 1073741824;\nvar BIT32 = -2147483648;\nvar BITS0 = 0;\nvar BITS1 = 1;\nvar BITS2 = 3;\nvar BITS3 = 7;\nvar BITS4 = 15;\nvar BITS5 = 31;\nvar BITS6 = 63;\nvar BITS7 = 127;\nvar BITS8 = 255;\nvar BITS9 = 511;\nvar BITS10 = 1023;\nvar BITS11 = 2047;\nvar BITS12 = 4095;\nvar BITS13 = 8191;\nvar BITS14 = 16383;\nvar BITS15 = 32767;\nvar BITS16 = 65535;\nvar BITS17 = BIT18 - 1;\nvar BITS18 = BIT19 - 1;\nvar BITS19 = BIT20 - 1;\nvar BITS20 = BIT21 - 1;\nvar BITS21 = BIT22 - 1;\nvar BITS22 = BIT23 - 1;\nvar BITS23 = BIT24 - 1;\nvar BITS24 = BIT25 - 1;\nvar BITS25 = BIT26 - 1;\nvar BITS26 = BIT27 - 1;\nvar BITS27 = BIT28 - 1;\nvar BITS28 = BIT29 - 1;\nvar BITS29 = BIT30 - 1;\nvar BITS30 = BIT31 - 1;\nvar BITS31 = 0x7FFFFFFF;\nvar BITS32 = 0xFFFFFFFF;\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"4ya7r\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"fromCharCode\", function() {\n    return fromCharCode;\n});\nparcelHelpers.export(exports, \"fromCodePoint\", function() {\n    return fromCodePoint;\n});\nparcelHelpers.export(exports, \"MAX_UTF16_CHARACTER\", function() {\n    return MAX_UTF16_CHARACTER;\n});\nparcelHelpers.export(exports, \"trimLeft\", function() {\n    return trimLeft;\n});\nparcelHelpers.export(exports, \"fromCamelCase\", function() {\n    return fromCamelCase;\n});\nparcelHelpers.export(exports, \"utf8ByteLength\", function() {\n    return utf8ByteLength;\n});\nparcelHelpers.export(exports, \"_encodeUtf8Polyfill\", function() {\n    return _encodeUtf8Polyfill;\n});\nparcelHelpers.export(exports, \"utf8TextEncoder\", function() {\n    return utf8TextEncoder;\n});\nparcelHelpers.export(exports, \"_encodeUtf8Native\", function() {\n    return _encodeUtf8Native;\n});\nparcelHelpers.export(exports, \"encodeUtf8\", function() {\n    return encodeUtf8;\n});\nparcelHelpers.export(exports, \"_decodeUtf8Polyfill\", function() {\n    return _decodeUtf8Polyfill;\n});\nparcelHelpers.export(exports, \"utf8TextDecoder\", function() {\n    return utf8TextDecoder;\n});\nparcelHelpers.export(exports, \"_decodeUtf8Native\", function() {\n    return _decodeUtf8Native;\n});\nparcelHelpers.export(exports, \"decodeUtf8\", function() {\n    return decodeUtf8;\n});\nparcelHelpers.export(exports, \"splice\", function() {\n    return splice;\n});\nparcelHelpers.export(exports, \"repeat\", function() {\n    return repeat;\n});\nvar _arrayJs = require(\"./array.js\");\nvar fromCharCode = String.fromCharCode;\nvar fromCodePoint = String.fromCodePoint;\nvar MAX_UTF16_CHARACTER = fromCharCode(65535);\n/**\n * @param {string} s\n * @return {string}\n */ var toLowerCase = function(s) {\n    return s.toLowerCase();\n};\nvar trimLeftRegex = /^\\s*/g;\nvar trimLeft = function(s) {\n    return s.replace(trimLeftRegex, \"\");\n};\nvar fromCamelCaseRegex = /([A-Z])/g;\nvar fromCamelCase = function(s, separator) {\n    return trimLeft(s.replace(fromCamelCaseRegex, function(match) {\n        return \"\".concat(separator).concat(toLowerCase(match));\n    }));\n};\nvar utf8ByteLength = function(str) {\n    return unescape(encodeURIComponent(str)).length;\n};\nvar _encodeUtf8Polyfill = function(str) {\n    var encodedString = unescape(encodeURIComponent(str));\n    var len = encodedString.length;\n    var buf = new Uint8Array(len);\n    for(var i = 0; i < len; i++)buf[i] = /** @type {number} */ encodedString.codePointAt(i);\n    return buf;\n};\nvar utf8TextEncoder = /** @type {TextEncoder} */ typeof TextEncoder !== \"undefined\" ? new TextEncoder() : null;\nvar _encodeUtf8Native = function(str) {\n    return utf8TextEncoder.encode(str);\n};\nvar encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill;\nvar _decodeUtf8Polyfill = function(buf) {\n    var remainingLen = buf.length;\n    var encodedString = \"\";\n    var bufPos = 0;\n    while(remainingLen > 0){\n        var nextLen = remainingLen < 10000 ? remainingLen : 10000;\n        var bytes = buf.subarray(bufPos, bufPos + nextLen);\n        bufPos += nextLen;\n        // Starting with ES5.1 we can supply a generic array-like object as arguments\n        encodedString += String.fromCodePoint.apply(null, /** @type {any} */ bytes);\n        remainingLen -= nextLen;\n    }\n    return decodeURIComponent(escape(encodedString));\n};\nvar utf8TextDecoder = typeof TextDecoder === \"undefined\" ? null : new TextDecoder(\"utf-8\", {\n    fatal: true,\n    ignoreBOM: true\n});\n/* c8 ignore start */ if (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) // Safari doesn't handle BOM correctly.\n// This fixes a bug in Safari 13.0.5 where it produces a BOM the first time it is called.\n// utf8TextDecoder.decode(new Uint8Array()).length === 1 on the first call and\n// utf8TextDecoder.decode(new Uint8Array()).length === 1 on the second call\n// Another issue is that from then on no BOM chars are recognized anymore\n/* c8 ignore next */ utf8TextDecoder = null;\nvar _decodeUtf8Native = function(buf) {\n    return /** @type {TextDecoder} */ utf8TextDecoder.decode(buf);\n};\nvar decodeUtf8 = utf8TextDecoder ? _decodeUtf8Native : _decodeUtf8Polyfill;\nvar splice = function(str, index, remove) {\n    var insert = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \"\";\n    return str.slice(0, index) + insert + str.slice(index + remove);\n};\nvar repeat = function(source, n) {\n    return _arrayJs.unfold(n, function() {\n        return source;\n    }).join(\"\");\n};\n\n},{\"./array.js\":\"4cUzV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"bprzL\":[function(require,module,exports) {\n/**\n * Efficient schema-less binary decoding with support for variable length encoding.\n *\n * Use [lib0/decoding] with [lib0/encoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module decoding\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"Decoder\", function() {\n    return Decoder;\n});\nparcelHelpers.export(exports, \"createDecoder\", function() {\n    return createDecoder;\n});\nparcelHelpers.export(exports, \"hasContent\", function() {\n    return hasContent;\n});\nparcelHelpers.export(exports, \"clone\", function() {\n    return clone;\n});\nparcelHelpers.export(exports, \"readUint8Array\", function() {\n    return readUint8Array;\n});\nparcelHelpers.export(exports, \"readVarUint8Array\", function() {\n    return readVarUint8Array;\n});\nparcelHelpers.export(exports, \"readTailAsUint8Array\", function() {\n    return readTailAsUint8Array;\n});\nparcelHelpers.export(exports, \"skip8\", function() {\n    return skip8;\n});\nparcelHelpers.export(exports, \"readUint8\", function() {\n    return readUint8;\n});\nparcelHelpers.export(exports, \"readUint16\", function() {\n    return readUint16;\n});\nparcelHelpers.export(exports, \"readUint32\", function() {\n    return readUint32;\n});\nparcelHelpers.export(exports, \"readUint32BigEndian\", function() {\n    return readUint32BigEndian;\n});\nparcelHelpers.export(exports, \"peekUint8\", function() {\n    return peekUint8;\n});\nparcelHelpers.export(exports, \"peekUint16\", function() {\n    return peekUint16;\n});\nparcelHelpers.export(exports, \"peekUint32\", function() {\n    return peekUint32;\n});\nparcelHelpers.export(exports, \"readVarUint\", function() {\n    return readVarUint;\n});\nparcelHelpers.export(exports, \"readVarInt\", function() {\n    return readVarInt;\n});\nparcelHelpers.export(exports, \"peekVarUint\", function() {\n    return peekVarUint;\n});\nparcelHelpers.export(exports, \"peekVarInt\", function() {\n    return peekVarInt;\n});\nparcelHelpers.export(exports, \"_readVarStringPolyfill\", function() {\n    return _readVarStringPolyfill;\n});\nparcelHelpers.export(exports, \"_readVarStringNative\", function() {\n    return _readVarStringNative;\n});\nparcelHelpers.export(exports, \"readVarString\", function() {\n    return readVarString;\n});\nparcelHelpers.export(exports, \"readTerminatedUint8Array\", function() {\n    return readTerminatedUint8Array;\n});\nparcelHelpers.export(exports, \"readTerminatedString\", function() {\n    return readTerminatedString;\n});\nparcelHelpers.export(exports, \"peekVarString\", function() {\n    return peekVarString;\n});\nparcelHelpers.export(exports, \"readFromDataView\", function() {\n    return readFromDataView;\n});\nparcelHelpers.export(exports, \"readFloat32\", function() {\n    return readFloat32;\n});\nparcelHelpers.export(exports, \"readFloat64\", function() {\n    return readFloat64;\n});\nparcelHelpers.export(exports, \"readBigInt64\", function() {\n    return readBigInt64;\n});\nparcelHelpers.export(exports, \"readBigUint64\", function() {\n    return readBigUint64;\n});\nparcelHelpers.export(exports, \"readAny\", function() {\n    return readAny;\n});\nparcelHelpers.export(exports, \"RleDecoder\", function() {\n    return RleDecoder;\n});\nparcelHelpers.export(exports, \"IntDiffDecoder\", function() {\n    return IntDiffDecoder;\n});\nparcelHelpers.export(exports, \"RleIntDiffDecoder\", function() {\n    return RleIntDiffDecoder;\n});\nparcelHelpers.export(exports, \"UintOptRleDecoder\", function() {\n    return UintOptRleDecoder;\n});\nparcelHelpers.export(exports, \"IncUintOptRleDecoder\", function() {\n    return IncUintOptRleDecoder;\n});\nparcelHelpers.export(exports, \"IntDiffOptRleDecoder\", function() {\n    return IntDiffOptRleDecoder;\n});\nparcelHelpers.export(exports, \"StringDecoder\", function() {\n    return StringDecoder;\n});\nvar _classCallCheck = require(\"@swc/helpers/_/_class_call_check\");\nvar _createClass = require(\"@swc/helpers/_/_create_class\");\nvar _inherits = require(\"@swc/helpers/_/_inherits\");\nvar _createSuper = require(\"@swc/helpers/_/_create_super\");\nvar _binaryJs = require(\"./binary.js\");\nvar _mathJs = require(\"./math.js\");\nvar _numberJs = require(\"./number.js\");\nvar _stringJs = require(\"./string.js\");\nvar _errorJs = require(\"./error.js\");\nvar _encodingJs = require(\"./encoding.js\");\nvar errorUnexpectedEndOfArray = _errorJs.create(\"Unexpected end of array\");\nvar errorIntegerOutOfRange = _errorJs.create(\"Integer out of Range\");\nvar Decoder = function Decoder(uint8Array) {\n    \"use strict\";\n    (0, _classCallCheck._)(this, Decoder);\n    /**\n     * Decoding target.\n     *\n     * @type {Uint8Array}\n     */ this.arr = uint8Array;\n    /**\n     * Current decoding position.\n     *\n     * @type {number}\n     */ this.pos = 0;\n};\nvar createDecoder = function(uint8Array) {\n    return new Decoder(uint8Array);\n};\nvar hasContent = function(decoder) {\n    return decoder.pos !== decoder.arr.length;\n};\nvar clone = function(decoder) {\n    var newPos = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : decoder.pos;\n    var _decoder = createDecoder(decoder.arr);\n    _decoder.pos = newPos;\n    return _decoder;\n};\nvar readUint8Array = function(decoder, len) {\n    var view = new Uint8Array(decoder.arr.buffer, decoder.pos + decoder.arr.byteOffset, len);\n    decoder.pos += len;\n    return view;\n};\nvar readVarUint8Array = function(decoder) {\n    return readUint8Array(decoder, readVarUint(decoder));\n};\nvar readTailAsUint8Array = function(decoder) {\n    return readUint8Array(decoder, decoder.arr.length - decoder.pos);\n};\nvar skip8 = function(decoder) {\n    return decoder.pos++;\n};\nvar readUint8 = function(decoder) {\n    return decoder.arr[decoder.pos++];\n};\nvar readUint16 = function(decoder) {\n    var uint = decoder.arr[decoder.pos] + (decoder.arr[decoder.pos + 1] << 8);\n    decoder.pos += 2;\n    return uint;\n};\nvar readUint32 = function(decoder) {\n    var uint = decoder.arr[decoder.pos] + (decoder.arr[decoder.pos + 1] << 8) + (decoder.arr[decoder.pos + 2] << 16) + (decoder.arr[decoder.pos + 3] << 24) >>> 0;\n    decoder.pos += 4;\n    return uint;\n};\nvar readUint32BigEndian = function(decoder) {\n    var uint = decoder.arr[decoder.pos + 3] + (decoder.arr[decoder.pos + 2] << 8) + (decoder.arr[decoder.pos + 1] << 16) + (decoder.arr[decoder.pos] << 24) >>> 0;\n    decoder.pos += 4;\n    return uint;\n};\nvar peekUint8 = function(decoder) {\n    return decoder.arr[decoder.pos];\n};\nvar peekUint16 = function(decoder) {\n    return decoder.arr[decoder.pos] + (decoder.arr[decoder.pos + 1] << 8);\n};\nvar peekUint32 = function(decoder) {\n    return decoder.arr[decoder.pos] + (decoder.arr[decoder.pos + 1] << 8) + (decoder.arr[decoder.pos + 2] << 16) + (decoder.arr[decoder.pos + 3] << 24) >>> 0;\n};\nvar readVarUint = function(decoder) {\n    var num = 0;\n    var mult = 1;\n    var len = decoder.arr.length;\n    while(decoder.pos < len){\n        var r = decoder.arr[decoder.pos++];\n        // num = num | ((r & binary.BITS7) << len)\n        num = num + (r & _binaryJs.BITS7) * mult // shift $r << (7*#iterations) and add it to num\n        ;\n        mult *= 128 // next iteration, shift 7 \"more\" to the left\n        ;\n        if (r < _binaryJs.BIT8) return num;\n        /* c8 ignore start */ if (num > _numberJs.MAX_SAFE_INTEGER) throw errorIntegerOutOfRange;\n    /* c8 ignore stop */ }\n    throw errorUnexpectedEndOfArray;\n};\nvar readVarInt = function(decoder) {\n    var r = decoder.arr[decoder.pos++];\n    var num = r & _binaryJs.BITS6;\n    var mult = 64;\n    var sign = (r & _binaryJs.BIT7) > 0 ? -1 : 1;\n    if ((r & _binaryJs.BIT8) === 0) // don't continue reading\n    return sign * num;\n    var len = decoder.arr.length;\n    while(decoder.pos < len){\n        r = decoder.arr[decoder.pos++];\n        // num = num | ((r & binary.BITS7) << len)\n        num = num + (r & _binaryJs.BITS7) * mult;\n        mult *= 128;\n        if (r < _binaryJs.BIT8) return sign * num;\n        /* c8 ignore start */ if (num > _numberJs.MAX_SAFE_INTEGER) throw errorIntegerOutOfRange;\n    /* c8 ignore stop */ }\n    throw errorUnexpectedEndOfArray;\n};\nvar peekVarUint = function(decoder) {\n    var pos = decoder.pos;\n    var s = readVarUint(decoder);\n    decoder.pos = pos;\n    return s;\n};\nvar peekVarInt = function(decoder) {\n    var pos = decoder.pos;\n    var s = readVarInt(decoder);\n    decoder.pos = pos;\n    return s;\n};\nvar _readVarStringPolyfill = function(decoder) {\n    var remainingLen = readVarUint(decoder);\n    if (remainingLen === 0) return \"\";\n    else {\n        var encodedString = String.fromCodePoint(readUint8(decoder)) // remember to decrease remainingLen\n        ;\n        if (--remainingLen < 100) while(remainingLen--)encodedString += String.fromCodePoint(readUint8(decoder));\n        else while(remainingLen > 0){\n            var nextLen = remainingLen < 10000 ? remainingLen : 10000;\n            // this is dangerous, we create a fresh array view from the existing buffer\n            var bytes = decoder.arr.subarray(decoder.pos, decoder.pos + nextLen);\n            decoder.pos += nextLen;\n            // Starting with ES5.1 we can supply a generic array-like object as arguments\n            encodedString += String.fromCodePoint.apply(null, /** @type {any} */ bytes);\n            remainingLen -= nextLen;\n        }\n        return decodeURIComponent(escape(encodedString));\n    }\n};\nvar _readVarStringNative = function(decoder) {\n    return /** @type any */ _stringJs.utf8TextDecoder.decode(readVarUint8Array(decoder));\n};\nvar readVarString = _stringJs.utf8TextDecoder ? _readVarStringNative : _readVarStringPolyfill;\nvar readTerminatedUint8Array = function(decoder) {\n    var encoder = _encodingJs.createEncoder();\n    var b;\n    while(true){\n        b = readUint8(decoder);\n        if (b === 0) return _encodingJs.toUint8Array(encoder);\n        if (b === 1) b = readUint8(decoder);\n        _encodingJs.write(encoder, b);\n    }\n};\nvar readTerminatedString = function(decoder) {\n    return _stringJs.decodeUtf8(readTerminatedUint8Array(decoder));\n};\nvar peekVarString = function(decoder) {\n    var pos = decoder.pos;\n    var s = readVarString(decoder);\n    decoder.pos = pos;\n    return s;\n};\nvar readFromDataView = function(decoder, len) {\n    var dv = new DataView(decoder.arr.buffer, decoder.arr.byteOffset + decoder.pos, len);\n    decoder.pos += len;\n    return dv;\n};\nvar readFloat32 = function(decoder) {\n    return readFromDataView(decoder, 4).getFloat32(0, false);\n};\nvar readFloat64 = function(decoder) {\n    return readFromDataView(decoder, 8).getFloat64(0, false);\n};\nvar readBigInt64 = function(decoder) {\n    return /** @type {any} */ readFromDataView(decoder, 8).getBigInt64(0, false);\n};\nvar readBigUint64 = function(decoder) {\n    return /** @type {any} */ readFromDataView(decoder, 8).getBigUint64(0, false);\n};\n/**\n * @type {Array<function(Decoder):any>}\n */ var readAnyLookupTable = [\n    function(decoder) {\n        return undefined;\n    },\n    function(decoder) {\n        return null;\n    },\n    readVarInt,\n    readFloat32,\n    readFloat64,\n    readBigInt64,\n    function(decoder) {\n        return false;\n    },\n    function(decoder) {\n        return true;\n    },\n    readVarString,\n    function(decoder) {\n        var len = readVarUint(decoder);\n        /**\n     * @type {Object<string,any>}\n     */ var obj = {};\n        for(var i = 0; i < len; i++){\n            var key = readVarString(decoder);\n            obj[key] = readAny(decoder);\n        }\n        return obj;\n    },\n    function(decoder) {\n        var len = readVarUint(decoder);\n        var arr = [];\n        for(var i = 0; i < len; i++)arr.push(readAny(decoder));\n        return arr;\n    },\n    readVarUint8Array // CASE 116: Uint8Array\n];\nvar readAny = function(decoder) {\n    return readAnyLookupTable[127 - readUint8(decoder)](decoder);\n};\nvar RleDecoder = /*#__PURE__*/ function(Decoder) {\n    \"use strict\";\n    (0, _inherits._)(RleDecoder, Decoder);\n    var _super = (0, _createSuper._)(RleDecoder);\n    function RleDecoder(uint8Array, reader) {\n        (0, _classCallCheck._)(this, RleDecoder);\n        var _this;\n        _this = _super.call(this, uint8Array);\n        /**\n     * The reader\n     */ _this.reader = reader;\n        /**\n     * Current state\n     * @type {T|null}\n     */ _this.s = null;\n        _this.count = 0;\n        return _this;\n    }\n    (0, _createClass._)(RleDecoder, [\n        {\n            key: \"read\",\n            value: function read() {\n                if (this.count === 0) {\n                    this.s = this.reader(this);\n                    if (hasContent(this)) this.count = readVarUint(this) + 1 // see encoder implementation for the reason why this is incremented\n                    ;\n                    else this.count = -1 // read the current value forever\n                    ;\n                }\n                this.count--;\n                return /** @type {T} */ this.s;\n            }\n        }\n    ]);\n    return RleDecoder;\n}(Decoder);\nvar IntDiffDecoder = /*#__PURE__*/ function(Decoder) {\n    \"use strict\";\n    (0, _inherits._)(IntDiffDecoder, Decoder);\n    var _super = (0, _createSuper._)(IntDiffDecoder);\n    function IntDiffDecoder(uint8Array, start) {\n        (0, _classCallCheck._)(this, IntDiffDecoder);\n        var _this;\n        _this = _super.call(this, uint8Array);\n        /**\n     * Current state\n     * @type {number}\n     */ _this.s = start;\n        return _this;\n    }\n    (0, _createClass._)(IntDiffDecoder, [\n        {\n            /**\n   * @return {number}\n   */ key: \"read\",\n            value: function read() {\n                this.s += readVarInt(this);\n                return this.s;\n            }\n        }\n    ]);\n    return IntDiffDecoder;\n}(Decoder);\nvar RleIntDiffDecoder = /*#__PURE__*/ function(Decoder) {\n    \"use strict\";\n    (0, _inherits._)(RleIntDiffDecoder, Decoder);\n    var _super = (0, _createSuper._)(RleIntDiffDecoder);\n    function RleIntDiffDecoder(uint8Array, start) {\n        (0, _classCallCheck._)(this, RleIntDiffDecoder);\n        var _this;\n        _this = _super.call(this, uint8Array);\n        /**\n     * Current state\n     * @type {number}\n     */ _this.s = start;\n        _this.count = 0;\n        return _this;\n    }\n    (0, _createClass._)(RleIntDiffDecoder, [\n        {\n            /**\n   * @return {number}\n   */ key: \"read\",\n            value: function read() {\n                if (this.count === 0) {\n                    this.s += readVarInt(this);\n                    if (hasContent(this)) this.count = readVarUint(this) + 1 // see encoder implementation for the reason why this is incremented\n                    ;\n                    else this.count = -1 // read the current value forever\n                    ;\n                }\n                this.count--;\n                return /** @type {number} */ this.s;\n            }\n        }\n    ]);\n    return RleIntDiffDecoder;\n}(Decoder);\nvar UintOptRleDecoder = /*#__PURE__*/ function(Decoder) {\n    \"use strict\";\n    (0, _inherits._)(UintOptRleDecoder, Decoder);\n    var _super = (0, _createSuper._)(UintOptRleDecoder);\n    function UintOptRleDecoder(uint8Array) {\n        (0, _classCallCheck._)(this, UintOptRleDecoder);\n        var _this;\n        _this = _super.call(this, uint8Array);\n        /**\n     * @type {number}\n     */ _this.s = 0;\n        _this.count = 0;\n        return _this;\n    }\n    (0, _createClass._)(UintOptRleDecoder, [\n        {\n            key: \"read\",\n            value: function read() {\n                if (this.count === 0) {\n                    this.s = readVarInt(this);\n                    // if the sign is negative, we read the count too, otherwise count is 1\n                    var isNegative = _mathJs.isNegativeZero(this.s);\n                    this.count = 1;\n                    if (isNegative) {\n                        this.s = -this.s;\n                        this.count = readVarUint(this) + 2;\n                    }\n                }\n                this.count--;\n                return /** @type {number} */ this.s;\n            }\n        }\n    ]);\n    return UintOptRleDecoder;\n}(Decoder);\nvar IncUintOptRleDecoder = /*#__PURE__*/ function(Decoder) {\n    \"use strict\";\n    (0, _inherits._)(IncUintOptRleDecoder, Decoder);\n    var _super = (0, _createSuper._)(IncUintOptRleDecoder);\n    function IncUintOptRleDecoder(uint8Array) {\n        (0, _classCallCheck._)(this, IncUintOptRleDecoder);\n        var _this;\n        _this = _super.call(this, uint8Array);\n        /**\n     * @type {number}\n     */ _this.s = 0;\n        _this.count = 0;\n        return _this;\n    }\n    (0, _createClass._)(IncUintOptRleDecoder, [\n        {\n            key: \"read\",\n            value: function read() {\n                if (this.count === 0) {\n                    this.s = readVarInt(this);\n                    // if the sign is negative, we read the count too, otherwise count is 1\n                    var isNegative = _mathJs.isNegativeZero(this.s);\n                    this.count = 1;\n                    if (isNegative) {\n                        this.s = -this.s;\n                        this.count = readVarUint(this) + 2;\n                    }\n                }\n                this.count--;\n                return /** @type {number} */ this.s++;\n            }\n        }\n    ]);\n    return IncUintOptRleDecoder;\n}(Decoder);\nvar IntDiffOptRleDecoder = /*#__PURE__*/ function(Decoder) {\n    \"use strict\";\n    (0, _inherits._)(IntDiffOptRleDecoder, Decoder);\n    var _super = (0, _createSuper._)(IntDiffOptRleDecoder);\n    function IntDiffOptRleDecoder(uint8Array) {\n        (0, _classCallCheck._)(this, IntDiffOptRleDecoder);\n        var _this;\n        _this = _super.call(this, uint8Array);\n        /**\n     * @type {number}\n     */ _this.s = 0;\n        _this.count = 0;\n        _this.diff = 0;\n        return _this;\n    }\n    (0, _createClass._)(IntDiffOptRleDecoder, [\n        {\n            /**\n   * @return {number}\n   */ key: \"read\",\n            value: function read() {\n                if (this.count === 0) {\n                    var diff = readVarInt(this);\n                    // if the first bit is set, we read more data\n                    var hasCount = diff & 1;\n                    this.diff = _mathJs.floor(diff / 2) // shift >> 1\n                    ;\n                    this.count = 1;\n                    if (hasCount) this.count = readVarUint(this) + 2;\n                }\n                this.s += this.diff;\n                this.count--;\n                return this.s;\n            }\n        }\n    ]);\n    return IntDiffOptRleDecoder;\n}(Decoder);\nvar StringDecoder = /*#__PURE__*/ function() {\n    \"use strict\";\n    function StringDecoder(uint8Array) {\n        (0, _classCallCheck._)(this, StringDecoder);\n        this.decoder = new UintOptRleDecoder(uint8Array);\n        this.str = readVarString(this.decoder);\n        /**\n     * @type {number}\n     */ this.spos = 0;\n    }\n    (0, _createClass._)(StringDecoder, [\n        {\n            /**\n   * @return {string}\n   */ key: \"read\",\n            value: function read() {\n                var end = this.spos + this.decoder.read();\n                var res = this.str.slice(this.spos, end);\n                this.spos = end;\n                return res;\n            }\n        }\n    ]);\n    return StringDecoder;\n}();\n\n},{\"@swc/helpers/_/_class_call_check\":\"6tPd8\",\"@swc/helpers/_/_create_class\":\"kdmA3\",\"@swc/helpers/_/_inherits\":\"F8Yln\",\"@swc/helpers/_/_create_super\":\"4DJgF\",\"./binary.js\":\"clP3G\",\"./math.js\":\"2l7a2\",\"./number.js\":\"f66W1\",\"./string.js\":\"4ya7r\",\"./error.js\":\"jYzrA\",\"./encoding.js\":\"i3bjT\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"jYzrA\":[function(require,module,exports) {\n/**\n * Error helpers.\n *\n * @module error\n */ /**\n * @param {string} s\n * @return {Error}\n */ /* c8 ignore next */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"create\", function() {\n    return create;\n});\nparcelHelpers.export(exports, \"methodUnimplemented\", function() {\n    return methodUnimplemented;\n});\nparcelHelpers.export(exports, \"unexpectedCase\", function() {\n    return unexpectedCase;\n});\nvar create = function(s) {\n    return new Error(s);\n};\nvar methodUnimplemented = function() {\n    throw create(\"Method unimplemented\");\n};\nvar unexpectedCase = function() {\n    throw create(\"Unexpected case\");\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"fpVbc\":[function(require,module,exports) {\n/**\n * Isomorphic module for true random numbers / buffers / uuids.\n *\n * Attention: falls back to Math.random if the browser does not support crypto.\n *\n * @module random\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"rand\", function() {\n    return rand;\n});\nparcelHelpers.export(exports, \"uint32\", function() {\n    return uint32;\n});\nparcelHelpers.export(exports, \"uint53\", function() {\n    return uint53;\n});\nparcelHelpers.export(exports, \"oneOf\", function() {\n    return oneOf;\n});\nparcelHelpers.export(exports, \"uuidv4\", function() {\n    return uuidv4;\n});\nvar _mathJs = require(\"./math.js\");\nvar _binaryJs = require(\"./binary.js\");\nvar _webcrypto = require(\"lib0/webcrypto\");\nvar rand = Math.random;\nvar uint32 = function() {\n    return (0, _webcrypto.getRandomValues)(new Uint32Array(1))[0];\n};\nvar uint53 = function() {\n    var arr = (0, _webcrypto.getRandomValues)(new Uint32Array(8));\n    return (arr[0] & _binaryJs.BITS21) * (_binaryJs.BITS32 + 1) + (arr[1] >>> 0);\n};\nvar oneOf = function(arr) {\n    return arr[_mathJs.floor(rand() * arr.length)];\n};\n// @ts-ignore\nvar uuidv4Template = \"10000000-1000-4000-8000-100000000000\";\nvar uuidv4 = function() {\n    return uuidv4Template.replace(/[018]/g, /** @param {number} c */ function(c) {\n        return (c ^ uint32() & 15 >> c / 4).toString(16);\n    });\n};\n\n},{\"./math.js\":\"2l7a2\",\"./binary.js\":\"clP3G\",\"lib0/webcrypto\":\"dpTh7\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"dpTh7\":[function(require,module,exports) {\n/* eslint-env browser */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"subtle\", function() {\n    return subtle;\n});\nparcelHelpers.export(exports, \"getRandomValues\", function() {\n    return getRandomValues;\n});\nvar subtle = crypto.subtle;\nvar getRandomValues = crypto.getRandomValues.bind(crypto);\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"5kKgU\":[function(require,module,exports) {\n/**\n * Utility helpers to work with promises.\n *\n * @module promise\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"create\", function() {\n    return create;\n});\nparcelHelpers.export(exports, \"createEmpty\", function() {\n    return createEmpty;\n});\nparcelHelpers.export(exports, \"all\", function() {\n    return all;\n});\nparcelHelpers.export(exports, \"reject\", function() {\n    return reject;\n});\nparcelHelpers.export(exports, \"resolve\", function() {\n    return resolve;\n});\nparcelHelpers.export(exports, \"resolveWith\", function() {\n    return resolveWith;\n});\nparcelHelpers.export(exports, \"until\", function() {\n    return until;\n});\nparcelHelpers.export(exports, \"untilAsync\", function() {\n    return untilAsync;\n});\nparcelHelpers.export(exports, \"wait\", function() {\n    return wait;\n});\nparcelHelpers.export(exports, \"isPromise\", function() {\n    return isPromise;\n});\nvar _asyncToGenerator = require(\"@swc/helpers/_/_async_to_generator\");\nvar _tsGenerator = require(\"@swc/helpers/_/_ts_generator\");\nvar _timeJs = require(\"./time.js\");\nvar create = function(f) {\n    return /** @type {Promise<T>} */ new Promise(f);\n};\nvar createEmpty = function(f) {\n    return new Promise(f);\n};\nvar all = Promise.all.bind(Promise);\nvar reject = function(reason) {\n    return Promise.reject(reason);\n};\nvar resolve = function(res) {\n    return Promise.resolve(res);\n};\nvar resolveWith = function(res) {\n    return Promise.resolve(res);\n};\nvar until = function(timeout, check) {\n    var intervalResolution = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10;\n    return create(function(resolve, reject) {\n        var startTime = _timeJs.getUnixTime();\n        var hasTimeout = timeout > 0;\n        var untilInterval = function() {\n            if (check()) {\n                clearInterval(intervalHandle);\n                resolve();\n            } else if (hasTimeout) /* c8 ignore else */ {\n                if (_timeJs.getUnixTime() - startTime > timeout) {\n                    clearInterval(intervalHandle);\n                    reject(new Error(\"Timeout\"));\n                }\n            }\n        };\n        var intervalHandle = setInterval(untilInterval, intervalResolution);\n    });\n};\nvar untilAsync = function() {\n    var _ref = (0, _asyncToGenerator._)(function(check) {\n        var timeout, intervalResolution, startTime, noTimeout;\n        var _arguments = arguments;\n        return (0, _tsGenerator._)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    timeout = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : 0, intervalResolution = _arguments.length > 2 && _arguments[2] !== void 0 ? _arguments[2] : 10;\n                    startTime = _timeJs.getUnixTime();\n                    noTimeout = timeout <= 0;\n                    _state.label = 1;\n                case 1:\n                    if (!(noTimeout || _timeJs.getUnixTime() - startTime <= timeout)) return [\n                        3,\n                        4\n                    ];\n                    return [\n                        4,\n                        check()\n                    ];\n                case 2:\n                    if (_state.sent()) return [\n                        2\n                    ];\n                    return [\n                        4,\n                        wait(intervalResolution)\n                    ];\n                case 3:\n                    _state.sent();\n                    return [\n                        3,\n                        1\n                    ];\n                case 4:\n                    throw new Error(\"Timeout\");\n            }\n        });\n    });\n    return function untilAsync(check) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar wait = function(timeout) {\n    return create(function(resolve, _reject) {\n        return setTimeout(resolve, timeout);\n    });\n};\nvar isPromise = function(p) {\n    return p instanceof Promise || p && p.then && p[\"catch\"] && p[\"finally\"];\n};\n\n},{\"@swc/helpers/_/_async_to_generator\":\"2ftfd\",\"@swc/helpers/_/_ts_generator\":\"6UgKg\",\"./time.js\":\"U43St\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"2ftfd\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", function() {\n    return _async_to_generator;\n});\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) resolve(value);\n    else Promise.resolve(value).then(_next, _throw);\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"U43St\":[function(require,module,exports) {\n/**\n * Utility module to work with time.\n *\n * @module time\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"getDate\", function() {\n    return getDate;\n});\nparcelHelpers.export(exports, \"getUnixTime\", function() {\n    return getUnixTime;\n});\nparcelHelpers.export(exports, \"humanizeDuration\", function() {\n    return humanizeDuration;\n});\nvar _metricJs = require(\"./metric.js\");\nvar _mathJs = require(\"./math.js\");\nvar getDate = function() {\n    return new Date();\n};\nvar getUnixTime = Date.now;\nvar humanizeDuration = function(d) {\n    if (d < 60000) {\n        var p = _metricJs.prefix(d, -1);\n        return _mathJs.round(p.n * 100) / 100 + p.prefix + \"s\";\n    }\n    d = _mathJs.floor(d / 1000);\n    var seconds = d % 60;\n    var minutes = _mathJs.floor(d / 60) % 60;\n    var hours = _mathJs.floor(d / 3600) % 24;\n    var days = _mathJs.floor(d / 86400);\n    if (days > 0) return days + \"d\" + (hours > 0 || minutes > 30 ? \" \" + (minutes > 30 ? hours + 1 : hours) + \"h\" : \"\");\n    if (hours > 0) /* c8 ignore next */ return hours + \"h\" + (minutes > 0 || seconds > 30 ? \" \" + (seconds > 30 ? minutes + 1 : minutes) + \"min\" : \"\");\n    return minutes + \"min\" + (seconds > 0 ? \" \" + seconds + \"s\" : \"\");\n};\n\n},{\"./metric.js\":\"laMZc\",\"./math.js\":\"2l7a2\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"laMZc\":[function(require,module,exports) {\n/**\n * Utility module to convert metric values.\n *\n * @module metric\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"yotta\", function() {\n    return yotta;\n});\nparcelHelpers.export(exports, \"zetta\", function() {\n    return zetta;\n});\nparcelHelpers.export(exports, \"exa\", function() {\n    return exa;\n});\nparcelHelpers.export(exports, \"peta\", function() {\n    return peta;\n});\nparcelHelpers.export(exports, \"tera\", function() {\n    return tera;\n});\nparcelHelpers.export(exports, \"giga\", function() {\n    return giga;\n});\nparcelHelpers.export(exports, \"mega\", function() {\n    return mega;\n});\nparcelHelpers.export(exports, \"kilo\", function() {\n    return kilo;\n});\nparcelHelpers.export(exports, \"hecto\", function() {\n    return hecto;\n});\nparcelHelpers.export(exports, \"deca\", function() {\n    return deca;\n});\nparcelHelpers.export(exports, \"deci\", function() {\n    return deci;\n});\nparcelHelpers.export(exports, \"centi\", function() {\n    return centi;\n});\nparcelHelpers.export(exports, \"milli\", function() {\n    return milli;\n});\nparcelHelpers.export(exports, \"micro\", function() {\n    return micro;\n});\nparcelHelpers.export(exports, \"nano\", function() {\n    return nano;\n});\nparcelHelpers.export(exports, \"pico\", function() {\n    return pico;\n});\nparcelHelpers.export(exports, \"femto\", function() {\n    return femto;\n});\nparcelHelpers.export(exports, \"atto\", function() {\n    return atto;\n});\nparcelHelpers.export(exports, \"zepto\", function() {\n    return zepto;\n});\nparcelHelpers.export(exports, \"yocto\", function() {\n    return yocto;\n});\nparcelHelpers.export(exports, \"prefix\", function() {\n    return prefix;\n});\nvar _mathJs = require(\"./math.js\");\nvar yotta = 1e24;\nvar zetta = 1e21;\nvar exa = 1e18;\nvar peta = 1e15;\nvar tera = 1e12;\nvar giga = 1e9;\nvar mega = 1e6;\nvar kilo = 1e3;\nvar hecto = 1e2;\nvar deca = 10;\nvar deci = 0.1;\nvar centi = 0.01;\nvar milli = 1e-3;\nvar micro = 1e-6;\nvar nano = 1e-9;\nvar pico = 1e-12;\nvar femto = 1e-15;\nvar atto = 1e-18;\nvar zepto = 1e-21;\nvar yocto = 1e-24;\nvar prefixUp = [\n    \"\",\n    \"k\",\n    \"M\",\n    \"G\",\n    \"T\",\n    \"P\",\n    \"E\",\n    \"Z\",\n    \"Y\"\n];\nvar prefixDown = [\n    \"\",\n    \"m\",\n    \"\\u03BC\",\n    \"n\",\n    \"p\",\n    \"f\",\n    \"a\",\n    \"z\",\n    \"y\"\n];\nvar prefix = function(n) {\n    var baseMultiplier = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    var nPow = n === 0 ? 0 : _mathJs.log10(n);\n    var mult = 0;\n    while(nPow < mult * 3 && baseMultiplier > -8){\n        baseMultiplier--;\n        mult--;\n    }\n    while(nPow >= 3 + mult * 3 && baseMultiplier < 8){\n        baseMultiplier++;\n        mult++;\n    }\n    var prefix = baseMultiplier < 0 ? prefixDown[-baseMultiplier] : prefixUp[baseMultiplier];\n    return {\n        n: _mathJs.round((mult > 0 ? n / _mathJs.exp10(mult * 3) : n * _mathJs.exp10(mult * -3)) * 1e12) / 1e12,\n        prefix: prefix\n    };\n};\n\n},{\"./math.js\":\"2l7a2\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"1BdfW\":[function(require,module,exports) {\n/**\n * Utility functions to work with buffers (Uint8Array).\n *\n * @module buffer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"createUint8ArrayFromLen\", function() {\n    return createUint8ArrayFromLen;\n});\nparcelHelpers.export(exports, \"createUint8ArrayViewFromArrayBuffer\", function() {\n    return createUint8ArrayViewFromArrayBuffer;\n});\nparcelHelpers.export(exports, \"createUint8ArrayFromArrayBuffer\", function() {\n    return createUint8ArrayFromArrayBuffer;\n});\nparcelHelpers.export(exports, \"toBase64\", function() {\n    return toBase64;\n});\nparcelHelpers.export(exports, \"fromBase64\", function() {\n    return fromBase64;\n});\nparcelHelpers.export(exports, \"toBase64UrlEncoded\", function() {\n    return toBase64UrlEncoded;\n});\nparcelHelpers.export(exports, \"fromBase64UrlEncoded\", function() {\n    return fromBase64UrlEncoded;\n});\nparcelHelpers.export(exports, \"toHexString\", function() {\n    return toHexString;\n});\nparcelHelpers.export(exports, \"fromHexString\", function() {\n    return fromHexString;\n});\nparcelHelpers.export(exports, \"copyUint8Array\", function() {\n    return copyUint8Array;\n});\nparcelHelpers.export(exports, \"encodeAny\", function() {\n    return encodeAny;\n});\nparcelHelpers.export(exports, \"decodeAny\", function() {\n    return decodeAny;\n});\nparcelHelpers.export(exports, \"shiftNBitsLeft\", function() {\n    return shiftNBitsLeft;\n});\nvar _stringJs = require(\"./string.js\");\nvar _environmentJs = require(\"./environment.js\");\nvar _arrayJs = require(\"./array.js\");\nvar _mathJs = require(\"./math.js\");\nvar _encodingJs = require(\"./encoding.js\");\nvar _decodingJs = require(\"./decoding.js\");\nvar Buffer = require(\"6475e0e5014d10a8\").Buffer;\nvar createUint8ArrayFromLen = function(len) {\n    return new Uint8Array(len);\n};\nvar createUint8ArrayViewFromArrayBuffer = function(buffer, byteOffset, length) {\n    return new Uint8Array(buffer, byteOffset, length);\n};\nvar createUint8ArrayFromArrayBuffer = function(buffer) {\n    return new Uint8Array(buffer);\n};\n/* c8 ignore start */ /**\n * @param {Uint8Array} bytes\n * @return {string}\n */ var toBase64Browser = function(bytes) {\n    var s = \"\";\n    for(var i = 0; i < bytes.byteLength; i++)s += _stringJs.fromCharCode(bytes[i]);\n    // eslint-disable-next-line no-undef\n    return btoa(s);\n};\n/* c8 ignore stop */ /**\n * @param {Uint8Array} bytes\n * @return {string}\n */ var toBase64Node = function(bytes) {\n    return Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength).toString(\"base64\");\n};\n/* c8 ignore start */ /**\n * @param {string} s\n * @return {Uint8Array}\n */ var fromBase64Browser = function(s) {\n    // eslint-disable-next-line no-undef\n    var a = atob(s);\n    var bytes = createUint8ArrayFromLen(a.length);\n    for(var i = 0; i < a.length; i++)bytes[i] = a.charCodeAt(i);\n    return bytes;\n};\n/* c8 ignore stop */ /**\n * @param {string} s\n */ var fromBase64Node = function(s) {\n    var buf = Buffer.from(s, \"base64\");\n    return createUint8ArrayViewFromArrayBuffer(buf.buffer, buf.byteOffset, buf.byteLength);\n};\nvar toBase64 = _environmentJs.isBrowser ? toBase64Browser : toBase64Node;\nvar fromBase64 = _environmentJs.isBrowser ? fromBase64Browser : fromBase64Node;\nvar toBase64UrlEncoded = function(buf) {\n    return toBase64(buf).replaceAll(\"+\", \"-\").replaceAll(\"/\", \"_\").replaceAll(\"=\", \"\");\n};\nvar fromBase64UrlEncoded = function(base64) {\n    return fromBase64(base64.replaceAll(\"-\", \"+\").replaceAll(\"_\", \"/\"));\n};\nvar toHexString = function(buf) {\n    return _arrayJs.map(buf, function(b) {\n        return b.toString(16).padStart(2, \"0\");\n    }).join(\"\");\n};\nvar fromHexString = function(hex) {\n    var hlen = hex.length;\n    var buf = new Uint8Array(_mathJs.ceil(hlen / 2));\n    for(var i = 0; i < hlen; i += 2)buf[buf.length - i / 2 - 1] = Number.parseInt(hex.slice(hlen - i - 2, hlen - i), 16);\n    return buf;\n};\nvar copyUint8Array = function(uint8Array) {\n    var newBuf = createUint8ArrayFromLen(uint8Array.byteLength);\n    newBuf.set(uint8Array);\n    return newBuf;\n};\nvar encodeAny = function(data) {\n    return _encodingJs.encode(function(encoder) {\n        return _encodingJs.writeAny(encoder, data);\n    });\n};\nvar decodeAny = function(buf) {\n    return _decodingJs.readAny(_decodingJs.createDecoder(buf));\n};\nvar shiftNBitsLeft = function(bs, N) {\n    if (N === 0) return bs;\n    bs = new Uint8Array(bs);\n    bs[0] <<= N;\n    for(var i = 1; i < bs.length; i++){\n        bs[i - 1] |= bs[i] >>> 8 - N;\n        bs[i] <<= N;\n    }\n    return bs;\n};\n\n},{\"6475e0e5014d10a8\":\"jFLRc\",\"./string.js\":\"4ya7r\",\"./environment.js\":\"dak8L\",\"./array.js\":\"4cUzV\",\"./math.js\":\"2l7a2\",\"./encoding.js\":\"i3bjT\",\"./decoding.js\":\"bprzL\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"jFLRc\":[function(require,module,exports) {\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */ /* eslint-disable no-proto */ var _assertThisInitialized = require(\"@swc/helpers/_/_assert_this_initialized\");\nvar _classCallCheck = require(\"@swc/helpers/_/_class_call_check\");\nvar _createClass = require(\"@swc/helpers/_/_create_class\");\nvar _inherits = require(\"@swc/helpers/_/_inherits\");\nvar _typeOf = require(\"@swc/helpers/_/_type_of\");\nvar _createSuper = require(\"@swc/helpers/_/_create_super\");\n\"use strict\";\nvar base64 = require(\"9c62938f1dccc73c\");\nvar ieee754 = require(\"aceacb6a4531a9d2\");\nvar customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" // eslint-disable-line dot-notation\n ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") // eslint-disable-line dot-notation\n : null;\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\nvar K_MAX_LENGTH = 0x7fffffff;\nexports.kMaxLength = K_MAX_LENGTH;\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") console.error(\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\nfunction typedArraySupport() {\n    // Can typed array instances can be augmented?\n    try {\n        var arr = new Uint8Array(1);\n        var proto = {\n            foo: function foo() {\n                return 42;\n            }\n        };\n        Object.setPrototypeOf(proto, Uint8Array.prototype);\n        Object.setPrototypeOf(arr, proto);\n        return arr.foo() === 42;\n    } catch (e) {\n        return false;\n    }\n}\nObject.defineProperty(Buffer.prototype, \"parent\", {\n    enumerable: true,\n    get: function get() {\n        if (!Buffer.isBuffer(this)) return undefined;\n        return this.buffer;\n    }\n});\nObject.defineProperty(Buffer.prototype, \"offset\", {\n    enumerable: true,\n    get: function get() {\n        if (!Buffer.isBuffer(this)) return undefined;\n        return this.byteOffset;\n    }\n});\nfunction createBuffer(length) {\n    if (length > K_MAX_LENGTH) throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n    // Return an augmented `Uint8Array` instance\n    var buf = new Uint8Array(length);\n    Object.setPrototypeOf(buf, Buffer.prototype);\n    return buf;\n}\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */ function Buffer(arg, encodingOrOffset, length) {\n    // Common case.\n    if (typeof arg === \"number\") {\n        if (typeof encodingOrOffset === \"string\") throw new TypeError('The \"string\" argument must be of type string. Received type number');\n        return allocUnsafe(arg);\n    }\n    return from(arg, encodingOrOffset, length);\n}\nBuffer.poolSize = 8192 // not used by this implementation\n;\nfunction from(value, encodingOrOffset, length) {\n    if (typeof value === \"string\") return fromString(value, encodingOrOffset);\n    if (ArrayBuffer.isView(value)) return fromArrayView(value);\n    if (value == null) throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + (typeof value === \"undefined\" ? \"undefined\" : (0, _typeOf._)(value)));\n    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);\n    if (typeof SharedArrayBuffer !== \"undefined\" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);\n    if (typeof value === \"number\") throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n    var valueOf = value.valueOf && value.valueOf();\n    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);\n    var b = fromObject(value);\n    if (b) return b;\n    if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") return Buffer.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n    throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + (typeof value === \"undefined\" ? \"undefined\" : (0, _typeOf._)(value)));\n}\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/ Buffer.from = function(value, encodingOrOffset, length) {\n    return from(value, encodingOrOffset, length);\n};\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);\nObject.setPrototypeOf(Buffer, Uint8Array);\nfunction assertSize(size) {\n    if (typeof size !== \"number\") throw new TypeError('\"size\" argument must be of type number');\n    else if (size < 0) throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n}\nfunction alloc(size, fill, encoding) {\n    assertSize(size);\n    if (size <= 0) return createBuffer(size);\n    if (fill !== undefined) // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n    return createBuffer(size);\n}\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/ Buffer.alloc = function(size, fill, encoding) {\n    return alloc(size, fill, encoding);\n};\nfunction allocUnsafe(size) {\n    assertSize(size);\n    return createBuffer(size < 0 ? 0 : checked(size) | 0);\n}\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */ Buffer.allocUnsafe = function(size) {\n    return allocUnsafe(size);\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */ Buffer.allocUnsafeSlow = function(size) {\n    return allocUnsafe(size);\n};\nfunction fromString(string, encoding) {\n    if (typeof encoding !== \"string\" || encoding === \"\") encoding = \"utf8\";\n    if (!Buffer.isEncoding(encoding)) throw new TypeError(\"Unknown encoding: \" + encoding);\n    var length = byteLength(string, encoding) | 0;\n    var buf = createBuffer(length);\n    var actual = buf.write(string, encoding);\n    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual);\n    return buf;\n}\nfunction fromArrayLike(array) {\n    var length = array.length < 0 ? 0 : checked(array.length) | 0;\n    var buf = createBuffer(length);\n    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;\n    return buf;\n}\nfunction fromArrayView(arrayView) {\n    if (isInstance(arrayView, Uint8Array)) {\n        var copy = new Uint8Array(arrayView);\n        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n    }\n    return fromArrayLike(arrayView);\n}\nfunction fromArrayBuffer(array, byteOffset, length) {\n    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('\"offset\" is outside of buffer bounds');\n    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('\"length\" is outside of buffer bounds');\n    var buf;\n    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);\n    else if (length === undefined) buf = new Uint8Array(array, byteOffset);\n    else buf = new Uint8Array(array, byteOffset, length);\n    // Return an augmented `Uint8Array` instance\n    Object.setPrototypeOf(buf, Buffer.prototype);\n    return buf;\n}\nfunction fromObject(obj) {\n    if (Buffer.isBuffer(obj)) {\n        var len = checked(obj.length) | 0;\n        var buf = createBuffer(len);\n        if (buf.length === 0) return buf;\n        obj.copy(buf, 0, 0, len);\n        return buf;\n    }\n    if (obj.length !== undefined) {\n        if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) return createBuffer(0);\n        return fromArrayLike(obj);\n    }\n    if (obj.type === \"Buffer\" && Array.isArray(obj.data)) return fromArrayLike(obj.data);\n}\nfunction checked(length) {\n    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n    // length is NaN (which is otherwise coerced to zero.)\n    if (length >= K_MAX_LENGTH) throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n    return length | 0;\n}\nfunction SlowBuffer(length) {\n    if (+length != length) length = 0;\n    return Buffer.alloc(+length);\n}\nBuffer.isBuffer = function isBuffer(b) {\n    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n    ;\n};\nBuffer.compare = function compare(a, b) {\n    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);\n    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);\n    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n    if (a === b) return 0;\n    var x = a.length;\n    var y = b.length;\n    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {\n        x = a[i];\n        y = b[i];\n        break;\n    }\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n};\nBuffer.isEncoding = function isEncoding(encoding) {\n    switch(String(encoding).toLowerCase()){\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return true;\n        default:\n            return false;\n    }\n};\nBuffer.concat = function concat(list, length) {\n    if (!Array.isArray(list)) throw new TypeError('\"list\" argument must be an Array of Buffers');\n    if (list.length === 0) return Buffer.alloc(0);\n    var i;\n    if (length === undefined) {\n        length = 0;\n        for(i = 0; i < list.length; ++i)length += list[i].length;\n    }\n    var buffer = Buffer.allocUnsafe(length);\n    var pos = 0;\n    for(i = 0; i < list.length; ++i){\n        var buf = list[i];\n        if (isInstance(buf, Uint8Array)) {\n            if (pos + buf.length > buffer.length) {\n                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);\n                buf.copy(buffer, pos);\n            } else Uint8Array.prototype.set.call(buffer, buf, pos);\n        } else if (!Buffer.isBuffer(buf)) throw new TypeError('\"list\" argument must be an Array of Buffers');\n        else buf.copy(buffer, pos);\n        pos += buf.length;\n    }\n    return buffer;\n};\nfunction byteLength(string, encoding) {\n    if (Buffer.isBuffer(string)) return string.length;\n    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;\n    if (typeof string !== \"string\") throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + (typeof string === \"undefined\" ? \"undefined\" : (0, _typeOf._)(string)));\n    var len = string.length;\n    var mustMatch = arguments.length > 2 && arguments[2] === true;\n    if (!mustMatch && len === 0) return 0;\n    // Use a for loop to avoid recursion\n    var loweredCase = false;\n    for(;;)switch(encoding){\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n            return len;\n        case \"utf8\":\n        case \"utf-8\":\n            return utf8ToBytes(string).length;\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return len * 2;\n        case \"hex\":\n            return len >>> 1;\n        case \"base64\":\n            return base64ToBytes(string).length;\n        default:\n            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n            ;\n            encoding = (\"\" + encoding).toLowerCase();\n            loweredCase = true;\n    }\n}\nBuffer.byteLength = byteLength;\nfunction slowToString(encoding, start, end) {\n    var loweredCase = false;\n    // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n    // property of a typed array.\n    // This behaves neither like String nor Uint8Array in that we set start/end\n    // to their upper/lower bounds if the value passed is out of range.\n    // undefined is handled specially as per ECMA-262 6th Edition,\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n    if (start === undefined || start < 0) start = 0;\n    // Return early if start > this.length. Done here to prevent potential uint32\n    // coercion fail below.\n    if (start > this.length) return \"\";\n    if (end === undefined || end > this.length) end = this.length;\n    if (end <= 0) return \"\";\n    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n    end >>>= 0;\n    start >>>= 0;\n    if (end <= start) return \"\";\n    if (!encoding) encoding = \"utf8\";\n    while(true)switch(encoding){\n        case \"hex\":\n            return hexSlice(this, start, end);\n        case \"utf8\":\n        case \"utf-8\":\n            return utf8Slice(this, start, end);\n        case \"ascii\":\n            return asciiSlice(this, start, end);\n        case \"latin1\":\n        case \"binary\":\n            return latin1Slice(this, start, end);\n        case \"base64\":\n            return base64Slice(this, start, end);\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return utf16leSlice(this, start, end);\n        default:\n            if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n            encoding = (encoding + \"\").toLowerCase();\n            loweredCase = true;\n    }\n}\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true;\nfunction swap(b, n, m) {\n    var i = b[n];\n    b[n] = b[m];\n    b[m] = i;\n}\nBuffer.prototype.swap16 = function swap16() {\n    var len = this.length;\n    if (len % 2 !== 0) throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n    for(var i = 0; i < len; i += 2)swap(this, i, i + 1);\n    return this;\n};\nBuffer.prototype.swap32 = function swap32() {\n    var len = this.length;\n    if (len % 4 !== 0) throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n    for(var i = 0; i < len; i += 4){\n        swap(this, i, i + 3);\n        swap(this, i + 1, i + 2);\n    }\n    return this;\n};\nBuffer.prototype.swap64 = function swap64() {\n    var len = this.length;\n    if (len % 8 !== 0) throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n    for(var i = 0; i < len; i += 8){\n        swap(this, i, i + 7);\n        swap(this, i + 1, i + 6);\n        swap(this, i + 2, i + 5);\n        swap(this, i + 3, i + 4);\n    }\n    return this;\n};\nBuffer.prototype.toString = function toString() {\n    var length = this.length;\n    if (length === 0) return \"\";\n    if (arguments.length === 0) return utf8Slice(this, 0, length);\n    return slowToString.apply(this, arguments);\n};\nBuffer.prototype.toLocaleString = Buffer.prototype.toString;\nBuffer.prototype.equals = function equals(b) {\n    if (!Buffer.isBuffer(b)) throw new TypeError(\"Argument must be a Buffer\");\n    if (this === b) return true;\n    return Buffer.compare(this, b) === 0;\n};\nBuffer.prototype.inspect = function inspect() {\n    var str = \"\";\n    var max = exports.INSPECT_MAX_BYTES;\n    str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n    if (this.length > max) str += \" ... \";\n    return \"<Buffer \" + str + \">\";\n};\nif (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;\nBuffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);\n    if (!Buffer.isBuffer(target)) throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + (typeof target === \"undefined\" ? \"undefined\" : (0, _typeOf._)(target)));\n    if (start === undefined) start = 0;\n    if (end === undefined) end = target ? target.length : 0;\n    if (thisStart === undefined) thisStart = 0;\n    if (thisEnd === undefined) thisEnd = this.length;\n    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError(\"out of range index\");\n    if (thisStart >= thisEnd && start >= end) return 0;\n    if (thisStart >= thisEnd) return -1;\n    if (start >= end) return 1;\n    start >>>= 0;\n    end >>>= 0;\n    thisStart >>>= 0;\n    thisEnd >>>= 0;\n    if (this === target) return 0;\n    var x = thisEnd - thisStart;\n    var y = end - start;\n    var len = Math.min(x, y);\n    var thisCopy = this.slice(thisStart, thisEnd);\n    var targetCopy = target.slice(start, end);\n    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {\n        x = thisCopy[i];\n        y = targetCopy[i];\n        break;\n    }\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n};\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n    // Empty buffer means no match\n    if (buffer.length === 0) return -1;\n    // Normalize byteOffset\n    if (typeof byteOffset === \"string\") {\n        encoding = byteOffset;\n        byteOffset = 0;\n    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;\n    else if (byteOffset < -2147483648) byteOffset = -2147483648;\n    byteOffset = +byteOffset // Coerce to Number.\n    ;\n    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : buffer.length - 1;\n    // Normalize byteOffset: negative offsets start from the end of the buffer\n    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n    if (byteOffset >= buffer.length) {\n        if (dir) return -1;\n        else byteOffset = buffer.length - 1;\n    } else if (byteOffset < 0) {\n        if (dir) byteOffset = 0;\n        else return -1;\n    }\n    // Normalize val\n    if (typeof val === \"string\") val = Buffer.from(val, encoding);\n    // Finally, search either indexOf (if dir is true) or lastIndexOf\n    if (Buffer.isBuffer(val)) {\n        // Special case: looking for empty string/buffer always fails\n        if (val.length === 0) return -1;\n        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n    } else if (typeof val === \"number\") {\n        val = val & 0xFF // Search for a byte value [0-255]\n        ;\n        if (typeof Uint8Array.prototype.indexOf === \"function\") {\n            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n        }\n        return arrayIndexOf(buffer, [\n            val\n        ], byteOffset, encoding, dir);\n    }\n    throw new TypeError(\"val must be string, number or Buffer\");\n}\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n    var indexSize = 1;\n    var arrLength = arr.length;\n    var valLength = val.length;\n    if (encoding !== undefined) {\n        encoding = String(encoding).toLowerCase();\n        if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n            if (arr.length < 2 || val.length < 2) return -1;\n            indexSize = 2;\n            arrLength /= 2;\n            valLength /= 2;\n            byteOffset /= 2;\n        }\n    }\n    function read(buf, i) {\n        if (indexSize === 1) return buf[i];\n        else return buf.readUInt16BE(i * indexSize);\n    }\n    var i;\n    if (dir) {\n        var foundIndex = -1;\n        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n            if (foundIndex === -1) foundIndex = i;\n            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n        } else {\n            if (foundIndex !== -1) i -= i - foundIndex;\n            foundIndex = -1;\n        }\n    } else {\n        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n        for(i = byteOffset; i >= 0; i--){\n            var found = true;\n            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {\n                found = false;\n                break;\n            }\n            if (found) return i;\n        }\n    }\n    return -1;\n}\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n    return this.indexOf(val, byteOffset, encoding) !== -1;\n};\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\nfunction hexWrite(buf, string, offset, length) {\n    offset = Number(offset) || 0;\n    var remaining = buf.length - offset;\n    if (!length) length = remaining;\n    else {\n        length = Number(length);\n        if (length > remaining) length = remaining;\n    }\n    var strLen = string.length;\n    if (length > strLen / 2) length = strLen / 2;\n    var i;\n    for(i = 0; i < length; ++i){\n        var parsed = parseInt(string.substr(i * 2, 2), 16);\n        if (numberIsNaN(parsed)) return i;\n        buf[offset + i] = parsed;\n    }\n    return i;\n}\nfunction utf8Write(buf, string, offset, length) {\n    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\nfunction asciiWrite(buf, string, offset, length) {\n    return blitBuffer(asciiToBytes(string), buf, offset, length);\n}\nfunction base64Write(buf, string, offset, length) {\n    return blitBuffer(base64ToBytes(string), buf, offset, length);\n}\nfunction ucs2Write(buf, string, offset, length) {\n    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n    // Buffer#write(string)\n    if (offset === undefined) {\n        encoding = \"utf8\";\n        length = this.length;\n        offset = 0;\n    // Buffer#write(string, encoding)\n    } else if (length === undefined && typeof offset === \"string\") {\n        encoding = offset;\n        length = this.length;\n        offset = 0;\n    // Buffer#write(string, offset[, length][, encoding])\n    } else if (isFinite(offset)) {\n        offset = offset >>> 0;\n        if (isFinite(length)) {\n            length = length >>> 0;\n            if (encoding === undefined) encoding = \"utf8\";\n        } else {\n            encoding = length;\n            length = undefined;\n        }\n    } else throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n    var remaining = this.length - offset;\n    if (length === undefined || length > remaining) length = remaining;\n    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError(\"Attempt to write outside buffer bounds\");\n    if (!encoding) encoding = \"utf8\";\n    var loweredCase = false;\n    for(;;)switch(encoding){\n        case \"hex\":\n            return hexWrite(this, string, offset, length);\n        case \"utf8\":\n        case \"utf-8\":\n            return utf8Write(this, string, offset, length);\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n            return asciiWrite(this, string, offset, length);\n        case \"base64\":\n            // Warning: maxLength not taken into account in base64Write\n            return base64Write(this, string, offset, length);\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return ucs2Write(this, string, offset, length);\n        default:\n            if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n            encoding = (\"\" + encoding).toLowerCase();\n            loweredCase = true;\n    }\n};\nBuffer.prototype.toJSON = function toJSON() {\n    return {\n        type: \"Buffer\",\n        data: Array.prototype.slice.call(this._arr || this, 0)\n    };\n};\nfunction base64Slice(buf, start, end) {\n    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);\n    else return base64.fromByteArray(buf.slice(start, end));\n}\nfunction utf8Slice(buf, start, end) {\n    end = Math.min(buf.length, end);\n    var res = [];\n    var i = start;\n    while(i < end){\n        var firstByte = buf[i];\n        var codePoint = null;\n        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n        if (i + bytesPerSequence <= end) {\n            var secondByte = void 0, thirdByte = void 0, fourthByte = void 0, tempCodePoint = void 0;\n            switch(bytesPerSequence){\n                case 1:\n                    if (firstByte < 0x80) codePoint = firstByte;\n                    break;\n                case 2:\n                    secondByte = buf[i + 1];\n                    if ((secondByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;\n                    }\n                    break;\n                case 3:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;\n                    }\n                    break;\n                case 4:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    fourthByte = buf[i + 3];\n                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;\n                    }\n            }\n        }\n        if (codePoint === null) {\n            // we did not generate a valid codePoint so insert a\n            // replacement char (U+FFFD) and advance only 1 byte\n            codePoint = 0xFFFD;\n            bytesPerSequence = 1;\n        } else if (codePoint > 0xFFFF) {\n            // encode to utf16 (surrogate pair dance)\n            codePoint -= 0x10000;\n            res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n            codePoint = 0xDC00 | codePoint & 0x3FF;\n        }\n        res.push(codePoint);\n        i += bytesPerSequence;\n    }\n    return decodeCodePointsArray(res);\n}\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\nfunction decodeCodePointsArray(codePoints) {\n    var len = codePoints.length;\n    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n    ;\n    // Decode in chunks to avoid \"call stack size exceeded\".\n    var res = \"\";\n    var i = 0;\n    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n    return res;\n}\nfunction asciiSlice(buf, start, end) {\n    var ret = \"\";\n    end = Math.min(buf.length, end);\n    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);\n    return ret;\n}\nfunction latin1Slice(buf, start, end) {\n    var ret = \"\";\n    end = Math.min(buf.length, end);\n    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);\n    return ret;\n}\nfunction hexSlice(buf, start, end) {\n    var len = buf.length;\n    if (!start || start < 0) start = 0;\n    if (!end || end < 0 || end > len) end = len;\n    var out = \"\";\n    for(var i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];\n    return out;\n}\nfunction utf16leSlice(buf, start, end) {\n    var bytes = buf.slice(start, end);\n    var res = \"\";\n    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n    return res;\n}\nBuffer.prototype.slice = function slice(start, end) {\n    var len = this.length;\n    start = ~~start;\n    end = end === undefined ? len : ~~end;\n    if (start < 0) {\n        start += len;\n        if (start < 0) start = 0;\n    } else if (start > len) start = len;\n    if (end < 0) {\n        end += len;\n        if (end < 0) end = 0;\n    } else if (end > len) end = len;\n    if (end < start) end = start;\n    var newBuf = this.subarray(start, end);\n    // Return an augmented `Uint8Array` instance\n    Object.setPrototypeOf(newBuf, Buffer.prototype);\n    return newBuf;\n};\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */ function checkOffset(offset, ext, length) {\n    if (offset % 1 !== 0 || offset < 0) throw new RangeError(\"offset is not uint\");\n    if (offset + ext > length) throw new RangeError(\"Trying to access beyond buffer length\");\n}\nBuffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    var val = this[offset];\n    var mul = 1;\n    var i = 0;\n    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;\n    return val;\n};\nBuffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    var val = this[offset + --byteLength];\n    var mul = 1;\n    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;\n    return val;\n};\nBuffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    return this[offset];\n};\nBuffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] | this[offset + 1] << 8;\n};\nBuffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] << 8 | this[offset + 1];\n};\nBuffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\nBuffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, \"offset\");\n    var first = this[offset];\n    var last = this[offset + 7];\n    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);\n    var lo = first + this[++offset] * 256 + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 24);\n    var hi = this[++offset] + this[++offset] * 256 + this[++offset] * Math.pow(2, 16) + last * Math.pow(2, 24);\n    return BigInt(lo) + (BigInt(hi) << BigInt(32));\n});\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, \"offset\");\n    var first = this[offset];\n    var last = this[offset + 7];\n    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);\n    var hi = first * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * 256 + this[++offset];\n    var lo = this[++offset] * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * 256 + last;\n    return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n});\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    var val = this[offset];\n    var mul = 1;\n    var i = 0;\n    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n};\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    var i = byteLength;\n    var mul = 1;\n    var val = this[offset + --i];\n    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n};\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    if (!(this[offset] & 0x80)) return this[offset];\n    return (0xff - this[offset] + 1) * -1;\n};\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    var val = this[offset] | this[offset + 1] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    var val = this[offset + 1] | this[offset] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, \"offset\");\n    var first = this[offset];\n    var last = this[offset + 7];\n    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);\n    var val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * Math.pow(2, 16) + (last << 24 // Overflow\n    );\n    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 24));\n});\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, \"offset\");\n    var first = this[offset];\n    var last = this[offset + 7];\n    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);\n    var val = (first << 24) + // Overflow\n    this[++offset] * Math.pow(2, 16) + this[++offset] * 256 + this[++offset];\n    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * 256 + last);\n});\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return ieee754.read(this, offset, true, 23, 4);\n};\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return ieee754.read(this, offset, false, 23, 4);\n};\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return ieee754.read(this, offset, true, 52, 8);\n};\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return ieee754.read(this, offset, false, 52, 8);\n};\nfunction checkInt(buf, value, offset, ext, max, min) {\n    if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n    if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n    if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n}\nBuffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n        var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n        checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n    var mul = 1;\n    var i = 0;\n    this[offset] = value & 0xFF;\n    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;\n    return offset + byteLength;\n};\nBuffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n        var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n        checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n    var i = byteLength - 1;\n    var mul = 1;\n    this[offset + i] = value & 0xFF;\n    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;\n    return offset + byteLength;\n};\nBuffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n    this[offset] = value & 0xff;\n    return offset + 1;\n};\nBuffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    return offset + 2;\n};\nBuffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n    return offset + 2;\n};\nBuffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n    this[offset + 3] = value >>> 24;\n    this[offset + 2] = value >>> 16;\n    this[offset + 1] = value >>> 8;\n    this[offset] = value & 0xff;\n    return offset + 4;\n};\nBuffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n    return offset + 4;\n};\nfunction wrtBigUInt64LE(buf, value, offset, min, max) {\n    checkIntBI(value, min, max, buf, offset, 7);\n    var lo = Number(value & BigInt(0xffffffff));\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    var hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    return offset;\n}\nfunction wrtBigUInt64BE(buf, value, offset, min, max) {\n    checkIntBI(value, min, max, buf, offset, 7);\n    var lo = Number(value & BigInt(0xffffffff));\n    buf[offset + 7] = lo;\n    lo = lo >> 8;\n    buf[offset + 6] = lo;\n    lo = lo >> 8;\n    buf[offset + 5] = lo;\n    lo = lo >> 8;\n    buf[offset + 4] = lo;\n    var hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n    buf[offset + 3] = hi;\n    hi = hi >> 8;\n    buf[offset + 2] = hi;\n    hi = hi >> 8;\n    buf[offset + 1] = hi;\n    hi = hi >> 8;\n    buf[offset] = hi;\n    return offset + 8;\n}\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value) {\n    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n});\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value) {\n    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n});\nBuffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        var limit = Math.pow(2, 8 * byteLength - 1);\n        checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n    var i = 0;\n    var mul = 1;\n    var sub = 0;\n    this[offset] = value & 0xFF;\n    while(++i < byteLength && (mul *= 0x100)){\n        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;\n        this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n};\nBuffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        var limit = Math.pow(2, 8 * byteLength - 1);\n        checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n    var i = byteLength - 1;\n    var mul = 1;\n    var sub = 0;\n    this[offset + i] = value & 0xFF;\n    while(--i >= 0 && (mul *= 0x100)){\n        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;\n        this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n};\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);\n    if (value < 0) value = 0xff + value + 1;\n    this[offset] = value & 0xff;\n    return offset + 1;\n};\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    return offset + 2;\n};\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n    return offset + 2;\n};\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    this[offset + 2] = value >>> 16;\n    this[offset + 3] = value >>> 24;\n    return offset + 4;\n};\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);\n    if (value < 0) value = 0xffffffff + value + 1;\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n    return offset + 4;\n};\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value) {\n    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n});\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value) {\n    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n});\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n    if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n    if (offset < 0) throw new RangeError(\"Index out of range\");\n}\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);\n    ieee754.write(buf, value, offset, littleEndian, 23, 4);\n    return offset + 4;\n}\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, true, noAssert);\n};\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, false, noAssert);\n};\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n    ieee754.write(buf, value, offset, littleEndian, 52, 8);\n    return offset + 8;\n}\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n    return writeDouble(this, value, offset, true, noAssert);\n};\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n    return writeDouble(this, value, offset, false, noAssert);\n};\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n    if (!Buffer.isBuffer(target)) throw new TypeError(\"argument should be a Buffer\");\n    if (!start) start = 0;\n    if (!end && end !== 0) end = this.length;\n    if (targetStart >= target.length) targetStart = target.length;\n    if (!targetStart) targetStart = 0;\n    if (end > 0 && end < start) end = start;\n    // Copy 0 bytes; we're done\n    if (end === start) return 0;\n    if (target.length === 0 || this.length === 0) return 0;\n    // Fatal error conditions\n    if (targetStart < 0) throw new RangeError(\"targetStart out of bounds\");\n    if (start < 0 || start >= this.length) throw new RangeError(\"Index out of range\");\n    if (end < 0) throw new RangeError(\"sourceEnd out of bounds\");\n    // Are we oob?\n    if (end > this.length) end = this.length;\n    if (target.length - targetStart < end - start) end = target.length - targetStart + start;\n    var len = end - start;\n    if (this === target && typeof Uint8Array.prototype.copyWithin === \"function\") // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end);\n    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n    return len;\n};\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n    // Handle string cases:\n    if (typeof val === \"string\") {\n        if (typeof start === \"string\") {\n            encoding = start;\n            start = 0;\n            end = this.length;\n        } else if (typeof end === \"string\") {\n            encoding = end;\n            end = this.length;\n        }\n        if (encoding !== undefined && typeof encoding !== \"string\") throw new TypeError(\"encoding must be a string\");\n        if (typeof encoding === \"string\" && !Buffer.isEncoding(encoding)) throw new TypeError(\"Unknown encoding: \" + encoding);\n        if (val.length === 1) {\n            var code = val.charCodeAt(0);\n            if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") // Fast path: If `val` fits into a single byte, use that numeric value.\n            val = code;\n        }\n    } else if (typeof val === \"number\") val = val & 255;\n    else if (typeof val === \"boolean\") val = Number(val);\n    // Invalid ranges are not set to a default, so can range check early.\n    if (start < 0 || this.length < start || this.length < end) throw new RangeError(\"Out of range index\");\n    if (end <= start) return this;\n    start = start >>> 0;\n    end = end === undefined ? this.length : end >>> 0;\n    if (!val) val = 0;\n    var i;\n    if (typeof val === \"number\") for(i = start; i < end; ++i)this[i] = val;\n    else {\n        var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);\n        var len = bytes.length;\n        if (len === 0) throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];\n    }\n    return this;\n};\n// CUSTOM ERRORS\n// =============\n// Simplified versions from Node, changed for Buffer-only usage\nvar errors = {};\nfunction E(sym, getMessage, Base) {\n    errors[sym] = /*#__PURE__*/ function(Base) {\n        (0, _inherits._)(NodeError, Base);\n        var _super = (0, _createSuper._)(NodeError);\n        function NodeError() {\n            (0, _classCallCheck._)(this, NodeError);\n            var _this;\n            _this = _super.call(this);\n            Object.defineProperty((0, _assertThisInitialized._)(_this), \"message\", {\n                value: getMessage.apply((0, _assertThisInitialized._)(_this), arguments),\n                writable: true,\n                configurable: true\n            });\n            // Add the error code to the name to include it in the stack trace.\n            _this.name = \"\".concat(_this.name, \" [\").concat(sym, \"]\");\n            // Access the stack to generate the error message including the error code\n            // from the name.\n            _this.stack // eslint-disable-line no-unused-expressions\n            ;\n            // Reset the name to the actual name.\n            delete _this.name;\n            return _this;\n        }\n        (0, _createClass._)(NodeError, [\n            {\n                key: \"code\",\n                get: function get() {\n                    return sym;\n                },\n                set: function set(value) {\n                    Object.defineProperty(this, \"code\", {\n                        configurable: true,\n                        enumerable: true,\n                        value: value,\n                        writable: true\n                    });\n                }\n            },\n            {\n                key: \"toString\",\n                value: function toString() {\n                    return \"\".concat(this.name, \" [\").concat(sym, \"]: \").concat(this.message);\n                }\n            }\n        ]);\n        return NodeError;\n    }(Base);\n}\nE(\"ERR_BUFFER_OUT_OF_BOUNDS\", function(name) {\n    if (name) return \"\".concat(name, \" is outside of buffer bounds\");\n    return \"Attempt to access memory outside buffer bounds\";\n}, RangeError);\nE(\"ERR_INVALID_ARG_TYPE\", function(name, actual) {\n    return 'The \"'.concat(name, '\" argument must be of type number. Received type ').concat(typeof actual === \"undefined\" ? \"undefined\" : (0, _typeOf._)(actual));\n}, TypeError);\nE(\"ERR_OUT_OF_RANGE\", function(str, range, input) {\n    var msg = 'The value of \"'.concat(str, '\" is out of range.');\n    var received = input;\n    if (Number.isInteger(input) && Math.abs(input) > Math.pow(2, 32)) received = addNumericalSeparator(String(input));\n    else if ((typeof input === \"undefined\" ? \"undefined\" : (0, _typeOf._)(input)) === \"bigint\") {\n        received = String(input);\n        if (input > Math.pow(BigInt(2), BigInt(32)) || input < -Math.pow(BigInt(2), BigInt(32))) received = addNumericalSeparator(received);\n        received += \"n\";\n    }\n    msg += \" It must be \".concat(range, \". Received \").concat(received);\n    return msg;\n}, RangeError);\nfunction addNumericalSeparator(val) {\n    var res = \"\";\n    var i = val.length;\n    var start = val[0] === \"-\" ? 1 : 0;\n    for(; i >= start + 4; i -= 3)res = \"_\".concat(val.slice(i - 3, i)).concat(res);\n    return \"\".concat(val.slice(0, i)).concat(res);\n}\n// CHECK FUNCTIONS\n// ===============\nfunction checkBounds(buf, offset, byteLength) {\n    validateNumber(offset, \"offset\");\n    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) boundsError(offset, buf.length - (byteLength + 1));\n}\nfunction checkIntBI(value, min, max, buf, offset, byteLength) {\n    if (value > max || value < min) {\n        var n = (typeof min === \"undefined\" ? \"undefined\" : (0, _typeOf._)(min)) === \"bigint\" ? \"n\" : \"\";\n        var range;\n        if (byteLength > 3) {\n            if (min === 0 || min === BigInt(0)) range = \">= 0\".concat(n, \" and < 2\").concat(n, \" ** \").concat((byteLength + 1) * 8).concat(n);\n            else range = \">= -(2\".concat(n, \" ** \").concat((byteLength + 1) * 8 - 1).concat(n, \") and < 2 ** \") + \"\".concat((byteLength + 1) * 8 - 1).concat(n);\n        } else range = \">= \".concat(min).concat(n, \" and <= \").concat(max).concat(n);\n        throw new errors.ERR_OUT_OF_RANGE(\"value\", range, value);\n    }\n    checkBounds(buf, offset, byteLength);\n}\nfunction validateNumber(value, name) {\n    if (typeof value !== \"number\") throw new errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n}\nfunction boundsError(value, length, type) {\n    if (Math.floor(value) !== value) {\n        validateNumber(value, type);\n        throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \"an integer\", value);\n    }\n    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n    throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \">= \".concat(type ? 1 : 0, \" and <= \").concat(length), value);\n}\n// HELPER FUNCTIONS\n// ================\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\nfunction base64clean(str) {\n    // Node takes equal signs as end of the Base64 encoding\n    str = str.split(\"=\")[0];\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n    str = str.trim().replace(INVALID_BASE64_RE, \"\");\n    // Node converts strings with length < 2 to ''\n    if (str.length < 2) return \"\";\n    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n    while(str.length % 4 !== 0)str = str + \"=\";\n    return str;\n}\nfunction utf8ToBytes(string, units) {\n    units = units || Infinity;\n    var codePoint;\n    var length = string.length;\n    var leadSurrogate = null;\n    var bytes = [];\n    for(var i = 0; i < length; ++i){\n        codePoint = string.charCodeAt(i);\n        // is surrogate component\n        if (codePoint > 0xD7FF && codePoint < 0xE000) {\n            // last char was a lead\n            if (!leadSurrogate) {\n                // no lead yet\n                if (codePoint > 0xDBFF) {\n                    // unexpected trail\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                } else if (i + 1 === length) {\n                    // unpaired lead\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                }\n                // valid lead\n                leadSurrogate = codePoint;\n                continue;\n            }\n            // 2 leads in a row\n            if (codePoint < 0xDC00) {\n                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                leadSurrogate = codePoint;\n                continue;\n            }\n            // valid surrogate pair\n            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n        } else if (leadSurrogate) // valid bmp char, but last char was a lead\n        {\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        }\n        leadSurrogate = null;\n        // encode utf8\n        if (codePoint < 0x80) {\n            if ((units -= 1) < 0) break;\n            bytes.push(codePoint);\n        } else if (codePoint < 0x800) {\n            if ((units -= 2) < 0) break;\n            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n        } else if (codePoint < 0x10000) {\n            if ((units -= 3) < 0) break;\n            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n        } else if (codePoint < 0x110000) {\n            if ((units -= 4) < 0) break;\n            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n        } else throw new Error(\"Invalid code point\");\n    }\n    return bytes;\n}\nfunction asciiToBytes(str) {\n    var byteArray = [];\n    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n    return byteArray;\n}\nfunction utf16leToBytes(str, units) {\n    var c, hi, lo;\n    var byteArray = [];\n    for(var i = 0; i < str.length; ++i){\n        if ((units -= 2) < 0) break;\n        c = str.charCodeAt(i);\n        hi = c >> 8;\n        lo = c % 256;\n        byteArray.push(lo);\n        byteArray.push(hi);\n    }\n    return byteArray;\n}\nfunction base64ToBytes(str) {\n    return base64.toByteArray(base64clean(str));\n}\nfunction blitBuffer(src, dst, offset, length) {\n    var i;\n    for(i = 0; i < length; ++i){\n        if (i + offset >= dst.length || i >= src.length) break;\n        dst[i + offset] = src[i];\n    }\n    return i;\n}\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance(obj, type) {\n    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n}\nfunction numberIsNaN(obj) {\n    // For IE11 support\n    return obj !== obj // eslint-disable-line no-self-compare\n    ;\n}\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = function() {\n    var alphabet = \"0123456789abcdef\";\n    var table = new Array(256);\n    for(var i = 0; i < 16; ++i){\n        var i16 = i * 16;\n        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];\n    }\n    return table;\n}();\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod(fn) {\n    return typeof BigInt === \"undefined\" ? BufferBigIntNotDefined : fn;\n}\nfunction BufferBigIntNotDefined() {\n    throw new Error(\"BigInt not supported\");\n}\n\n},{\"@swc/helpers/_/_assert_this_initialized\":\"klQmr\",\"@swc/helpers/_/_class_call_check\":\"6tPd8\",\"@swc/helpers/_/_create_class\":\"kdmA3\",\"@swc/helpers/_/_inherits\":\"F8Yln\",\"@swc/helpers/_/_type_of\":\"3BgET\",\"@swc/helpers/_/_create_super\":\"4DJgF\",\"9c62938f1dccc73c\":\"9HLib\",\"aceacb6a4531a9d2\":\"iVOfv\"}],\"9HLib\":[function(require,module,exports) {\n\"use strict\";\nexports.byteLength = byteLength;\nexports.toByteArray = toByteArray;\nexports.fromByteArray = fromByteArray;\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\nvar code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfor(var i = 0, len = code.length; i < len; ++i){\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n}\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup[\"-\".charCodeAt(0)] = 62;\nrevLookup[\"_\".charCodeAt(0)] = 63;\nfunction getLens(b64) {\n    var len = b64.length;\n    if (len % 4 > 0) throw new Error(\"Invalid string. Length must be a multiple of 4\");\n    // Trim off extra bytes after placeholder bytes are found\n    // See: https://github.com/beatgammit/base64-js/issues/42\n    var validLen = b64.indexOf(\"=\");\n    if (validLen === -1) validLen = len;\n    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n    return [\n        validLen,\n        placeHoldersLen\n    ];\n}\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength(b64) {\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction _byteLength(b64, validLen, placeHoldersLen) {\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction toByteArray(b64) {\n    var tmp;\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n    var curByte = 0;\n    // if there are placeholders, only get up to the last complete 4 chars\n    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n    var i;\n    for(i = 0; i < len; i += 4){\n        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n        arr[curByte++] = tmp >> 16 & 0xFF;\n        arr[curByte++] = tmp >> 8 & 0xFF;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    if (placeHoldersLen === 2) {\n        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    if (placeHoldersLen === 1) {\n        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 0xFF;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    return arr;\n}\nfunction tripletToBase64(num) {\n    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\nfunction encodeChunk(uint8, start, end) {\n    var tmp;\n    var output = [];\n    for(var i = start; i < end; i += 3){\n        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n        output.push(tripletToBase64(tmp));\n    }\n    return output.join(\"\");\n}\nfunction fromByteArray(uint8) {\n    var tmp;\n    var len = uint8.length;\n    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n    ;\n    var parts = [];\n    var maxChunkLength = 16383 // must be multiple of 3\n    ;\n    // go through the array every three bytes, we'll deal with trailing stuff later\n    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    if (extraBytes === 1) {\n        tmp = uint8[len - 1];\n        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + \"==\");\n    } else if (extraBytes === 2) {\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + \"=\");\n    }\n    return parts.join(\"\");\n}\n\n},{}],\"iVOfv\":[function(require,module,exports) {\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {\n    var e, m;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var nBits = -7;\n    var i = isLE ? nBytes - 1 : 0;\n    var d = isLE ? -1 : 1;\n    var s = buffer[offset + i];\n    i += d;\n    e = s & (1 << -nBits) - 1;\n    s >>= -nBits;\n    nBits += eLen;\n    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\n    m = e & (1 << -nBits) - 1;\n    e >>= -nBits;\n    nBits += mLen;\n    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\n    if (e === 0) e = 1 - eBias;\n    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;\n    else {\n        m = m + Math.pow(2, mLen);\n        e = e - eBias;\n    }\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\nexports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n    var e, m, c;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n    var i = isLE ? 0 : nBytes - 1;\n    var d = isLE ? 1 : -1;\n    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n    value = Math.abs(value);\n    if (isNaN(value) || value === Infinity) {\n        m = isNaN(value) ? 1 : 0;\n        e = eMax;\n    } else {\n        e = Math.floor(Math.log(value) / Math.LN2);\n        if (value * (c = Math.pow(2, -e)) < 1) {\n            e--;\n            c *= 2;\n        }\n        if (e + eBias >= 1) value += rt / c;\n        else value += rt * Math.pow(2, 1 - eBias);\n        if (value * c >= 2) {\n            e++;\n            c /= 2;\n        }\n        if (e + eBias >= eMax) {\n            m = 0;\n            e = eMax;\n        } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen);\n            e = e + eBias;\n        } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n            e = 0;\n        }\n    }\n    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\n    e = e << mLen | m;\n    eLen += mLen;\n    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\n    buffer[offset + i - d] |= s * 128;\n};\n\n},{}],\"dak8L\":[function(require,module,exports) {\n/**\n * Isomorphic module to work access the environment (query params, env variables).\n *\n * @module environment\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"isNode\", function() {\n    return isNode;\n});\nparcelHelpers.export(exports, \"isBrowser\", function() {\n    return isBrowser;\n});\nparcelHelpers.export(exports, \"isMac\", function() {\n    return isMac;\n});\nparcelHelpers.export(exports, \"hasParam\", function() {\n    return hasParam;\n});\nparcelHelpers.export(exports, \"getParam\", function() {\n    return getParam;\n});\nparcelHelpers.export(exports, \"getVariable\", function() {\n    return getVariable;\n});\nparcelHelpers.export(exports, \"getConf\", function() {\n    return getConf;\n});\nparcelHelpers.export(exports, \"ensureConf\", function() {\n    return ensureConf;\n});\nparcelHelpers.export(exports, \"hasConf\", function() {\n    return hasConf;\n});\nparcelHelpers.export(exports, \"production\", function() {\n    return production;\n});\nparcelHelpers.export(exports, \"supportsColor\", function() {\n    return supportsColor;\n});\nvar _slicedToArray = require(\"@swc/helpers/_/_sliced_to_array\");\nvar _mapJs = require(\"./map.js\");\nvar _stringJs = require(\"./string.js\");\nvar _conditionsJs = require(\"./conditions.js\");\nvar _storageJs = require(\"./storage.js\");\nvar _functionJs = require(\"./function.js\");\nvar process = require(\"2cfb8bcef1022e2a\");\nvar isNode = typeof process !== \"undefined\" && process.release && /node|io\\.js/.test(process.release.name) && Object.prototype.toString.call(typeof process !== \"undefined\" ? process : 0) === \"[object process]\";\nvar isBrowser = typeof window !== \"undefined\" && typeof document !== \"undefined\" && !isNode;\nvar isMac = typeof navigator !== \"undefined\" ? /Mac/.test(navigator.platform) : false;\n/**\n * @type {Map<string,string>}\n */ var params;\nvar args = [];\n/* c8 ignore start */ var computeParams = function() {\n    if (params === undefined) {\n        if (isNode) {\n            params = _mapJs.create();\n            var pargs = process.argv;\n            var currParamName = null;\n            for(var i = 0; i < pargs.length; i++){\n                var parg = pargs[i];\n                if (parg[0] === \"-\") {\n                    if (currParamName !== null) params.set(currParamName, \"\");\n                    currParamName = parg;\n                } else if (currParamName !== null) {\n                    params.set(currParamName, parg);\n                    currParamName = null;\n                } else args.push(parg);\n            }\n            if (currParamName !== null) params.set(currParamName, \"\");\n        // in ReactNative for example this would not be true (unless connected to the Remote Debugger)\n        } else if (typeof location === \"object\") {\n            params = _mapJs.create(); // eslint-disable-next-line no-undef\n            (location.search || \"?\").slice(1).split(\"&\").forEach(function(kv) {\n                if (kv.length !== 0) {\n                    var _kv_split = (0, _slicedToArray._)(kv.split(\"=\"), 2), key = _kv_split[0], value = _kv_split[1];\n                    params.set(\"--\".concat(_stringJs.fromCamelCase(key, \"-\")), value);\n                    params.set(\"-\".concat(_stringJs.fromCamelCase(key, \"-\")), value);\n                }\n            });\n        } else params = _mapJs.create();\n    }\n    return params;\n};\nvar hasParam = function(name) {\n    return computeParams().has(name);\n};\nvar getParam = function(name, defaultVal) {\n    return computeParams().get(name) || defaultVal;\n};\nvar getVariable = function(name) {\n    return isNode ? _conditionsJs.undefinedToNull(process.env[name.toUpperCase().replaceAll(\"-\", \"_\")]) : _conditionsJs.undefinedToNull(_storageJs.varStorage.getItem(name));\n};\nvar getConf = function(name) {\n    return computeParams().get(\"--\" + name) || getVariable(name);\n};\nvar ensureConf = function(name) {\n    var c = getConf(name);\n    if (c == null) throw new Error('Expected configuration \"'.concat(name.toUpperCase().replaceAll(\"-\", \"_\"), '\"'));\n    return c;\n};\nvar hasConf = function(name) {\n    return hasParam(\"--\" + name) || getVariable(name) !== null;\n};\nvar production = hasConf(\"production\");\n/* c8 ignore next 2 */ var forceColor = isNode && _functionJs.isOneOf(undefined, [\n    \"true\",\n    \"1\",\n    \"2\"\n]);\nvar supportsColor = forceColor || !hasParam(\"--no-colors\") && // @todo deprecate --no-colors\n!hasConf(\"no-color\") && (!isNode || process.stdout.isTTY) && (!isNode || hasParam(\"--color\") || getVariable(\"COLORTERM\") !== null || (getVariable(\"TERM\") || \"\").includes(\"color\")) /* c8 ignore stop */ ;\n\n},{\"@swc/helpers/_/_sliced_to_array\":\"hvLP1\",\"2cfb8bcef1022e2a\":\"dUzYX\",\"./map.js\":\"gBEz7\",\"./string.js\":\"4ya7r\",\"./conditions.js\":\"2sfcK\",\"./storage.js\":\"9XMwI\",\"./function.js\":\"jxxnY\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"dUzYX\":[function(require,module,exports) {\n// shim for using process in browser\nvar process = module.exports = {};\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\nvar cachedSetTimeout;\nvar cachedClearTimeout;\nfunction defaultSetTimout() {\n    throw new Error(\"setTimeout has not been defined\");\n}\nfunction defaultClearTimeout() {\n    throw new Error(\"clearTimeout has not been defined\");\n}\n(function() {\n    try {\n        if (typeof setTimeout === \"function\") cachedSetTimeout = setTimeout;\n        else cachedSetTimeout = defaultSetTimout;\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === \"function\") cachedClearTimeout = clearTimeout;\n        else cachedClearTimeout = defaultClearTimeout;\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n})();\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations\n    return setTimeout(fun, 0);\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations\n    return clearTimeout(marker);\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) return;\n    draining = false;\n    if (currentQueue.length) queue = currentQueue.concat(queue);\n    else queueIndex = -1;\n    if (queue.length) drainQueue();\n}\nfunction drainQueue() {\n    if (draining) return;\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n    var len = queue.length;\n    while(len){\n        currentQueue = queue;\n        queue = [];\n        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\nprocess.nextTick = function(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) runTimeout(drainQueue);\n};\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function() {\n    this.fun.apply(null, this.array);\n};\nprocess.title = \"browser\";\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = \"\"; // empty string to avoid regexp issues\nprocess.versions = {};\nfunction noop() {}\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\nprocess.listeners = function(name) {\n    return [];\n};\nprocess.binding = function(name) {\n    throw new Error(\"process.binding is not supported\");\n};\nprocess.cwd = function() {\n    return \"/\";\n};\nprocess.chdir = function(dir) {\n    throw new Error(\"process.chdir is not supported\");\n};\nprocess.umask = function() {\n    return 0;\n};\n\n},{}],\"2sfcK\":[function(require,module,exports) {\n/**\n * Often used conditions.\n *\n * @module conditions\n */ /**\n * @template T\n * @param {T|null|undefined} v\n * @return {T|null}\n */ /* c8 ignore next */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"undefinedToNull\", function() {\n    return undefinedToNull;\n});\nvar undefinedToNull = function(v) {\n    return v === undefined ? null : v;\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"9XMwI\":[function(require,module,exports) {\n/* eslint-env browser */ /**\n * Isomorphic variable storage.\n *\n * Uses LocalStorage in the browser and falls back to in-memory storage.\n *\n * @module storage\n */ /* c8 ignore start */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"varStorage\", function() {\n    return varStorage;\n});\nparcelHelpers.export(exports, \"onChange\", function() {\n    return onChange;\n});\nparcelHelpers.export(exports, \"offChange\", function() {\n    return offChange;\n});\nvar _classCallCheck = require(\"@swc/helpers/_/_class_call_check\");\nvar _createClass = require(\"@swc/helpers/_/_create_class\");\nvar VarStoragePolyfill = /*#__PURE__*/ function() {\n    \"use strict\";\n    function VarStoragePolyfill() {\n        (0, _classCallCheck._)(this, VarStoragePolyfill);\n        this.map = new Map();\n    }\n    (0, _createClass._)(VarStoragePolyfill, [\n        {\n            /**\n   * @param {string} key\n   * @param {any} newValue\n   */ key: \"setItem\",\n            value: function setItem(key, newValue) {\n                this.map.set(key, newValue);\n            }\n        },\n        {\n            /**\n   * @param {string} key\n   */ key: \"getItem\",\n            value: function getItem(key) {\n                return this.map.get(key);\n            }\n        }\n    ]);\n    return VarStoragePolyfill;\n}();\n/* c8 ignore stop */ /**\n * @type {any}\n */ var _localStorage = new VarStoragePolyfill();\nvar usePolyfill = true;\n/* c8 ignore start */ try {\n    // if the same-origin rule is violated, accessing localStorage might thrown an error\n    if (typeof localStorage !== \"undefined\" && localStorage) {\n        _localStorage = localStorage;\n        usePolyfill = false;\n    }\n} catch (e) {}\nvar varStorage = _localStorage;\nvar onChange = function(eventHandler) {\n    return usePolyfill || addEventListener(\"storage\", /** @type {any} */ eventHandler);\n};\nvar offChange = function(eventHandler) {\n    return usePolyfill || removeEventListener(\"storage\", /** @type {any} */ eventHandler);\n};\n\n},{\"@swc/helpers/_/_class_call_check\":\"6tPd8\",\"@swc/helpers/_/_create_class\":\"kdmA3\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"jxxnY\":[function(require,module,exports) {\n/**\n * Common functions and function call helpers.\n *\n * @module function\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"callAll\", function() {\n    return callAll;\n});\nparcelHelpers.export(exports, \"nop\", function() {\n    return nop;\n});\nparcelHelpers.export(exports, \"apply\", function() {\n    return apply;\n});\nparcelHelpers.export(exports, \"id\", function() {\n    return id;\n});\nparcelHelpers.export(exports, \"equalityStrict\", function() {\n    return equalityStrict;\n});\nparcelHelpers.export(exports, \"equalityFlat\", function() {\n    return equalityFlat;\n});\nparcelHelpers.export(exports, \"equalityDeep\", function() {\n    return equalityDeep;\n});\nparcelHelpers.export(exports, \"isOneOf\", function() {\n    return isOneOf;\n});\nparcelHelpers.export(exports, \"isArray\", function() {\n    return isArray;\n});\nparcelHelpers.export(exports, \"isString\", function() {\n    return isString;\n});\nparcelHelpers.export(exports, \"isNumber\", function() {\n    return isNumber;\n});\nparcelHelpers.export(exports, \"is\", function() {\n    return is;\n});\nparcelHelpers.export(exports, \"isTemplate\", function() {\n    return isTemplate;\n});\nvar _toConsumableArray = require(\"@swc/helpers/_/_to_consumable_array\");\nvar _arrayJs = require(\"./array.js\");\nvar _objectJs = require(\"./object.js\");\nvar callAll = function(fs, args) {\n    var i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    try {\n        var _fs;\n        for(; i < fs.length; i++)(_fs = fs)[i].apply(_fs, (0, _toConsumableArray._)(args));\n    } finally{\n        if (i < fs.length) callAll(fs, args, i + 1);\n    }\n};\nvar nop = function() {};\nvar apply = function(f) {\n    return f();\n};\nvar id = function(a) {\n    return a;\n};\nvar equalityStrict = function(a, b) {\n    return a === b;\n};\nvar equalityFlat = function(a, b) {\n    return a === b || a != null && b != null && a.constructor === b.constructor && (_arrayJs.isArray(a) && _arrayJs.equalFlat(a, /** @type {Array<T>} */ b) || typeof a === \"object\" && _objectJs.equalFlat(a, b));\n};\nvar equalityDeep = function(a, b) {\n    if (a == null || b == null) return equalityStrict(a, b);\n    if (a.constructor !== b.constructor) return false;\n    if (a === b) return true;\n    switch(a.constructor){\n        case ArrayBuffer:\n            a = new Uint8Array(a);\n            b = new Uint8Array(b);\n        // eslint-disable-next-line no-fallthrough\n        case Uint8Array:\n            if (a.byteLength !== b.byteLength) return false;\n            for(var i = 0; i < a.length; i++){\n                if (a[i] !== b[i]) return false;\n            }\n            break;\n        case Set:\n            if (a.size !== b.size) return false;\n            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n            try {\n                for(var _iterator = a[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                    var value = _step.value;\n                    if (!b.has(value)) return false;\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                        _iterator[\"return\"]();\n                    }\n                } finally{\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n            break;\n        case Map:\n            if (a.size !== b.size) return false;\n            var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n            try {\n                for(var _iterator1 = a.keys()[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                    var key = _step1.value;\n                    if (!b.has(key) || !equalityDeep(a.get(key), b.get(key))) return false;\n                }\n            } catch (err) {\n                _didIteratorError1 = true;\n                _iteratorError1 = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion1 && _iterator1[\"return\"] != null) {\n                        _iterator1[\"return\"]();\n                    }\n                } finally{\n                    if (_didIteratorError1) {\n                        throw _iteratorError1;\n                    }\n                }\n            }\n            break;\n        case Object:\n            if (_objectJs.length(a) !== _objectJs.length(b)) return false;\n            for(var key1 in a){\n                if (!_objectJs.hasProperty(a, key1) || !equalityDeep(a[key1], b[key1])) return false;\n            }\n            break;\n        case Array:\n            if (a.length !== b.length) return false;\n            for(var i1 = 0; i1 < a.length; i1++){\n                if (!equalityDeep(a[i1], b[i1])) return false;\n            }\n            break;\n        default:\n            return false;\n    }\n    return true;\n};\nvar isOneOf = function(value, options) {\n    return options.includes(value);\n};\nvar isArray = _arrayJs.isArray;\nvar isString = function(s) {\n    return s && s.constructor === String;\n};\nvar isNumber = function(n) {\n    return n != null && n.constructor === Number;\n};\nvar is = function(n, T) {\n    return n && n.constructor === T;\n};\nvar isTemplate = function(T) {\n    return(/**\n   * @param {any} n\n   * @return {n is InstanceType<TYPE>}\n   **/ function(n) {\n        return n && n.constructor === T;\n    });\n};\n\n},{\"@swc/helpers/_/_to_consumable_array\":\"glvYM\",\"./array.js\":\"4cUzV\",\"./object.js\":\"gdwvK\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"gdwvK\":[function(require,module,exports) {\n/**\n * Utility functions for working with EcmaScript objects.\n *\n * @module object\n */ /**\n * @return {Object<string,any>} obj\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"create\", function() {\n    return create;\n});\nparcelHelpers.export(exports, \"assign\", function() {\n    return assign;\n});\nparcelHelpers.export(exports, \"keys\", function() {\n    return keys;\n});\nparcelHelpers.export(exports, \"forEach\", function() {\n    return forEach;\n});\nparcelHelpers.export(exports, \"map\", function() {\n    return map;\n});\nparcelHelpers.export(exports, \"length\", function() {\n    return length;\n});\nparcelHelpers.export(exports, \"size\", function() {\n    return size;\n});\nparcelHelpers.export(exports, \"some\", function() {\n    return some;\n});\nparcelHelpers.export(exports, \"isEmpty\", function() {\n    return isEmpty;\n});\nparcelHelpers.export(exports, \"every\", function() {\n    return every;\n});\nparcelHelpers.export(exports, \"hasProperty\", function() {\n    return hasProperty;\n});\nparcelHelpers.export(exports, \"equalFlat\", function() {\n    return equalFlat;\n});\nparcelHelpers.export(exports, \"freeze\", function() {\n    return freeze;\n});\nparcelHelpers.export(exports, \"deepFreeze\", function() {\n    return deepFreeze;\n});\nvar create = function() {\n    return Object.create(null);\n};\nvar assign = Object.assign;\nvar keys = Object.keys;\nvar forEach = function(obj, f) {\n    for(var key in obj)f(obj[key], key);\n};\nvar map = function(obj, f) {\n    var results = [];\n    for(var key in obj)results.push(f(obj[key], key));\n    return results;\n};\nvar length = function(obj) {\n    return keys(obj).length;\n};\nvar size = function(obj) {\n    return keys(obj).length;\n};\nvar some = function(obj, f) {\n    for(var key in obj){\n        if (f(obj[key], key)) return true;\n    }\n    return false;\n};\nvar isEmpty = function(obj) {\n    // eslint-disable-next-line\n    for(var _k in obj)return false;\n    return true;\n};\nvar every = function(obj, f) {\n    for(var key in obj){\n        if (!f(obj[key], key)) return false;\n    }\n    return true;\n};\nvar hasProperty = function(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n};\nvar equalFlat = function(a, b) {\n    return a === b || size(a) === size(b) && every(a, function(val, key) {\n        return (val !== undefined || hasProperty(b, key)) && b[key] === val;\n    });\n};\nvar freeze = Object.freeze;\nvar deepFreeze = function(o) {\n    for(var key in o){\n        var c = o[key];\n        if (typeof c === \"object\" || typeof c === \"function\") deepFreeze(o[key]);\n    }\n    return freeze(o);\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"96K0t\":[function(require,module,exports) {\n/**\n * Isomorphic logging module with support for colors!\n *\n * @module logging\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"BOLD\", function() {\n    return 0, _loggingCommonJs.BOLD;\n});\nparcelHelpers.export(exports, \"UNBOLD\", function() {\n    return 0, _loggingCommonJs.UNBOLD;\n});\nparcelHelpers.export(exports, \"BLUE\", function() {\n    return 0, _loggingCommonJs.BLUE;\n});\nparcelHelpers.export(exports, \"GREY\", function() {\n    return 0, _loggingCommonJs.GREY;\n});\nparcelHelpers.export(exports, \"GREEN\", function() {\n    return 0, _loggingCommonJs.GREEN;\n});\nparcelHelpers.export(exports, \"RED\", function() {\n    return 0, _loggingCommonJs.RED;\n});\nparcelHelpers.export(exports, \"PURPLE\", function() {\n    return 0, _loggingCommonJs.PURPLE;\n});\nparcelHelpers.export(exports, \"ORANGE\", function() {\n    return 0, _loggingCommonJs.ORANGE;\n});\nparcelHelpers.export(exports, \"UNCOLOR\", function() {\n    return 0, _loggingCommonJs.UNCOLOR;\n});\nparcelHelpers.export(exports, \"print\", function() {\n    return print;\n});\nparcelHelpers.export(exports, \"warn\", function() {\n    return warn;\n});\nparcelHelpers.export(exports, \"printError\", function() {\n    return printError;\n});\nparcelHelpers.export(exports, \"printImg\", function() {\n    return printImg;\n});\nparcelHelpers.export(exports, \"printImgBase64\", function() {\n    return printImgBase64;\n});\nparcelHelpers.export(exports, \"group\", function() {\n    return group;\n});\nparcelHelpers.export(exports, \"groupCollapsed\", function() {\n    return groupCollapsed;\n});\nparcelHelpers.export(exports, \"groupEnd\", function() {\n    return groupEnd;\n});\nparcelHelpers.export(exports, \"printDom\", function() {\n    return printDom;\n});\nparcelHelpers.export(exports, \"printCanvas\", function() {\n    return printCanvas;\n});\nparcelHelpers.export(exports, \"vconsoles\", function() {\n    return vconsoles;\n});\nparcelHelpers.export(exports, \"VConsole\", function() {\n    return VConsole;\n});\nparcelHelpers.export(exports, \"createVConsole\", function() {\n    return createVConsole;\n});\nparcelHelpers.export(exports, \"createModuleLogger\", function() {\n    return createModuleLogger;\n});\nvar _classCallCheck = require(\"@swc/helpers/_/_class_call_check\");\nvar _createClass = require(\"@swc/helpers/_/_create_class\");\nvar _defineProperty = require(\"@swc/helpers/_/_define_property\");\nvar _toConsumableArray = require(\"@swc/helpers/_/_to_consumable_array\");\nvar _environmentJs = require(\"./environment.js\");\nvar _setJs = require(\"./set.js\");\nvar _pairJs = require(\"./pair.js\");\nvar _domJs = require(\"./dom.js\");\nvar _jsonJs = require(\"./json.js\");\nvar _mapJs = require(\"./map.js\");\nvar _eventloopJs = require(\"./eventloop.js\");\nvar _mathJs = require(\"./math.js\");\nvar _loggingCommonJs = require(\"./logging.common.js\");\nvar _obj;\n/**\n * @type {Object<Symbol,pair.Pair<string,string>>}\n */ var _browserStyleMap = (_obj = {}, (0, _defineProperty._)(_obj, _loggingCommonJs.BOLD, _pairJs.create(\"font-weight\", \"bold\")), (0, _defineProperty._)(_obj, _loggingCommonJs.UNBOLD, _pairJs.create(\"font-weight\", \"normal\")), (0, _defineProperty._)(_obj, _loggingCommonJs.BLUE, _pairJs.create(\"color\", \"blue\")), (0, _defineProperty._)(_obj, _loggingCommonJs.GREEN, _pairJs.create(\"color\", \"green\")), (0, _defineProperty._)(_obj, _loggingCommonJs.GREY, _pairJs.create(\"color\", \"grey\")), (0, _defineProperty._)(_obj, _loggingCommonJs.RED, _pairJs.create(\"color\", \"red\")), (0, _defineProperty._)(_obj, _loggingCommonJs.PURPLE, _pairJs.create(\"color\", \"purple\")), (0, _defineProperty._)(_obj, _loggingCommonJs.ORANGE, _pairJs.create(\"color\", \"orange\")), (0, _defineProperty._)(_obj, _loggingCommonJs.UNCOLOR, _pairJs.create(\"color\", \"black\")), _obj);\n/**\n * @param {Array<string|Symbol|Object|number|function():any>} args\n * @return {Array<string|object|number>}\n */ /* c8 ignore start */ var computeBrowserLoggingArgs = function(args) {\n    var _args_;\n    if (args.length === 1 && ((_args_ = args[0]) === null || _args_ === void 0 ? void 0 : _args_.constructor) === Function) args = /** @type {Array<string|Symbol|Object|number>} */ /** @type {[function]} */ args[0]();\n    var strBuilder = [];\n    var styles = [];\n    var currentStyle = _mapJs.create();\n    /**\n   * @type {Array<string|Object|number>}\n   */ var logArgs = [];\n    // try with formatting until we find something unsupported\n    var i = 0;\n    for(; i < args.length; i++){\n        var arg = args[i];\n        // @ts-ignore\n        var style = _browserStyleMap[arg];\n        if (style !== undefined) currentStyle.set(style.left, style.right);\n        else {\n            if (arg === undefined) break;\n            if (arg.constructor === String || arg.constructor === Number) {\n                var style1 = _domJs.mapToStyleString(currentStyle);\n                if (i > 0 || style1.length > 0) {\n                    strBuilder.push(\"%c\" + arg);\n                    styles.push(style1);\n                } else strBuilder.push(arg);\n            } else break;\n        }\n    }\n    if (i > 0) {\n        // create logArgs with what we have so far\n        logArgs = styles;\n        logArgs.unshift(strBuilder.join(\"\"));\n    }\n    // append the rest\n    for(; i < args.length; i++){\n        var arg1 = args[i];\n        if (!(arg1 instanceof Symbol)) logArgs.push(arg1);\n    }\n    return logArgs;\n};\n/* c8 ignore stop */ /* c8 ignore start */ var computeLoggingArgs = _environmentJs.supportsColor ? computeBrowserLoggingArgs : _loggingCommonJs.computeNoColorLoggingArgs;\nvar print = function() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    var _console;\n    (_console = console).log.apply(_console, (0, _toConsumableArray._)(computeLoggingArgs(args)));\n    /* c8 ignore next */ vconsoles.forEach(function(vc) {\n        return vc.print(args);\n    });\n};\nvar warn = function() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    var _console;\n    (_console = console).warn.apply(_console, (0, _toConsumableArray._)(computeLoggingArgs(args)));\n    args.unshift(_loggingCommonJs.ORANGE);\n    vconsoles.forEach(function(vc) {\n        return vc.print(args);\n    });\n};\nvar printError = function(err) {\n    console.error(err);\n    vconsoles.forEach(function(vc) {\n        return vc.printError(err);\n    });\n};\nvar printImg = function(url, height) {\n    if (_environmentJs.isBrowser) console.log(\"%c                      \", \"font-size: \".concat(height, \"px; background-size: contain; background-repeat: no-repeat; background-image: url(\").concat(url, \")\"));\n    vconsoles.forEach(function(vc) {\n        return vc.printImg(url, height);\n    });\n};\nvar printImgBase64 = function(base64, height) {\n    return printImg(\"data:image/gif;base64,\".concat(base64), height);\n};\nvar group = function() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    var _console;\n    (_console = console).group.apply(_console, (0, _toConsumableArray._)(computeLoggingArgs(args)));\n    /* c8 ignore next */ vconsoles.forEach(function(vc) {\n        return vc.group(args);\n    });\n};\nvar groupCollapsed = function() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    var _console;\n    (_console = console).groupCollapsed.apply(_console, (0, _toConsumableArray._)(computeLoggingArgs(args)));\n    /* c8 ignore next */ vconsoles.forEach(function(vc) {\n        return vc.groupCollapsed(args);\n    });\n};\nvar groupEnd = function() {\n    console.groupEnd();\n    /* c8 ignore next */ vconsoles.forEach(function(vc) {\n        return vc.groupEnd();\n    });\n};\nvar printDom = function(createNode) {\n    return vconsoles.forEach(function(vc) {\n        return vc.printDom(createNode());\n    });\n};\nvar printCanvas = function(canvas, height) {\n    return printImg(canvas.toDataURL(), height);\n};\nvar vconsoles = _setJs.create();\n/**\n * @param {Array<string|Symbol|Object|number>} args\n * @return {Array<Element>}\n */ /* c8 ignore start */ var _computeLineSpans = function(args) {\n    var spans = [];\n    var currentStyle = new Map();\n    // try with formatting until we find something unsupported\n    var i = 0;\n    for(; i < args.length; i++){\n        var arg = args[i];\n        // @ts-ignore\n        var style = _browserStyleMap[arg];\n        if (style !== undefined) currentStyle.set(style.left, style.right);\n        else {\n            if (arg === undefined) arg = \"undefined \";\n            if (arg.constructor === String || arg.constructor === Number) {\n                // @ts-ignore\n                var span = _domJs.element(\"span\", [\n                    _pairJs.create(\"style\", _domJs.mapToStyleString(currentStyle))\n                ], [\n                    _domJs.text(arg.toString())\n                ]);\n                if (span.innerHTML === \"\") span.innerHTML = \"&nbsp;\";\n                spans.push(span);\n            } else break;\n        }\n    }\n    // append the rest\n    for(; i < args.length; i++){\n        var content = args[i];\n        if (!(content instanceof Symbol)) {\n            if (content.constructor !== String && content.constructor !== Number) content = \" \" + _jsonJs.stringify(content) + \" \";\n            spans.push(_domJs.element(\"span\", [], [\n                _domJs.text(/** @type {string} */ content)\n            ]));\n        }\n    }\n    return spans;\n};\n/* c8 ignore stop */ var lineStyle = \"font-family:monospace;border-bottom:1px solid #e2e2e2;padding:2px;\";\nvar VConsole = /*#__PURE__*/ function() {\n    \"use strict\";\n    function VConsole(dom) {\n        (0, _classCallCheck._)(this, VConsole);\n        this.dom = dom;\n        /**\n     * @type {Element}\n     */ this.ccontainer = this.dom;\n        this.depth = 0;\n        vconsoles.add(this);\n    }\n    (0, _createClass._)(VConsole, [\n        {\n            /**\n   * @param {Array<string|Symbol|Object|number>} args\n   * @param {boolean} collapsed\n   */ key: \"group\",\n            value: function group(args) {\n                var _this = this;\n                var collapsed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n                _eventloopJs.enqueue(function() {\n                    var triangleDown = _domJs.element(\"span\", [\n                        _pairJs.create(\"hidden\", collapsed),\n                        _pairJs.create(\"style\", \"color:grey;font-size:120%;\")\n                    ], [\n                        _domJs.text(\"\\u25BC\")\n                    ]);\n                    var triangleRight = _domJs.element(\"span\", [\n                        _pairJs.create(\"hidden\", !collapsed),\n                        _pairJs.create(\"style\", \"color:grey;font-size:125%;\")\n                    ], [\n                        _domJs.text(\"\\u25B6\")\n                    ]);\n                    var content = _domJs.element(\"div\", [\n                        _pairJs.create(\"style\", \"\".concat(lineStyle, \";padding-left:\").concat(_this.depth * 10, \"px\"))\n                    ], [\n                        triangleDown,\n                        triangleRight,\n                        _domJs.text(\" \")\n                    ].concat(_computeLineSpans(args)));\n                    var nextContainer = _domJs.element(\"div\", [\n                        _pairJs.create(\"hidden\", collapsed)\n                    ]);\n                    var nextLine = _domJs.element(\"div\", [], [\n                        content,\n                        nextContainer\n                    ]);\n                    _domJs.append(_this.ccontainer, [\n                        nextLine\n                    ]);\n                    _this.ccontainer = nextContainer;\n                    _this.depth++;\n                    // when header is clicked, collapse/uncollapse container\n                    _domJs.addEventListener(content, \"click\", function(_event) {\n                        nextContainer.toggleAttribute(\"hidden\");\n                        triangleDown.toggleAttribute(\"hidden\");\n                        triangleRight.toggleAttribute(\"hidden\");\n                    });\n                });\n            }\n        },\n        {\n            /**\n   * @param {Array<string|Symbol|Object|number>} args\n   */ key: \"groupCollapsed\",\n            value: function groupCollapsed(args) {\n                this.group(args, true);\n            }\n        },\n        {\n            key: \"groupEnd\",\n            value: function groupEnd() {\n                var _this = this;\n                _eventloopJs.enqueue(function() {\n                    if (_this.depth > 0) {\n                        _this.depth--;\n                        // @ts-ignore\n                        _this.ccontainer = _this.ccontainer.parentElement.parentElement;\n                    }\n                });\n            }\n        },\n        {\n            /**\n   * @param {Array<string|Symbol|Object|number>} args\n   */ key: \"print\",\n            value: function print(args) {\n                var _this = this;\n                _eventloopJs.enqueue(function() {\n                    _domJs.append(_this.ccontainer, [\n                        _domJs.element(\"div\", [\n                            _pairJs.create(\"style\", \"\".concat(lineStyle, \";padding-left:\").concat(_this.depth * 10, \"px\"))\n                        ], _computeLineSpans(args))\n                    ]);\n                });\n            }\n        },\n        {\n            /**\n   * @param {Error} err\n   */ key: \"printError\",\n            value: function printError(err) {\n                this.print([\n                    _loggingCommonJs.RED,\n                    _loggingCommonJs.BOLD,\n                    err.toString()\n                ]);\n            }\n        },\n        {\n            /**\n   * @param {string} url\n   * @param {number} height\n   */ key: \"printImg\",\n            value: function printImg(url, height) {\n                var _this = this;\n                _eventloopJs.enqueue(function() {\n                    _domJs.append(_this.ccontainer, [\n                        _domJs.element(\"img\", [\n                            _pairJs.create(\"src\", url),\n                            _pairJs.create(\"height\", \"\".concat(_mathJs.round(height * 1.5), \"px\"))\n                        ])\n                    ]);\n                });\n            }\n        },\n        {\n            /**\n   * @param {Node} node\n   */ key: \"printDom\",\n            value: function printDom(node) {\n                var _this = this;\n                _eventloopJs.enqueue(function() {\n                    _domJs.append(_this.ccontainer, [\n                        node\n                    ]);\n                });\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function destroy() {\n                var _this = this;\n                _eventloopJs.enqueue(function() {\n                    vconsoles[\"delete\"](_this);\n                });\n            }\n        }\n    ]);\n    return VConsole;\n}();\nvar createVConsole = function(dom) {\n    return new VConsole(dom);\n};\nvar createModuleLogger = function(moduleName) {\n    return _loggingCommonJs.createModuleLogger(print, moduleName);\n};\n\n},{\"@swc/helpers/_/_class_call_check\":\"6tPd8\",\"@swc/helpers/_/_create_class\":\"kdmA3\",\"@swc/helpers/_/_define_property\":\"3xmRB\",\"@swc/helpers/_/_to_consumable_array\":\"glvYM\",\"./environment.js\":\"dak8L\",\"./set.js\":\"8eTm4\",\"./pair.js\":\"gXjvN\",\"./dom.js\":\"byEwB\",\"./json.js\":\"72nIq\",\"./map.js\":\"gBEz7\",\"./eventloop.js\":\"imehW\",\"./math.js\":\"2l7a2\",\"./logging.common.js\":\"6RARC\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"gXjvN\":[function(require,module,exports) {\n/**\n * Working with value pairs.\n *\n * @module pair\n */ /**\n * @template L,R\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"Pair\", function() {\n    return Pair;\n});\nparcelHelpers.export(exports, \"create\", function() {\n    return create;\n});\nparcelHelpers.export(exports, \"createReversed\", function() {\n    return createReversed;\n});\nparcelHelpers.export(exports, \"forEach\", function() {\n    return forEach;\n});\nparcelHelpers.export(exports, \"map\", function() {\n    return map;\n});\nvar _classCallCheck = require(\"@swc/helpers/_/_class_call_check\");\nvar Pair = function Pair(left, right) {\n    \"use strict\";\n    (0, _classCallCheck._)(this, Pair);\n    this.left = left;\n    this.right = right;\n};\nvar create = function(left, right) {\n    return new Pair(left, right);\n};\nvar createReversed = function(right, left) {\n    return new Pair(left, right);\n};\nvar forEach = function(arr, f) {\n    return arr.forEach(function(p) {\n        return f(p.left, p.right);\n    });\n};\nvar map = function(arr, f) {\n    return arr.map(function(p) {\n        return f(p.left, p.right);\n    });\n};\n\n},{\"@swc/helpers/_/_class_call_check\":\"6tPd8\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"byEwB\":[function(require,module,exports) {\n/* eslint-env browser */ /**\n * Utility module to work with the DOM.\n *\n * @module dom\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"doc\", function() {\n    return doc;\n});\nparcelHelpers.export(exports, \"createElement\", function() {\n    return createElement;\n});\nparcelHelpers.export(exports, \"createDocumentFragment\", function() {\n    return createDocumentFragment;\n});\nparcelHelpers.export(exports, \"createTextNode\", function() {\n    return createTextNode;\n});\nparcelHelpers.export(exports, \"domParser\", function() {\n    return domParser;\n});\nparcelHelpers.export(exports, \"emitCustomEvent\", function() {\n    return emitCustomEvent;\n});\nparcelHelpers.export(exports, \"setAttributes\", function() {\n    return setAttributes;\n});\nparcelHelpers.export(exports, \"setAttributesMap\", function() {\n    return setAttributesMap;\n});\nparcelHelpers.export(exports, \"fragment\", function() {\n    return fragment;\n});\nparcelHelpers.export(exports, \"append\", function() {\n    return append;\n});\nparcelHelpers.export(exports, \"remove\", function() {\n    return remove;\n});\nparcelHelpers.export(exports, \"addEventListener\", function() {\n    return addEventListener;\n});\nparcelHelpers.export(exports, \"removeEventListener\", function() {\n    return removeEventListener;\n});\nparcelHelpers.export(exports, \"addEventListeners\", function() {\n    return addEventListeners;\n});\nparcelHelpers.export(exports, \"removeEventListeners\", function() {\n    return removeEventListeners;\n});\nparcelHelpers.export(exports, \"element\", function() {\n    return element;\n});\nparcelHelpers.export(exports, \"canvas\", function() {\n    return canvas;\n});\nparcelHelpers.export(exports, \"text\", function() {\n    return text;\n});\nparcelHelpers.export(exports, \"pairToStyleString\", function() {\n    return pairToStyleString;\n});\nparcelHelpers.export(exports, \"pairsToStyleString\", function() {\n    return pairsToStyleString;\n});\nparcelHelpers.export(exports, \"mapToStyleString\", function() {\n    return mapToStyleString;\n});\nparcelHelpers.export(exports, \"querySelector\", function() {\n    return querySelector;\n});\nparcelHelpers.export(exports, \"querySelectorAll\", function() {\n    return querySelectorAll;\n});\nparcelHelpers.export(exports, \"getElementById\", function() {\n    return getElementById;\n});\nparcelHelpers.export(exports, \"parseFragment\", function() {\n    return parseFragment;\n});\nparcelHelpers.export(exports, \"parseElement\", function() {\n    return parseElement;\n});\nparcelHelpers.export(exports, \"replaceWith\", function() {\n    return replaceWith;\n});\nparcelHelpers.export(exports, \"insertBefore\", function() {\n    return insertBefore;\n});\nparcelHelpers.export(exports, \"appendChild\", function() {\n    return appendChild;\n});\nparcelHelpers.export(exports, \"ELEMENT_NODE\", function() {\n    return ELEMENT_NODE;\n});\nparcelHelpers.export(exports, \"TEXT_NODE\", function() {\n    return TEXT_NODE;\n});\nparcelHelpers.export(exports, \"CDATA_SECTION_NODE\", function() {\n    return CDATA_SECTION_NODE;\n});\nparcelHelpers.export(exports, \"COMMENT_NODE\", function() {\n    return COMMENT_NODE;\n});\nparcelHelpers.export(exports, \"DOCUMENT_NODE\", function() {\n    return DOCUMENT_NODE;\n});\nparcelHelpers.export(exports, \"DOCUMENT_TYPE_NODE\", function() {\n    return DOCUMENT_TYPE_NODE;\n});\nparcelHelpers.export(exports, \"DOCUMENT_FRAGMENT_NODE\", function() {\n    return DOCUMENT_FRAGMENT_NODE;\n});\nparcelHelpers.export(exports, \"checkNodeType\", function() {\n    return checkNodeType;\n});\nparcelHelpers.export(exports, \"isParentOf\", function() {\n    return isParentOf;\n});\nvar _pairJs = require(\"./pair.js\");\nvar _mapJs = require(\"./map.js\");\nvar doc = /** @type {Document} */ typeof document !== \"undefined\" ? document : {};\nvar createElement = function(name) {\n    return doc.createElement(name);\n};\nvar createDocumentFragment = function() {\n    return doc.createDocumentFragment();\n};\nvar createTextNode = function(text) {\n    return doc.createTextNode(text);\n};\nvar domParser = /** @type {DOMParser} */ typeof DOMParser !== \"undefined\" ? new DOMParser() : null;\nvar emitCustomEvent = function(el, name, opts) {\n    return el.dispatchEvent(new CustomEvent(name, opts));\n};\nvar setAttributes = function(el, attrs) {\n    _pairJs.forEach(attrs, function(key, value) {\n        if (value === false) el.removeAttribute(key);\n        else if (value === true) el.setAttribute(key, \"\");\n        else // @ts-ignore\n        el.setAttribute(key, value);\n    });\n    return el;\n};\nvar setAttributesMap = function(el, attrs) {\n    attrs.forEach(function(value, key) {\n        el.setAttribute(key, value);\n    });\n    return el;\n};\nvar fragment = function(children) {\n    var fragment = createDocumentFragment();\n    for(var i = 0; i < children.length; i++)appendChild(fragment, children[i]);\n    return fragment;\n};\nvar append = function(parent, nodes) {\n    appendChild(parent, fragment(nodes));\n    return parent;\n};\nvar remove = function(el) {\n    return el.remove();\n};\nvar addEventListener = function(el, name, f) {\n    return el.addEventListener(name, f);\n};\nvar removeEventListener = function(el, name, f) {\n    return el.removeEventListener(name, f);\n};\nvar addEventListeners = function(node, listeners) {\n    _pairJs.forEach(listeners, function(name, f) {\n        return addEventListener(node, name, f);\n    });\n    return node;\n};\nvar removeEventListeners = function(node, listeners) {\n    _pairJs.forEach(listeners, function(name, f) {\n        return removeEventListener(node, name, f);\n    });\n    return node;\n};\nvar element = function(name) {\n    var attrs = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], children = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n    return append(setAttributes(createElement(name), attrs), children);\n};\nvar canvas = function(width, height) {\n    var c = /** @type {HTMLCanvasElement} */ createElement(\"canvas\");\n    c.height = height;\n    c.width = width;\n    return c;\n};\nvar text = createTextNode;\nvar pairToStyleString = function(pair) {\n    return \"\".concat(pair.left, \":\").concat(pair.right, \";\");\n};\nvar pairsToStyleString = function(pairs) {\n    return pairs.map(pairToStyleString).join(\"\");\n};\nvar mapToStyleString = function(m) {\n    return _mapJs.map(m, function(value, key) {\n        return \"\".concat(key, \":\").concat(value, \";\");\n    }).join(\"\");\n};\nvar querySelector = function(el, query) {\n    return el.querySelector(query);\n};\nvar querySelectorAll = function(el, query) {\n    return el.querySelectorAll(query);\n};\nvar getElementById = function(id) {\n    return /** @type {HTMLElement} */ doc.getElementById(id);\n};\n/**\n * @param {string} html\n * @return {HTMLElement}\n */ var _parse = function(html) {\n    return domParser.parseFromString(\"<html><body>\".concat(html, \"</body></html>\"), \"text/html\").body;\n};\nvar parseFragment = function(html) {\n    return fragment(/** @type {any} */ _parse(html).childNodes);\n};\nvar parseElement = function(html) {\n    return /** @type HTMLElement */ _parse(html).firstElementChild;\n};\nvar replaceWith = function(oldEl, newEl) {\n    return oldEl.replaceWith(newEl);\n};\nvar insertBefore = function(parent, el, ref) {\n    return parent.insertBefore(el, ref);\n};\nvar appendChild = function(parent, child) {\n    return parent.appendChild(child);\n};\nvar ELEMENT_NODE = doc.ELEMENT_NODE;\nvar TEXT_NODE = doc.TEXT_NODE;\nvar CDATA_SECTION_NODE = doc.CDATA_SECTION_NODE;\nvar COMMENT_NODE = doc.COMMENT_NODE;\nvar DOCUMENT_NODE = doc.DOCUMENT_NODE;\nvar DOCUMENT_TYPE_NODE = doc.DOCUMENT_TYPE_NODE;\nvar DOCUMENT_FRAGMENT_NODE = doc.DOCUMENT_FRAGMENT_NODE;\nvar checkNodeType = function(node, type) {\n    return node.nodeType === type;\n};\nvar isParentOf = function(parent, child) {\n    var p = child.parentNode;\n    while(p && p !== parent)p = p.parentNode;\n    return p === parent;\n} /* c8 ignore stop */ ;\n\n},{\"./pair.js\":\"gXjvN\",\"./map.js\":\"gBEz7\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"72nIq\":[function(require,module,exports) {\n/**\n * JSON utility functions.\n *\n * @module json\n */ /**\n * Transform JavaScript object to JSON.\n *\n * @param {any} object\n * @return {string}\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"stringify\", function() {\n    return stringify;\n});\nparcelHelpers.export(exports, \"parse\", function() {\n    return parse;\n});\nvar stringify = JSON.stringify;\nvar parse = JSON.parse;\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"imehW\":[function(require,module,exports) {\n/* global requestIdleCallback, requestAnimationFrame, cancelIdleCallback, cancelAnimationFrame */ /**\n * Utility module to work with EcmaScript's event loop.\n *\n * @module eventloop\n */ /**\n * @type {Array<function>}\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"enqueue\", function() {\n    return enqueue;\n});\nparcelHelpers.export(exports, \"timeout\", function() {\n    return timeout;\n});\nparcelHelpers.export(exports, \"interval\", function() {\n    return interval;\n});\nparcelHelpers.export(exports, \"Animation\", function() {\n    return Animation;\n});\nparcelHelpers.export(exports, \"animationFrame\", function() {\n    return animationFrame;\n});\nparcelHelpers.export(exports, \"idleCallback\", function() {\n    return idleCallback;\n});\nparcelHelpers.export(exports, \"createDebouncer\", function() {\n    return createDebouncer;\n});\nvar _classCallCheck = require(\"@swc/helpers/_/_class_call_check\");\nvar _createClass = require(\"@swc/helpers/_/_create_class\");\nvar queue = [];\nvar _runQueue = function() {\n    for(var i = 0; i < queue.length; i++)queue[i]();\n    queue = [];\n};\nvar enqueue = function(f) {\n    queue.push(f);\n    if (queue.length === 1) setTimeout(_runQueue, 0);\n};\n/**\n * @typedef {Object} TimeoutObject\n * @property {function} TimeoutObject.destroy\n */ /**\n * @param {function(number):void} clearFunction\n */ var createTimeoutClass = function(clearFunction) {\n    var TT = /*#__PURE__*/ function() {\n        \"use strict\";\n        function TT(timeoutId) {\n            (0, _classCallCheck._)(this, TT);\n            this._ = timeoutId;\n        }\n        (0, _createClass._)(TT, [\n            {\n                key: \"destroy\",\n                value: function destroy() {\n                    clearFunction(this._);\n                }\n            }\n        ]);\n        return TT;\n    }();\n    return TT;\n};\nvar Timeout = createTimeoutClass(clearTimeout);\nvar timeout = function(timeout, callback) {\n    return new Timeout(setTimeout(callback, timeout));\n};\nvar Interval = createTimeoutClass(clearInterval);\nvar interval = function(timeout, callback) {\n    return new Interval(setInterval(callback, timeout));\n};\nvar Animation = createTimeoutClass(function(arg) {\n    return typeof requestAnimationFrame !== \"undefined\" && cancelAnimationFrame(arg);\n});\nvar animationFrame = function(cb) {\n    return typeof requestAnimationFrame === \"undefined\" ? timeout(0, cb) : new Animation(requestAnimationFrame(cb));\n};\n/* c8 ignore next */ // @ts-ignore\nvar Idle = createTimeoutClass(function(arg) {\n    return typeof cancelIdleCallback !== \"undefined\" && cancelIdleCallback(arg);\n});\nvar idleCallback = function(cb) {\n    return typeof requestIdleCallback !== \"undefined\" ? new Idle(requestIdleCallback(cb)) : timeout(1000, cb);\n};\nvar createDebouncer = function(timeout) {\n    var timer = -1;\n    return function(f) {\n        clearTimeout(timer);\n        if (f) timer = /** @type {any} */ setTimeout(f, timeout);\n    };\n};\n\n},{\"@swc/helpers/_/_class_call_check\":\"6tPd8\",\"@swc/helpers/_/_create_class\":\"kdmA3\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"6RARC\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"BOLD\", function() {\n    return BOLD;\n});\nparcelHelpers.export(exports, \"UNBOLD\", function() {\n    return UNBOLD;\n});\nparcelHelpers.export(exports, \"BLUE\", function() {\n    return BLUE;\n});\nparcelHelpers.export(exports, \"GREY\", function() {\n    return GREY;\n});\nparcelHelpers.export(exports, \"GREEN\", function() {\n    return GREEN;\n});\nparcelHelpers.export(exports, \"RED\", function() {\n    return RED;\n});\nparcelHelpers.export(exports, \"PURPLE\", function() {\n    return PURPLE;\n});\nparcelHelpers.export(exports, \"ORANGE\", function() {\n    return ORANGE;\n});\nparcelHelpers.export(exports, \"UNCOLOR\", function() {\n    return UNCOLOR;\n});\nparcelHelpers.export(exports, \"computeNoColorLoggingArgs\", function() {\n    return computeNoColorLoggingArgs;\n});\nparcelHelpers.export(exports, \"createModuleLogger\", function() {\n    return createModuleLogger;\n});\nvar _toConsumableArray = require(\"@swc/helpers/_/_to_consumable_array\");\nvar _typeOf = require(\"@swc/helpers/_/_type_of\");\nvar _symbolJs = require(\"./symbol.js\");\nvar _timeJs = require(\"./time.js\");\nvar _environmentJs = require(\"./environment.js\");\nvar _functionJs = require(\"./function.js\");\nvar _jsonJs = require(\"./json.js\");\nvar BOLD = _symbolJs.create();\nvar UNBOLD = _symbolJs.create();\nvar BLUE = _symbolJs.create();\nvar GREY = _symbolJs.create();\nvar GREEN = _symbolJs.create();\nvar RED = _symbolJs.create();\nvar PURPLE = _symbolJs.create();\nvar ORANGE = _symbolJs.create();\nvar UNCOLOR = _symbolJs.create();\nvar computeNoColorLoggingArgs = function(args) {\n    var _args_;\n    if (args.length === 1 && ((_args_ = args[0]) === null || _args_ === void 0 ? void 0 : _args_.constructor) === Function) args = /** @type {Array<string|Symbol|Object|number>} */ /** @type {[function]} */ args[0]();\n    var strBuilder = [];\n    var logArgs = [];\n    // try with formatting until we find something unsupported\n    var i = 0;\n    for(; i < args.length; i++){\n        var arg = args[i];\n        if (arg === undefined) break;\n        else if (arg.constructor === String || arg.constructor === Number) strBuilder.push(arg);\n        else if (arg.constructor === Object) break;\n    }\n    if (i > 0) // create logArgs with what we have so far\n    logArgs.push(strBuilder.join(\"\"));\n    // append the rest\n    for(; i < args.length; i++){\n        var arg1 = args[i];\n        if (!(arg1 instanceof Symbol)) logArgs.push(arg1);\n    }\n    return logArgs;\n};\n/* c8 ignore stop */ var loggingColors = [\n    GREEN,\n    PURPLE,\n    ORANGE,\n    BLUE\n];\nvar nextColor = 0;\nvar lastLoggingTime = _timeJs.getUnixTime();\nvar createModuleLogger = function(_print, moduleName) {\n    var color = loggingColors[nextColor];\n    var debugRegexVar = _environmentJs.getVariable(\"log\");\n    var doLogging = debugRegexVar !== null && (debugRegexVar === \"*\" || debugRegexVar === \"true\" || new RegExp(debugRegexVar, \"gi\").test(moduleName));\n    nextColor = (nextColor + 1) % loggingColors.length;\n    moduleName += \": \";\n    return !doLogging ? _functionJs.nop : function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        var _args_;\n        if (args.length === 1 && ((_args_ = args[0]) === null || _args_ === void 0 ? void 0 : _args_.constructor) === Function) args = args[0]();\n        var timeNow = _timeJs.getUnixTime();\n        var timeDiff = timeNow - lastLoggingTime;\n        lastLoggingTime = timeNow;\n        _print.apply(void 0, [\n            color,\n            moduleName,\n            UNCOLOR\n        ].concat((0, _toConsumableArray._)(args.map(function(arg) {\n            if (arg != null && arg.constructor === Uint8Array) arg = Array.from(arg);\n            var t = typeof arg === \"undefined\" ? \"undefined\" : (0, _typeOf._)(arg);\n            switch(t){\n                case \"string\":\n                case \"symbol\":\n                    return arg;\n                default:\n                    return _jsonJs.stringify(arg);\n            }\n        })), [\n            color,\n            \" +\" + timeDiff + \"ms\"\n        ]));\n    };\n} /* c8 ignore stop */ ;\n\n},{\"@swc/helpers/_/_to_consumable_array\":\"glvYM\",\"@swc/helpers/_/_type_of\":\"3BgET\",\"./symbol.js\":\"3GmpO\",\"./time.js\":\"U43St\",\"./environment.js\":\"dak8L\",\"./function.js\":\"jxxnY\",\"./json.js\":\"72nIq\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"3GmpO\":[function(require,module,exports) {\n/**\n * Utility module to work with EcmaScript Symbols.\n *\n * @module symbol\n */ /**\n * Return fresh symbol.\n *\n * @return {Symbol}\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"create\", function() {\n    return create;\n});\nparcelHelpers.export(exports, \"isSymbol\", function() {\n    return isSymbol;\n});\nvar _typeOf = require(\"@swc/helpers/_/_type_of\");\nvar create = Symbol;\nvar isSymbol = function(s) {\n    return (typeof s === \"undefined\" ? \"undefined\" : (0, _typeOf._)(s)) === \"symbol\";\n};\n\n},{\"@swc/helpers/_/_type_of\":\"3BgET\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"geSv0\":[function(require,module,exports) {\n/**\n * Utility module to create and manipulate Iterators.\n *\n * @module iterator\n */ /**\n * @template T,R\n * @param {Iterator<T>} iterator\n * @param {function(T):R} f\n * @return {IterableIterator<R>}\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"mapIterator\", function() {\n    return mapIterator;\n});\nparcelHelpers.export(exports, \"createIterator\", function() {\n    return createIterator;\n});\nparcelHelpers.export(exports, \"iteratorFilter\", function() {\n    return iteratorFilter;\n});\nparcelHelpers.export(exports, \"iteratorMap\", function() {\n    return iteratorMap;\n});\nvar _defineProperty = require(\"@swc/helpers/_/_define_property\");\nvar mapIterator = function(iterator, f) {\n    var _obj;\n    return _obj = {}, (0, _defineProperty._)(_obj, Symbol.iterator, function() {\n        return this;\n    }), // @ts-ignore\n    (0, _defineProperty._)(_obj, \"next\", function() {\n        var r = iterator.next();\n        return {\n            value: r.done ? undefined : f(r.value),\n            done: r.done\n        };\n    }), _obj;\n};\nvar createIterator = function(next) {\n    var _obj;\n    return _obj = {}, /**\n   * @return {IterableIterator<T>}\n   */ (0, _defineProperty._)(_obj, Symbol.iterator, function() {\n        return this;\n    }), // @ts-ignore\n    (0, _defineProperty._)(_obj, \"next\", next), _obj;\n};\nvar iteratorFilter = function(iterator, filter) {\n    return createIterator(function() {\n        var res;\n        do res = iterator.next();\n        while (!res.done && !filter(res.value));\n        return res;\n    });\n};\nvar iteratorMap = function(iterator, fmap) {\n    return createIterator(function() {\n        var _iterator_next = iterator.next(), done = _iterator_next.done, value = _iterator_next.value;\n        return {\n            done: done,\n            value: done ? undefined : fmap(value)\n        };\n    });\n};\n\n},{\"@swc/helpers/_/_define_property\":\"3xmRB\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"7jOWD\":[function(require,module,exports) {\n/**\n * @module awareness-protocol\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"outdatedTimeout\", function() {\n    return outdatedTimeout;\n});\nparcelHelpers.export(exports, \"Awareness\", function() {\n    return Awareness;\n});\nparcelHelpers.export(exports, \"removeAwarenessStates\", function() {\n    return removeAwarenessStates;\n});\nparcelHelpers.export(exports, \"encodeAwarenessUpdate\", function() {\n    return encodeAwarenessUpdate;\n});\nparcelHelpers.export(exports, \"modifyAwarenessUpdate\", function() {\n    return modifyAwarenessUpdate;\n});\nparcelHelpers.export(exports, \"applyAwarenessUpdate\", function() {\n    return applyAwarenessUpdate;\n});\nvar _assertThisInitialized = require(\"@swc/helpers/_/_assert_this_initialized\");\nvar _classCallCheck = require(\"@swc/helpers/_/_class_call_check\");\nvar _createClass = require(\"@swc/helpers/_/_create_class\");\nvar _defineProperty = require(\"@swc/helpers/_/_define_property\");\nvar _get = require(\"@swc/helpers/_/_get\");\nvar _getPrototypeOf = require(\"@swc/helpers/_/_get_prototype_of\");\nvar _inherits = require(\"@swc/helpers/_/_inherits\");\nvar _objectSpread = require(\"@swc/helpers/_/_object_spread\");\nvar _objectSpreadProps = require(\"@swc/helpers/_/_object_spread_props\");\nvar _createSuper = require(\"@swc/helpers/_/_create_super\");\nvar _encoding = require(\"lib0/encoding\");\nvar _decoding = require(\"lib0/decoding\");\nvar _time = require(\"lib0/time\");\nvar _math = require(\"lib0/math\");\nvar _observable = require(\"lib0/observable\");\nvar _function = require(\"lib0/function\");\nvar _yjs = require(\"yjs\"); // eslint-disable-line\nvar outdatedTimeout = 30000;\nvar Awareness = /*#__PURE__*/ function(Observable) {\n    \"use strict\";\n    (0, _inherits._)(Awareness, Observable);\n    var _super = (0, _createSuper._)(Awareness);\n    function Awareness(doc) {\n        (0, _classCallCheck._)(this, Awareness);\n        var _this;\n        _this = _super.call(this);\n        _this.doc = doc;\n        /**\n     * @type {number}\n     */ _this.clientID = doc.clientID;\n        /**\n     * Maps from client id to client state\n     * @type {Map<number, Object<string, any>>}\n     */ _this.states = new Map();\n        /**\n     * @type {Map<number, MetaClientState>}\n     */ _this.meta = new Map();\n        _this._checkInterval = /** @type {any} */ setInterval(function() {\n            var now = _time.getUnixTime();\n            if (_this.getLocalState() !== null && outdatedTimeout / 2 <= now - /** @type {{lastUpdated:number}} */ _this.meta.get(_this.clientID).lastUpdated) // renew local clock\n            _this.setLocalState(_this.getLocalState());\n            /**\n       * @type {Array<number>}\n       */ var remove = [];\n            _this.meta.forEach(function(meta, clientid) {\n                if (clientid !== _this.clientID && outdatedTimeout <= now - meta.lastUpdated && _this.states.has(clientid)) remove.push(clientid);\n            });\n            if (remove.length > 0) removeAwarenessStates((0, _assertThisInitialized._)(_this), remove, \"timeout\");\n        }, _math.floor(outdatedTimeout / 10));\n        doc.on(\"destroy\", function() {\n            _this.destroy();\n        });\n        _this.setLocalState({});\n        return _this;\n    }\n    (0, _createClass._)(Awareness, [\n        {\n            key: \"destroy\",\n            value: function destroy() {\n                this.emit(\"destroy\", [\n                    this\n                ]);\n                this.setLocalState(null);\n                (0, _get._)((0, _getPrototypeOf._)(Awareness.prototype), \"destroy\", this).call(this);\n                clearInterval(this._checkInterval);\n            }\n        },\n        {\n            /**\n   * @return {Object<string,any>|null}\n   */ key: \"getLocalState\",\n            value: function getLocalState() {\n                return this.states.get(this.clientID) || null;\n            }\n        },\n        {\n            /**\n   * @param {Object<string,any>|null} state\n   */ key: \"setLocalState\",\n            value: function setLocalState(state) {\n                var clientID = this.clientID;\n                var currLocalMeta = this.meta.get(clientID);\n                var clock = currLocalMeta === undefined ? 0 : currLocalMeta.clock + 1;\n                var prevState = this.states.get(clientID);\n                if (state === null) this.states[\"delete\"](clientID);\n                else this.states.set(clientID, state);\n                this.meta.set(clientID, {\n                    clock: clock,\n                    lastUpdated: _time.getUnixTime()\n                });\n                var added = [];\n                var updated = [];\n                var filteredUpdated = [];\n                var removed = [];\n                if (state === null) removed.push(clientID);\n                else if (prevState == null) {\n                    if (state != null) added.push(clientID);\n                } else {\n                    updated.push(clientID);\n                    if (!_function.equalityDeep(prevState, state)) filteredUpdated.push(clientID);\n                }\n                if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) this.emit(\"change\", [\n                    {\n                        added: added,\n                        updated: filteredUpdated,\n                        removed: removed\n                    },\n                    \"local\"\n                ]);\n                this.emit(\"update\", [\n                    {\n                        added: added,\n                        updated: updated,\n                        removed: removed\n                    },\n                    \"local\"\n                ]);\n            }\n        },\n        {\n            /**\n   * @param {string} field\n   * @param {any} value\n   */ key: \"setLocalStateField\",\n            value: function setLocalStateField(field, value) {\n                var state = this.getLocalState();\n                if (state !== null) this.setLocalState((0, _objectSpreadProps._)((0, _objectSpread._)({}, state), (0, _defineProperty._)({}, field, value)));\n            }\n        },\n        {\n            /**\n   * @return {Map<number,Object<string,any>>}\n   */ key: \"getStates\",\n            value: function getStates() {\n                return this.states;\n            }\n        }\n    ]);\n    return Awareness;\n}((0, _observable.Observable));\nvar removeAwarenessStates = function(awareness, clients, origin) {\n    var removed = [];\n    for(var i = 0; i < clients.length; i++){\n        var clientID = clients[i];\n        if (awareness.states.has(clientID)) {\n            awareness.states[\"delete\"](clientID);\n            if (clientID === awareness.clientID) {\n                var curMeta = /** @type {MetaClientState} */ awareness.meta.get(clientID);\n                awareness.meta.set(clientID, {\n                    clock: curMeta.clock + 1,\n                    lastUpdated: _time.getUnixTime()\n                });\n            }\n            removed.push(clientID);\n        }\n    }\n    if (removed.length > 0) {\n        awareness.emit(\"change\", [\n            {\n                added: [],\n                updated: [],\n                removed: removed\n            },\n            origin\n        ]);\n        awareness.emit(\"update\", [\n            {\n                added: [],\n                updated: [],\n                removed: removed\n            },\n            origin\n        ]);\n    }\n};\nvar encodeAwarenessUpdate = function(awareness, clients) {\n    var states = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : awareness.states;\n    var len = clients.length;\n    var encoder = _encoding.createEncoder();\n    _encoding.writeVarUint(encoder, len);\n    for(var i = 0; i < len; i++){\n        var clientID = clients[i];\n        var state = states.get(clientID) || null;\n        var clock = /** @type {MetaClientState} */ awareness.meta.get(clientID).clock;\n        _encoding.writeVarUint(encoder, clientID);\n        _encoding.writeVarUint(encoder, clock);\n        _encoding.writeVarString(encoder, JSON.stringify(state));\n    }\n    return _encoding.toUint8Array(encoder);\n};\nvar modifyAwarenessUpdate = function(update, modify) {\n    var decoder = _decoding.createDecoder(update);\n    var encoder = _encoding.createEncoder();\n    var len = _decoding.readVarUint(decoder);\n    _encoding.writeVarUint(encoder, len);\n    for(var i = 0; i < len; i++){\n        var clientID = _decoding.readVarUint(decoder);\n        var clock = _decoding.readVarUint(decoder);\n        var state = JSON.parse(_decoding.readVarString(decoder));\n        var modifiedState = modify(state);\n        _encoding.writeVarUint(encoder, clientID);\n        _encoding.writeVarUint(encoder, clock);\n        _encoding.writeVarString(encoder, JSON.stringify(modifiedState));\n    }\n    return _encoding.toUint8Array(encoder);\n};\nvar applyAwarenessUpdate = function(awareness, update, origin) {\n    var decoder = _decoding.createDecoder(update);\n    var timestamp = _time.getUnixTime();\n    var added = [];\n    var updated = [];\n    var filteredUpdated = [];\n    var removed = [];\n    var len = _decoding.readVarUint(decoder);\n    for(var i = 0; i < len; i++){\n        var clientID = _decoding.readVarUint(decoder);\n        var clock = _decoding.readVarUint(decoder);\n        var state = JSON.parse(_decoding.readVarString(decoder));\n        var clientMeta = awareness.meta.get(clientID);\n        var prevState = awareness.states.get(clientID);\n        var currClock = clientMeta === undefined ? 0 : clientMeta.clock;\n        if (currClock < clock || currClock === clock && state === null && awareness.states.has(clientID)) {\n            if (state === null) {\n                // never let a remote client remove this local state\n                if (clientID === awareness.clientID && awareness.getLocalState() != null) // remote client removed the local state. Do not remote state. Broadcast a message indicating\n                // that this client still exists by increasing the clock\n                clock++;\n                else awareness.states[\"delete\"](clientID);\n            } else awareness.states.set(clientID, state);\n            awareness.meta.set(clientID, {\n                clock: clock,\n                lastUpdated: timestamp\n            });\n            if (clientMeta === undefined && state !== null) added.push(clientID);\n            else if (clientMeta !== undefined && state === null) removed.push(clientID);\n            else if (state !== null) {\n                if (!_function.equalityDeep(state, prevState)) filteredUpdated.push(clientID);\n                updated.push(clientID);\n            }\n        }\n    }\n    if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) awareness.emit(\"change\", [\n        {\n            added: added,\n            updated: filteredUpdated,\n            removed: removed\n        },\n        origin\n    ]);\n    if (added.length > 0 || updated.length > 0 || removed.length > 0) awareness.emit(\"update\", [\n        {\n            added: added,\n            updated: updated,\n            removed: removed\n        },\n        origin\n    ]);\n};\n\n},{\"@swc/helpers/_/_assert_this_initialized\":\"klQmr\",\"@swc/helpers/_/_class_call_check\":\"6tPd8\",\"@swc/helpers/_/_create_class\":\"kdmA3\",\"@swc/helpers/_/_define_property\":\"3xmRB\",\"@swc/helpers/_/_get\":\"2invZ\",\"@swc/helpers/_/_get_prototype_of\":\"7kA23\",\"@swc/helpers/_/_inherits\":\"F8Yln\",\"@swc/helpers/_/_object_spread\":\"j01jQ\",\"@swc/helpers/_/_object_spread_props\":\"jpe5k\",\"@swc/helpers/_/_create_super\":\"4DJgF\",\"lib0/encoding\":\"i3bjT\",\"lib0/decoding\":\"bprzL\",\"lib0/time\":\"U43St\",\"lib0/math\":\"2l7a2\",\"lib0/observable\":\"28UG3\",\"lib0/function\":\"jxxnY\",\"yjs\":\"6xWYU\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}],\"6DPKa\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"RoomAwarenessManager\", function() {\n    return RoomAwarenessManager;\n});\nvar _classCallCheck = require(\"@swc/helpers/_/_class_call_check\");\nvar _createClass = require(\"@swc/helpers/_/_create_class\");\nvar _defineProperty = require(\"@swc/helpers/_/_define_property\");\nvar _objectSpread = require(\"@swc/helpers/_/_object_spread\");\nvar _objectSpreadProps = require(\"@swc/helpers/_/_object_spread_props\");\nvar _slicedToArray = require(\"@swc/helpers/_/_sliced_to_array\");\nvar RoomAwarenessManager = /*#__PURE__*/ function() {\n    \"use strict\";\n    function RoomAwarenessManager(baseAwareness) {\n        (0, _classCallCheck._)(this, RoomAwarenessManager);\n        this.baseAwareness = baseAwareness;\n    }\n    (0, _createClass._)(RoomAwarenessManager, [\n        {\n            key: \"getAwareness\",\n            value: function getAwareness(room) {\n                var roomAwareness = new Proxy(this.baseAwareness, {\n                    get: function(target, prop) {\n                        if (prop === \"getStates\") return function() {\n                            var allStates = target.getStates();\n                            return new Map(Array.from(allStates.entries()).filter(function(param) {\n                                var _param = (0, _slicedToArray._)(param, 2), clientId = _param[0], state = _param[1];\n                                return state._room === room;\n                            }));\n                        };\n                        if (prop === \"setLocalStateField\") return function(field, value) {\n                            var currentState = target.getLocalState() || {};\n                            target.setLocalState((0, _objectSpreadProps._)((0, _objectSpread._)({}, currentState), (0, _defineProperty._)({\n                                _room: room\n                            }, field, value)));\n                        };\n                        if (prop === \"on\") return function(event, listener) {\n                            target.on(event, function(changes, origin) {\n                                // Filter changes to include only those relevant to the room\n                                var filteredChanges = {\n                                    added: changes.added.filter(function(clientId) {\n                                        var state = target.getStates().get(clientId);\n                                        return state && state._room === room;\n                                    }),\n                                    updated: changes.updated.filter(function(clientId) {\n                                        var state = target.getStates().get(clientId);\n                                        return state && state._room === room;\n                                    }),\n                                    removed: changes.removed.filter(function(clientId) {\n                                        // We might not have the state anymore, so we need to track room assignments separately\n                                        return true // Simplification for this example\n                                        ;\n                                    })\n                                };\n                                listener(filteredChanges, origin);\n                            });\n                        };\n                        return target[prop];\n                    }\n                });\n                return roomAwareness;\n            }\n        }\n    ]);\n    return RoomAwarenessManager;\n}();\n\n},{\"@swc/helpers/_/_class_call_check\":\"6tPd8\",\"@swc/helpers/_/_create_class\":\"kdmA3\",\"@swc/helpers/_/_define_property\":\"3xmRB\",\"@swc/helpers/_/_object_spread\":\"j01jQ\",\"@swc/helpers/_/_object_spread_props\":\"jpe5k\",\"@swc/helpers/_/_sliced_to_array\":\"hvLP1\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7qSmP\"}]},[\"lAYKv\"], \"lAYKv\", \"parcelRequiredcf9\")\n\n//# sourceMappingURL=edrys.js.map\n","/**\n * This the Edrys javascript client library.\n * Properties:\n *  Edrys.ready\n *  Edrys.role\n *  Edrys.username\n *  Edrys.module\n *  Edrys.liveClass (this is reactive, meaning setting a property on it will also update it in real time)\n *  Edrys.liveRoom (also reactive)\n *  Edrys.liveUser (also reactive)\n * Functions:\n *  Edrys.sendMessage(subject, body)\n *  Edrys.onMessage(({from, subject, body}) => { // Called when a message is received in your room })\n *  Edrys.onUpdate(() => { // Called when any Edrys properties change })\n *  Edrys.onReady(() => { // Called when Edrys is ready })\n */\n\nimport * as Y from 'yjs'\nimport * as YP from 'y-protocols/awareness.js'\nimport { RoomAwarenessManager } from './awarenessManager'\n\nconst EXTERN = 'extern'\nvar awareness: any\nvar awarenessManager: any\nvar doc: any\n\nwindow['Edrys'] = {\n  origin: '*',\n  ready: false,\n  role: undefined,\n  username: undefined,\n  liveClass: undefined,\n  liveRoom: undefined,\n  liveUser: undefined,\n  module: undefined,\n  class_id: undefined,\n\n  onReady(handler) {\n    if (window['Edrys'].ready) handler(window['Edrys'])\n    else\n      window.addEventListener('$Edrys.ready', (e) => {\n        handler(window['Edrys'])\n      })\n  },\n  onUpdate(handler) {\n    window.addEventListener('$Edrys.update', (e) => {\n      handler(window['Edrys'])\n    })\n  },\n  onMessage(handler, promiscuous = false) {\n    window.addEventListener('$Edrys.message', (e) => {\n      const customEvent = e as CustomEvent\n      if (\n        !promiscuous &&\n        customEvent.detail.module != window['Edrys'].module?.url\n      )\n        return\n      handler(customEvent.detail)\n    })\n  },\n  sendMessage: (subject: any, body: any, user?: string) => {\n    if (typeof subject !== 'string') subject = JSON.stringify(subject)\n    if (typeof body !== 'string') body = JSON.stringify(body)\n    window.parent.postMessage(\n      {\n        event: 'message',\n        subject: subject,\n        body: body,\n        module: window['Edrys'].module.url,\n        user,\n      },\n      window['Edrys'].origin\n    )\n  },\n  setItem(key, value) {\n    localStorage.setItem(\n      `${window['Edrys'].class_id}.${window['Edrys'].liveUser.room}.${key}`,\n      value\n    )\n  },\n  getItem(key) {\n    return localStorage.getItem(\n      `${window['Edrys'].class_id}.${window['Edrys'].liveUser.room}.${key}`\n    )\n  },\n\n  clearState(key: string) {\n    doc.getMap('rooms').get(window['Edrys'].liveUser.room).delete(key)\n  },\n\n  getState(\n    key: string,\n    type:\n      | 'Map'\n      | 'Array'\n      | 'Text'\n      | 'XmlFragment'\n      | 'XmlText'\n      | 'XmlElement'\n      | 'Value'\n      | 'Awareness',\n    value?: any\n  ) {\n    if (type === 'Awareness') {\n      return awarenessManager.getAwareness(\n        window['Edrys'].liveUser.room + '.' + key\n      )\n    }\n\n    const map = doc.getMap('rooms').get(window['Edrys'].liveUser.room)\n\n    if (map.has(key)) {\n      return map.get(key)\n    }\n\n    let state: any\n\n    switch (type) {\n      case 'Map':\n        state = new Y.Map()\n        break\n      case 'Array':\n        state = new Y.Array()\n        break\n      case 'Text':\n        state = new Y.Text()\n        break\n      case 'XmlFragment':\n        state = new Y.XmlFragment()\n        break\n      case 'XmlText':\n        state = new Y.XmlText()\n        break\n      case 'XmlElement':\n        state = new Y.XmlElement()\n        break\n\n      default:\n        state = value\n        break\n    }\n\n    map.set(key, state)\n\n    return state\n  },\n}\n\nconst edrysProxyValidator = (path) => ({\n  get(target, key) {\n    if (key == 'isProxy') return true\n    const prop = target[key]\n    if (typeof prop == 'undefined') return\n    if (!prop.isProxy && typeof prop === 'object')\n      target[key] = new Proxy(prop, edrysProxyValidator([...path, key]))\n    return target[key]\n  },\n  set(target, key, value) {\n    if (!path.includes('__ob__')) {\n      const path_ = [...path, key]\n      window.parent.postMessage(\n        {\n          event: 'update',\n          path: path_,\n          value: value,\n        },\n        window['Edrys'].origin\n      )\n    }\n    target[key] = value\n    return true\n  },\n})\n\nfunction update() {\n  const liveClass = {\n    users: doc.getMap('users').toJSON(),\n    rooms: doc.getMap('rooms').toJSON(),\n  }\n\n  Object.entries(liveClass.rooms).forEach(([name, data]) => {\n    return { name, data }\n  })\n\n  Object.entries(liveClass.users).forEach(([n, u]) => {\n    ;(u as any).name = n\n  })\n\n  window['Edrys'].liveClass = new Proxy(liveClass, edrysProxyValidator(''))\n  window['Edrys'].liveUser = liveClass.users[window['Edrys'].username]\n  window['Edrys'].liveRoom = liveClass.rooms[window['Edrys'].liveUser.room]\n}\n\nwindow.addEventListener(\n  'message',\n  function (e) {\n    switch (e.data.event) {\n      case 'update':\n        window['Edrys'].origin = e.data.origin\n        window['Edrys'].role = e.data.role\n        window['Edrys'].username = e.data.username\n        window['Edrys'].module = e.data.module\n\n        if (!doc) {\n          doc = new Y.Doc()\n          awareness = new YP.Awareness(doc)\n\n          awarenessManager = new RoomAwarenessManager(awareness)\n\n          doc.getMap('users')\n          doc.getMap('rooms')\n\n          doc.on('update', (state, origin) => {\n            update()\n\n            dispatchEvent(\n              new CustomEvent('$Edrys.update', {\n                bubbles: false,\n              })\n            )\n\n            if (origin === EXTERN) {\n              return // Ignore this transaction\n            }\n\n            window.parent.postMessage(\n              {\n                event: 'state',\n                data: state,\n              },\n              window['Edrys'].origin\n            )\n          })\n\n          awareness.on('update', ({ added, updated, removed }, origin) => {\n            if (origin !== EXTERN) {\n              const changedClients = added.concat(updated, removed)\n\n              // Send the update to the parent window\n              window.parent.postMessage(\n                {\n                  event: 'awareness',\n                  data: YP.encodeAwarenessUpdate(awareness, changedClients),\n                },\n                window['Edrys'].origin\n              )\n            }\n          })\n        }\n\n        try {\n          window['Edrys'].module.config = JSON.parse(e.data.module.config)\n        } catch (e) {}\n        try {\n          window['Edrys'].module.studentConfig = JSON.parse(\n            e.data.module.studentConfig\n          )\n        } catch (e) {}\n        try {\n          window['Edrys'].module.teacherConfig = JSON.parse(\n            e.data.module.teacherConfig\n          )\n        } catch (e) {}\n        try {\n          window['Edrys'].module.stationConfig = JSON.parse(\n            e.data.module.stationConfig\n          )\n        } catch (e) {}\n\n        window['Edrys'].class_id = e.data.class_id\n\n        if (e.data.liveClass) {\n          Y.applyUpdate(doc, e.data.liveClass, EXTERN)\n        }\n\n        if (e.data.awareness) {\n          YP.applyAwarenessUpdate(awareness, e.data.awareness, EXTERN)\n        }\n\n        if (!window['Edrys'].ready) {\n          window['Edrys'].ready = true\n          dispatchEvent(\n            new CustomEvent('$Edrys.ready', { bubbles: false, detail: e.data })\n          )\n        }\n\n        break\n      case 'message':\n        // available: e.data.from, e.data.subject, e.data.body\n        break\n      case 'echo':\n        console.log('ECHO:', e.data)\n        break\n      default:\n        break\n    }\n    dispatchEvent(\n      new CustomEvent('$Edrys.' + e.data.event, {\n        bubbles: false,\n        detail: e.data,\n      })\n    )\n  },\n  false\n)\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { ObservableV2 } from 'lib0/observable';\nimport * as array from 'lib0/array';\nimport * as math from 'lib0/math';\nimport * as map from 'lib0/map';\nimport * as encoding from 'lib0/encoding';\nimport * as decoding from 'lib0/decoding';\nimport * as random from 'lib0/random';\nimport * as promise from 'lib0/promise';\nimport * as buffer from 'lib0/buffer';\nimport * as error from 'lib0/error';\nimport * as binary from 'lib0/binary';\nimport * as f from 'lib0/function';\nimport { callAll } from 'lib0/function';\nimport * as set from 'lib0/set';\nimport * as logging from 'lib0/logging';\nimport * as time from 'lib0/time';\nimport * as string from 'lib0/string';\nimport * as iterator from 'lib0/iterator';\nimport * as object from 'lib0/object';\nimport * as env from 'lib0/environment';\n\n/**\n * This is an abstract interface that all Connectors should implement to keep them interchangeable.\n *\n * @note This interface is experimental and it is not advised to actually inherit this class.\n *       It just serves as typing information.\n *\n * @extends {ObservableV2<any>}\n */\nclass AbstractConnector extends ObservableV2 {\n  /**\n   * @param {Doc} ydoc\n   * @param {any} awareness\n   */\n  constructor (ydoc, awareness) {\n    super();\n    this.doc = ydoc;\n    this.awareness = awareness;\n  }\n}\n\nclass DeleteItem {\n  /**\n   * @param {number} clock\n   * @param {number} len\n   */\n  constructor (clock, len) {\n    /**\n     * @type {number}\n     */\n    this.clock = clock;\n    /**\n     * @type {number}\n     */\n    this.len = len;\n  }\n}\n\n/**\n * We no longer maintain a DeleteStore. DeleteSet is a temporary object that is created when needed.\n * - When created in a transaction, it must only be accessed after sorting, and merging\n *   - This DeleteSet is send to other clients\n * - We do not create a DeleteSet when we send a sync message. The DeleteSet message is created directly from StructStore\n * - We read a DeleteSet as part of a sync/update message. In this case the DeleteSet is already sorted and merged.\n */\nclass DeleteSet {\n  constructor () {\n    /**\n     * @type {Map<number,Array<DeleteItem>>}\n     */\n    this.clients = new Map();\n  }\n}\n\n/**\n * Iterate over all structs that the DeleteSet gc's.\n *\n * @param {Transaction} transaction\n * @param {DeleteSet} ds\n * @param {function(GC|Item):void} f\n *\n * @function\n */\nconst iterateDeletedStructs = (transaction, ds, f) =>\n  ds.clients.forEach((deletes, clientid) => {\n    const structs = /** @type {Array<GC|Item>} */ (transaction.doc.store.clients.get(clientid));\n    for (let i = 0; i < deletes.length; i++) {\n      const del = deletes[i];\n      iterateStructs(transaction, structs, del.clock, del.len, f);\n    }\n  });\n\n/**\n * @param {Array<DeleteItem>} dis\n * @param {number} clock\n * @return {number|null}\n *\n * @private\n * @function\n */\nconst findIndexDS = (dis, clock) => {\n  let left = 0;\n  let right = dis.length - 1;\n  while (left <= right) {\n    const midindex = math.floor((left + right) / 2);\n    const mid = dis[midindex];\n    const midclock = mid.clock;\n    if (midclock <= clock) {\n      if (clock < midclock + mid.len) {\n        return midindex\n      }\n      left = midindex + 1;\n    } else {\n      right = midindex - 1;\n    }\n  }\n  return null\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {ID} id\n * @return {boolean}\n *\n * @private\n * @function\n */\nconst isDeleted = (ds, id) => {\n  const dis = ds.clients.get(id.client);\n  return dis !== undefined && findIndexDS(dis, id.clock) !== null\n};\n\n/**\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\nconst sortAndMergeDeleteSet = ds => {\n  ds.clients.forEach(dels => {\n    dels.sort((a, b) => a.clock - b.clock);\n    // merge items without filtering or splicing the array\n    // i is the current pointer\n    // j refers to the current insert position for the pointed item\n    // try to merge dels[i] into dels[j-1] or set dels[j]=dels[i]\n    let i, j;\n    for (i = 1, j = 1; i < dels.length; i++) {\n      const left = dels[j - 1];\n      const right = dels[i];\n      if (left.clock + left.len >= right.clock) {\n        left.len = math.max(left.len, right.clock + right.len - left.clock);\n      } else {\n        if (j < i) {\n          dels[j] = right;\n        }\n        j++;\n      }\n    }\n    dels.length = j;\n  });\n};\n\n/**\n * @param {Array<DeleteSet>} dss\n * @return {DeleteSet} A fresh DeleteSet\n */\nconst mergeDeleteSets = dss => {\n  const merged = new DeleteSet();\n  for (let dssI = 0; dssI < dss.length; dssI++) {\n    dss[dssI].clients.forEach((delsLeft, client) => {\n      if (!merged.clients.has(client)) {\n        // Write all missing keys from current ds and all following.\n        // If merged already contains `client` current ds has already been added.\n        /**\n         * @type {Array<DeleteItem>}\n         */\n        const dels = delsLeft.slice();\n        for (let i = dssI + 1; i < dss.length; i++) {\n          array.appendTo(dels, dss[i].clients.get(client) || []);\n        }\n        merged.clients.set(client, dels);\n      }\n    });\n  }\n  sortAndMergeDeleteSet(merged);\n  return merged\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {number} client\n * @param {number} clock\n * @param {number} length\n *\n * @private\n * @function\n */\nconst addToDeleteSet = (ds, client, clock, length) => {\n  map.setIfUndefined(ds.clients, client, () => /** @type {Array<DeleteItem>} */ ([])).push(new DeleteItem(clock, length));\n};\n\nconst createDeleteSet = () => new DeleteSet();\n\n/**\n * @param {StructStore} ss\n * @return {DeleteSet} Merged and sorted DeleteSet\n *\n * @private\n * @function\n */\nconst createDeleteSetFromStructStore = ss => {\n  const ds = createDeleteSet();\n  ss.clients.forEach((structs, client) => {\n    /**\n     * @type {Array<DeleteItem>}\n     */\n    const dsitems = [];\n    for (let i = 0; i < structs.length; i++) {\n      const struct = structs[i];\n      if (struct.deleted) {\n        const clock = struct.id.clock;\n        let len = struct.length;\n        if (i + 1 < structs.length) {\n          for (let next = structs[i + 1]; i + 1 < structs.length && next.deleted; next = structs[++i + 1]) {\n            len += next.length;\n          }\n        }\n        dsitems.push(new DeleteItem(clock, len));\n      }\n    }\n    if (dsitems.length > 0) {\n      ds.clients.set(client, dsitems);\n    }\n  });\n  return ds\n};\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\nconst writeDeleteSet = (encoder, ds) => {\n  encoding.writeVarUint(encoder.restEncoder, ds.clients.size);\n\n  // Ensure that the delete set is written in a deterministic order\n  array.from(ds.clients.entries())\n    .sort((a, b) => b[0] - a[0])\n    .forEach(([client, dsitems]) => {\n      encoder.resetDsCurVal();\n      encoding.writeVarUint(encoder.restEncoder, client);\n      const len = dsitems.length;\n      encoding.writeVarUint(encoder.restEncoder, len);\n      for (let i = 0; i < len; i++) {\n        const item = dsitems[i];\n        encoder.writeDsClock(item.clock);\n        encoder.writeDsLen(item.len);\n      }\n    });\n};\n\n/**\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @return {DeleteSet}\n *\n * @private\n * @function\n */\nconst readDeleteSet = decoder => {\n  const ds = new DeleteSet();\n  const numClients = decoding.readVarUint(decoder.restDecoder);\n  for (let i = 0; i < numClients; i++) {\n    decoder.resetDsCurVal();\n    const client = decoding.readVarUint(decoder.restDecoder);\n    const numberOfDeletes = decoding.readVarUint(decoder.restDecoder);\n    if (numberOfDeletes > 0) {\n      const dsField = map.setIfUndefined(ds.clients, client, () => /** @type {Array<DeleteItem>} */ ([]));\n      for (let i = 0; i < numberOfDeletes; i++) {\n        dsField.push(new DeleteItem(decoder.readDsClock(), decoder.readDsLen()));\n      }\n    }\n  }\n  return ds\n};\n\n/**\n * @todo YDecoder also contains references to String and other Decoders. Would make sense to exchange YDecoder.toUint8Array for YDecoder.DsToUint8Array()..\n */\n\n/**\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @return {Uint8Array|null} Returns a v2 update containing all deletes that couldn't be applied yet; or null if all deletes were applied successfully.\n *\n * @private\n * @function\n */\nconst readAndApplyDeleteSet = (decoder, transaction, store) => {\n  const unappliedDS = new DeleteSet();\n  const numClients = decoding.readVarUint(decoder.restDecoder);\n  for (let i = 0; i < numClients; i++) {\n    decoder.resetDsCurVal();\n    const client = decoding.readVarUint(decoder.restDecoder);\n    const numberOfDeletes = decoding.readVarUint(decoder.restDecoder);\n    const structs = store.clients.get(client) || [];\n    const state = getState(store, client);\n    for (let i = 0; i < numberOfDeletes; i++) {\n      const clock = decoder.readDsClock();\n      const clockEnd = clock + decoder.readDsLen();\n      if (clock < state) {\n        if (state < clockEnd) {\n          addToDeleteSet(unappliedDS, client, state, clockEnd - state);\n        }\n        let index = findIndexSS(structs, clock);\n        /**\n         * We can ignore the case of GC and Delete structs, because we are going to skip them\n         * @type {Item}\n         */\n        // @ts-ignore\n        let struct = structs[index];\n        // split the first item if necessary\n        if (!struct.deleted && struct.id.clock < clock) {\n          structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));\n          index++; // increase we now want to use the next struct\n        }\n        while (index < structs.length) {\n          // @ts-ignore\n          struct = structs[index++];\n          if (struct.id.clock < clockEnd) {\n            if (!struct.deleted) {\n              if (clockEnd < struct.id.clock + struct.length) {\n                structs.splice(index, 0, splitItem(transaction, struct, clockEnd - struct.id.clock));\n              }\n              struct.delete(transaction);\n            }\n          } else {\n            break\n          }\n        }\n      } else {\n        addToDeleteSet(unappliedDS, client, clock, clockEnd - clock);\n      }\n    }\n  }\n  if (unappliedDS.clients.size > 0) {\n    const ds = new UpdateEncoderV2();\n    encoding.writeVarUint(ds.restEncoder, 0); // encode 0 structs\n    writeDeleteSet(ds, unappliedDS);\n    return ds.toUint8Array()\n  }\n  return null\n};\n\n/**\n * @param {DeleteSet} ds1\n * @param {DeleteSet} ds2\n */\nconst equalDeleteSets = (ds1, ds2) => {\n  if (ds1.clients.size !== ds2.clients.size) return false\n  for (const [client, deleteItems1] of ds1.clients.entries()) {\n    const deleteItems2 = /** @type {Array<import('../internals.js').DeleteItem>} */ (ds2.clients.get(client));\n    if (deleteItems2 === undefined || deleteItems1.length !== deleteItems2.length) return false\n    for (let i = 0; i < deleteItems1.length; i++) {\n      const di1 = deleteItems1[i];\n      const di2 = deleteItems2[i];\n      if (di1.clock !== di2.clock || di1.len !== di2.len) {\n        return false\n      }\n    }\n  }\n  return true\n};\n\n/**\n * @module Y\n */\n\n\nconst generateNewClientId = random.uint32;\n\n/**\n * @typedef {Object} DocOpts\n * @property {boolean} [DocOpts.gc=true] Disable garbage collection (default: gc=true)\n * @property {function(Item):boolean} [DocOpts.gcFilter] Will be called before an Item is garbage collected. Return false to keep the Item.\n * @property {string} [DocOpts.guid] Define a globally unique identifier for this document\n * @property {string | null} [DocOpts.collectionid] Associate this document with a collection. This only plays a role if your provider has a concept of collection.\n * @property {any} [DocOpts.meta] Any kind of meta information you want to associate with this document. If this is a subdocument, remote peers will store the meta information as well.\n * @property {boolean} [DocOpts.autoLoad] If a subdocument, automatically load document. If this is a subdocument, remote peers will load the document as well automatically.\n * @property {boolean} [DocOpts.shouldLoad] Whether the document should be synced by the provider now. This is toggled to true when you call ydoc.load()\n */\n\n/**\n * @typedef {Object} DocEvents\n * @property {function(Doc):void} DocEvents.destroy\n * @property {function(Doc):void} DocEvents.load\n * @property {function(boolean, Doc):void} DocEvents.sync\n * @property {function(Uint8Array, any, Doc, Transaction):void} DocEvents.update\n * @property {function(Uint8Array, any, Doc, Transaction):void} DocEvents.updateV2\n * @property {function(Doc):void} DocEvents.beforeAllTransactions\n * @property {function(Transaction, Doc):void} DocEvents.beforeTransaction\n * @property {function(Transaction, Doc):void} DocEvents.beforeObserverCalls\n * @property {function(Transaction, Doc):void} DocEvents.afterTransaction\n * @property {function(Transaction, Doc):void} DocEvents.afterTransactionCleanup\n * @property {function(Doc, Array<Transaction>):void} DocEvents.afterAllTransactions\n * @property {function({ loaded: Set<Doc>, added: Set<Doc>, removed: Set<Doc> }, Doc, Transaction):void} DocEvents.subdocs\n */\n\n/**\n * A Yjs instance handles the state of shared data.\n * @extends ObservableV2<DocEvents>\n */\nclass Doc extends ObservableV2 {\n  /**\n   * @param {DocOpts} opts configuration\n   */\n  constructor ({ guid = random.uuidv4(), collectionid = null, gc = true, gcFilter = () => true, meta = null, autoLoad = false, shouldLoad = true } = {}) {\n    super();\n    this.gc = gc;\n    this.gcFilter = gcFilter;\n    this.clientID = generateNewClientId();\n    this.guid = guid;\n    this.collectionid = collectionid;\n    /**\n     * @type {Map<string, AbstractType<YEvent<any>>>}\n     */\n    this.share = new Map();\n    this.store = new StructStore();\n    /**\n     * @type {Transaction | null}\n     */\n    this._transaction = null;\n    /**\n     * @type {Array<Transaction>}\n     */\n    this._transactionCleanups = [];\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocs = new Set();\n    /**\n     * If this document is a subdocument - a document integrated into another document - then _item is defined.\n     * @type {Item?}\n     */\n    this._item = null;\n    this.shouldLoad = shouldLoad;\n    this.autoLoad = autoLoad;\n    this.meta = meta;\n    /**\n     * This is set to true when the persistence provider loaded the document from the database or when the `sync` event fires.\n     * Note that not all providers implement this feature. Provider authors are encouraged to fire the `load` event when the doc content is loaded from the database.\n     *\n     * @type {boolean}\n     */\n    this.isLoaded = false;\n    /**\n     * This is set to true when the connection provider has successfully synced with a backend.\n     * Note that when using peer-to-peer providers this event may not provide very useful.\n     * Also note that not all providers implement this feature. Provider authors are encouraged to fire\n     * the `sync` event when the doc has been synced (with `true` as a parameter) or if connection is\n     * lost (with false as a parameter).\n     */\n    this.isSynced = false;\n    this.isDestroyed = false;\n    /**\n     * Promise that resolves once the document has been loaded from a presistence provider.\n     */\n    this.whenLoaded = promise.create(resolve => {\n      this.on('load', () => {\n        this.isLoaded = true;\n        resolve(this);\n      });\n    });\n    const provideSyncedPromise = () => promise.create(resolve => {\n      /**\n       * @param {boolean} isSynced\n       */\n      const eventHandler = (isSynced) => {\n        if (isSynced === undefined || isSynced === true) {\n          this.off('sync', eventHandler);\n          resolve();\n        }\n      };\n      this.on('sync', eventHandler);\n    });\n    this.on('sync', isSynced => {\n      if (isSynced === false && this.isSynced) {\n        this.whenSynced = provideSyncedPromise();\n      }\n      this.isSynced = isSynced === undefined || isSynced === true;\n      if (this.isSynced && !this.isLoaded) {\n        this.emit('load', [this]);\n      }\n    });\n    /**\n     * Promise that resolves once the document has been synced with a backend.\n     * This promise is recreated when the connection is lost.\n     * Note the documentation about the `isSynced` property.\n     */\n    this.whenSynced = provideSyncedPromise();\n  }\n\n  /**\n   * Notify the parent document that you request to load data into this subdocument (if it is a subdocument).\n   *\n   * `load()` might be used in the future to request any provider to load the most current data.\n   *\n   * It is safe to call `load()` multiple times.\n   */\n  load () {\n    const item = this._item;\n    if (item !== null && !this.shouldLoad) {\n      transact(/** @type {any} */ (item.parent).doc, transaction => {\n        transaction.subdocsLoaded.add(this);\n      }, null, true);\n    }\n    this.shouldLoad = true;\n  }\n\n  getSubdocs () {\n    return this.subdocs\n  }\n\n  getSubdocGuids () {\n    return new Set(array.from(this.subdocs).map(doc => doc.guid))\n  }\n\n  /**\n   * Changes that happen inside of a transaction are bundled. This means that\n   * the observer fires _after_ the transaction is finished and that all changes\n   * that happened inside of the transaction are sent as one message to the\n   * other peers.\n   *\n   * @template T\n   * @param {function(Transaction):T} f The function that should be executed as a transaction\n   * @param {any} [origin] Origin of who started the transaction. Will be stored on transaction.origin\n   * @return T\n   *\n   * @public\n   */\n  transact (f, origin = null) {\n    return transact(this, f, origin)\n  }\n\n  /**\n   * Define a shared data type.\n   *\n   * Multiple calls of `ydoc.get(name, TypeConstructor)` yield the same result\n   * and do not overwrite each other. I.e.\n   * `ydoc.get(name, Y.Array) === ydoc.get(name, Y.Array)`\n   *\n   * After this method is called, the type is also available on `ydoc.share.get(name)`.\n   *\n   * *Best Practices:*\n   * Define all types right after the Y.Doc instance is created and store them in a separate object.\n   * Also use the typed methods `getText(name)`, `getArray(name)`, ..\n   *\n   * @template {typeof AbstractType<any>} Type\n   * @example\n   *   const ydoc = new Y.Doc(..)\n   *   const appState = {\n   *     document: ydoc.getText('document')\n   *     comments: ydoc.getArray('comments')\n   *   }\n   *\n   * @param {string} name\n   * @param {Type} TypeConstructor The constructor of the type definition. E.g. Y.Text, Y.Array, Y.Map, ...\n   * @return {InstanceType<Type>} The created type. Constructed with TypeConstructor\n   *\n   * @public\n   */\n  get (name, TypeConstructor = /** @type {any} */ (AbstractType)) {\n    const type = map.setIfUndefined(this.share, name, () => {\n      // @ts-ignore\n      const t = new TypeConstructor();\n      t._integrate(this, null);\n      return t\n    });\n    const Constr = type.constructor;\n    if (TypeConstructor !== AbstractType && Constr !== TypeConstructor) {\n      if (Constr === AbstractType) {\n        // @ts-ignore\n        const t = new TypeConstructor();\n        t._map = type._map;\n        type._map.forEach(/** @param {Item?} n */ n => {\n          for (; n !== null; n = n.left) {\n            // @ts-ignore\n            n.parent = t;\n          }\n        });\n        t._start = type._start;\n        for (let n = t._start; n !== null; n = n.right) {\n          n.parent = t;\n        }\n        t._length = type._length;\n        this.share.set(name, t);\n        t._integrate(this, null);\n        return /** @type {InstanceType<Type>} */ (t)\n      } else {\n        throw new Error(`Type with the name ${name} has already been defined with a different constructor`)\n      }\n    }\n    return /** @type {InstanceType<Type>} */ (type)\n  }\n\n  /**\n   * @template T\n   * @param {string} [name]\n   * @return {YArray<T>}\n   *\n   * @public\n   */\n  getArray (name = '') {\n    return /** @type {YArray<T>} */ (this.get(name, YArray))\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YText}\n   *\n   * @public\n   */\n  getText (name = '') {\n    return this.get(name, YText)\n  }\n\n  /**\n   * @template T\n   * @param {string} [name]\n   * @return {YMap<T>}\n   *\n   * @public\n   */\n  getMap (name = '') {\n    return /** @type {YMap<T>} */ (this.get(name, YMap))\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YXmlElement}\n   *\n   * @public\n   */\n  getXmlElement (name = '') {\n    return /** @type {YXmlElement<{[key:string]:string}>} */ (this.get(name, YXmlElement))\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YXmlFragment}\n   *\n   * @public\n   */\n  getXmlFragment (name = '') {\n    return this.get(name, YXmlFragment)\n  }\n\n  /**\n   * Converts the entire document into a js object, recursively traversing each yjs type\n   * Doesn't log types that have not been defined (using ydoc.getType(..)).\n   *\n   * @deprecated Do not use this method and rather call toJSON directly on the shared types.\n   *\n   * @return {Object<string, any>}\n   */\n  toJSON () {\n    /**\n     * @type {Object<string, any>}\n     */\n    const doc = {};\n\n    this.share.forEach((value, key) => {\n      doc[key] = value.toJSON();\n    });\n\n    return doc\n  }\n\n  /**\n   * Emit `destroy` event and unregister all event handlers.\n   */\n  destroy () {\n    this.isDestroyed = true;\n    array.from(this.subdocs).forEach(subdoc => subdoc.destroy());\n    const item = this._item;\n    if (item !== null) {\n      this._item = null;\n      const content = /** @type {ContentDoc} */ (item.content);\n      content.doc = new Doc({ guid: this.guid, ...content.opts, shouldLoad: false });\n      content.doc._item = item;\n      transact(/** @type {any} */ (item).parent.doc, transaction => {\n        const doc = content.doc;\n        if (!item.deleted) {\n          transaction.subdocsAdded.add(doc);\n        }\n        transaction.subdocsRemoved.add(this);\n      }, null, true);\n    }\n    // @ts-ignore\n    this.emit('destroyed', [true]); // DEPRECATED!\n    this.emit('destroy', [this]);\n    super.destroy();\n  }\n}\n\nclass DSDecoderV1 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    this.restDecoder = decoder;\n  }\n\n  resetDsCurVal () {\n    // nop\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsClock () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsLen () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n}\n\nclass UpdateDecoderV1 extends DSDecoderV1 {\n  /**\n   * @return {ID}\n   */\n  readLeftID () {\n    return createID(decoding.readVarUint(this.restDecoder), decoding.readVarUint(this.restDecoder))\n  }\n\n  /**\n   * @return {ID}\n   */\n  readRightID () {\n    return createID(decoding.readVarUint(this.restDecoder), decoding.readVarUint(this.restDecoder))\n  }\n\n  /**\n   * Read the next client id.\n   * Use this in favor of readID whenever possible to reduce the number of objects created.\n   */\n  readClient () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readInfo () {\n    return decoding.readUint8(this.restDecoder)\n  }\n\n  /**\n   * @return {string}\n   */\n  readString () {\n    return decoding.readVarString(this.restDecoder)\n  }\n\n  /**\n   * @return {boolean} isKey\n   */\n  readParentInfo () {\n    return decoding.readVarUint(this.restDecoder) === 1\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readTypeRef () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @return {number} len\n   */\n  readLen () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {any}\n   */\n  readAny () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {Uint8Array}\n   */\n  readBuf () {\n    return buffer.copyUint8Array(decoding.readVarUint8Array(this.restDecoder))\n  }\n\n  /**\n   * Legacy implementation uses JSON parse. We use any-decoding in v2.\n   *\n   * @return {any}\n   */\n  readJSON () {\n    return JSON.parse(decoding.readVarString(this.restDecoder))\n  }\n\n  /**\n   * @return {string}\n   */\n  readKey () {\n    return decoding.readVarString(this.restDecoder)\n  }\n}\n\nclass DSDecoderV2 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    /**\n     * @private\n     */\n    this.dsCurrVal = 0;\n    this.restDecoder = decoder;\n  }\n\n  resetDsCurVal () {\n    this.dsCurrVal = 0;\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsClock () {\n    this.dsCurrVal += decoding.readVarUint(this.restDecoder);\n    return this.dsCurrVal\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsLen () {\n    const diff = decoding.readVarUint(this.restDecoder) + 1;\n    this.dsCurrVal += diff;\n    return diff\n  }\n}\n\nclass UpdateDecoderV2 extends DSDecoderV2 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    super(decoder);\n    /**\n     * List of cached keys. If the keys[id] does not exist, we read a new key\n     * from stringEncoder and push it to keys.\n     *\n     * @type {Array<string>}\n     */\n    this.keys = [];\n    decoding.readVarUint(decoder); // read feature flag - currently unused\n    this.keyClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder));\n    this.clientDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder));\n    this.leftClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder));\n    this.rightClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder));\n    this.infoDecoder = new decoding.RleDecoder(decoding.readVarUint8Array(decoder), decoding.readUint8);\n    this.stringDecoder = new decoding.StringDecoder(decoding.readVarUint8Array(decoder));\n    this.parentInfoDecoder = new decoding.RleDecoder(decoding.readVarUint8Array(decoder), decoding.readUint8);\n    this.typeRefDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder));\n    this.lenDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder));\n  }\n\n  /**\n   * @return {ID}\n   */\n  readLeftID () {\n    return new ID(this.clientDecoder.read(), this.leftClockDecoder.read())\n  }\n\n  /**\n   * @return {ID}\n   */\n  readRightID () {\n    return new ID(this.clientDecoder.read(), this.rightClockDecoder.read())\n  }\n\n  /**\n   * Read the next client id.\n   * Use this in favor of readID whenever possible to reduce the number of objects created.\n   */\n  readClient () {\n    return this.clientDecoder.read()\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readInfo () {\n    return /** @type {number} */ (this.infoDecoder.read())\n  }\n\n  /**\n   * @return {string}\n   */\n  readString () {\n    return this.stringDecoder.read()\n  }\n\n  /**\n   * @return {boolean}\n   */\n  readParentInfo () {\n    return this.parentInfoDecoder.read() === 1\n  }\n\n  /**\n   * @return {number} An unsigned 8-bit integer\n   */\n  readTypeRef () {\n    return this.typeRefDecoder.read()\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @return {number}\n   */\n  readLen () {\n    return this.lenDecoder.read()\n  }\n\n  /**\n   * @return {any}\n   */\n  readAny () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {Uint8Array}\n   */\n  readBuf () {\n    return decoding.readVarUint8Array(this.restDecoder)\n  }\n\n  /**\n   * This is mainly here for legacy purposes.\n   *\n   * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n   *\n   * @return {any}\n   */\n  readJSON () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {string}\n   */\n  readKey () {\n    const keyClock = this.keyClockDecoder.read();\n    if (keyClock < this.keys.length) {\n      return this.keys[keyClock]\n    } else {\n      const key = this.stringDecoder.read();\n      this.keys.push(key);\n      return key\n    }\n  }\n}\n\nclass DSEncoderV1 {\n  constructor () {\n    this.restEncoder = encoding.createEncoder();\n  }\n\n  toUint8Array () {\n    return encoding.toUint8Array(this.restEncoder)\n  }\n\n  resetDsCurVal () {\n    // nop\n  }\n\n  /**\n   * @param {number} clock\n   */\n  writeDsClock (clock) {\n    encoding.writeVarUint(this.restEncoder, clock);\n  }\n\n  /**\n   * @param {number} len\n   */\n  writeDsLen (len) {\n    encoding.writeVarUint(this.restEncoder, len);\n  }\n}\n\nclass UpdateEncoderV1 extends DSEncoderV1 {\n  /**\n   * @param {ID} id\n   */\n  writeLeftID (id) {\n    encoding.writeVarUint(this.restEncoder, id.client);\n    encoding.writeVarUint(this.restEncoder, id.clock);\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeRightID (id) {\n    encoding.writeVarUint(this.restEncoder, id.client);\n    encoding.writeVarUint(this.restEncoder, id.clock);\n  }\n\n  /**\n   * Use writeClient and writeClock instead of writeID if possible.\n   * @param {number} client\n   */\n  writeClient (client) {\n    encoding.writeVarUint(this.restEncoder, client);\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeInfo (info) {\n    encoding.writeUint8(this.restEncoder, info);\n  }\n\n  /**\n   * @param {string} s\n   */\n  writeString (s) {\n    encoding.writeVarString(this.restEncoder, s);\n  }\n\n  /**\n   * @param {boolean} isYKey\n   */\n  writeParentInfo (isYKey) {\n    encoding.writeVarUint(this.restEncoder, isYKey ? 1 : 0);\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeTypeRef (info) {\n    encoding.writeVarUint(this.restEncoder, info);\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @param {number} len\n   */\n  writeLen (len) {\n    encoding.writeVarUint(this.restEncoder, len);\n  }\n\n  /**\n   * @param {any} any\n   */\n  writeAny (any) {\n    encoding.writeAny(this.restEncoder, any);\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   */\n  writeBuf (buf) {\n    encoding.writeVarUint8Array(this.restEncoder, buf);\n  }\n\n  /**\n   * @param {any} embed\n   */\n  writeJSON (embed) {\n    encoding.writeVarString(this.restEncoder, JSON.stringify(embed));\n  }\n\n  /**\n   * @param {string} key\n   */\n  writeKey (key) {\n    encoding.writeVarString(this.restEncoder, key);\n  }\n}\n\nclass DSEncoderV2 {\n  constructor () {\n    this.restEncoder = encoding.createEncoder(); // encodes all the rest / non-optimized\n    this.dsCurrVal = 0;\n  }\n\n  toUint8Array () {\n    return encoding.toUint8Array(this.restEncoder)\n  }\n\n  resetDsCurVal () {\n    this.dsCurrVal = 0;\n  }\n\n  /**\n   * @param {number} clock\n   */\n  writeDsClock (clock) {\n    const diff = clock - this.dsCurrVal;\n    this.dsCurrVal = clock;\n    encoding.writeVarUint(this.restEncoder, diff);\n  }\n\n  /**\n   * @param {number} len\n   */\n  writeDsLen (len) {\n    if (len === 0) {\n      error.unexpectedCase();\n    }\n    encoding.writeVarUint(this.restEncoder, len - 1);\n    this.dsCurrVal += len;\n  }\n}\n\nclass UpdateEncoderV2 extends DSEncoderV2 {\n  constructor () {\n    super();\n    /**\n     * @type {Map<string,number>}\n     */\n    this.keyMap = new Map();\n    /**\n     * Refers to the next uniqe key-identifier to me used.\n     * See writeKey method for more information.\n     *\n     * @type {number}\n     */\n    this.keyClock = 0;\n    this.keyClockEncoder = new encoding.IntDiffOptRleEncoder();\n    this.clientEncoder = new encoding.UintOptRleEncoder();\n    this.leftClockEncoder = new encoding.IntDiffOptRleEncoder();\n    this.rightClockEncoder = new encoding.IntDiffOptRleEncoder();\n    this.infoEncoder = new encoding.RleEncoder(encoding.writeUint8);\n    this.stringEncoder = new encoding.StringEncoder();\n    this.parentInfoEncoder = new encoding.RleEncoder(encoding.writeUint8);\n    this.typeRefEncoder = new encoding.UintOptRleEncoder();\n    this.lenEncoder = new encoding.UintOptRleEncoder();\n  }\n\n  toUint8Array () {\n    const encoder = encoding.createEncoder();\n    encoding.writeVarUint(encoder, 0); // this is a feature flag that we might use in the future\n    encoding.writeVarUint8Array(encoder, this.keyClockEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, this.clientEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, this.leftClockEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, this.rightClockEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, encoding.toUint8Array(this.infoEncoder));\n    encoding.writeVarUint8Array(encoder, this.stringEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, encoding.toUint8Array(this.parentInfoEncoder));\n    encoding.writeVarUint8Array(encoder, this.typeRefEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, this.lenEncoder.toUint8Array());\n    // @note The rest encoder is appended! (note the missing var)\n    encoding.writeUint8Array(encoder, encoding.toUint8Array(this.restEncoder));\n    return encoding.toUint8Array(encoder)\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeLeftID (id) {\n    this.clientEncoder.write(id.client);\n    this.leftClockEncoder.write(id.clock);\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeRightID (id) {\n    this.clientEncoder.write(id.client);\n    this.rightClockEncoder.write(id.clock);\n  }\n\n  /**\n   * @param {number} client\n   */\n  writeClient (client) {\n    this.clientEncoder.write(client);\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeInfo (info) {\n    this.infoEncoder.write(info);\n  }\n\n  /**\n   * @param {string} s\n   */\n  writeString (s) {\n    this.stringEncoder.write(s);\n  }\n\n  /**\n   * @param {boolean} isYKey\n   */\n  writeParentInfo (isYKey) {\n    this.parentInfoEncoder.write(isYKey ? 1 : 0);\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeTypeRef (info) {\n    this.typeRefEncoder.write(info);\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @param {number} len\n   */\n  writeLen (len) {\n    this.lenEncoder.write(len);\n  }\n\n  /**\n   * @param {any} any\n   */\n  writeAny (any) {\n    encoding.writeAny(this.restEncoder, any);\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   */\n  writeBuf (buf) {\n    encoding.writeVarUint8Array(this.restEncoder, buf);\n  }\n\n  /**\n   * This is mainly here for legacy purposes.\n   *\n   * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n   *\n   * @param {any} embed\n   */\n  writeJSON (embed) {\n    encoding.writeAny(this.restEncoder, embed);\n  }\n\n  /**\n   * Property keys are often reused. For example, in y-prosemirror the key `bold` might\n   * occur very often. For a 3d application, the key `position` might occur very often.\n   *\n   * We cache these keys in a Map and refer to them via a unique number.\n   *\n   * @param {string} key\n   */\n  writeKey (key) {\n    const clock = this.keyMap.get(key);\n    if (clock === undefined) {\n      /**\n       * @todo uncomment to introduce this feature finally\n       *\n       * Background. The ContentFormat object was always encoded using writeKey, but the decoder used to use readString.\n       * Furthermore, I forgot to set the keyclock. So everything was working fine.\n       *\n       * However, this feature here is basically useless as it is not being used (it actually only consumes extra memory).\n       *\n       * I don't know yet how to reintroduce this feature..\n       *\n       * Older clients won't be able to read updates when we reintroduce this feature. So this should probably be done using a flag.\n       *\n       */\n      // this.keyMap.set(key, this.keyClock)\n      this.keyClockEncoder.write(this.keyClock++);\n      this.stringEncoder.write(key);\n    } else {\n      this.keyClockEncoder.write(clock);\n    }\n  }\n}\n\n/**\n * @module encoding\n */\n/*\n * We use the first five bits in the info flag for determining the type of the struct.\n *\n * 0: GC\n * 1: Item with Deleted content\n * 2: Item with JSON content\n * 3: Item with Binary content\n * 4: Item with String content\n * 5: Item with Embed content (for richtext content)\n * 6: Item with Format content (a formatting marker for richtext content)\n * 7: Item with Type\n */\n\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Array<GC|Item>} structs All structs by `client`\n * @param {number} client\n * @param {number} clock write structs starting with `ID(client,clock)`\n *\n * @function\n */\nconst writeStructs = (encoder, structs, client, clock) => {\n  // write first id\n  clock = math.max(clock, structs[0].id.clock); // make sure the first id exists\n  const startNewStructs = findIndexSS(structs, clock);\n  // write # encoded structs\n  encoding.writeVarUint(encoder.restEncoder, structs.length - startNewStructs);\n  encoder.writeClient(client);\n  encoding.writeVarUint(encoder.restEncoder, clock);\n  const firstStruct = structs[startNewStructs];\n  // write first struct with an offset\n  firstStruct.write(encoder, clock - firstStruct.id.clock);\n  for (let i = startNewStructs + 1; i < structs.length; i++) {\n    structs[i].write(encoder, 0);\n  }\n};\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {StructStore} store\n * @param {Map<number,number>} _sm\n *\n * @private\n * @function\n */\nconst writeClientsStructs = (encoder, store, _sm) => {\n  // we filter all valid _sm entries into sm\n  const sm = new Map();\n  _sm.forEach((clock, client) => {\n    // only write if new structs are available\n    if (getState(store, client) > clock) {\n      sm.set(client, clock);\n    }\n  });\n  getStateVector(store).forEach((_clock, client) => {\n    if (!_sm.has(client)) {\n      sm.set(client, 0);\n    }\n  });\n  // write # states that were updated\n  encoding.writeVarUint(encoder.restEncoder, sm.size);\n  // Write items with higher client ids first\n  // This heavily improves the conflict algorithm.\n  array.from(sm.entries()).sort((a, b) => b[0] - a[0]).forEach(([client, clock]) => {\n    writeStructs(encoder, /** @type {Array<GC|Item>} */ (store.clients.get(client)), client, clock);\n  });\n};\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder The decoder object to read data from.\n * @param {Doc} doc\n * @return {Map<number, { i: number, refs: Array<Item | GC> }>}\n *\n * @private\n * @function\n */\nconst readClientsStructRefs = (decoder, doc) => {\n  /**\n   * @type {Map<number, { i: number, refs: Array<Item | GC> }>}\n   */\n  const clientRefs = map.create();\n  const numOfStateUpdates = decoding.readVarUint(decoder.restDecoder);\n  for (let i = 0; i < numOfStateUpdates; i++) {\n    const numberOfStructs = decoding.readVarUint(decoder.restDecoder);\n    /**\n     * @type {Array<GC|Item>}\n     */\n    const refs = new Array(numberOfStructs);\n    const client = decoder.readClient();\n    let clock = decoding.readVarUint(decoder.restDecoder);\n    // const start = performance.now()\n    clientRefs.set(client, { i: 0, refs });\n    for (let i = 0; i < numberOfStructs; i++) {\n      const info = decoder.readInfo();\n      switch (binary.BITS5 & info) {\n        case 0: { // GC\n          const len = decoder.readLen();\n          refs[i] = new GC(createID(client, clock), len);\n          clock += len;\n          break\n        }\n        case 10: { // Skip Struct (nothing to apply)\n          // @todo we could reduce the amount of checks by adding Skip struct to clientRefs so we know that something is missing.\n          const len = decoding.readVarUint(decoder.restDecoder);\n          refs[i] = new Skip(createID(client, clock), len);\n          clock += len;\n          break\n        }\n        default: { // Item with content\n          /**\n           * The optimized implementation doesn't use any variables because inlining variables is faster.\n           * Below a non-optimized version is shown that implements the basic algorithm with\n           * a few comments\n           */\n          const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0;\n          // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n          // and we read the next string as parentYKey.\n          // It indicates how we store/retrieve parent from `y.share`\n          // @type {string|null}\n          const struct = new Item(\n            createID(client, clock),\n            null, // left\n            (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null, // origin\n            null, // right\n            (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null, // right origin\n            cantCopyParentInfo ? (decoder.readParentInfo() ? doc.get(decoder.readString()) : decoder.readLeftID()) : null, // parent\n            cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n            readItemContent(decoder, info) // item content\n          );\n          /* A non-optimized implementation of the above algorithm:\n\n          // The item that was originally to the left of this item.\n          const origin = (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null\n          // The item that was originally to the right of this item.\n          const rightOrigin = (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null\n          const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0\n          const hasParentYKey = cantCopyParentInfo ? decoder.readParentInfo() : false\n          // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n          // and we read the next string as parentYKey.\n          // It indicates how we store/retrieve parent from `y.share`\n          // @type {string|null}\n          const parentYKey = cantCopyParentInfo && hasParentYKey ? decoder.readString() : null\n\n          const struct = new Item(\n            createID(client, clock),\n            null, // left\n            origin, // origin\n            null, // right\n            rightOrigin, // right origin\n            cantCopyParentInfo && !hasParentYKey ? decoder.readLeftID() : (parentYKey !== null ? doc.get(parentYKey) : null), // parent\n            cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n            readItemContent(decoder, info) // item content\n          )\n          */\n          refs[i] = struct;\n          clock += struct.length;\n        }\n      }\n    }\n    // console.log('time to read: ', performance.now() - start) // @todo remove\n  }\n  return clientRefs\n};\n\n/**\n * Resume computing structs generated by struct readers.\n *\n * While there is something to do, we integrate structs in this order\n * 1. top element on stack, if stack is not empty\n * 2. next element from current struct reader (if empty, use next struct reader)\n *\n * If struct causally depends on another struct (ref.missing), we put next reader of\n * `ref.id.client` on top of stack.\n *\n * At some point we find a struct that has no causal dependencies,\n * then we start emptying the stack.\n *\n * It is not possible to have circles: i.e. struct1 (from client1) depends on struct2 (from client2)\n * depends on struct3 (from client1). Therefore the max stack size is eqaul to `structReaders.length`.\n *\n * This method is implemented in a way so that we can resume computation if this update\n * causally depends on another update.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {Map<number, { i: number, refs: (GC | Item)[] }>} clientsStructRefs\n * @return { null | { update: Uint8Array, missing: Map<number,number> } }\n *\n * @private\n * @function\n */\nconst integrateStructs = (transaction, store, clientsStructRefs) => {\n  /**\n   * @type {Array<Item | GC>}\n   */\n  const stack = [];\n  // sort them so that we take the higher id first, in case of conflicts the lower id will probably not conflict with the id from the higher user.\n  let clientsStructRefsIds = array.from(clientsStructRefs.keys()).sort((a, b) => a - b);\n  if (clientsStructRefsIds.length === 0) {\n    return null\n  }\n  const getNextStructTarget = () => {\n    if (clientsStructRefsIds.length === 0) {\n      return null\n    }\n    let nextStructsTarget = /** @type {{i:number,refs:Array<GC|Item>}} */ (clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]));\n    while (nextStructsTarget.refs.length === nextStructsTarget.i) {\n      clientsStructRefsIds.pop();\n      if (clientsStructRefsIds.length > 0) {\n        nextStructsTarget = /** @type {{i:number,refs:Array<GC|Item>}} */ (clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]));\n      } else {\n        return null\n      }\n    }\n    return nextStructsTarget\n  };\n  let curStructsTarget = getNextStructTarget();\n  if (curStructsTarget === null) {\n    return null\n  }\n\n  /**\n   * @type {StructStore}\n   */\n  const restStructs = new StructStore();\n  const missingSV = new Map();\n  /**\n   * @param {number} client\n   * @param {number} clock\n   */\n  const updateMissingSv = (client, clock) => {\n    const mclock = missingSV.get(client);\n    if (mclock == null || mclock > clock) {\n      missingSV.set(client, clock);\n    }\n  };\n  /**\n   * @type {GC|Item}\n   */\n  let stackHead = /** @type {any} */ (curStructsTarget).refs[/** @type {any} */ (curStructsTarget).i++];\n  // caching the state because it is used very often\n  const state = new Map();\n\n  const addStackToRestSS = () => {\n    for (const item of stack) {\n      const client = item.id.client;\n      const unapplicableItems = clientsStructRefs.get(client);\n      if (unapplicableItems) {\n        // decrement because we weren't able to apply previous operation\n        unapplicableItems.i--;\n        restStructs.clients.set(client, unapplicableItems.refs.slice(unapplicableItems.i));\n        clientsStructRefs.delete(client);\n        unapplicableItems.i = 0;\n        unapplicableItems.refs = [];\n      } else {\n        // item was the last item on clientsStructRefs and the field was already cleared. Add item to restStructs and continue\n        restStructs.clients.set(client, [item]);\n      }\n      // remove client from clientsStructRefsIds to prevent users from applying the same update again\n      clientsStructRefsIds = clientsStructRefsIds.filter(c => c !== client);\n    }\n    stack.length = 0;\n  };\n\n  // iterate over all struct readers until we are done\n  while (true) {\n    if (stackHead.constructor !== Skip) {\n      const localClock = map.setIfUndefined(state, stackHead.id.client, () => getState(store, stackHead.id.client));\n      const offset = localClock - stackHead.id.clock;\n      if (offset < 0) {\n        // update from the same client is missing\n        stack.push(stackHead);\n        updateMissingSv(stackHead.id.client, stackHead.id.clock - 1);\n        // hid a dead wall, add all items from stack to restSS\n        addStackToRestSS();\n      } else {\n        const missing = stackHead.getMissing(transaction, store);\n        if (missing !== null) {\n          stack.push(stackHead);\n          // get the struct reader that has the missing struct\n          /**\n           * @type {{ refs: Array<GC|Item>, i: number }}\n           */\n          const structRefs = clientsStructRefs.get(/** @type {number} */ (missing)) || { refs: [], i: 0 };\n          if (structRefs.refs.length === structRefs.i) {\n            // This update message causally depends on another update message that doesn't exist yet\n            updateMissingSv(/** @type {number} */ (missing), getState(store, missing));\n            addStackToRestSS();\n          } else {\n            stackHead = structRefs.refs[structRefs.i++];\n            continue\n          }\n        } else if (offset === 0 || offset < stackHead.length) {\n          // all fine, apply the stackhead\n          stackHead.integrate(transaction, offset);\n          state.set(stackHead.id.client, stackHead.id.clock + stackHead.length);\n        }\n      }\n    }\n    // iterate to next stackHead\n    if (stack.length > 0) {\n      stackHead = /** @type {GC|Item} */ (stack.pop());\n    } else if (curStructsTarget !== null && curStructsTarget.i < curStructsTarget.refs.length) {\n      stackHead = /** @type {GC|Item} */ (curStructsTarget.refs[curStructsTarget.i++]);\n    } else {\n      curStructsTarget = getNextStructTarget();\n      if (curStructsTarget === null) {\n        // we are done!\n        break\n      } else {\n        stackHead = /** @type {GC|Item} */ (curStructsTarget.refs[curStructsTarget.i++]);\n      }\n    }\n  }\n  if (restStructs.clients.size > 0) {\n    const encoder = new UpdateEncoderV2();\n    writeClientsStructs(encoder, restStructs, new Map());\n    // write empty deleteset\n    // writeDeleteSet(encoder, new DeleteSet())\n    encoding.writeVarUint(encoder.restEncoder, 0); // => no need for an extra function call, just write 0 deletes\n    return { missing: missingSV, update: encoder.toUint8Array() }\n  }\n  return null\n};\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n *\n * @private\n * @function\n */\nconst writeStructsFromTransaction = (encoder, transaction) => writeClientsStructs(encoder, transaction.doc.store, transaction.beforeState);\n\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts a decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n * @param {UpdateDecoderV1 | UpdateDecoderV2} [structDecoder]\n *\n * @function\n */\nconst readUpdateV2 = (decoder, ydoc, transactionOrigin, structDecoder = new UpdateDecoderV2(decoder)) =>\n  transact(ydoc, transaction => {\n    // force that transaction.local is set to non-local\n    transaction.local = false;\n    let retry = false;\n    const doc = transaction.doc;\n    const store = doc.store;\n    // let start = performance.now()\n    const ss = readClientsStructRefs(structDecoder, doc);\n    // console.log('time to read structs: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    // console.log('time to merge: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    const restStructs = integrateStructs(transaction, store, ss);\n    const pending = store.pendingStructs;\n    if (pending) {\n      // check if we can apply something\n      for (const [client, clock] of pending.missing) {\n        if (clock < getState(store, client)) {\n          retry = true;\n          break\n        }\n      }\n      if (restStructs) {\n        // merge restStructs into store.pending\n        for (const [client, clock] of restStructs.missing) {\n          const mclock = pending.missing.get(client);\n          if (mclock == null || mclock > clock) {\n            pending.missing.set(client, clock);\n          }\n        }\n        pending.update = mergeUpdatesV2([pending.update, restStructs.update]);\n      }\n    } else {\n      store.pendingStructs = restStructs;\n    }\n    // console.log('time to integrate: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    const dsRest = readAndApplyDeleteSet(structDecoder, transaction, store);\n    if (store.pendingDs) {\n      // @todo we could make a lower-bound state-vector check as we do above\n      const pendingDSUpdate = new UpdateDecoderV2(decoding.createDecoder(store.pendingDs));\n      decoding.readVarUint(pendingDSUpdate.restDecoder); // read 0 structs, because we only encode deletes in pendingdsupdate\n      const dsRest2 = readAndApplyDeleteSet(pendingDSUpdate, transaction, store);\n      if (dsRest && dsRest2) {\n        // case 1: ds1 != null && ds2 != null\n        store.pendingDs = mergeUpdatesV2([dsRest, dsRest2]);\n      } else {\n        // case 2: ds1 != null\n        // case 3: ds2 != null\n        // case 4: ds1 == null && ds2 == null\n        store.pendingDs = dsRest || dsRest2;\n      }\n    } else {\n      // Either dsRest == null && pendingDs == null OR dsRest != null\n      store.pendingDs = dsRest;\n    }\n    // console.log('time to cleanup: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n\n    // console.log('time to resume delete readers: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    if (retry) {\n      const update = /** @type {{update: Uint8Array}} */ (store.pendingStructs).update;\n      store.pendingStructs = null;\n      applyUpdateV2(transaction.doc, update);\n    }\n  }, transactionOrigin, false);\n\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts a decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\nconst readUpdate = (decoder, ydoc, transactionOrigin) => readUpdateV2(decoder, ydoc, transactionOrigin, new UpdateDecoderV1(decoder));\n\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n *\n * @function\n */\nconst applyUpdateV2 = (ydoc, update, transactionOrigin, YDecoder = UpdateDecoderV2) => {\n  const decoder = decoding.createDecoder(update);\n  readUpdateV2(decoder, ydoc, transactionOrigin, new YDecoder(decoder));\n};\n\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\nconst applyUpdate = (ydoc, update, transactionOrigin) => applyUpdateV2(ydoc, update, transactionOrigin, UpdateDecoderV1);\n\n/**\n * Write all the document as a single update message. If you specify the state of the remote client (`targetStateVector`) it will\n * only write the operations that are missing.\n *\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Doc} doc\n * @param {Map<number,number>} [targetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n *\n * @function\n */\nconst writeStateAsUpdate = (encoder, doc, targetStateVector = new Map()) => {\n  writeClientsStructs(encoder, doc.store, targetStateVector);\n  writeDeleteSet(encoder, createDeleteSetFromStructStore(doc.store));\n};\n\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @param {UpdateEncoderV1 | UpdateEncoderV2} [encoder]\n * @return {Uint8Array}\n *\n * @function\n */\nconst encodeStateAsUpdateV2 = (doc, encodedTargetStateVector = new Uint8Array([0]), encoder = new UpdateEncoderV2()) => {\n  const targetStateVector = decodeStateVector(encodedTargetStateVector);\n  writeStateAsUpdate(encoder, doc, targetStateVector);\n  const updates = [encoder.toUint8Array()];\n  // also add the pending updates (if there are any)\n  if (doc.store.pendingDs) {\n    updates.push(doc.store.pendingDs);\n  }\n  if (doc.store.pendingStructs) {\n    updates.push(diffUpdateV2(doc.store.pendingStructs.update, encodedTargetStateVector));\n  }\n  if (updates.length > 1) {\n    if (encoder.constructor === UpdateEncoderV1) {\n      return mergeUpdates(updates.map((update, i) => i === 0 ? update : convertUpdateFormatV2ToV1(update)))\n    } else if (encoder.constructor === UpdateEncoderV2) {\n      return mergeUpdatesV2(updates)\n    }\n  }\n  return updates[0]\n};\n\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @return {Uint8Array}\n *\n * @function\n */\nconst encodeStateAsUpdate = (doc, encodedTargetStateVector) => encodeStateAsUpdateV2(doc, encodedTargetStateVector, new UpdateEncoderV1());\n\n/**\n * Read state vector from Decoder and return as Map\n *\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\nconst readStateVector = decoder => {\n  const ss = new Map();\n  const ssLength = decoding.readVarUint(decoder.restDecoder);\n  for (let i = 0; i < ssLength; i++) {\n    const client = decoding.readVarUint(decoder.restDecoder);\n    const clock = decoding.readVarUint(decoder.restDecoder);\n    ss.set(client, clock);\n  }\n  return ss\n};\n\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\n// export const decodeStateVectorV2 = decodedState => readStateVector(new DSDecoderV2(decoding.createDecoder(decodedState)))\n\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\nconst decodeStateVector = decodedState => readStateVector(new DSDecoderV1(decoding.createDecoder(decodedState)));\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {Map<number,number>} sv\n * @function\n */\nconst writeStateVector = (encoder, sv) => {\n  encoding.writeVarUint(encoder.restEncoder, sv.size);\n  array.from(sv.entries()).sort((a, b) => b[0] - a[0]).forEach(([client, clock]) => {\n    encoding.writeVarUint(encoder.restEncoder, client); // @todo use a special client decoder that is based on mapping\n    encoding.writeVarUint(encoder.restEncoder, clock);\n  });\n  return encoder\n};\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {Doc} doc\n *\n * @function\n */\nconst writeDocumentStateVector = (encoder, doc) => writeStateVector(encoder, getStateVector(doc.store));\n\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc|Map<number,number>} doc\n * @param {DSEncoderV1 | DSEncoderV2} [encoder]\n * @return {Uint8Array}\n *\n * @function\n */\nconst encodeStateVectorV2 = (doc, encoder = new DSEncoderV2()) => {\n  if (doc instanceof Map) {\n    writeStateVector(encoder, doc);\n  } else {\n    writeDocumentStateVector(encoder, doc);\n  }\n  return encoder.toUint8Array()\n};\n\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc|Map<number,number>} doc\n * @return {Uint8Array}\n *\n * @function\n */\nconst encodeStateVector = doc => encodeStateVectorV2(doc, new DSEncoderV1());\n\n/**\n * General event handler implementation.\n *\n * @template ARG0, ARG1\n *\n * @private\n */\nclass EventHandler {\n  constructor () {\n    /**\n     * @type {Array<function(ARG0, ARG1):void>}\n     */\n    this.l = [];\n  }\n}\n\n/**\n * @template ARG0,ARG1\n * @returns {EventHandler<ARG0,ARG1>}\n *\n * @private\n * @function\n */\nconst createEventHandler = () => new EventHandler();\n\n/**\n * Adds an event listener that is called when\n * {@link EventHandler#callEventListeners} is called.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler.\n *\n * @private\n * @function\n */\nconst addEventHandlerListener = (eventHandler, f) =>\n  eventHandler.l.push(f);\n\n/**\n * Removes an event listener.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler that was added with\n *                     {@link EventHandler#addEventListener}\n *\n * @private\n * @function\n */\nconst removeEventHandlerListener = (eventHandler, f) => {\n  const l = eventHandler.l;\n  const len = l.length;\n  eventHandler.l = l.filter(g => f !== g);\n  if (len === eventHandler.l.length) {\n    console.error('[yjs] Tried to remove event handler that doesn\\'t exist.');\n  }\n};\n\n/**\n * Call all event listeners that were added via\n * {@link EventHandler#addEventListener}.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {ARG0} arg0\n * @param {ARG1} arg1\n *\n * @private\n * @function\n */\nconst callEventHandlerListeners = (eventHandler, arg0, arg1) =>\n  f.callAll(eventHandler.l, [arg0, arg1]);\n\nclass ID {\n  /**\n   * @param {number} client client id\n   * @param {number} clock unique per client id, continuous number\n   */\n  constructor (client, clock) {\n    /**\n     * Client id\n     * @type {number}\n     */\n    this.client = client;\n    /**\n     * unique per client id, continuous number\n     * @type {number}\n     */\n    this.clock = clock;\n  }\n}\n\n/**\n * @param {ID | null} a\n * @param {ID | null} b\n * @return {boolean}\n *\n * @function\n */\nconst compareIDs = (a, b) => a === b || (a !== null && b !== null && a.client === b.client && a.clock === b.clock);\n\n/**\n * @param {number} client\n * @param {number} clock\n *\n * @private\n * @function\n */\nconst createID = (client, clock) => new ID(client, clock);\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {ID} id\n *\n * @private\n * @function\n */\nconst writeID = (encoder, id) => {\n  encoding.writeVarUint(encoder, id.client);\n  encoding.writeVarUint(encoder, id.clock);\n};\n\n/**\n * Read ID.\n * * If first varUint read is 0xFFFFFF a RootID is returned.\n * * Otherwise an ID is returned\n *\n * @param {decoding.Decoder} decoder\n * @return {ID}\n *\n * @private\n * @function\n */\nconst readID = decoder =>\n  createID(decoding.readVarUint(decoder), decoding.readVarUint(decoder));\n\n/**\n * The top types are mapped from y.share.get(keyname) => type.\n * `type` does not store any information about the `keyname`.\n * This function finds the correct `keyname` for `type` and throws otherwise.\n *\n * @param {AbstractType<any>} type\n * @return {string}\n *\n * @private\n * @function\n */\nconst findRootTypeKey = type => {\n  // @ts-ignore _y must be defined, otherwise unexpected case\n  for (const [key, value] of type.doc.share.entries()) {\n    if (value === type) {\n      return key\n    }\n  }\n  throw error.unexpectedCase()\n};\n\n/**\n * Check if `parent` is a parent of `child`.\n *\n * @param {AbstractType<any>} parent\n * @param {Item|null} child\n * @return {Boolean} Whether `parent` is a parent of `child`.\n *\n * @private\n * @function\n */\nconst isParentOf = (parent, child) => {\n  while (child !== null) {\n    if (child.parent === parent) {\n      return true\n    }\n    child = /** @type {AbstractType<any>} */ (child.parent)._item;\n  }\n  return false\n};\n\n/**\n * Convenient helper to log type information.\n *\n * Do not use in productive systems as the output can be immense!\n *\n * @param {AbstractType<any>} type\n */\nconst logType = type => {\n  const res = [];\n  let n = type._start;\n  while (n) {\n    res.push(n);\n    n = n.right;\n  }\n  console.log('Children: ', res);\n  console.log('Children content: ', res.filter(m => !m.deleted).map(m => m.content));\n};\n\nclass PermanentUserData {\n  /**\n   * @param {Doc} doc\n   * @param {YMap<any>} [storeType]\n   */\n  constructor (doc, storeType = doc.getMap('users')) {\n    /**\n     * @type {Map<string,DeleteSet>}\n     */\n    const dss = new Map();\n    this.yusers = storeType;\n    this.doc = doc;\n    /**\n     * Maps from clientid to userDescription\n     *\n     * @type {Map<number,string>}\n     */\n    this.clients = new Map();\n    this.dss = dss;\n    /**\n     * @param {YMap<any>} user\n     * @param {string} userDescription\n     */\n    const initUser = (user, userDescription) => {\n      /**\n       * @type {YArray<Uint8Array>}\n       */\n      const ds = user.get('ds');\n      const ids = user.get('ids');\n      const addClientId = /** @param {number} clientid */ clientid => this.clients.set(clientid, userDescription);\n      ds.observe(/** @param {YArrayEvent<any>} event */ event => {\n        event.changes.added.forEach(item => {\n          item.content.getContent().forEach(encodedDs => {\n            if (encodedDs instanceof Uint8Array) {\n              this.dss.set(userDescription, mergeDeleteSets([this.dss.get(userDescription) || createDeleteSet(), readDeleteSet(new DSDecoderV1(decoding.createDecoder(encodedDs)))]));\n            }\n          });\n        });\n      });\n      this.dss.set(userDescription, mergeDeleteSets(ds.map(encodedDs => readDeleteSet(new DSDecoderV1(decoding.createDecoder(encodedDs))))));\n      ids.observe(/** @param {YArrayEvent<any>} event */ event =>\n        event.changes.added.forEach(item => item.content.getContent().forEach(addClientId))\n      );\n      ids.forEach(addClientId);\n    };\n    // observe users\n    storeType.observe(event => {\n      event.keysChanged.forEach(userDescription =>\n        initUser(storeType.get(userDescription), userDescription)\n      );\n    });\n    // add intial data\n    storeType.forEach(initUser);\n  }\n\n  /**\n   * @param {Doc} doc\n   * @param {number} clientid\n   * @param {string} userDescription\n   * @param {Object} conf\n   * @param {function(Transaction, DeleteSet):boolean} [conf.filter]\n   */\n  setUserMapping (doc, clientid, userDescription, { filter = () => true } = {}) {\n    const users = this.yusers;\n    let user = users.get(userDescription);\n    if (!user) {\n      user = new YMap();\n      user.set('ids', new YArray());\n      user.set('ds', new YArray());\n      users.set(userDescription, user);\n    }\n    user.get('ids').push([clientid]);\n    users.observe(_event => {\n      setTimeout(() => {\n        const userOverwrite = users.get(userDescription);\n        if (userOverwrite !== user) {\n          // user was overwritten, port all data over to the next user object\n          // @todo Experiment with Y.Sets here\n          user = userOverwrite;\n          // @todo iterate over old type\n          this.clients.forEach((_userDescription, clientid) => {\n            if (userDescription === _userDescription) {\n              user.get('ids').push([clientid]);\n            }\n          });\n          const encoder = new DSEncoderV1();\n          const ds = this.dss.get(userDescription);\n          if (ds) {\n            writeDeleteSet(encoder, ds);\n            user.get('ds').push([encoder.toUint8Array()]);\n          }\n        }\n      }, 0);\n    });\n    doc.on('afterTransaction', /** @param {Transaction} transaction */ transaction => {\n      setTimeout(() => {\n        const yds = user.get('ds');\n        const ds = transaction.deleteSet;\n        if (transaction.local && ds.clients.size > 0 && filter(transaction, ds)) {\n          const encoder = new DSEncoderV1();\n          writeDeleteSet(encoder, ds);\n          yds.push([encoder.toUint8Array()]);\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {number} clientid\n   * @return {any}\n   */\n  getUserByClientId (clientid) {\n    return this.clients.get(clientid) || null\n  }\n\n  /**\n   * @param {ID} id\n   * @return {string | null}\n   */\n  getUserByDeletedId (id) {\n    for (const [userDescription, ds] of this.dss.entries()) {\n      if (isDeleted(ds, id)) {\n        return userDescription\n      }\n    }\n    return null\n  }\n}\n\n/**\n * A relative position is based on the Yjs model and is not affected by document changes.\n * E.g. If you place a relative position before a certain character, it will always point to this character.\n * If you place a relative position at the end of a type, it will always point to the end of the type.\n *\n * A numeric position is often unsuited for user selections, because it does not change when content is inserted\n * before or after.\n *\n * ```Insert(0, 'x')('a|bc') = 'xa|bc'``` Where | is the relative position.\n *\n * One of the properties must be defined.\n *\n * @example\n *   // Current cursor position is at position 10\n *   const relativePosition = createRelativePositionFromIndex(yText, 10)\n *   // modify yText\n *   yText.insert(0, 'abc')\n *   yText.delete(3, 10)\n *   // Compute the cursor position\n *   const absolutePosition = createAbsolutePositionFromRelativePosition(y, relativePosition)\n *   absolutePosition.type === yText // => true\n *   console.log('cursor location is ' + absolutePosition.index) // => cursor location is 3\n *\n */\nclass RelativePosition {\n  /**\n   * @param {ID|null} type\n   * @param {string|null} tname\n   * @param {ID|null} item\n   * @param {number} assoc\n   */\n  constructor (type, tname, item, assoc = 0) {\n    /**\n     * @type {ID|null}\n     */\n    this.type = type;\n    /**\n     * @type {string|null}\n     */\n    this.tname = tname;\n    /**\n     * @type {ID | null}\n     */\n    this.item = item;\n    /**\n     * A relative position is associated to a specific character. By default\n     * assoc >= 0, the relative position is associated to the character\n     * after the meant position.\n     * I.e. position 1 in 'ab' is associated to character 'b'.\n     *\n     * If assoc < 0, then the relative position is associated to the caharacter\n     * before the meant position.\n     *\n     * @type {number}\n     */\n    this.assoc = assoc;\n  }\n}\n\n/**\n * @param {RelativePosition} rpos\n * @return {any}\n */\nconst relativePositionToJSON = rpos => {\n  const json = {};\n  if (rpos.type) {\n    json.type = rpos.type;\n  }\n  if (rpos.tname) {\n    json.tname = rpos.tname;\n  }\n  if (rpos.item) {\n    json.item = rpos.item;\n  }\n  if (rpos.assoc != null) {\n    json.assoc = rpos.assoc;\n  }\n  return json\n};\n\n/**\n * @param {any} json\n * @return {RelativePosition}\n *\n * @function\n */\nconst createRelativePositionFromJSON = json => new RelativePosition(json.type == null ? null : createID(json.type.client, json.type.clock), json.tname ?? null, json.item == null ? null : createID(json.item.client, json.item.clock), json.assoc == null ? 0 : json.assoc);\n\nclass AbsolutePosition {\n  /**\n   * @param {AbstractType<any>} type\n   * @param {number} index\n   * @param {number} [assoc]\n   */\n  constructor (type, index, assoc = 0) {\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type;\n    /**\n     * @type {number}\n     */\n    this.index = index;\n    this.assoc = assoc;\n  }\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @param {number} [assoc]\n *\n * @function\n */\nconst createAbsolutePosition = (type, index, assoc = 0) => new AbsolutePosition(type, index, assoc);\n\n/**\n * @param {AbstractType<any>} type\n * @param {ID|null} item\n * @param {number} [assoc]\n *\n * @function\n */\nconst createRelativePosition = (type, item, assoc) => {\n  let typeid = null;\n  let tname = null;\n  if (type._item === null) {\n    tname = findRootTypeKey(type);\n  } else {\n    typeid = createID(type._item.id.client, type._item.id.clock);\n  }\n  return new RelativePosition(typeid, tname, item, assoc)\n};\n\n/**\n * Create a relativePosition based on a absolute position.\n *\n * @param {AbstractType<any>} type The base type (e.g. YText or YArray).\n * @param {number} index The absolute position.\n * @param {number} [assoc]\n * @return {RelativePosition}\n *\n * @function\n */\nconst createRelativePositionFromTypeIndex = (type, index, assoc = 0) => {\n  let t = type._start;\n  if (assoc < 0) {\n    // associated to the left character or the beginning of a type, increment index if possible.\n    if (index === 0) {\n      return createRelativePosition(type, null, assoc)\n    }\n    index--;\n  }\n  while (t !== null) {\n    if (!t.deleted && t.countable) {\n      if (t.length > index) {\n        // case 1: found position somewhere in the linked list\n        return createRelativePosition(type, createID(t.id.client, t.id.clock + index), assoc)\n      }\n      index -= t.length;\n    }\n    if (t.right === null && assoc < 0) {\n      // left-associated position, return last available id\n      return createRelativePosition(type, t.lastId, assoc)\n    }\n    t = t.right;\n  }\n  return createRelativePosition(type, null, assoc)\n};\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {RelativePosition} rpos\n *\n * @function\n */\nconst writeRelativePosition = (encoder, rpos) => {\n  const { type, tname, item, assoc } = rpos;\n  if (item !== null) {\n    encoding.writeVarUint(encoder, 0);\n    writeID(encoder, item);\n  } else if (tname !== null) {\n    // case 2: found position at the end of the list and type is stored in y.share\n    encoding.writeUint8(encoder, 1);\n    encoding.writeVarString(encoder, tname);\n  } else if (type !== null) {\n    // case 3: found position at the end of the list and type is attached to an item\n    encoding.writeUint8(encoder, 2);\n    writeID(encoder, type);\n  } else {\n    throw error.unexpectedCase()\n  }\n  encoding.writeVarInt(encoder, assoc);\n  return encoder\n};\n\n/**\n * @param {RelativePosition} rpos\n * @return {Uint8Array}\n */\nconst encodeRelativePosition = rpos => {\n  const encoder = encoding.createEncoder();\n  writeRelativePosition(encoder, rpos);\n  return encoding.toUint8Array(encoder)\n};\n\n/**\n * @param {decoding.Decoder} decoder\n * @return {RelativePosition}\n *\n * @function\n */\nconst readRelativePosition = decoder => {\n  let type = null;\n  let tname = null;\n  let itemID = null;\n  switch (decoding.readVarUint(decoder)) {\n    case 0:\n      // case 1: found position somewhere in the linked list\n      itemID = readID(decoder);\n      break\n    case 1:\n      // case 2: found position at the end of the list and type is stored in y.share\n      tname = decoding.readVarString(decoder);\n      break\n    case 2: {\n      // case 3: found position at the end of the list and type is attached to an item\n      type = readID(decoder);\n    }\n  }\n  const assoc = decoding.hasContent(decoder) ? decoding.readVarInt(decoder) : 0;\n  return new RelativePosition(type, tname, itemID, assoc)\n};\n\n/**\n * @param {Uint8Array} uint8Array\n * @return {RelativePosition}\n */\nconst decodeRelativePosition = uint8Array => readRelativePosition(decoding.createDecoder(uint8Array));\n\n/**\n * Transform a relative position to an absolute position.\n *\n * If you want to share the relative position with other users, you should set\n * `followUndoneDeletions` to false to get consistent results across all clients.\n *\n * When calculating the absolute position, we try to follow the \"undone deletions\". This yields\n * better results for the user who performed undo. However, only the user who performed the undo\n * will get the better results, the other users don't know which operations recreated a deleted\n * range of content. There is more information in this ticket: https://github.com/yjs/yjs/issues/638\n *\n * @param {RelativePosition} rpos\n * @param {Doc} doc\n * @param {boolean} followUndoneDeletions - whether to follow undone deletions - see https://github.com/yjs/yjs/issues/638\n * @return {AbsolutePosition|null}\n *\n * @function\n */\nconst createAbsolutePositionFromRelativePosition = (rpos, doc, followUndoneDeletions = true) => {\n  const store = doc.store;\n  const rightID = rpos.item;\n  const typeID = rpos.type;\n  const tname = rpos.tname;\n  const assoc = rpos.assoc;\n  let type = null;\n  let index = 0;\n  if (rightID !== null) {\n    if (getState(store, rightID.client) <= rightID.clock) {\n      return null\n    }\n    const res = followUndoneDeletions ? followRedone(store, rightID) : { item: getItem(store, rightID), diff: 0 };\n    const right = res.item;\n    if (!(right instanceof Item)) {\n      return null\n    }\n    type = /** @type {AbstractType<any>} */ (right.parent);\n    if (type._item === null || !type._item.deleted) {\n      index = (right.deleted || !right.countable) ? 0 : (res.diff + (assoc >= 0 ? 0 : 1)); // adjust position based on left association if necessary\n      let n = right.left;\n      while (n !== null) {\n        if (!n.deleted && n.countable) {\n          index += n.length;\n        }\n        n = n.left;\n      }\n    }\n  } else {\n    if (tname !== null) {\n      type = doc.get(tname);\n    } else if (typeID !== null) {\n      if (getState(store, typeID.client) <= typeID.clock) {\n        // type does not exist yet\n        return null\n      }\n      const { item } = followUndoneDeletions ? followRedone(store, typeID) : { item: getItem(store, typeID) };\n      if (item instanceof Item && item.content instanceof ContentType) {\n        type = item.content.type;\n      } else {\n        // struct is garbage collected\n        return null\n      }\n    } else {\n      throw error.unexpectedCase()\n    }\n    if (assoc >= 0) {\n      index = type._length;\n    } else {\n      index = 0;\n    }\n  }\n  return createAbsolutePosition(type, index, rpos.assoc)\n};\n\n/**\n * @param {RelativePosition|null} a\n * @param {RelativePosition|null} b\n * @return {boolean}\n *\n * @function\n */\nconst compareRelativePositions = (a, b) => a === b || (\n  a !== null && b !== null && a.tname === b.tname && compareIDs(a.item, b.item) && compareIDs(a.type, b.type) && a.assoc === b.assoc\n);\n\nclass Snapshot {\n  /**\n   * @param {DeleteSet} ds\n   * @param {Map<number,number>} sv state map\n   */\n  constructor (ds, sv) {\n    /**\n     * @type {DeleteSet}\n     */\n    this.ds = ds;\n    /**\n     * State Map\n     * @type {Map<number,number>}\n     */\n    this.sv = sv;\n  }\n}\n\n/**\n * @param {Snapshot} snap1\n * @param {Snapshot} snap2\n * @return {boolean}\n */\nconst equalSnapshots = (snap1, snap2) => {\n  const ds1 = snap1.ds.clients;\n  const ds2 = snap2.ds.clients;\n  const sv1 = snap1.sv;\n  const sv2 = snap2.sv;\n  if (sv1.size !== sv2.size || ds1.size !== ds2.size) {\n    return false\n  }\n  for (const [key, value] of sv1.entries()) {\n    if (sv2.get(key) !== value) {\n      return false\n    }\n  }\n  for (const [client, dsitems1] of ds1.entries()) {\n    const dsitems2 = ds2.get(client) || [];\n    if (dsitems1.length !== dsitems2.length) {\n      return false\n    }\n    for (let i = 0; i < dsitems1.length; i++) {\n      const dsitem1 = dsitems1[i];\n      const dsitem2 = dsitems2[i];\n      if (dsitem1.clock !== dsitem2.clock || dsitem1.len !== dsitem2.len) {\n        return false\n      }\n    }\n  }\n  return true\n};\n\n/**\n * @param {Snapshot} snapshot\n * @param {DSEncoderV1 | DSEncoderV2} [encoder]\n * @return {Uint8Array}\n */\nconst encodeSnapshotV2 = (snapshot, encoder = new DSEncoderV2()) => {\n  writeDeleteSet(encoder, snapshot.ds);\n  writeStateVector(encoder, snapshot.sv);\n  return encoder.toUint8Array()\n};\n\n/**\n * @param {Snapshot} snapshot\n * @return {Uint8Array}\n */\nconst encodeSnapshot = snapshot => encodeSnapshotV2(snapshot, new DSEncoderV1());\n\n/**\n * @param {Uint8Array} buf\n * @param {DSDecoderV1 | DSDecoderV2} [decoder]\n * @return {Snapshot}\n */\nconst decodeSnapshotV2 = (buf, decoder = new DSDecoderV2(decoding.createDecoder(buf))) => {\n  return new Snapshot(readDeleteSet(decoder), readStateVector(decoder))\n};\n\n/**\n * @param {Uint8Array} buf\n * @return {Snapshot}\n */\nconst decodeSnapshot = buf => decodeSnapshotV2(buf, new DSDecoderV1(decoding.createDecoder(buf)));\n\n/**\n * @param {DeleteSet} ds\n * @param {Map<number,number>} sm\n * @return {Snapshot}\n */\nconst createSnapshot = (ds, sm) => new Snapshot(ds, sm);\n\nconst emptySnapshot = createSnapshot(createDeleteSet(), new Map());\n\n/**\n * @param {Doc} doc\n * @return {Snapshot}\n */\nconst snapshot = doc => createSnapshot(createDeleteSetFromStructStore(doc.store), getStateVector(doc.store));\n\n/**\n * @param {Item} item\n * @param {Snapshot|undefined} snapshot\n *\n * @protected\n * @function\n */\nconst isVisible = (item, snapshot) => snapshot === undefined\n  ? !item.deleted\n  : snapshot.sv.has(item.id.client) && (snapshot.sv.get(item.id.client) || 0) > item.id.clock && !isDeleted(snapshot.ds, item.id);\n\n/**\n * @param {Transaction} transaction\n * @param {Snapshot} snapshot\n */\nconst splitSnapshotAffectedStructs = (transaction, snapshot) => {\n  const meta = map.setIfUndefined(transaction.meta, splitSnapshotAffectedStructs, set.create);\n  const store = transaction.doc.store;\n  // check if we already split for this snapshot\n  if (!meta.has(snapshot)) {\n    snapshot.sv.forEach((clock, client) => {\n      if (clock < getState(store, client)) {\n        getItemCleanStart(transaction, createID(client, clock));\n      }\n    });\n    iterateDeletedStructs(transaction, snapshot.ds, _item => {});\n    meta.add(snapshot);\n  }\n};\n\n/**\n * @example\n *  const ydoc = new Y.Doc({ gc: false })\n *  ydoc.getText().insert(0, 'world!')\n *  const snapshot = Y.snapshot(ydoc)\n *  ydoc.getText().insert(0, 'hello ')\n *  const restored = Y.createDocFromSnapshot(ydoc, snapshot)\n *  assert(restored.getText().toString() === 'world!')\n *\n * @param {Doc} originDoc\n * @param {Snapshot} snapshot\n * @param {Doc} [newDoc] Optionally, you may define the Yjs document that receives the data from originDoc\n * @return {Doc}\n */\nconst createDocFromSnapshot = (originDoc, snapshot, newDoc = new Doc()) => {\n  if (originDoc.gc) {\n    // we should not try to restore a GC-ed document, because some of the restored items might have their content deleted\n    throw new Error('Garbage-collection must be disabled in `originDoc`!')\n  }\n  const { sv, ds } = snapshot;\n\n  const encoder = new UpdateEncoderV2();\n  originDoc.transact(transaction => {\n    let size = 0;\n    sv.forEach(clock => {\n      if (clock > 0) {\n        size++;\n      }\n    });\n    encoding.writeVarUint(encoder.restEncoder, size);\n    // splitting the structs before writing them to the encoder\n    for (const [client, clock] of sv) {\n      if (clock === 0) {\n        continue\n      }\n      if (clock < getState(originDoc.store, client)) {\n        getItemCleanStart(transaction, createID(client, clock));\n      }\n      const structs = originDoc.store.clients.get(client) || [];\n      const lastStructIndex = findIndexSS(structs, clock - 1);\n      // write # encoded structs\n      encoding.writeVarUint(encoder.restEncoder, lastStructIndex + 1);\n      encoder.writeClient(client);\n      // first clock written is 0\n      encoding.writeVarUint(encoder.restEncoder, 0);\n      for (let i = 0; i <= lastStructIndex; i++) {\n        structs[i].write(encoder, 0);\n      }\n    }\n    writeDeleteSet(encoder, ds);\n  });\n\n  applyUpdateV2(newDoc, encoder.toUint8Array(), 'snapshot');\n  return newDoc\n};\n\n/**\n * @param {Snapshot} snapshot\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} [YDecoder]\n */\nconst snapshotContainsUpdateV2 = (snapshot, update, YDecoder = UpdateDecoderV2) => {\n  const updateDecoder = new YDecoder(decoding.createDecoder(update));\n  const lazyDecoder = new LazyStructReader(updateDecoder, false);\n  for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {\n    if ((snapshot.sv.get(curr.id.client) || 0) < curr.id.clock + curr.length) {\n      return false\n    }\n  }\n  const mergedDS = mergeDeleteSets([snapshot.ds, readDeleteSet(updateDecoder)]);\n  return equalDeleteSets(snapshot.ds, mergedDS)\n};\n\n/**\n * @param {Snapshot} snapshot\n * @param {Uint8Array} update\n */\nconst snapshotContainsUpdate = (snapshot, update) => snapshotContainsUpdateV2(snapshot, update, UpdateDecoderV1);\n\nclass StructStore {\n  constructor () {\n    /**\n     * @type {Map<number,Array<GC|Item>>}\n     */\n    this.clients = new Map();\n    /**\n     * @type {null | { missing: Map<number, number>, update: Uint8Array }}\n     */\n    this.pendingStructs = null;\n    /**\n     * @type {null | Uint8Array}\n     */\n    this.pendingDs = null;\n  }\n}\n\n/**\n * Return the states as a Map<client,clock>.\n * Note that clock refers to the next expected clock id.\n *\n * @param {StructStore} store\n * @return {Map<number,number>}\n *\n * @public\n * @function\n */\nconst getStateVector = store => {\n  const sm = new Map();\n  store.clients.forEach((structs, client) => {\n    const struct = structs[structs.length - 1];\n    sm.set(client, struct.id.clock + struct.length);\n  });\n  return sm\n};\n\n/**\n * @param {StructStore} store\n * @param {number} client\n * @return {number}\n *\n * @public\n * @function\n */\nconst getState = (store, client) => {\n  const structs = store.clients.get(client);\n  if (structs === undefined) {\n    return 0\n  }\n  const lastStruct = structs[structs.length - 1];\n  return lastStruct.id.clock + lastStruct.length\n};\n\n/**\n * @param {StructStore} store\n * @param {GC|Item} struct\n *\n * @private\n * @function\n */\nconst addStruct = (store, struct) => {\n  let structs = store.clients.get(struct.id.client);\n  if (structs === undefined) {\n    structs = [];\n    store.clients.set(struct.id.client, structs);\n  } else {\n    const lastStruct = structs[structs.length - 1];\n    if (lastStruct.id.clock + lastStruct.length !== struct.id.clock) {\n      throw error.unexpectedCase()\n    }\n  }\n  structs.push(struct);\n};\n\n/**\n * Perform a binary search on a sorted array\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n * @return {number}\n *\n * @private\n * @function\n */\nconst findIndexSS = (structs, clock) => {\n  let left = 0;\n  let right = structs.length - 1;\n  let mid = structs[right];\n  let midclock = mid.id.clock;\n  if (midclock === clock) {\n    return right\n  }\n  // @todo does it even make sense to pivot the search?\n  // If a good split misses, it might actually increase the time to find the correct item.\n  // Currently, the only advantage is that search with pivoting might find the item on the first try.\n  let midindex = math.floor((clock / (midclock + mid.length - 1)) * right); // pivoting the search\n  while (left <= right) {\n    mid = structs[midindex];\n    midclock = mid.id.clock;\n    if (midclock <= clock) {\n      if (clock < midclock + mid.length) {\n        return midindex\n      }\n      left = midindex + 1;\n    } else {\n      right = midindex - 1;\n    }\n    midindex = math.floor((left + right) / 2);\n  }\n  // Always check state before looking for a struct in StructStore\n  // Therefore the case of not finding a struct is unexpected\n  throw error.unexpectedCase()\n};\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {GC|Item}\n *\n * @private\n * @function\n */\nconst find = (store, id) => {\n  /**\n   * @type {Array<GC|Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client);\n  return structs[findIndexSS(structs, id.clock)]\n};\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n * @private\n * @function\n */\nconst getItem = /** @type {function(StructStore,ID):Item} */ (find);\n\n/**\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n */\nconst findIndexCleanStart = (transaction, structs, clock) => {\n  const index = findIndexSS(structs, clock);\n  const struct = structs[index];\n  if (struct.id.clock < clock && struct instanceof Item) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));\n    return index + 1\n  }\n  return index\n};\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\nconst getItemCleanStart = (transaction, id) => {\n  const structs = /** @type {Array<Item>} */ (transaction.doc.store.clients.get(id.client));\n  return structs[findIndexCleanStart(transaction, structs, id.clock)]\n};\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\nconst getItemCleanEnd = (transaction, store, id) => {\n  /**\n   * @type {Array<Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client);\n  const index = findIndexSS(structs, id.clock);\n  const struct = structs[index];\n  if (id.clock !== struct.id.clock + struct.length - 1 && struct.constructor !== GC) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, id.clock - struct.id.clock + 1));\n  }\n  return struct\n};\n\n/**\n * Replace `item` with `newitem` in store\n * @param {StructStore} store\n * @param {GC|Item} struct\n * @param {GC|Item} newStruct\n *\n * @private\n * @function\n */\nconst replaceStruct = (store, struct, newStruct) => {\n  const structs = /** @type {Array<GC|Item>} */ (store.clients.get(struct.id.client));\n  structs[findIndexSS(structs, struct.id.clock)] = newStruct;\n};\n\n/**\n * Iterate over a range of structs\n *\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clockStart Inclusive start\n * @param {number} len\n * @param {function(GC|Item):void} f\n *\n * @function\n */\nconst iterateStructs = (transaction, structs, clockStart, len, f) => {\n  if (len === 0) {\n    return\n  }\n  const clockEnd = clockStart + len;\n  let index = findIndexCleanStart(transaction, structs, clockStart);\n  let struct;\n  do {\n    struct = structs[index++];\n    if (clockEnd < struct.id.clock + struct.length) {\n      findIndexCleanStart(transaction, structs, clockEnd);\n    }\n    f(struct);\n  } while (index < structs.length && structs[index].id.clock < clockEnd)\n};\n\n/**\n * A transaction is created for every change on the Yjs model. It is possible\n * to bundle changes on the Yjs model in a single transaction to\n * minimize the number on messages sent and the number of observer calls.\n * If possible the user of this library should bundle as many changes as\n * possible. Here is an example to illustrate the advantages of bundling:\n *\n * @example\n * const ydoc = new Y.Doc()\n * const map = ydoc.getMap('map')\n * // Log content when change is triggered\n * map.observe(() => {\n *   console.log('change triggered')\n * })\n * // Each change on the map type triggers a log message:\n * map.set('a', 0) // => \"change triggered\"\n * map.set('b', 0) // => \"change triggered\"\n * // When put in a transaction, it will trigger the log after the transaction:\n * ydoc.transact(() => {\n *   map.set('a', 1)\n *   map.set('b', 1)\n * }) // => \"change triggered\"\n *\n * @public\n */\nclass Transaction {\n  /**\n   * @param {Doc} doc\n   * @param {any} origin\n   * @param {boolean} local\n   */\n  constructor (doc, origin, local) {\n    /**\n     * The Yjs instance.\n     * @type {Doc}\n     */\n    this.doc = doc;\n    /**\n     * Describes the set of deleted items by ids\n     * @type {DeleteSet}\n     */\n    this.deleteSet = new DeleteSet();\n    /**\n     * Holds the state before the transaction started.\n     * @type {Map<Number,Number>}\n     */\n    this.beforeState = getStateVector(doc.store);\n    /**\n     * Holds the state after the transaction.\n     * @type {Map<Number,Number>}\n     */\n    this.afterState = new Map();\n    /**\n     * All types that were directly modified (property added or child\n     * inserted/deleted). New types are not included in this Set.\n     * Maps from type to parentSubs (`item.parentSub = null` for YArray)\n     * @type {Map<AbstractType<YEvent<any>>,Set<String|null>>}\n     */\n    this.changed = new Map();\n    /**\n     * Stores the events for the types that observe also child elements.\n     * It is mainly used by `observeDeep`.\n     * @type {Map<AbstractType<YEvent<any>>,Array<YEvent<any>>>}\n     */\n    this.changedParentTypes = new Map();\n    /**\n     * @type {Array<AbstractStruct>}\n     */\n    this._mergeStructs = [];\n    /**\n     * @type {any}\n     */\n    this.origin = origin;\n    /**\n     * Stores meta information on the transaction\n     * @type {Map<any,any>}\n     */\n    this.meta = new Map();\n    /**\n     * Whether this change originates from this doc.\n     * @type {boolean}\n     */\n    this.local = local;\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsAdded = new Set();\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsRemoved = new Set();\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsLoaded = new Set();\n    /**\n     * @type {boolean}\n     */\n    this._needFormattingCleanup = false;\n  }\n}\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n * @return {boolean} Whether data was written.\n */\nconst writeUpdateMessageFromTransaction = (encoder, transaction) => {\n  if (transaction.deleteSet.clients.size === 0 && !map.any(transaction.afterState, (clock, client) => transaction.beforeState.get(client) !== clock)) {\n    return false\n  }\n  sortAndMergeDeleteSet(transaction.deleteSet);\n  writeStructsFromTransaction(encoder, transaction);\n  writeDeleteSet(encoder, transaction.deleteSet);\n  return true\n};\n\n/**\n * If `type.parent` was added in current transaction, `type` technically\n * did not change, it was just added and we should not fire events for `type`.\n *\n * @param {Transaction} transaction\n * @param {AbstractType<YEvent<any>>} type\n * @param {string|null} parentSub\n */\nconst addChangedTypeToTransaction = (transaction, type, parentSub) => {\n  const item = type._item;\n  if (item === null || (item.id.clock < (transaction.beforeState.get(item.id.client) || 0) && !item.deleted)) {\n    map.setIfUndefined(transaction.changed, type, set.create).add(parentSub);\n  }\n};\n\n/**\n * @param {Array<AbstractStruct>} structs\n * @param {number} pos\n * @return {number} # of merged structs\n */\nconst tryToMergeWithLefts = (structs, pos) => {\n  let right = structs[pos];\n  let left = structs[pos - 1];\n  let i = pos;\n  for (; i > 0; right = left, left = structs[--i - 1]) {\n    if (left.deleted === right.deleted && left.constructor === right.constructor) {\n      if (left.mergeWith(right)) {\n        if (right instanceof Item && right.parentSub !== null && /** @type {AbstractType<any>} */ (right.parent)._map.get(right.parentSub) === right) {\n          /** @type {AbstractType<any>} */ (right.parent)._map.set(right.parentSub, /** @type {Item} */ (left));\n        }\n        continue\n      }\n    }\n    break\n  }\n  const merged = pos - i;\n  if (merged) {\n    // remove all merged structs from the array\n    structs.splice(pos + 1 - merged, merged);\n  }\n  return merged\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\nconst tryGcDeleteSet = (ds, store, gcFilter) => {\n  for (const [client, deleteItems] of ds.clients.entries()) {\n    const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client));\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di];\n      const endDeleteItemClock = deleteItem.clock + deleteItem.len;\n      for (\n        let si = findIndexSS(structs, deleteItem.clock), struct = structs[si];\n        si < structs.length && struct.id.clock < endDeleteItemClock;\n        struct = structs[++si]\n      ) {\n        const struct = structs[si];\n        if (deleteItem.clock + deleteItem.len <= struct.id.clock) {\n          break\n        }\n        if (struct instanceof Item && struct.deleted && !struct.keep && gcFilter(struct)) {\n          struct.gc(store, false);\n        }\n      }\n    }\n  }\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n */\nconst tryMergeDeleteSet = (ds, store) => {\n  // try to merge deleted / gc'd items\n  // merge from right to left for better efficiency and so we don't miss any merge targets\n  ds.clients.forEach((deleteItems, client) => {\n    const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client));\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di];\n      // start with merging the item next to the last deleted item\n      const mostRightIndexToCheck = math.min(structs.length - 1, 1 + findIndexSS(structs, deleteItem.clock + deleteItem.len - 1));\n      for (\n        let si = mostRightIndexToCheck, struct = structs[si];\n        si > 0 && struct.id.clock >= deleteItem.clock;\n        struct = structs[si]\n      ) {\n        si -= 1 + tryToMergeWithLefts(structs, si);\n      }\n    }\n  });\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\nconst tryGc = (ds, store, gcFilter) => {\n  tryGcDeleteSet(ds, store, gcFilter);\n  tryMergeDeleteSet(ds, store);\n};\n\n/**\n * @param {Array<Transaction>} transactionCleanups\n * @param {number} i\n */\nconst cleanupTransactions = (transactionCleanups, i) => {\n  if (i < transactionCleanups.length) {\n    const transaction = transactionCleanups[i];\n    const doc = transaction.doc;\n    const store = doc.store;\n    const ds = transaction.deleteSet;\n    const mergeStructs = transaction._mergeStructs;\n    try {\n      sortAndMergeDeleteSet(ds);\n      transaction.afterState = getStateVector(transaction.doc.store);\n      doc.emit('beforeObserverCalls', [transaction, doc]);\n      /**\n       * An array of event callbacks.\n       *\n       * Each callback is called even if the other ones throw errors.\n       *\n       * @type {Array<function():void>}\n       */\n      const fs = [];\n      // observe events on changed types\n      transaction.changed.forEach((subs, itemtype) =>\n        fs.push(() => {\n          if (itemtype._item === null || !itemtype._item.deleted) {\n            itemtype._callObserver(transaction, subs);\n          }\n        })\n      );\n      fs.push(() => {\n        // deep observe events\n        transaction.changedParentTypes.forEach((events, type) => {\n          // We need to think about the possibility that the user transforms the\n          // Y.Doc in the event.\n          if (type._dEH.l.length > 0 && (type._item === null || !type._item.deleted)) {\n            events = events\n              .filter(event =>\n                event.target._item === null || !event.target._item.deleted\n              );\n            events\n              .forEach(event => {\n                event.currentTarget = type;\n                // path is relative to the current target\n                event._path = null;\n              });\n            // sort events by path length so that top-level events are fired first.\n            events\n              .sort((event1, event2) => event1.path.length - event2.path.length);\n            // We don't need to check for events.length\n            // because we know it has at least one element\n            callEventHandlerListeners(type._dEH, events, transaction);\n          }\n        });\n      });\n      fs.push(() => doc.emit('afterTransaction', [transaction, doc]));\n      callAll(fs, []);\n      if (transaction._needFormattingCleanup) {\n        cleanupYTextAfterTransaction(transaction);\n      }\n    } finally {\n      // Replace deleted items with ItemDeleted / GC.\n      // This is where content is actually remove from the Yjs Doc.\n      if (doc.gc) {\n        tryGcDeleteSet(ds, store, doc.gcFilter);\n      }\n      tryMergeDeleteSet(ds, store);\n\n      // on all affected store.clients props, try to merge\n      transaction.afterState.forEach((clock, client) => {\n        const beforeClock = transaction.beforeState.get(client) || 0;\n        if (beforeClock !== clock) {\n          const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client));\n          // we iterate from right to left so we can safely remove entries\n          const firstChangePos = math.max(findIndexSS(structs, beforeClock), 1);\n          for (let i = structs.length - 1; i >= firstChangePos;) {\n            i -= 1 + tryToMergeWithLefts(structs, i);\n          }\n        }\n      });\n      // try to merge mergeStructs\n      // @todo: it makes more sense to transform mergeStructs to a DS, sort it, and merge from right to left\n      //        but at the moment DS does not handle duplicates\n      for (let i = mergeStructs.length - 1; i >= 0; i--) {\n        const { client, clock } = mergeStructs[i].id;\n        const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client));\n        const replacedStructPos = findIndexSS(structs, clock);\n        if (replacedStructPos + 1 < structs.length) {\n          if (tryToMergeWithLefts(structs, replacedStructPos + 1) > 1) {\n            continue // no need to perform next check, both are already merged\n          }\n        }\n        if (replacedStructPos > 0) {\n          tryToMergeWithLefts(structs, replacedStructPos);\n        }\n      }\n      if (!transaction.local && transaction.afterState.get(doc.clientID) !== transaction.beforeState.get(doc.clientID)) {\n        logging.print(logging.ORANGE, logging.BOLD, '[yjs] ', logging.UNBOLD, logging.RED, 'Changed the client-id because another client seems to be using it.');\n        doc.clientID = generateNewClientId();\n      }\n      // @todo Merge all the transactions into one and provide send the data as a single update message\n      doc.emit('afterTransactionCleanup', [transaction, doc]);\n      if (doc._observers.has('update')) {\n        const encoder = new UpdateEncoderV1();\n        const hasContent = writeUpdateMessageFromTransaction(encoder, transaction);\n        if (hasContent) {\n          doc.emit('update', [encoder.toUint8Array(), transaction.origin, doc, transaction]);\n        }\n      }\n      if (doc._observers.has('updateV2')) {\n        const encoder = new UpdateEncoderV2();\n        const hasContent = writeUpdateMessageFromTransaction(encoder, transaction);\n        if (hasContent) {\n          doc.emit('updateV2', [encoder.toUint8Array(), transaction.origin, doc, transaction]);\n        }\n      }\n      const { subdocsAdded, subdocsLoaded, subdocsRemoved } = transaction;\n      if (subdocsAdded.size > 0 || subdocsRemoved.size > 0 || subdocsLoaded.size > 0) {\n        subdocsAdded.forEach(subdoc => {\n          subdoc.clientID = doc.clientID;\n          if (subdoc.collectionid == null) {\n            subdoc.collectionid = doc.collectionid;\n          }\n          doc.subdocs.add(subdoc);\n        });\n        subdocsRemoved.forEach(subdoc => doc.subdocs.delete(subdoc));\n        doc.emit('subdocs', [{ loaded: subdocsLoaded, added: subdocsAdded, removed: subdocsRemoved }, doc, transaction]);\n        subdocsRemoved.forEach(subdoc => subdoc.destroy());\n      }\n\n      if (transactionCleanups.length <= i + 1) {\n        doc._transactionCleanups = [];\n        doc.emit('afterAllTransactions', [doc, transactionCleanups]);\n      } else {\n        cleanupTransactions(transactionCleanups, i + 1);\n      }\n    }\n  }\n};\n\n/**\n * Implements the functionality of `y.transact(()=>{..})`\n *\n * @template T\n * @param {Doc} doc\n * @param {function(Transaction):T} f\n * @param {any} [origin=true]\n * @return {T}\n *\n * @function\n */\nconst transact = (doc, f, origin = null, local = true) => {\n  const transactionCleanups = doc._transactionCleanups;\n  let initialCall = false;\n  /**\n   * @type {any}\n   */\n  let result = null;\n  if (doc._transaction === null) {\n    initialCall = true;\n    doc._transaction = new Transaction(doc, origin, local);\n    transactionCleanups.push(doc._transaction);\n    if (transactionCleanups.length === 1) {\n      doc.emit('beforeAllTransactions', [doc]);\n    }\n    doc.emit('beforeTransaction', [doc._transaction, doc]);\n  }\n  try {\n    result = f(doc._transaction);\n  } finally {\n    if (initialCall) {\n      const finishCleanup = doc._transaction === transactionCleanups[0];\n      doc._transaction = null;\n      if (finishCleanup) {\n        // The first transaction ended, now process observer calls.\n        // Observer call may create new transactions for which we need to call the observers and do cleanup.\n        // We don't want to nest these calls, so we execute these calls one after\n        // another.\n        // Also we need to ensure that all cleanups are called, even if the\n        // observes throw errors.\n        // This file is full of hacky try {} finally {} blocks to ensure that an\n        // event can throw errors and also that the cleanup is called.\n        cleanupTransactions(transactionCleanups, 0);\n      }\n    }\n  }\n  return result\n};\n\nclass StackItem {\n  /**\n   * @param {DeleteSet} deletions\n   * @param {DeleteSet} insertions\n   */\n  constructor (deletions, insertions) {\n    this.insertions = insertions;\n    this.deletions = deletions;\n    /**\n     * Use this to save and restore metadata like selection range\n     */\n    this.meta = new Map();\n  }\n}\n/**\n * @param {Transaction} tr\n * @param {UndoManager} um\n * @param {StackItem} stackItem\n */\nconst clearUndoManagerStackItem = (tr, um, stackItem) => {\n  iterateDeletedStructs(tr, stackItem.deletions, item => {\n    if (item instanceof Item && um.scope.some(type => isParentOf(type, item))) {\n      keepItem(item, false);\n    }\n  });\n};\n\n/**\n * @param {UndoManager} undoManager\n * @param {Array<StackItem>} stack\n * @param {'undo'|'redo'} eventType\n * @return {StackItem?}\n */\nconst popStackItem = (undoManager, stack, eventType) => {\n  /**\n   * Keep a reference to the transaction so we can fire the event with the changedParentTypes\n   * @type {any}\n   */\n  let _tr = null;\n  const doc = undoManager.doc;\n  const scope = undoManager.scope;\n  transact(doc, transaction => {\n    while (stack.length > 0 && undoManager.currStackItem === null) {\n      const store = doc.store;\n      const stackItem = /** @type {StackItem} */ (stack.pop());\n      /**\n       * @type {Set<Item>}\n       */\n      const itemsToRedo = new Set();\n      /**\n       * @type {Array<Item>}\n       */\n      const itemsToDelete = [];\n      let performedChange = false;\n      iterateDeletedStructs(transaction, stackItem.insertions, struct => {\n        if (struct instanceof Item) {\n          if (struct.redone !== null) {\n            let { item, diff } = followRedone(store, struct.id);\n            if (diff > 0) {\n              item = getItemCleanStart(transaction, createID(item.id.client, item.id.clock + diff));\n            }\n            struct = item;\n          }\n          if (!struct.deleted && scope.some(type => isParentOf(type, /** @type {Item} */ (struct)))) {\n            itemsToDelete.push(struct);\n          }\n        }\n      });\n      iterateDeletedStructs(transaction, stackItem.deletions, struct => {\n        if (\n          struct instanceof Item &&\n          scope.some(type => isParentOf(type, struct)) &&\n          // Never redo structs in stackItem.insertions because they were created and deleted in the same capture interval.\n          !isDeleted(stackItem.insertions, struct.id)\n        ) {\n          itemsToRedo.add(struct);\n        }\n      });\n      itemsToRedo.forEach(struct => {\n        performedChange = redoItem(transaction, struct, itemsToRedo, stackItem.insertions, undoManager.ignoreRemoteMapChanges, undoManager) !== null || performedChange;\n      });\n      // We want to delete in reverse order so that children are deleted before\n      // parents, so we have more information available when items are filtered.\n      for (let i = itemsToDelete.length - 1; i >= 0; i--) {\n        const item = itemsToDelete[i];\n        if (undoManager.deleteFilter(item)) {\n          item.delete(transaction);\n          performedChange = true;\n        }\n      }\n      undoManager.currStackItem = performedChange ? stackItem : null;\n    }\n    transaction.changed.forEach((subProps, type) => {\n      // destroy search marker if necessary\n      if (subProps.has(null) && type._searchMarker) {\n        type._searchMarker.length = 0;\n      }\n    });\n    _tr = transaction;\n  }, undoManager);\n  const res = undoManager.currStackItem;\n  if (res != null) {\n    const changedParentTypes = _tr.changedParentTypes;\n    undoManager.emit('stack-item-popped', [{ stackItem: res, type: eventType, changedParentTypes, origin: undoManager }, undoManager]);\n    undoManager.currStackItem = null;\n  }\n  return res\n};\n\n/**\n * @typedef {Object} UndoManagerOptions\n * @property {number} [UndoManagerOptions.captureTimeout=500]\n * @property {function(Transaction):boolean} [UndoManagerOptions.captureTransaction] Do not capture changes of a Transaction if result false.\n * @property {function(Item):boolean} [UndoManagerOptions.deleteFilter=()=>true] Sometimes\n * it is necessary to filter what an Undo/Redo operation can delete. If this\n * filter returns false, the type/item won't be deleted even it is in the\n * undo/redo scope.\n * @property {Set<any>} [UndoManagerOptions.trackedOrigins=new Set([null])]\n * @property {boolean} [ignoreRemoteMapChanges] Experimental. By default, the UndoManager will never overwrite remote changes. Enable this property to enable overwriting remote changes on key-value changes (Y.Map, properties on Y.Xml, etc..).\n * @property {Doc} [doc] The document that this UndoManager operates on. Only needed if typeScope is empty.\n */\n\n/**\n * @typedef {Object} StackItemEvent\n * @property {StackItem} StackItemEvent.stackItem\n * @property {any} StackItemEvent.origin\n * @property {'undo'|'redo'} StackItemEvent.type\n * @property {Map<AbstractType<YEvent<any>>,Array<YEvent<any>>>} StackItemEvent.changedParentTypes\n */\n\n/**\n * Fires 'stack-item-added' event when a stack item was added to either the undo- or\n * the redo-stack. You may store additional stack information via the\n * metadata property on `event.stackItem.meta` (it is a `Map` of metadata properties).\n * Fires 'stack-item-popped' event when a stack item was popped from either the\n * undo- or the redo-stack. You may restore the saved stack information from `event.stackItem.meta`.\n *\n * @extends {ObservableV2<{'stack-item-added':function(StackItemEvent, UndoManager):void, 'stack-item-popped': function(StackItemEvent, UndoManager):void, 'stack-cleared': function({ undoStackCleared: boolean, redoStackCleared: boolean }):void, 'stack-item-updated': function(StackItemEvent, UndoManager):void }>}\n */\nclass UndoManager extends ObservableV2 {\n  /**\n   * @param {AbstractType<any>|Array<AbstractType<any>>} typeScope Accepts either a single type, or an array of types\n   * @param {UndoManagerOptions} options\n   */\n  constructor (typeScope, {\n    captureTimeout = 500,\n    captureTransaction = _tr => true,\n    deleteFilter = () => true,\n    trackedOrigins = new Set([null]),\n    ignoreRemoteMapChanges = false,\n    doc = /** @type {Doc} */ (array.isArray(typeScope) ? typeScope[0].doc : typeScope.doc)\n  } = {}) {\n    super();\n    /**\n     * @type {Array<AbstractType<any>>}\n     */\n    this.scope = [];\n    this.doc = doc;\n    this.addToScope(typeScope);\n    this.deleteFilter = deleteFilter;\n    trackedOrigins.add(this);\n    this.trackedOrigins = trackedOrigins;\n    this.captureTransaction = captureTransaction;\n    /**\n     * @type {Array<StackItem>}\n     */\n    this.undoStack = [];\n    /**\n     * @type {Array<StackItem>}\n     */\n    this.redoStack = [];\n    /**\n     * Whether the client is currently undoing (calling UndoManager.undo)\n     *\n     * @type {boolean}\n     */\n    this.undoing = false;\n    this.redoing = false;\n    /**\n     * The currently popped stack item if UndoManager.undoing or UndoManager.redoing\n     *\n     * @type {StackItem|null}\n     */\n    this.currStackItem = null;\n    this.lastChange = 0;\n    this.ignoreRemoteMapChanges = ignoreRemoteMapChanges;\n    this.captureTimeout = captureTimeout;\n    /**\n     * @param {Transaction} transaction\n     */\n    this.afterTransactionHandler = transaction => {\n      // Only track certain transactions\n      if (\n        !this.captureTransaction(transaction) ||\n        !this.scope.some(type => transaction.changedParentTypes.has(type)) ||\n        (!this.trackedOrigins.has(transaction.origin) && (!transaction.origin || !this.trackedOrigins.has(transaction.origin.constructor)))\n      ) {\n        return\n      }\n      const undoing = this.undoing;\n      const redoing = this.redoing;\n      const stack = undoing ? this.redoStack : this.undoStack;\n      if (undoing) {\n        this.stopCapturing(); // next undo should not be appended to last stack item\n      } else if (!redoing) {\n        // neither undoing nor redoing: delete redoStack\n        this.clear(false, true);\n      }\n      const insertions = new DeleteSet();\n      transaction.afterState.forEach((endClock, client) => {\n        const startClock = transaction.beforeState.get(client) || 0;\n        const len = endClock - startClock;\n        if (len > 0) {\n          addToDeleteSet(insertions, client, startClock, len);\n        }\n      });\n      const now = time.getUnixTime();\n      let didAdd = false;\n      if (this.lastChange > 0 && now - this.lastChange < this.captureTimeout && stack.length > 0 && !undoing && !redoing) {\n        // append change to last stack op\n        const lastOp = stack[stack.length - 1];\n        lastOp.deletions = mergeDeleteSets([lastOp.deletions, transaction.deleteSet]);\n        lastOp.insertions = mergeDeleteSets([lastOp.insertions, insertions]);\n      } else {\n        // create a new stack op\n        stack.push(new StackItem(transaction.deleteSet, insertions));\n        didAdd = true;\n      }\n      if (!undoing && !redoing) {\n        this.lastChange = now;\n      }\n      // make sure that deleted structs are not gc'd\n      iterateDeletedStructs(transaction, transaction.deleteSet, /** @param {Item|GC} item */ item => {\n        if (item instanceof Item && this.scope.some(type => isParentOf(type, item))) {\n          keepItem(item, true);\n        }\n      });\n      /**\n       * @type {[StackItemEvent, UndoManager]}\n       */\n      const changeEvent = [{ stackItem: stack[stack.length - 1], origin: transaction.origin, type: undoing ? 'redo' : 'undo', changedParentTypes: transaction.changedParentTypes }, this];\n      if (didAdd) {\n        this.emit('stack-item-added', changeEvent);\n      } else {\n        this.emit('stack-item-updated', changeEvent);\n      }\n    };\n    this.doc.on('afterTransaction', this.afterTransactionHandler);\n    this.doc.on('destroy', () => {\n      this.destroy();\n    });\n  }\n\n  /**\n   * @param {Array<AbstractType<any>> | AbstractType<any>} ytypes\n   */\n  addToScope (ytypes) {\n    ytypes = array.isArray(ytypes) ? ytypes : [ytypes];\n    ytypes.forEach(ytype => {\n      if (this.scope.every(yt => yt !== ytype)) {\n        if (ytype.doc !== this.doc) logging.warn('[yjs#509] Not same Y.Doc'); // use MultiDocUndoManager instead. also see https://github.com/yjs/yjs/issues/509\n        this.scope.push(ytype);\n      }\n    });\n  }\n\n  /**\n   * @param {any} origin\n   */\n  addTrackedOrigin (origin) {\n    this.trackedOrigins.add(origin);\n  }\n\n  /**\n   * @param {any} origin\n   */\n  removeTrackedOrigin (origin) {\n    this.trackedOrigins.delete(origin);\n  }\n\n  clear (clearUndoStack = true, clearRedoStack = true) {\n    if ((clearUndoStack && this.canUndo()) || (clearRedoStack && this.canRedo())) {\n      this.doc.transact(tr => {\n        if (clearUndoStack) {\n          this.undoStack.forEach(item => clearUndoManagerStackItem(tr, this, item));\n          this.undoStack = [];\n        }\n        if (clearRedoStack) {\n          this.redoStack.forEach(item => clearUndoManagerStackItem(tr, this, item));\n          this.redoStack = [];\n        }\n        this.emit('stack-cleared', [{ undoStackCleared: clearUndoStack, redoStackCleared: clearRedoStack }]);\n      });\n    }\n  }\n\n  /**\n   * UndoManager merges Undo-StackItem if they are created within time-gap\n   * smaller than `options.captureTimeout`. Call `um.stopCapturing()` so that the next\n   * StackItem won't be merged.\n   *\n   *\n   * @example\n   *     // without stopCapturing\n   *     ytext.insert(0, 'a')\n   *     ytext.insert(1, 'b')\n   *     um.undo()\n   *     ytext.toString() // => '' (note that 'ab' was removed)\n   *     // with stopCapturing\n   *     ytext.insert(0, 'a')\n   *     um.stopCapturing()\n   *     ytext.insert(0, 'b')\n   *     um.undo()\n   *     ytext.toString() // => 'a' (note that only 'b' was removed)\n   *\n   */\n  stopCapturing () {\n    this.lastChange = 0;\n  }\n\n  /**\n   * Undo last changes on type.\n   *\n   * @return {StackItem?} Returns StackItem if a change was applied\n   */\n  undo () {\n    this.undoing = true;\n    let res;\n    try {\n      res = popStackItem(this, this.undoStack, 'undo');\n    } finally {\n      this.undoing = false;\n    }\n    return res\n  }\n\n  /**\n   * Redo last undo operation.\n   *\n   * @return {StackItem?} Returns StackItem if a change was applied\n   */\n  redo () {\n    this.redoing = true;\n    let res;\n    try {\n      res = popStackItem(this, this.redoStack, 'redo');\n    } finally {\n      this.redoing = false;\n    }\n    return res\n  }\n\n  /**\n   * Are undo steps available?\n   *\n   * @return {boolean} `true` if undo is possible\n   */\n  canUndo () {\n    return this.undoStack.length > 0\n  }\n\n  /**\n   * Are redo steps available?\n   *\n   * @return {boolean} `true` if redo is possible\n   */\n  canRedo () {\n    return this.redoStack.length > 0\n  }\n\n  destroy () {\n    this.trackedOrigins.delete(this);\n    this.doc.off('afterTransaction', this.afterTransactionHandler);\n    super.destroy();\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n */\nfunction * lazyStructReaderGenerator (decoder) {\n  const numOfStateUpdates = decoding.readVarUint(decoder.restDecoder);\n  for (let i = 0; i < numOfStateUpdates; i++) {\n    const numberOfStructs = decoding.readVarUint(decoder.restDecoder);\n    const client = decoder.readClient();\n    let clock = decoding.readVarUint(decoder.restDecoder);\n    for (let i = 0; i < numberOfStructs; i++) {\n      const info = decoder.readInfo();\n      // @todo use switch instead of ifs\n      if (info === 10) {\n        const len = decoding.readVarUint(decoder.restDecoder);\n        yield new Skip(createID(client, clock), len);\n        clock += len;\n      } else if ((binary.BITS5 & info) !== 0) {\n        const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0;\n        // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n        // and we read the next string as parentYKey.\n        // It indicates how we store/retrieve parent from `y.share`\n        // @type {string|null}\n        const struct = new Item(\n          createID(client, clock),\n          null, // left\n          (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null, // origin\n          null, // right\n          (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null, // right origin\n          // @ts-ignore Force writing a string here.\n          cantCopyParentInfo ? (decoder.readParentInfo() ? decoder.readString() : decoder.readLeftID()) : null, // parent\n          cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n          readItemContent(decoder, info) // item content\n        );\n        yield struct;\n        clock += struct.length;\n      } else {\n        const len = decoder.readLen();\n        yield new GC(createID(client, clock), len);\n        clock += len;\n      }\n    }\n  }\n}\n\nclass LazyStructReader {\n  /**\n   * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n   * @param {boolean} filterSkips\n   */\n  constructor (decoder, filterSkips) {\n    this.gen = lazyStructReaderGenerator(decoder);\n    /**\n     * @type {null | Item | Skip | GC}\n     */\n    this.curr = null;\n    this.done = false;\n    this.filterSkips = filterSkips;\n    this.next();\n  }\n\n  /**\n   * @return {Item | GC | Skip |null}\n   */\n  next () {\n    // ignore \"Skip\" structs\n    do {\n      this.curr = this.gen.next().value || null;\n    } while (this.filterSkips && this.curr !== null && this.curr.constructor === Skip)\n    return this.curr\n  }\n}\n\n/**\n * @param {Uint8Array} update\n *\n */\nconst logUpdate = update => logUpdateV2(update, UpdateDecoderV1);\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} [YDecoder]\n *\n */\nconst logUpdateV2 = (update, YDecoder = UpdateDecoderV2) => {\n  const structs = [];\n  const updateDecoder = new YDecoder(decoding.createDecoder(update));\n  const lazyDecoder = new LazyStructReader(updateDecoder, false);\n  for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {\n    structs.push(curr);\n  }\n  logging.print('Structs: ', structs);\n  const ds = readDeleteSet(updateDecoder);\n  logging.print('DeleteSet: ', ds);\n};\n\n/**\n * @param {Uint8Array} update\n *\n */\nconst decodeUpdate = (update) => decodeUpdateV2(update, UpdateDecoderV1);\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} [YDecoder]\n *\n */\nconst decodeUpdateV2 = (update, YDecoder = UpdateDecoderV2) => {\n  const structs = [];\n  const updateDecoder = new YDecoder(decoding.createDecoder(update));\n  const lazyDecoder = new LazyStructReader(updateDecoder, false);\n  for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {\n    structs.push(curr);\n  }\n  return {\n    structs,\n    ds: readDeleteSet(updateDecoder)\n  }\n};\n\nclass LazyStructWriter {\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  constructor (encoder) {\n    this.currClient = 0;\n    this.startClock = 0;\n    this.written = 0;\n    this.encoder = encoder;\n    /**\n     * We want to write operations lazily, but also we need to know beforehand how many operations we want to write for each client.\n     *\n     * This kind of meta-information (#clients, #structs-per-client-written) is written to the restEncoder.\n     *\n     * We fragment the restEncoder and store a slice of it per-client until we know how many clients there are.\n     * When we flush (toUint8Array) we write the restEncoder using the fragments and the meta-information.\n     *\n     * @type {Array<{ written: number, restEncoder: Uint8Array }>}\n     */\n    this.clientStructs = [];\n  }\n}\n\n/**\n * @param {Array<Uint8Array>} updates\n * @return {Uint8Array}\n */\nconst mergeUpdates = updates => mergeUpdatesV2(updates, UpdateDecoderV1, UpdateEncoderV1);\n\n/**\n * @param {Uint8Array} update\n * @param {typeof DSEncoderV1 | typeof DSEncoderV2} YEncoder\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} YDecoder\n * @return {Uint8Array}\n */\nconst encodeStateVectorFromUpdateV2 = (update, YEncoder = DSEncoderV2, YDecoder = UpdateDecoderV2) => {\n  const encoder = new YEncoder();\n  const updateDecoder = new LazyStructReader(new YDecoder(decoding.createDecoder(update)), false);\n  let curr = updateDecoder.curr;\n  if (curr !== null) {\n    let size = 0;\n    let currClient = curr.id.client;\n    let stopCounting = curr.id.clock !== 0; // must start at 0\n    let currClock = stopCounting ? 0 : curr.id.clock + curr.length;\n    for (; curr !== null; curr = updateDecoder.next()) {\n      if (currClient !== curr.id.client) {\n        if (currClock !== 0) {\n          size++;\n          // We found a new client\n          // write what we have to the encoder\n          encoding.writeVarUint(encoder.restEncoder, currClient);\n          encoding.writeVarUint(encoder.restEncoder, currClock);\n        }\n        currClient = curr.id.client;\n        currClock = 0;\n        stopCounting = curr.id.clock !== 0;\n      }\n      // we ignore skips\n      if (curr.constructor === Skip) {\n        stopCounting = true;\n      }\n      if (!stopCounting) {\n        currClock = curr.id.clock + curr.length;\n      }\n    }\n    // write what we have\n    if (currClock !== 0) {\n      size++;\n      encoding.writeVarUint(encoder.restEncoder, currClient);\n      encoding.writeVarUint(encoder.restEncoder, currClock);\n    }\n    // prepend the size of the state vector\n    const enc = encoding.createEncoder();\n    encoding.writeVarUint(enc, size);\n    encoding.writeBinaryEncoder(enc, encoder.restEncoder);\n    encoder.restEncoder = enc;\n    return encoder.toUint8Array()\n  } else {\n    encoding.writeVarUint(encoder.restEncoder, 0);\n    return encoder.toUint8Array()\n  }\n};\n\n/**\n * @param {Uint8Array} update\n * @return {Uint8Array}\n */\nconst encodeStateVectorFromUpdate = update => encodeStateVectorFromUpdateV2(update, DSEncoderV1, UpdateDecoderV1);\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} YDecoder\n * @return {{ from: Map<number,number>, to: Map<number,number> }}\n */\nconst parseUpdateMetaV2 = (update, YDecoder = UpdateDecoderV2) => {\n  /**\n   * @type {Map<number, number>}\n   */\n  const from = new Map();\n  /**\n   * @type {Map<number, number>}\n   */\n  const to = new Map();\n  const updateDecoder = new LazyStructReader(new YDecoder(decoding.createDecoder(update)), false);\n  let curr = updateDecoder.curr;\n  if (curr !== null) {\n    let currClient = curr.id.client;\n    let currClock = curr.id.clock;\n    // write the beginning to `from`\n    from.set(currClient, currClock);\n    for (; curr !== null; curr = updateDecoder.next()) {\n      if (currClient !== curr.id.client) {\n        // We found a new client\n        // write the end to `to`\n        to.set(currClient, currClock);\n        // write the beginning to `from`\n        from.set(curr.id.client, curr.id.clock);\n        // update currClient\n        currClient = curr.id.client;\n      }\n      currClock = curr.id.clock + curr.length;\n    }\n    // write the end to `to`\n    to.set(currClient, currClock);\n  }\n  return { from, to }\n};\n\n/**\n * @param {Uint8Array} update\n * @return {{ from: Map<number,number>, to: Map<number,number> }}\n */\nconst parseUpdateMeta = update => parseUpdateMetaV2(update, UpdateDecoderV1);\n\n/**\n * This method is intended to slice any kind of struct and retrieve the right part.\n * It does not handle side-effects, so it should only be used by the lazy-encoder.\n *\n * @param {Item | GC | Skip} left\n * @param {number} diff\n * @return {Item | GC}\n */\nconst sliceStruct = (left, diff) => {\n  if (left.constructor === GC) {\n    const { client, clock } = left.id;\n    return new GC(createID(client, clock + diff), left.length - diff)\n  } else if (left.constructor === Skip) {\n    const { client, clock } = left.id;\n    return new Skip(createID(client, clock + diff), left.length - diff)\n  } else {\n    const leftItem = /** @type {Item} */ (left);\n    const { client, clock } = leftItem.id;\n    return new Item(\n      createID(client, clock + diff),\n      null,\n      createID(client, clock + diff - 1),\n      null,\n      leftItem.rightOrigin,\n      leftItem.parent,\n      leftItem.parentSub,\n      leftItem.content.splice(diff)\n    )\n  }\n};\n\n/**\n *\n * This function works similarly to `readUpdateV2`.\n *\n * @param {Array<Uint8Array>} updates\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n * @param {typeof UpdateEncoderV1 | typeof UpdateEncoderV2} [YEncoder]\n * @return {Uint8Array}\n */\nconst mergeUpdatesV2 = (updates, YDecoder = UpdateDecoderV2, YEncoder = UpdateEncoderV2) => {\n  if (updates.length === 1) {\n    return updates[0]\n  }\n  const updateDecoders = updates.map(update => new YDecoder(decoding.createDecoder(update)));\n  let lazyStructDecoders = updateDecoders.map(decoder => new LazyStructReader(decoder, true));\n\n  /**\n   * @todo we don't need offset because we always slice before\n   * @type {null | { struct: Item | GC | Skip, offset: number }}\n   */\n  let currWrite = null;\n\n  const updateEncoder = new YEncoder();\n  // write structs lazily\n  const lazyStructEncoder = new LazyStructWriter(updateEncoder);\n\n  // Note: We need to ensure that all lazyStructDecoders are fully consumed\n  // Note: Should merge document updates whenever possible - even from different updates\n  // Note: Should handle that some operations cannot be applied yet ()\n\n  while (true) {\n    // Write higher clients first ⇒ sort by clientID & clock and remove decoders without content\n    lazyStructDecoders = lazyStructDecoders.filter(dec => dec.curr !== null);\n    lazyStructDecoders.sort(\n      /** @type {function(any,any):number} */ (dec1, dec2) => {\n        if (dec1.curr.id.client === dec2.curr.id.client) {\n          const clockDiff = dec1.curr.id.clock - dec2.curr.id.clock;\n          if (clockDiff === 0) {\n            // @todo remove references to skip since the structDecoders must filter Skips.\n            return dec1.curr.constructor === dec2.curr.constructor\n              ? 0\n              : dec1.curr.constructor === Skip ? 1 : -1 // we are filtering skips anyway.\n          } else {\n            return clockDiff\n          }\n        } else {\n          return dec2.curr.id.client - dec1.curr.id.client\n        }\n      }\n    );\n    if (lazyStructDecoders.length === 0) {\n      break\n    }\n    const currDecoder = lazyStructDecoders[0];\n    // write from currDecoder until the next operation is from another client or if filler-struct\n    // then we need to reorder the decoders and find the next operation to write\n    const firstClient = /** @type {Item | GC} */ (currDecoder.curr).id.client;\n\n    if (currWrite !== null) {\n      let curr = /** @type {Item | GC | null} */ (currDecoder.curr);\n      let iterated = false;\n\n      // iterate until we find something that we haven't written already\n      // remember: first the high client-ids are written\n      while (curr !== null && curr.id.clock + curr.length <= currWrite.struct.id.clock + currWrite.struct.length && curr.id.client >= currWrite.struct.id.client) {\n        curr = currDecoder.next();\n        iterated = true;\n      }\n      if (\n        curr === null || // current decoder is empty\n        curr.id.client !== firstClient || // check whether there is another decoder that has has updates from `firstClient`\n        (iterated && curr.id.clock > currWrite.struct.id.clock + currWrite.struct.length) // the above while loop was used and we are potentially missing updates\n      ) {\n        continue\n      }\n\n      if (firstClient !== currWrite.struct.id.client) {\n        writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n        currWrite = { struct: curr, offset: 0 };\n        currDecoder.next();\n      } else {\n        if (currWrite.struct.id.clock + currWrite.struct.length < curr.id.clock) {\n          // @todo write currStruct & set currStruct = Skip(clock = currStruct.id.clock + currStruct.length, length = curr.id.clock - self.clock)\n          if (currWrite.struct.constructor === Skip) {\n            // extend existing skip\n            currWrite.struct.length = curr.id.clock + curr.length - currWrite.struct.id.clock;\n          } else {\n            writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n            const diff = curr.id.clock - currWrite.struct.id.clock - currWrite.struct.length;\n            /**\n             * @type {Skip}\n             */\n            const struct = new Skip(createID(firstClient, currWrite.struct.id.clock + currWrite.struct.length), diff);\n            currWrite = { struct, offset: 0 };\n          }\n        } else { // if (currWrite.struct.id.clock + currWrite.struct.length >= curr.id.clock) {\n          const diff = currWrite.struct.id.clock + currWrite.struct.length - curr.id.clock;\n          if (diff > 0) {\n            if (currWrite.struct.constructor === Skip) {\n              // prefer to slice Skip because the other struct might contain more information\n              currWrite.struct.length -= diff;\n            } else {\n              curr = sliceStruct(curr, diff);\n            }\n          }\n          if (!currWrite.struct.mergeWith(/** @type {any} */ (curr))) {\n            writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n            currWrite = { struct: curr, offset: 0 };\n            currDecoder.next();\n          }\n        }\n      }\n    } else {\n      currWrite = { struct: /** @type {Item | GC} */ (currDecoder.curr), offset: 0 };\n      currDecoder.next();\n    }\n    for (\n      let next = currDecoder.curr;\n      next !== null && next.id.client === firstClient && next.id.clock === currWrite.struct.id.clock + currWrite.struct.length && next.constructor !== Skip;\n      next = currDecoder.next()\n    ) {\n      writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n      currWrite = { struct: next, offset: 0 };\n    }\n  }\n  if (currWrite !== null) {\n    writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n    currWrite = null;\n  }\n  finishLazyStructWriting(lazyStructEncoder);\n\n  const dss = updateDecoders.map(decoder => readDeleteSet(decoder));\n  const ds = mergeDeleteSets(dss);\n  writeDeleteSet(updateEncoder, ds);\n  return updateEncoder.toUint8Array()\n};\n\n/**\n * @param {Uint8Array} update\n * @param {Uint8Array} sv\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n * @param {typeof UpdateEncoderV1 | typeof UpdateEncoderV2} [YEncoder]\n */\nconst diffUpdateV2 = (update, sv, YDecoder = UpdateDecoderV2, YEncoder = UpdateEncoderV2) => {\n  const state = decodeStateVector(sv);\n  const encoder = new YEncoder();\n  const lazyStructWriter = new LazyStructWriter(encoder);\n  const decoder = new YDecoder(decoding.createDecoder(update));\n  const reader = new LazyStructReader(decoder, false);\n  while (reader.curr) {\n    const curr = reader.curr;\n    const currClient = curr.id.client;\n    const svClock = state.get(currClient) || 0;\n    if (reader.curr.constructor === Skip) {\n      // the first written struct shouldn't be a skip\n      reader.next();\n      continue\n    }\n    if (curr.id.clock + curr.length > svClock) {\n      writeStructToLazyStructWriter(lazyStructWriter, curr, math.max(svClock - curr.id.clock, 0));\n      reader.next();\n      while (reader.curr && reader.curr.id.client === currClient) {\n        writeStructToLazyStructWriter(lazyStructWriter, reader.curr, 0);\n        reader.next();\n      }\n    } else {\n      // read until something new comes up\n      while (reader.curr && reader.curr.id.client === currClient && reader.curr.id.clock + reader.curr.length <= svClock) {\n        reader.next();\n      }\n    }\n  }\n  finishLazyStructWriting(lazyStructWriter);\n  // write ds\n  const ds = readDeleteSet(decoder);\n  writeDeleteSet(encoder, ds);\n  return encoder.toUint8Array()\n};\n\n/**\n * @param {Uint8Array} update\n * @param {Uint8Array} sv\n */\nconst diffUpdate = (update, sv) => diffUpdateV2(update, sv, UpdateDecoderV1, UpdateEncoderV1);\n\n/**\n * @param {LazyStructWriter} lazyWriter\n */\nconst flushLazyStructWriter = lazyWriter => {\n  if (lazyWriter.written > 0) {\n    lazyWriter.clientStructs.push({ written: lazyWriter.written, restEncoder: encoding.toUint8Array(lazyWriter.encoder.restEncoder) });\n    lazyWriter.encoder.restEncoder = encoding.createEncoder();\n    lazyWriter.written = 0;\n  }\n};\n\n/**\n * @param {LazyStructWriter} lazyWriter\n * @param {Item | GC} struct\n * @param {number} offset\n */\nconst writeStructToLazyStructWriter = (lazyWriter, struct, offset) => {\n  // flush curr if we start another client\n  if (lazyWriter.written > 0 && lazyWriter.currClient !== struct.id.client) {\n    flushLazyStructWriter(lazyWriter);\n  }\n  if (lazyWriter.written === 0) {\n    lazyWriter.currClient = struct.id.client;\n    // write next client\n    lazyWriter.encoder.writeClient(struct.id.client);\n    // write startClock\n    encoding.writeVarUint(lazyWriter.encoder.restEncoder, struct.id.clock + offset);\n  }\n  struct.write(lazyWriter.encoder, offset);\n  lazyWriter.written++;\n};\n/**\n * Call this function when we collected all parts and want to\n * put all the parts together. After calling this method,\n * you can continue using the UpdateEncoder.\n *\n * @param {LazyStructWriter} lazyWriter\n */\nconst finishLazyStructWriting = (lazyWriter) => {\n  flushLazyStructWriter(lazyWriter);\n\n  // this is a fresh encoder because we called flushCurr\n  const restEncoder = lazyWriter.encoder.restEncoder;\n\n  /**\n   * Now we put all the fragments together.\n   * This works similarly to `writeClientsStructs`\n   */\n\n  // write # states that were updated - i.e. the clients\n  encoding.writeVarUint(restEncoder, lazyWriter.clientStructs.length);\n\n  for (let i = 0; i < lazyWriter.clientStructs.length; i++) {\n    const partStructs = lazyWriter.clientStructs[i];\n    /**\n     * Works similarly to `writeStructs`\n     */\n    // write # encoded structs\n    encoding.writeVarUint(restEncoder, partStructs.written);\n    // write the rest of the fragment\n    encoding.writeUint8Array(restEncoder, partStructs.restEncoder);\n  }\n};\n\n/**\n * @param {Uint8Array} update\n * @param {function(Item|GC|Skip):Item|GC|Skip} blockTransformer\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} YDecoder\n * @param {typeof UpdateEncoderV2 | typeof UpdateEncoderV1 } YEncoder\n */\nconst convertUpdateFormat = (update, blockTransformer, YDecoder, YEncoder) => {\n  const updateDecoder = new YDecoder(decoding.createDecoder(update));\n  const lazyDecoder = new LazyStructReader(updateDecoder, false);\n  const updateEncoder = new YEncoder();\n  const lazyWriter = new LazyStructWriter(updateEncoder);\n  for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {\n    writeStructToLazyStructWriter(lazyWriter, blockTransformer(curr), 0);\n  }\n  finishLazyStructWriting(lazyWriter);\n  const ds = readDeleteSet(updateDecoder);\n  writeDeleteSet(updateEncoder, ds);\n  return updateEncoder.toUint8Array()\n};\n\n/**\n * @typedef {Object} ObfuscatorOptions\n * @property {boolean} [ObfuscatorOptions.formatting=true]\n * @property {boolean} [ObfuscatorOptions.subdocs=true]\n * @property {boolean} [ObfuscatorOptions.yxml=true] Whether to obfuscate nodeName / hookName\n */\n\n/**\n * @param {ObfuscatorOptions} obfuscator\n */\nconst createObfuscator = ({ formatting = true, subdocs = true, yxml = true } = {}) => {\n  let i = 0;\n  const mapKeyCache = map.create();\n  const nodeNameCache = map.create();\n  const formattingKeyCache = map.create();\n  const formattingValueCache = map.create();\n  formattingValueCache.set(null, null); // end of a formatting range should always be the end of a formatting range\n  /**\n   * @param {Item|GC|Skip} block\n   * @return {Item|GC|Skip}\n   */\n  return block => {\n    switch (block.constructor) {\n      case GC:\n      case Skip:\n        return block\n      case Item: {\n        const item = /** @type {Item} */ (block);\n        const content = item.content;\n        switch (content.constructor) {\n          case ContentDeleted:\n            break\n          case ContentType: {\n            if (yxml) {\n              const type = /** @type {ContentType} */ (content).type;\n              if (type instanceof YXmlElement) {\n                type.nodeName = map.setIfUndefined(nodeNameCache, type.nodeName, () => 'node-' + i);\n              }\n              if (type instanceof YXmlHook) {\n                type.hookName = map.setIfUndefined(nodeNameCache, type.hookName, () => 'hook-' + i);\n              }\n            }\n            break\n          }\n          case ContentAny: {\n            const c = /** @type {ContentAny} */ (content);\n            c.arr = c.arr.map(() => i);\n            break\n          }\n          case ContentBinary: {\n            const c = /** @type {ContentBinary} */ (content);\n            c.content = new Uint8Array([i]);\n            break\n          }\n          case ContentDoc: {\n            const c = /** @type {ContentDoc} */ (content);\n            if (subdocs) {\n              c.opts = {};\n              c.doc.guid = i + '';\n            }\n            break\n          }\n          case ContentEmbed: {\n            const c = /** @type {ContentEmbed} */ (content);\n            c.embed = {};\n            break\n          }\n          case ContentFormat: {\n            const c = /** @type {ContentFormat} */ (content);\n            if (formatting) {\n              c.key = map.setIfUndefined(formattingKeyCache, c.key, () => i + '');\n              c.value = map.setIfUndefined(formattingValueCache, c.value, () => ({ i }));\n            }\n            break\n          }\n          case ContentJSON: {\n            const c = /** @type {ContentJSON} */ (content);\n            c.arr = c.arr.map(() => i);\n            break\n          }\n          case ContentString: {\n            const c = /** @type {ContentString} */ (content);\n            c.str = string.repeat((i % 10) + '', c.str.length);\n            break\n          }\n          default:\n            // unknown content type\n            error.unexpectedCase();\n        }\n        if (item.parentSub) {\n          item.parentSub = map.setIfUndefined(mapKeyCache, item.parentSub, () => i + '');\n        }\n        i++;\n        return block\n      }\n      default:\n        // unknown block-type\n        error.unexpectedCase();\n    }\n  }\n};\n\n/**\n * This function obfuscates the content of a Yjs update. This is useful to share\n * buggy Yjs documents while significantly limiting the possibility that a\n * developer can on the user. Note that it might still be possible to deduce\n * some information by analyzing the \"structure\" of the document or by analyzing\n * the typing behavior using the CRDT-related metadata that is still kept fully\n * intact.\n *\n * @param {Uint8Array} update\n * @param {ObfuscatorOptions} [opts]\n */\nconst obfuscateUpdate = (update, opts) => convertUpdateFormat(update, createObfuscator(opts), UpdateDecoderV1, UpdateEncoderV1);\n\n/**\n * @param {Uint8Array} update\n * @param {ObfuscatorOptions} [opts]\n */\nconst obfuscateUpdateV2 = (update, opts) => convertUpdateFormat(update, createObfuscator(opts), UpdateDecoderV2, UpdateEncoderV2);\n\n/**\n * @param {Uint8Array} update\n */\nconst convertUpdateFormatV1ToV2 = update => convertUpdateFormat(update, f.id, UpdateDecoderV1, UpdateEncoderV2);\n\n/**\n * @param {Uint8Array} update\n */\nconst convertUpdateFormatV2ToV1 = update => convertUpdateFormat(update, f.id, UpdateDecoderV2, UpdateEncoderV1);\n\nconst errorComputeChanges = 'You must not compute changes after the event-handler fired.';\n\n/**\n * @template {AbstractType<any>} T\n * YEvent describes the changes on a YType.\n */\nclass YEvent {\n  /**\n   * @param {T} target The changed type.\n   * @param {Transaction} transaction\n   */\n  constructor (target, transaction) {\n    /**\n     * The type on which this event was created on.\n     * @type {T}\n     */\n    this.target = target;\n    /**\n     * The current target on which the observe callback is called.\n     * @type {AbstractType<any>}\n     */\n    this.currentTarget = target;\n    /**\n     * The transaction that triggered this event.\n     * @type {Transaction}\n     */\n    this.transaction = transaction;\n    /**\n     * @type {Object|null}\n     */\n    this._changes = null;\n    /**\n     * @type {null | Map<string, { action: 'add' | 'update' | 'delete', oldValue: any, newValue: any }>}\n     */\n    this._keys = null;\n    /**\n     * @type {null | Array<{ insert?: string | Array<any> | object | AbstractType<any>, retain?: number, delete?: number, attributes?: Object<string, any> }>}\n     */\n    this._delta = null;\n    /**\n     * @type {Array<string|number>|null}\n     */\n    this._path = null;\n  }\n\n  /**\n   * Computes the path from `y` to the changed type.\n   *\n   * @todo v14 should standardize on path: Array<{parent, index}> because that is easier to work with.\n   *\n   * The following property holds:\n   * @example\n   *   let type = y\n   *   event.path.forEach(dir => {\n   *     type = type.get(dir)\n   *   })\n   *   type === event.target // => true\n   */\n  get path () {\n    return this._path || (this._path = getPathTo(this.currentTarget, this.target))\n  }\n\n  /**\n   * Check if a struct is deleted by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n  deletes (struct) {\n    return isDeleted(this.transaction.deleteSet, struct.id)\n  }\n\n  /**\n   * @type {Map<string, { action: 'add' | 'update' | 'delete', oldValue: any, newValue: any }>}\n   */\n  get keys () {\n    if (this._keys === null) {\n      if (this.transaction.doc._transactionCleanups.length === 0) {\n        throw error.create(errorComputeChanges)\n      }\n      const keys = new Map();\n      const target = this.target;\n      const changed = /** @type Set<string|null> */ (this.transaction.changed.get(target));\n      changed.forEach(key => {\n        if (key !== null) {\n          const item = /** @type {Item} */ (target._map.get(key));\n          /**\n           * @type {'delete' | 'add' | 'update'}\n           */\n          let action;\n          let oldValue;\n          if (this.adds(item)) {\n            let prev = item.left;\n            while (prev !== null && this.adds(prev)) {\n              prev = prev.left;\n            }\n            if (this.deletes(item)) {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'delete';\n                oldValue = array.last(prev.content.getContent());\n              } else {\n                return\n              }\n            } else {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'update';\n                oldValue = array.last(prev.content.getContent());\n              } else {\n                action = 'add';\n                oldValue = undefined;\n              }\n            }\n          } else {\n            if (this.deletes(item)) {\n              action = 'delete';\n              oldValue = array.last(/** @type {Item} */ item.content.getContent());\n            } else {\n              return // nop\n            }\n          }\n          keys.set(key, { action, oldValue });\n        }\n      });\n      this._keys = keys;\n    }\n    return this._keys\n  }\n\n  /**\n   * This is a computed property. Note that this can only be safely computed during the\n   * event call. Computing this property after other changes happened might result in\n   * unexpected behavior (incorrect computation of deltas). A safe way to collect changes\n   * is to store the `changes` or the `delta` object. Avoid storing the `transaction` object.\n   *\n   * @type {Array<{insert?: string | Array<any> | object | AbstractType<any>, retain?: number, delete?: number, attributes?: Object<string, any>}>}\n   */\n  get delta () {\n    return this.changes.delta\n  }\n\n  /**\n   * Check if a struct is added by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n  adds (struct) {\n    return struct.id.clock >= (this.transaction.beforeState.get(struct.id.client) || 0)\n  }\n\n  /**\n   * This is a computed property. Note that this can only be safely computed during the\n   * event call. Computing this property after other changes happened might result in\n   * unexpected behavior (incorrect computation of deltas). A safe way to collect changes\n   * is to store the `changes` or the `delta` object. Avoid storing the `transaction` object.\n   *\n   * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}\n   */\n  get changes () {\n    let changes = this._changes;\n    if (changes === null) {\n      if (this.transaction.doc._transactionCleanups.length === 0) {\n        throw error.create(errorComputeChanges)\n      }\n      const target = this.target;\n      const added = set.create();\n      const deleted = set.create();\n      /**\n       * @type {Array<{insert:Array<any>}|{delete:number}|{retain:number}>}\n       */\n      const delta = [];\n      changes = {\n        added,\n        deleted,\n        delta,\n        keys: this.keys\n      };\n      const changed = /** @type Set<string|null> */ (this.transaction.changed.get(target));\n      if (changed.has(null)) {\n        /**\n         * @type {any}\n         */\n        let lastOp = null;\n        const packOp = () => {\n          if (lastOp) {\n            delta.push(lastOp);\n          }\n        };\n        for (let item = target._start; item !== null; item = item.right) {\n          if (item.deleted) {\n            if (this.deletes(item) && !this.adds(item)) {\n              if (lastOp === null || lastOp.delete === undefined) {\n                packOp();\n                lastOp = { delete: 0 };\n              }\n              lastOp.delete += item.length;\n              deleted.add(item);\n            } // else nop\n          } else {\n            if (this.adds(item)) {\n              if (lastOp === null || lastOp.insert === undefined) {\n                packOp();\n                lastOp = { insert: [] };\n              }\n              lastOp.insert = lastOp.insert.concat(item.content.getContent());\n              added.add(item);\n            } else {\n              if (lastOp === null || lastOp.retain === undefined) {\n                packOp();\n                lastOp = { retain: 0 };\n              }\n              lastOp.retain += item.length;\n            }\n          }\n        }\n        if (lastOp !== null && lastOp.retain === undefined) {\n          packOp();\n        }\n      }\n      this._changes = changes;\n    }\n    return /** @type {any} */ (changes)\n  }\n}\n\n/**\n * Compute the path from this type to the specified target.\n *\n * @example\n *   // `child` should be accessible via `type.get(path[0]).get(path[1])..`\n *   const path = type.getPathTo(child)\n *   // assuming `type instanceof YArray`\n *   console.log(path) // might look like => [2, 'key1']\n *   child === type.get(path[0]).get(path[1])\n *\n * @param {AbstractType<any>} parent\n * @param {AbstractType<any>} child target\n * @return {Array<string|number>} Path to the target\n *\n * @private\n * @function\n */\nconst getPathTo = (parent, child) => {\n  const path = [];\n  while (child._item !== null && child !== parent) {\n    if (child._item.parentSub !== null) {\n      // parent is map-ish\n      path.unshift(child._item.parentSub);\n    } else {\n      // parent is array-ish\n      let i = 0;\n      let c = /** @type {AbstractType<any>} */ (child._item.parent)._start;\n      while (c !== child._item && c !== null) {\n        if (!c.deleted && c.countable) {\n          i += c.length;\n        }\n        c = c.right;\n      }\n      path.unshift(i);\n    }\n    child = /** @type {AbstractType<any>} */ (child._item.parent);\n  }\n  return path\n};\n\n/**\n * https://docs.yjs.dev/getting-started/working-with-shared-types#caveats\n */\nconst warnPrematureAccess = () => { logging.warn('Invalid access: Add Yjs type to a document before reading data.'); };\n\nconst maxSearchMarker = 80;\n\n/**\n * A unique timestamp that identifies each marker.\n *\n * Time is relative,.. this is more like an ever-increasing clock.\n *\n * @type {number}\n */\nlet globalSearchMarkerTimestamp = 0;\n\nclass ArraySearchMarker {\n  /**\n   * @param {Item} p\n   * @param {number} index\n   */\n  constructor (p, index) {\n    p.marker = true;\n    this.p = p;\n    this.index = index;\n    this.timestamp = globalSearchMarkerTimestamp++;\n  }\n}\n\n/**\n * @param {ArraySearchMarker} marker\n */\nconst refreshMarkerTimestamp = marker => { marker.timestamp = globalSearchMarkerTimestamp++; };\n\n/**\n * This is rather complex so this function is the only thing that should overwrite a marker\n *\n * @param {ArraySearchMarker} marker\n * @param {Item} p\n * @param {number} index\n */\nconst overwriteMarker = (marker, p, index) => {\n  marker.p.marker = false;\n  marker.p = p;\n  p.marker = true;\n  marker.index = index;\n  marker.timestamp = globalSearchMarkerTimestamp++;\n};\n\n/**\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {Item} p\n * @param {number} index\n */\nconst markPosition = (searchMarker, p, index) => {\n  if (searchMarker.length >= maxSearchMarker) {\n    // override oldest marker (we don't want to create more objects)\n    const marker = searchMarker.reduce((a, b) => a.timestamp < b.timestamp ? a : b);\n    overwriteMarker(marker, p, index);\n    return marker\n  } else {\n    // create new marker\n    const pm = new ArraySearchMarker(p, index);\n    searchMarker.push(pm);\n    return pm\n  }\n};\n\n/**\n * Search marker help us to find positions in the associative array faster.\n *\n * They speed up the process of finding a position without much bookkeeping.\n *\n * A maximum of `maxSearchMarker` objects are created.\n *\n * This function always returns a refreshed marker (updated timestamp)\n *\n * @param {AbstractType<any>} yarray\n * @param {number} index\n */\nconst findMarker = (yarray, index) => {\n  if (yarray._start === null || index === 0 || yarray._searchMarker === null) {\n    return null\n  }\n  const marker = yarray._searchMarker.length === 0 ? null : yarray._searchMarker.reduce((a, b) => math.abs(index - a.index) < math.abs(index - b.index) ? a : b);\n  let p = yarray._start;\n  let pindex = 0;\n  if (marker !== null) {\n    p = marker.p;\n    pindex = marker.index;\n    refreshMarkerTimestamp(marker); // we used it, we might need to use it again\n  }\n  // iterate to right if possible\n  while (p.right !== null && pindex < index) {\n    if (!p.deleted && p.countable) {\n      if (index < pindex + p.length) {\n        break\n      }\n      pindex += p.length;\n    }\n    p = p.right;\n  }\n  // iterate to left if necessary (might be that pindex > index)\n  while (p.left !== null && pindex > index) {\n    p = p.left;\n    if (!p.deleted && p.countable) {\n      pindex -= p.length;\n    }\n  }\n  // we want to make sure that p can't be merged with left, because that would screw up everything\n  // in that cas just return what we have (it is most likely the best marker anyway)\n  // iterate to left until p can't be merged with left\n  while (p.left !== null && p.left.id.client === p.id.client && p.left.id.clock + p.left.length === p.id.clock) {\n    p = p.left;\n    if (!p.deleted && p.countable) {\n      pindex -= p.length;\n    }\n  }\n\n  // @todo remove!\n  // assure position\n  // {\n  //   let start = yarray._start\n  //   let pos = 0\n  //   while (start !== p) {\n  //     if (!start.deleted && start.countable) {\n  //       pos += start.length\n  //     }\n  //     start = /** @type {Item} */ (start.right)\n  //   }\n  //   if (pos !== pindex) {\n  //     debugger\n  //     throw new Error('Gotcha position fail!')\n  //   }\n  // }\n  // if (marker) {\n  //   if (window.lengthes == null) {\n  //     window.lengthes = []\n  //     window.getLengthes = () => window.lengthes.sort((a, b) => a - b)\n  //   }\n  //   window.lengthes.push(marker.index - pindex)\n  //   console.log('distance', marker.index - pindex, 'len', p && p.parent.length)\n  // }\n  if (marker !== null && math.abs(marker.index - pindex) < /** @type {YText|YArray<any>} */ (p.parent).length / maxSearchMarker) {\n    // adjust existing marker\n    overwriteMarker(marker, p, pindex);\n    return marker\n  } else {\n    // create new marker\n    return markPosition(yarray._searchMarker, p, pindex)\n  }\n};\n\n/**\n * Update markers when a change happened.\n *\n * This should be called before doing a deletion!\n *\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {number} index\n * @param {number} len If insertion, len is positive. If deletion, len is negative.\n */\nconst updateMarkerChanges = (searchMarker, index, len) => {\n  for (let i = searchMarker.length - 1; i >= 0; i--) {\n    const m = searchMarker[i];\n    if (len > 0) {\n      /**\n       * @type {Item|null}\n       */\n      let p = m.p;\n      p.marker = false;\n      // Ideally we just want to do a simple position comparison, but this will only work if\n      // search markers don't point to deleted items for formats.\n      // Iterate marker to prev undeleted countable position so we know what to do when updating a position\n      while (p && (p.deleted || !p.countable)) {\n        p = p.left;\n        if (p && !p.deleted && p.countable) {\n          // adjust position. the loop should break now\n          m.index -= p.length;\n        }\n      }\n      if (p === null || p.marker === true) {\n        // remove search marker if updated position is null or if position is already marked\n        searchMarker.splice(i, 1);\n        continue\n      }\n      m.p = p;\n      p.marker = true;\n    }\n    if (index < m.index || (len > 0 && index === m.index)) { // a simple index <= m.index check would actually suffice\n      m.index = math.max(index, m.index + len);\n    }\n  }\n};\n\n/**\n * Accumulate all (list) children of a type and return them as an Array.\n *\n * @param {AbstractType<any>} t\n * @return {Array<Item>}\n */\nconst getTypeChildren = t => {\n  t.doc ?? warnPrematureAccess();\n  let s = t._start;\n  const arr = [];\n  while (s) {\n    arr.push(s);\n    s = s.right;\n  }\n  return arr\n};\n\n/**\n * Call event listeners with an event. This will also add an event to all\n * parents (for `.observeDeep` handlers).\n *\n * @template EventType\n * @param {AbstractType<EventType>} type\n * @param {Transaction} transaction\n * @param {EventType} event\n */\nconst callTypeObservers = (type, transaction, event) => {\n  const changedType = type;\n  const changedParentTypes = transaction.changedParentTypes;\n  while (true) {\n    // @ts-ignore\n    map.setIfUndefined(changedParentTypes, type, () => []).push(event);\n    if (type._item === null) {\n      break\n    }\n    type = /** @type {AbstractType<any>} */ (type._item.parent);\n  }\n  callEventHandlerListeners(changedType._eH, event, transaction);\n};\n\n/**\n * @template EventType\n * Abstract Yjs Type class\n */\nclass AbstractType {\n  constructor () {\n    /**\n     * @type {Item|null}\n     */\n    this._item = null;\n    /**\n     * @type {Map<string,Item>}\n     */\n    this._map = new Map();\n    /**\n     * @type {Item|null}\n     */\n    this._start = null;\n    /**\n     * @type {Doc|null}\n     */\n    this.doc = null;\n    this._length = 0;\n    /**\n     * Event handlers\n     * @type {EventHandler<EventType,Transaction>}\n     */\n    this._eH = createEventHandler();\n    /**\n     * Deep event handlers\n     * @type {EventHandler<Array<YEvent<any>>,Transaction>}\n     */\n    this._dEH = createEventHandler();\n    /**\n     * @type {null | Array<ArraySearchMarker>}\n     */\n    this._searchMarker = null;\n  }\n\n  /**\n   * @return {AbstractType<any>|null}\n   */\n  get parent () {\n    return this._item ? /** @type {AbstractType<any>} */ (this._item.parent) : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item|null} item\n   */\n  _integrate (y, item) {\n    this.doc = y;\n    this._item = item;\n  }\n\n  /**\n   * @return {AbstractType<EventType>}\n   */\n  _copy () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {AbstractType<EventType>}\n   */\n  clone () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} _encoder\n   */\n  _write (_encoder) { }\n\n  /**\n   * The first non-deleted item\n   */\n  get _first () {\n    let n = this._start;\n    while (n !== null && n.deleted) {\n      n = n.right;\n    }\n    return n\n  }\n\n  /**\n   * Creates YEvent and calls all type observers.\n   * Must be implemented by each type.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} _parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, _parentSubs) {\n    if (!transaction.local && this._searchMarker) {\n      this._searchMarker.length = 0;\n    }\n  }\n\n  /**\n   * Observe all events that are created on this type.\n   *\n   * @param {function(EventType, Transaction):void} f Observer function\n   */\n  observe (f) {\n    addEventHandlerListener(this._eH, f);\n  }\n\n  /**\n   * Observe all events that are created by this type and its children.\n   *\n   * @param {function(Array<YEvent<any>>,Transaction):void} f Observer function\n   */\n  observeDeep (f) {\n    addEventHandlerListener(this._dEH, f);\n  }\n\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(EventType,Transaction):void} f Observer function\n   */\n  unobserve (f) {\n    removeEventHandlerListener(this._eH, f);\n  }\n\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(Array<YEvent<any>>,Transaction):void} f Observer function\n   */\n  unobserveDeep (f) {\n    removeEventHandlerListener(this._dEH, f);\n  }\n\n  /**\n   * @abstract\n   * @return {any}\n   */\n  toJSON () {}\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} start\n * @param {number} end\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nconst typeListSlice = (type, start, end) => {\n  type.doc ?? warnPrematureAccess();\n  if (start < 0) {\n    start = type._length + start;\n  }\n  if (end < 0) {\n    end = type._length + end;\n  }\n  let len = end - start;\n  const cs = [];\n  let n = type._start;\n  while (n !== null && len > 0) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent();\n      if (c.length <= start) {\n        start -= c.length;\n      } else {\n        for (let i = start; i < c.length && len > 0; i++) {\n          cs.push(c[i]);\n          len--;\n        }\n        start = 0;\n      }\n    }\n    n = n.right;\n  }\n  return cs\n};\n\n/**\n * @param {AbstractType<any>} type\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nconst typeListToArray = type => {\n  type.doc ?? warnPrematureAccess();\n  const cs = [];\n  let n = type._start;\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent();\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i]);\n      }\n    }\n    n = n.right;\n  }\n  return cs\n};\n\n/**\n * @param {AbstractType<any>} type\n * @param {Snapshot} snapshot\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nconst typeListToArraySnapshot = (type, snapshot) => {\n  const cs = [];\n  let n = type._start;\n  while (n !== null) {\n    if (n.countable && isVisible(n, snapshot)) {\n      const c = n.content.getContent();\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i]);\n      }\n    }\n    n = n.right;\n  }\n  return cs\n};\n\n/**\n * Executes a provided function on once on every element of this YArray.\n *\n * @param {AbstractType<any>} type\n * @param {function(any,number,any):void} f A function to execute on every element of this YArray.\n *\n * @private\n * @function\n */\nconst typeListForEach = (type, f) => {\n  let index = 0;\n  let n = type._start;\n  type.doc ?? warnPrematureAccess();\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent();\n      for (let i = 0; i < c.length; i++) {\n        f(c[i], index++, type);\n      }\n    }\n    n = n.right;\n  }\n};\n\n/**\n * @template C,R\n * @param {AbstractType<any>} type\n * @param {function(C,number,AbstractType<any>):R} f\n * @return {Array<R>}\n *\n * @private\n * @function\n */\nconst typeListMap = (type, f) => {\n  /**\n   * @type {Array<any>}\n   */\n  const result = [];\n  typeListForEach(type, (c, i) => {\n    result.push(f(c, i, type));\n  });\n  return result\n};\n\n/**\n * @param {AbstractType<any>} type\n * @return {IterableIterator<any>}\n *\n * @private\n * @function\n */\nconst typeListCreateIterator = type => {\n  let n = type._start;\n  /**\n   * @type {Array<any>|null}\n   */\n  let currentContent = null;\n  let currentContentIndex = 0;\n  return {\n    [Symbol.iterator] () {\n      return this\n    },\n    next: () => {\n      // find some content\n      if (currentContent === null) {\n        while (n !== null && n.deleted) {\n          n = n.right;\n        }\n        // check if we reached the end, no need to check currentContent, because it does not exist\n        if (n === null) {\n          return {\n            done: true,\n            value: undefined\n          }\n        }\n        // we found n, so we can set currentContent\n        currentContent = n.content.getContent();\n        currentContentIndex = 0;\n        n = n.right; // we used the content of n, now iterate to next\n      }\n      const value = currentContent[currentContentIndex++];\n      // check if we need to empty currentContent\n      if (currentContent.length <= currentContentIndex) {\n        currentContent = null;\n      }\n      return {\n        done: false,\n        value\n      }\n    }\n  }\n};\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @return {any}\n *\n * @private\n * @function\n */\nconst typeListGet = (type, index) => {\n  type.doc ?? warnPrematureAccess();\n  const marker = findMarker(type, index);\n  let n = type._start;\n  if (marker !== null) {\n    n = marker.p;\n    index -= marker.index;\n  }\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        return n.content.getContent()[index]\n      }\n      index -= n.length;\n    }\n  }\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {Item?} referenceItem\n * @param {Array<Object<string,any>|Array<any>|boolean|number|null|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nconst typeListInsertGenericsAfter = (transaction, parent, referenceItem, content) => {\n  let left = referenceItem;\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  const store = doc.store;\n  const right = referenceItem === null ? parent._start : referenceItem.right;\n  /**\n   * @type {Array<Object|Array<any>|number|null>}\n   */\n  let jsonContent = [];\n  const packJsonContent = () => {\n    if (jsonContent.length > 0) {\n      left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentAny(jsonContent));\n      left.integrate(transaction, 0);\n      jsonContent = [];\n    }\n  };\n  content.forEach(c => {\n    if (c === null) {\n      jsonContent.push(c);\n    } else {\n      switch (c.constructor) {\n        case Number:\n        case Object:\n        case Boolean:\n        case Array:\n        case String:\n          jsonContent.push(c);\n          break\n        default:\n          packJsonContent();\n          switch (c.constructor) {\n            case Uint8Array:\n            case ArrayBuffer:\n              left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentBinary(new Uint8Array(/** @type {Uint8Array} */ (c))));\n              left.integrate(transaction, 0);\n              break\n            case Doc:\n              left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentDoc(/** @type {Doc} */ (c)));\n              left.integrate(transaction, 0);\n              break\n            default:\n              if (c instanceof AbstractType) {\n                left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentType(c));\n                left.integrate(transaction, 0);\n              } else {\n                throw new Error('Unexpected content type in insert operation')\n              }\n          }\n      }\n    }\n  });\n  packJsonContent();\n};\n\nconst lengthExceeded = () => error.create('Length exceeded!');\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {Array<Object<string,any>|Array<any>|number|null|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nconst typeListInsertGenerics = (transaction, parent, index, content) => {\n  if (index > parent._length) {\n    throw lengthExceeded()\n  }\n  if (index === 0) {\n    if (parent._searchMarker) {\n      updateMarkerChanges(parent._searchMarker, index, content.length);\n    }\n    return typeListInsertGenericsAfter(transaction, parent, null, content)\n  }\n  const startIndex = index;\n  const marker = findMarker(parent, index);\n  let n = parent._start;\n  if (marker !== null) {\n    n = marker.p;\n    index -= marker.index;\n    // we need to iterate one to the left so that the algorithm works\n    if (index === 0) {\n      // @todo refactor this as it actually doesn't consider formats\n      n = n.prev; // important! get the left undeleted item so that we can actually decrease index\n      index += (n && n.countable && !n.deleted) ? n.length : 0;\n    }\n  }\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index <= n.length) {\n        if (index < n.length) {\n          // insert in-between\n          getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index));\n        }\n        break\n      }\n      index -= n.length;\n    }\n  }\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, startIndex, content.length);\n  }\n  return typeListInsertGenericsAfter(transaction, parent, n, content)\n};\n\n/**\n * Pushing content is special as we generally want to push after the last item. So we don't have to update\n * the serach marker.\n *\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {Array<Object<string,any>|Array<any>|number|null|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nconst typeListPushGenerics = (transaction, parent, content) => {\n  // Use the marker with the highest index and iterate to the right.\n  const marker = (parent._searchMarker || []).reduce((maxMarker, currMarker) => currMarker.index > maxMarker.index ? currMarker : maxMarker, { index: 0, p: parent._start });\n  let n = marker.p;\n  if (n) {\n    while (n.right) {\n      n = n.right;\n    }\n  }\n  return typeListInsertGenericsAfter(transaction, parent, n, content)\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {number} length\n *\n * @private\n * @function\n */\nconst typeListDelete = (transaction, parent, index, length) => {\n  if (length === 0) { return }\n  const startIndex = index;\n  const startLength = length;\n  const marker = findMarker(parent, index);\n  let n = parent._start;\n  if (marker !== null) {\n    n = marker.p;\n    index -= marker.index;\n  }\n  // compute the first item to be deleted\n  for (; n !== null && index > 0; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index));\n      }\n      index -= n.length;\n    }\n  }\n  // delete all items until done\n  while (length > 0 && n !== null) {\n    if (!n.deleted) {\n      if (length < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + length));\n      }\n      n.delete(transaction);\n      length -= n.length;\n    }\n    n = n.right;\n  }\n  if (length > 0) {\n    throw lengthExceeded()\n  }\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, startIndex, -startLength + length /* in case we remove the above exception */);\n  }\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n *\n * @private\n * @function\n */\nconst typeMapDelete = (transaction, parent, key) => {\n  const c = parent._map.get(key);\n  if (c !== undefined) {\n    c.delete(transaction);\n  }\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Object|number|null|Array<any>|string|Uint8Array|AbstractType<any>} value\n *\n * @private\n * @function\n */\nconst typeMapSet = (transaction, parent, key, value) => {\n  const left = parent._map.get(key) || null;\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  let content;\n  if (value == null) {\n    content = new ContentAny([value]);\n  } else {\n    switch (value.constructor) {\n      case Number:\n      case Object:\n      case Boolean:\n      case Array:\n      case String:\n        content = new ContentAny([value]);\n        break\n      case Uint8Array:\n        content = new ContentBinary(/** @type {Uint8Array} */ (value));\n        break\n      case Doc:\n        content = new ContentDoc(/** @type {Doc} */ (value));\n        break\n      default:\n        if (value instanceof AbstractType) {\n          content = new ContentType(value);\n        } else {\n          throw new Error('Unexpected content type')\n        }\n    }\n  }\n  new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, null, null, parent, key, content).integrate(transaction, 0);\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\nconst typeMapGet = (parent, key) => {\n  parent.doc ?? warnPrematureAccess();\n  const val = parent._map.get(key);\n  return val !== undefined && !val.deleted ? val.content.getContent()[val.length - 1] : undefined\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @return {Object<string,Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined>}\n *\n * @private\n * @function\n */\nconst typeMapGetAll = (parent) => {\n  /**\n   * @type {Object<string,any>}\n   */\n  const res = {};\n  parent.doc ?? warnPrematureAccess();\n  parent._map.forEach((value, key) => {\n    if (!value.deleted) {\n      res[key] = value.content.getContent()[value.length - 1];\n    }\n  });\n  return res\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {boolean}\n *\n * @private\n * @function\n */\nconst typeMapHas = (parent, key) => {\n  parent.doc ?? warnPrematureAccess();\n  const val = parent._map.get(key);\n  return val !== undefined && !val.deleted\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Snapshot} snapshot\n * @return {Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\nconst typeMapGetSnapshot = (parent, key, snapshot) => {\n  let v = parent._map.get(key) || null;\n  while (v !== null && (!snapshot.sv.has(v.id.client) || v.id.clock >= (snapshot.sv.get(v.id.client) || 0))) {\n    v = v.left;\n  }\n  return v !== null && isVisible(v, snapshot) ? v.content.getContent()[v.length - 1] : undefined\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @param {Snapshot} snapshot\n * @return {Object<string,Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined>}\n *\n * @private\n * @function\n */\nconst typeMapGetAllSnapshot = (parent, snapshot) => {\n  /**\n   * @type {Object<string,any>}\n   */\n  const res = {};\n  parent._map.forEach((value, key) => {\n    /**\n     * @type {Item|null}\n     */\n    let v = value;\n    while (v !== null && (!snapshot.sv.has(v.id.client) || v.id.clock >= (snapshot.sv.get(v.id.client) || 0))) {\n      v = v.left;\n    }\n    if (v !== null && isVisible(v, snapshot)) {\n      res[key] = v.content.getContent()[v.length - 1];\n    }\n  });\n  return res\n};\n\n/**\n * @param {AbstractType<any> & { _map: Map<string, Item> }} type\n * @return {IterableIterator<Array<any>>}\n *\n * @private\n * @function\n */\nconst createMapIterator = type => {\n  type.doc ?? warnPrematureAccess();\n  return iterator.iteratorFilter(type._map.entries(), /** @param {any} entry */ entry => !entry[1].deleted)\n};\n\n/**\n * @module YArray\n */\n\n\n/**\n * Event that describes the changes on a YArray\n * @template T\n * @extends YEvent<YArray<T>>\n */\nclass YArrayEvent extends YEvent {}\n\n/**\n * A shared Array implementation.\n * @template T\n * @extends AbstractType<YArrayEvent<T>>\n * @implements {Iterable<T>}\n */\nclass YArray extends AbstractType {\n  constructor () {\n    super();\n    /**\n     * @type {Array<any>?}\n     * @private\n     */\n    this._prelimContent = [];\n    /**\n     * @type {Array<ArraySearchMarker>}\n     */\n    this._searchMarker = [];\n  }\n\n  /**\n   * Construct a new YArray containing the specified items.\n   * @template {Object<string,any>|Array<any>|number|null|string|Uint8Array} T\n   * @param {Array<T>} items\n   * @return {YArray<T>}\n   */\n  static from (items) {\n    /**\n     * @type {YArray<T>}\n     */\n    const a = new YArray();\n    a.push(items);\n    return a\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item);\n    this.insert(0, /** @type {Array<any>} */ (this._prelimContent));\n    this._prelimContent = null;\n  }\n\n  /**\n   * @return {YArray<T>}\n   */\n  _copy () {\n    return new YArray()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YArray<T>}\n   */\n  clone () {\n    /**\n     * @type {YArray<T>}\n     */\n    const arr = new YArray();\n    arr.insert(0, this.toArray().map(el =>\n      el instanceof AbstractType ? /** @type {typeof el} */ (el.clone()) : el\n    ));\n    return arr\n  }\n\n  get length () {\n    this.doc ?? warnPrematureAccess();\n    return this._length\n  }\n\n  /**\n   * Creates YArrayEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    super._callObserver(transaction, parentSubs);\n    callTypeObservers(this, transaction, new YArrayEvent(this, transaction));\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * Important: This function expects an array of content. Not just a content\n   * object. The reason for this \"weirdness\" is that inserting several elements\n   * is very efficient when it is done as a single operation.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  yarray.insert(0, ['a'])\n   *  // Insert numbers 1, 2 at position 1\n   *  yarray.insert(1, [1, 2])\n   *\n   * @param {number} index The index to insert content at.\n   * @param {Array<T>} content The array of content\n   */\n  insert (index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, /** @type {any} */ (content));\n      });\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).splice(index, 0, ...content);\n    }\n  }\n\n  /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to append.\n   *\n   * @todo Use the following implementation in all types.\n   */\n  push (content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListPushGenerics(transaction, this, /** @type {any} */ (content));\n      });\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).push(...content);\n    }\n  }\n\n  /**\n   * Prepends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to prepend.\n   */\n  unshift (content) {\n    this.insert(0, content);\n  }\n\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} length The number of elements to remove. Defaults to 1.\n   */\n  delete (index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length);\n      });\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).splice(index, length);\n    }\n  }\n\n  /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {T}\n   */\n  get (index) {\n    return typeListGet(this, index)\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<T>}\n   */\n  toArray () {\n    return typeListToArray(this)\n  }\n\n  /**\n   * Returns a portion of this YArray into a JavaScript Array selected\n   * from start to end (end not included).\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @return {Array<T>}\n   */\n  slice (start = 0, end = this.length) {\n    return typeListSlice(this, start, end)\n  }\n\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Array<any>}\n   */\n  toJSON () {\n    return this.map(c => c instanceof AbstractType ? c.toJSON() : c)\n  }\n\n  /**\n   * Returns an Array with the result of calling a provided function on every\n   * element of this YArray.\n   *\n   * @template M\n   * @param {function(T,number,YArray<T>):M} f Function that produces an element of the new Array\n   * @return {Array<M>} A new array with each element being the result of the\n   *                 callback function\n   */\n  map (f) {\n    return typeListMap(this, /** @type {any} */ (f))\n  }\n\n  /**\n   * Executes a provided function once on every element of this YArray.\n   *\n   * @param {function(T,number,YArray<T>):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    typeListForEach(this, f);\n  }\n\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return typeListCreateIterator(this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YArrayRefID);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} _decoder\n *\n * @private\n * @function\n */\nconst readYArray = _decoder => new YArray();\n\n/**\n * @module YMap\n */\n\n\n/**\n * @template T\n * @extends YEvent<YMap<T>>\n * Event that describes the changes on a YMap.\n */\nclass YMapEvent extends YEvent {\n  /**\n   * @param {YMap<T>} ymap The YArray that changed.\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed.\n   */\n  constructor (ymap, transaction, subs) {\n    super(ymap, transaction);\n    this.keysChanged = subs;\n  }\n}\n\n/**\n * @template MapType\n * A shared Map implementation.\n *\n * @extends AbstractType<YMapEvent<MapType>>\n * @implements {Iterable<[string, MapType]>}\n */\nclass YMap extends AbstractType {\n  /**\n   *\n   * @param {Iterable<readonly [string, any]>=} entries - an optional iterable to initialize the YMap\n   */\n  constructor (entries) {\n    super();\n    /**\n     * @type {Map<string,any>?}\n     * @private\n     */\n    this._prelimContent = null;\n\n    if (entries === undefined) {\n      this._prelimContent = new Map();\n    } else {\n      this._prelimContent = new Map(entries);\n    }\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    ;/** @type {Map<string, any>} */ (this._prelimContent).forEach((value, key) => {\n      this.set(key, value);\n    });\n    this._prelimContent = null;\n  }\n\n  /**\n   * @return {YMap<MapType>}\n   */\n  _copy () {\n    return new YMap()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YMap<MapType>}\n   */\n  clone () {\n    /**\n     * @type {YMap<MapType>}\n     */\n    const map = new YMap();\n    this.forEach((value, key) => {\n      map.set(key, value instanceof AbstractType ? /** @type {typeof value} */ (value.clone()) : value);\n    });\n    return map\n  }\n\n  /**\n   * Creates YMapEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YMapEvent(this, transaction, parentSubs));\n  }\n\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Object<string,any>}\n   */\n  toJSON () {\n    this.doc ?? warnPrematureAccess();\n    /**\n     * @type {Object<string,MapType>}\n     */\n    const map = {};\n    this._map.forEach((item, key) => {\n      if (!item.deleted) {\n        const v = item.content.getContent()[item.length - 1];\n        map[key] = v instanceof AbstractType ? v.toJSON() : v;\n      }\n    });\n    return map\n  }\n\n  /**\n   * Returns the size of the YMap (count of key/value pairs)\n   *\n   * @return {number}\n   */\n  get size () {\n    return [...createMapIterator(this)].length\n  }\n\n  /**\n   * Returns the keys for each element in the YMap Type.\n   *\n   * @return {IterableIterator<string>}\n   */\n  keys () {\n    return iterator.iteratorMap(createMapIterator(this), /** @param {any} v */ v => v[0])\n  }\n\n  /**\n   * Returns the values for each element in the YMap Type.\n   *\n   * @return {IterableIterator<MapType>}\n   */\n  values () {\n    return iterator.iteratorMap(createMapIterator(this), /** @param {any} v */ v => v[1].content.getContent()[v[1].length - 1])\n  }\n\n  /**\n   * Returns an Iterator of [key, value] pairs\n   *\n   * @return {IterableIterator<[string, MapType]>}\n   */\n  entries () {\n    return iterator.iteratorMap(createMapIterator(this), /** @param {any} v */ v => /** @type {any} */ ([v[0], v[1].content.getContent()[v[1].length - 1]]))\n  }\n\n  /**\n   * Executes a provided function on once on every key-value pair.\n   *\n   * @param {function(MapType,string,YMap<MapType>):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    this.doc ?? warnPrematureAccess();\n    this._map.forEach((item, key) => {\n      if (!item.deleted) {\n        f(item.content.getContent()[item.length - 1], key, this);\n      }\n    });\n  }\n\n  /**\n   * Returns an Iterator of [key, value] pairs\n   *\n   * @return {IterableIterator<[string, MapType]>}\n   */\n  [Symbol.iterator] () {\n    return this.entries()\n  }\n\n  /**\n   * Remove a specified element from this YMap.\n   *\n   * @param {string} key The key of the element to remove.\n   */\n  delete (key) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, key);\n      });\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).delete(key);\n    }\n  }\n\n  /**\n   * Adds or updates an element with a specified key and value.\n   * @template {MapType} VAL\n   *\n   * @param {string} key The key of the element to add to this YMap\n   * @param {VAL} value The value of the element to add\n   * @return {VAL}\n   */\n  set (key, value) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, key, /** @type {any} */ (value));\n      });\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).set(key, value);\n    }\n    return value\n  }\n\n  /**\n   * Returns a specified element from this YMap.\n   *\n   * @param {string} key\n   * @return {MapType|undefined}\n   */\n  get (key) {\n    return /** @type {any} */ (typeMapGet(this, key))\n  }\n\n  /**\n   * Returns a boolean indicating whether the specified key exists or not.\n   *\n   * @param {string} key The key to test.\n   * @return {boolean}\n   */\n  has (key) {\n    return typeMapHas(this, key)\n  }\n\n  /**\n   * Removes all elements from this YMap.\n   */\n  clear () {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        this.forEach(function (_value, key, map) {\n          typeMapDelete(transaction, map, key);\n        });\n      });\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).clear();\n    }\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YMapRefID);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} _decoder\n *\n * @private\n * @function\n */\nconst readYMap = _decoder => new YMap();\n\n/**\n * @module YText\n */\n\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nconst equalAttrs = (a, b) => a === b || (typeof a === 'object' && typeof b === 'object' && a && b && object.equalFlat(a, b));\n\nclass ItemTextListPosition {\n  /**\n   * @param {Item|null} left\n   * @param {Item|null} right\n   * @param {number} index\n   * @param {Map<string,any>} currentAttributes\n   */\n  constructor (left, right, index, currentAttributes) {\n    this.left = left;\n    this.right = right;\n    this.index = index;\n    this.currentAttributes = currentAttributes;\n  }\n\n  /**\n   * Only call this if you know that this.right is defined\n   */\n  forward () {\n    if (this.right === null) {\n      error.unexpectedCase();\n    }\n    switch (this.right.content.constructor) {\n      case ContentFormat:\n        if (!this.right.deleted) {\n          updateCurrentAttributes(this.currentAttributes, /** @type {ContentFormat} */ (this.right.content));\n        }\n        break\n      default:\n        if (!this.right.deleted) {\n          this.index += this.right.length;\n        }\n        break\n    }\n    this.left = this.right;\n    this.right = this.right.right;\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} pos\n * @param {number} count steps to move forward\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst findNextPosition = (transaction, pos, count) => {\n  while (pos.right !== null && count > 0) {\n    switch (pos.right.content.constructor) {\n      case ContentFormat:\n        if (!pos.right.deleted) {\n          updateCurrentAttributes(pos.currentAttributes, /** @type {ContentFormat} */ (pos.right.content));\n        }\n        break\n      default:\n        if (!pos.right.deleted) {\n          if (count < pos.right.length) {\n            // split right\n            getItemCleanStart(transaction, createID(pos.right.id.client, pos.right.id.clock + count));\n          }\n          pos.index += pos.right.length;\n          count -= pos.right.length;\n        }\n        break\n    }\n    pos.left = pos.right;\n    pos.right = pos.right.right;\n    // pos.forward() - we don't forward because that would halve the performance because we already do the checks above\n  }\n  return pos\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {boolean} useSearchMarker\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst findPosition = (transaction, parent, index, useSearchMarker) => {\n  const currentAttributes = new Map();\n  const marker = useSearchMarker ? findMarker(parent, index) : null;\n  if (marker) {\n    const pos = new ItemTextListPosition(marker.p.left, marker.p, marker.index, currentAttributes);\n    return findNextPosition(transaction, pos, index - marker.index)\n  } else {\n    const pos = new ItemTextListPosition(null, parent._start, 0, currentAttributes);\n    return findNextPosition(transaction, pos, index)\n  }\n};\n\n/**\n * Negate applied formats\n *\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Map<string,any>} negatedAttributes\n *\n * @private\n * @function\n */\nconst insertNegatedAttributes = (transaction, parent, currPos, negatedAttributes) => {\n  // check if we really need to remove attributes\n  while (\n    currPos.right !== null && (\n      currPos.right.deleted === true || (\n        currPos.right.content.constructor === ContentFormat &&\n        equalAttrs(negatedAttributes.get(/** @type {ContentFormat} */ (currPos.right.content).key), /** @type {ContentFormat} */ (currPos.right.content).value)\n      )\n    )\n  ) {\n    if (!currPos.right.deleted) {\n      negatedAttributes.delete(/** @type {ContentFormat} */ (currPos.right.content).key);\n    }\n    currPos.forward();\n  }\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  negatedAttributes.forEach((val, key) => {\n    const left = currPos.left;\n    const right = currPos.right;\n    const nextFormat = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));\n    nextFormat.integrate(transaction, 0);\n    currPos.right = nextFormat;\n    currPos.forward();\n  });\n};\n\n/**\n * @param {Map<string,any>} currentAttributes\n * @param {ContentFormat} format\n *\n * @private\n * @function\n */\nconst updateCurrentAttributes = (currentAttributes, format) => {\n  const { key, value } = format;\n  if (value === null) {\n    currentAttributes.delete(key);\n  } else {\n    currentAttributes.set(key, value);\n  }\n};\n\n/**\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\nconst minimizeAttributeChanges = (currPos, attributes) => {\n  // go right while attributes[right.key] === right.value (or right is deleted)\n  while (true) {\n    if (currPos.right === null) {\n      break\n    } else if (currPos.right.deleted || (currPos.right.content.constructor === ContentFormat && equalAttrs(attributes[(/** @type {ContentFormat} */ (currPos.right.content)).key] ?? null, /** @type {ContentFormat} */ (currPos.right.content).value))) ; else {\n      break\n    }\n    currPos.forward();\n  }\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n * @return {Map<string,any>}\n *\n * @private\n * @function\n **/\nconst insertAttributes = (transaction, parent, currPos, attributes) => {\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  const negatedAttributes = new Map();\n  // insert format-start items\n  for (const key in attributes) {\n    const val = attributes[key];\n    const currentVal = currPos.currentAttributes.get(key) ?? null;\n    if (!equalAttrs(currentVal, val)) {\n      // save negated attribute (set null if currentVal undefined)\n      negatedAttributes.set(key, currentVal);\n      const { left, right } = currPos;\n      currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));\n      currPos.right.integrate(transaction, 0);\n      currPos.forward();\n    }\n  }\n  return negatedAttributes\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {string|object|AbstractType<any>} text\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n **/\nconst insertText = (transaction, parent, currPos, text, attributes) => {\n  currPos.currentAttributes.forEach((_val, key) => {\n    if (attributes[key] === undefined) {\n      attributes[key] = null;\n    }\n  });\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  minimizeAttributeChanges(currPos, attributes);\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes);\n  // insert content\n  const content = text.constructor === String ? new ContentString(/** @type {string} */ (text)) : (text instanceof AbstractType ? new ContentType(text) : new ContentEmbed(text));\n  let { left, right, index } = currPos;\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, currPos.index, content.getLength());\n  }\n  right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, content);\n  right.integrate(transaction, 0);\n  currPos.right = right;\n  currPos.index = index;\n  currPos.forward();\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\nconst formatText = (transaction, parent, currPos, length, attributes) => {\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  minimizeAttributeChanges(currPos, attributes);\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes);\n  // iterate until first non-format or null is found\n  // delete all formats with attributes[format.key] != null\n  // also check the attributes after the first non-format as we do not want to insert redundant negated attributes there\n  // eslint-disable-next-line no-labels\n  iterationLoop: while (\n    currPos.right !== null &&\n    (length > 0 ||\n      (\n        negatedAttributes.size > 0 &&\n        (currPos.right.deleted || currPos.right.content.constructor === ContentFormat)\n      )\n    )\n  ) {\n    if (!currPos.right.deleted) {\n      switch (currPos.right.content.constructor) {\n        case ContentFormat: {\n          const { key, value } = /** @type {ContentFormat} */ (currPos.right.content);\n          const attr = attributes[key];\n          if (attr !== undefined) {\n            if (equalAttrs(attr, value)) {\n              negatedAttributes.delete(key);\n            } else {\n              if (length === 0) {\n                // no need to further extend negatedAttributes\n                // eslint-disable-next-line no-labels\n                break iterationLoop\n              }\n              negatedAttributes.set(key, value);\n            }\n            currPos.right.delete(transaction);\n          } else {\n            currPos.currentAttributes.set(key, value);\n          }\n          break\n        }\n        default:\n          if (length < currPos.right.length) {\n            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length));\n          }\n          length -= currPos.right.length;\n          break\n      }\n    }\n    currPos.forward();\n  }\n  // Quill just assumes that the editor starts with a newline and that it always\n  // ends with a newline. We only insert that newline when a new newline is\n  // inserted - i.e when length is bigger than type.length\n  if (length > 0) {\n    let newlines = '';\n    for (; length > 0; length--) {\n      newlines += '\\n';\n    }\n    currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), currPos.left, currPos.left && currPos.left.lastId, currPos.right, currPos.right && currPos.right.id, parent, null, new ContentString(newlines));\n    currPos.right.integrate(transaction, 0);\n    currPos.forward();\n  }\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);\n};\n\n/**\n * Call this function after string content has been deleted in order to\n * clean up formatting Items.\n *\n * @param {Transaction} transaction\n * @param {Item} start\n * @param {Item|null} curr exclusive end, automatically iterates to the next Content Item\n * @param {Map<string,any>} startAttributes\n * @param {Map<string,any>} currAttributes\n * @return {number} The amount of formatting Items deleted.\n *\n * @function\n */\nconst cleanupFormattingGap = (transaction, start, curr, startAttributes, currAttributes) => {\n  /**\n   * @type {Item|null}\n   */\n  let end = start;\n  /**\n   * @type {Map<string,ContentFormat>}\n   */\n  const endFormats = map.create();\n  while (end && (!end.countable || end.deleted)) {\n    if (!end.deleted && end.content.constructor === ContentFormat) {\n      const cf = /** @type {ContentFormat} */ (end.content);\n      endFormats.set(cf.key, cf);\n    }\n    end = end.right;\n  }\n  let cleanups = 0;\n  let reachedCurr = false;\n  while (start !== end) {\n    if (curr === start) {\n      reachedCurr = true;\n    }\n    if (!start.deleted) {\n      const content = start.content;\n      switch (content.constructor) {\n        case ContentFormat: {\n          const { key, value } = /** @type {ContentFormat} */ (content);\n          const startAttrValue = startAttributes.get(key) ?? null;\n          if (endFormats.get(key) !== content || startAttrValue === value) {\n            // Either this format is overwritten or it is not necessary because the attribute already existed.\n            start.delete(transaction);\n            cleanups++;\n            if (!reachedCurr && (currAttributes.get(key) ?? null) === value && startAttrValue !== value) {\n              if (startAttrValue === null) {\n                currAttributes.delete(key);\n              } else {\n                currAttributes.set(key, startAttrValue);\n              }\n            }\n          }\n          if (!reachedCurr && !start.deleted) {\n            updateCurrentAttributes(currAttributes, /** @type {ContentFormat} */ (content));\n          }\n          break\n        }\n      }\n    }\n    start = /** @type {Item} */ (start.right);\n  }\n  return cleanups\n};\n\n/**\n * @param {Transaction} transaction\n * @param {Item | null} item\n */\nconst cleanupContextlessFormattingGap = (transaction, item) => {\n  // iterate until item.right is null or content\n  while (item && item.right && (item.right.deleted || !item.right.countable)) {\n    item = item.right;\n  }\n  const attrs = new Set();\n  // iterate back until a content item is found\n  while (item && (item.deleted || !item.countable)) {\n    if (!item.deleted && item.content.constructor === ContentFormat) {\n      const key = /** @type {ContentFormat} */ (item.content).key;\n      if (attrs.has(key)) {\n        item.delete(transaction);\n      } else {\n        attrs.add(key);\n      }\n    }\n    item = item.left;\n  }\n};\n\n/**\n * This function is experimental and subject to change / be removed.\n *\n * Ideally, we don't need this function at all. Formatting attributes should be cleaned up\n * automatically after each change. This function iterates twice over the complete YText type\n * and removes unnecessary formatting attributes. This is also helpful for testing.\n *\n * This function won't be exported anymore as soon as there is confidence that the YText type works as intended.\n *\n * @param {YText} type\n * @return {number} How many formatting attributes have been cleaned up.\n */\nconst cleanupYTextFormatting = type => {\n  let res = 0;\n  transact(/** @type {Doc} */ (type.doc), transaction => {\n    let start = /** @type {Item} */ (type._start);\n    let end = type._start;\n    let startAttributes = map.create();\n    const currentAttributes = map.copy(startAttributes);\n    while (end) {\n      if (end.deleted === false) {\n        switch (end.content.constructor) {\n          case ContentFormat:\n            updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (end.content));\n            break\n          default:\n            res += cleanupFormattingGap(transaction, start, end, startAttributes, currentAttributes);\n            startAttributes = map.copy(currentAttributes);\n            start = end;\n            break\n        }\n      }\n      end = end.right;\n    }\n  });\n  return res\n};\n\n/**\n * This will be called by the transction once the event handlers are called to potentially cleanup\n * formatting attributes.\n *\n * @param {Transaction} transaction\n */\nconst cleanupYTextAfterTransaction = transaction => {\n  /**\n   * @type {Set<YText>}\n   */\n  const needFullCleanup = new Set();\n  // check if another formatting item was inserted\n  const doc = transaction.doc;\n  for (const [client, afterClock] of transaction.afterState.entries()) {\n    const clock = transaction.beforeState.get(client) || 0;\n    if (afterClock === clock) {\n      continue\n    }\n    iterateStructs(transaction, /** @type {Array<Item|GC>} */ (doc.store.clients.get(client)), clock, afterClock, item => {\n      if (\n        !item.deleted && /** @type {Item} */ (item).content.constructor === ContentFormat && item.constructor !== GC\n      ) {\n        needFullCleanup.add(/** @type {any} */ (item).parent);\n      }\n    });\n  }\n  // cleanup in a new transaction\n  transact(doc, (t) => {\n    iterateDeletedStructs(transaction, transaction.deleteSet, item => {\n      if (item instanceof GC || !(/** @type {YText} */ (item.parent)._hasFormatting) || needFullCleanup.has(/** @type {YText} */ (item.parent))) {\n        return\n      }\n      const parent = /** @type {YText} */ (item.parent);\n      if (item.content.constructor === ContentFormat) {\n        needFullCleanup.add(parent);\n      } else {\n        // If no formatting attribute was inserted or deleted, we can make due with contextless\n        // formatting cleanups.\n        // Contextless: it is not necessary to compute currentAttributes for the affected position.\n        cleanupContextlessFormattingGap(t, item);\n      }\n    });\n    // If a formatting item was inserted, we simply clean the whole type.\n    // We need to compute currentAttributes for the current position anyway.\n    for (const yText of needFullCleanup) {\n      cleanupYTextFormatting(yText);\n    }\n  });\n};\n\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst deleteText = (transaction, currPos, length) => {\n  const startLength = length;\n  const startAttrs = map.copy(currPos.currentAttributes);\n  const start = currPos.right;\n  while (length > 0 && currPos.right !== null) {\n    if (currPos.right.deleted === false) {\n      switch (currPos.right.content.constructor) {\n        case ContentType:\n        case ContentEmbed:\n        case ContentString:\n          if (length < currPos.right.length) {\n            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length));\n          }\n          length -= currPos.right.length;\n          currPos.right.delete(transaction);\n          break\n      }\n    }\n    currPos.forward();\n  }\n  if (start) {\n    cleanupFormattingGap(transaction, start, currPos.right, startAttrs, currPos.currentAttributes);\n  }\n  const parent = /** @type {AbstractType<any>} */ (/** @type {Item} */ (currPos.left || currPos.right).parent);\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, currPos.index, -startLength + length);\n  }\n  return currPos\n};\n\n/**\n * The Quill Delta format represents changes on a text document with\n * formatting information. For mor information visit {@link https://quilljs.com/docs/delta/|Quill Delta}\n *\n * @example\n *   {\n *     ops: [\n *       { insert: 'Gandalf', attributes: { bold: true } },\n *       { insert: ' the ' },\n *       { insert: 'Grey', attributes: { color: '#cccccc' } }\n *     ]\n *   }\n *\n */\n\n/**\n  * Attributes that can be assigned to a selection of text.\n  *\n  * @example\n  *   {\n  *     bold: true,\n  *     font-size: '40px'\n  *   }\n  *\n  * @typedef {Object} TextAttributes\n  */\n\n/**\n * @extends YEvent<YText>\n * Event that describes the changes on a YText type.\n */\nclass YTextEvent extends YEvent {\n  /**\n   * @param {YText} ytext\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed\n   */\n  constructor (ytext, transaction, subs) {\n    super(ytext, transaction);\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n    this.childListChanged = false;\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */\n    this.keysChanged = new Set();\n    subs.forEach((sub) => {\n      if (sub === null) {\n        this.childListChanged = true;\n      } else {\n        this.keysChanged.add(sub);\n      }\n    });\n  }\n\n  /**\n   * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}\n   */\n  get changes () {\n    if (this._changes === null) {\n      /**\n       * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string|AbstractType<any>|object, delete?:number, retain?:number}>}}\n       */\n      const changes = {\n        keys: this.keys,\n        delta: this.delta,\n        added: new Set(),\n        deleted: new Set()\n      };\n      this._changes = changes;\n    }\n    return /** @type {any} */ (this._changes)\n  }\n\n  /**\n   * Compute the changes in the delta format.\n   * A {@link https://quilljs.com/docs/delta/|Quill Delta}) that represents the changes on the document.\n   *\n   * @type {Array<{insert?:string|object|AbstractType<any>, delete?:number, retain?:number, attributes?: Object<string,any>}>}\n   *\n   * @public\n   */\n  get delta () {\n    if (this._delta === null) {\n      const y = /** @type {Doc} */ (this.target.doc);\n      /**\n       * @type {Array<{insert?:string|object|AbstractType<any>, delete?:number, retain?:number, attributes?: Object<string,any>}>}\n       */\n      const delta = [];\n      transact(y, transaction => {\n        const currentAttributes = new Map(); // saves all current attributes for insert\n        const oldAttributes = new Map();\n        let item = this.target._start;\n        /**\n         * @type {string?}\n         */\n        let action = null;\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {}; // counts added or removed new attributes for retain\n        /**\n         * @type {string|object}\n         */\n        let insert = '';\n        let retain = 0;\n        let deleteLen = 0;\n        const addOp = () => {\n          if (action !== null) {\n            /**\n             * @type {any}\n             */\n            let op = null;\n            switch (action) {\n              case 'delete':\n                if (deleteLen > 0) {\n                  op = { delete: deleteLen };\n                }\n                deleteLen = 0;\n                break\n              case 'insert':\n                if (typeof insert === 'object' || insert.length > 0) {\n                  op = { insert };\n                  if (currentAttributes.size > 0) {\n                    op.attributes = {};\n                    currentAttributes.forEach((value, key) => {\n                      if (value !== null) {\n                        op.attributes[key] = value;\n                      }\n                    });\n                  }\n                }\n                insert = '';\n                break\n              case 'retain':\n                if (retain > 0) {\n                  op = { retain };\n                  if (!object.isEmpty(attributes)) {\n                    op.attributes = object.assign({}, attributes);\n                  }\n                }\n                retain = 0;\n                break\n            }\n            if (op) delta.push(op);\n            action = null;\n          }\n        };\n        while (item !== null) {\n          switch (item.content.constructor) {\n            case ContentType:\n            case ContentEmbed:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  addOp();\n                  action = 'insert';\n                  insert = item.content.getContent()[0];\n                  addOp();\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp();\n                  action = 'delete';\n                }\n                deleteLen += 1;\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp();\n                  action = 'retain';\n                }\n                retain += 1;\n              }\n              break\n            case ContentString:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  if (action !== 'insert') {\n                    addOp();\n                    action = 'insert';\n                  }\n                  insert += /** @type {ContentString} */ (item.content).str;\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp();\n                  action = 'delete';\n                }\n                deleteLen += item.length;\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp();\n                  action = 'retain';\n                }\n                retain += item.length;\n              }\n              break\n            case ContentFormat: {\n              const { key, value } = /** @type {ContentFormat} */ (item.content);\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  const curVal = currentAttributes.get(key) ?? null;\n                  if (!equalAttrs(curVal, value)) {\n                    if (action === 'retain') {\n                      addOp();\n                    }\n                    if (equalAttrs(value, (oldAttributes.get(key) ?? null))) {\n                      delete attributes[key];\n                    } else {\n                      attributes[key] = value;\n                    }\n                  } else if (value !== null) {\n                    item.delete(transaction);\n                  }\n                }\n              } else if (this.deletes(item)) {\n                oldAttributes.set(key, value);\n                const curVal = currentAttributes.get(key) ?? null;\n                if (!equalAttrs(curVal, value)) {\n                  if (action === 'retain') {\n                    addOp();\n                  }\n                  attributes[key] = curVal;\n                }\n              } else if (!item.deleted) {\n                oldAttributes.set(key, value);\n                const attr = attributes[key];\n                if (attr !== undefined) {\n                  if (!equalAttrs(attr, value)) {\n                    if (action === 'retain') {\n                      addOp();\n                    }\n                    if (value === null) {\n                      delete attributes[key];\n                    } else {\n                      attributes[key] = value;\n                    }\n                  } else if (attr !== null) { // this will be cleaned up automatically by the contextless cleanup function\n                    item.delete(transaction);\n                  }\n                }\n              }\n              if (!item.deleted) {\n                if (action === 'insert') {\n                  addOp();\n                }\n                updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (item.content));\n              }\n              break\n            }\n          }\n          item = item.right;\n        }\n        addOp();\n        while (delta.length > 0) {\n          const lastOp = delta[delta.length - 1];\n          if (lastOp.retain !== undefined && lastOp.attributes === undefined) {\n            // retain delta's if they don't assign attributes\n            delta.pop();\n          } else {\n            break\n          }\n        }\n      });\n      this._delta = delta;\n    }\n    return /** @type {any} */ (this._delta)\n  }\n}\n\n/**\n * Type that represents text with formatting information.\n *\n * This type replaces y-richtext as this implementation is able to handle\n * block formats (format information on a paragraph), embeds (complex elements\n * like pictures and videos), and text formats (**bold**, *italic*).\n *\n * @extends AbstractType<YTextEvent>\n */\nclass YText extends AbstractType {\n  /**\n   * @param {String} [string] The initial value of the YText.\n   */\n  constructor (string) {\n    super();\n    /**\n     * Array of pending operations on this type\n     * @type {Array<function():void>?}\n     */\n    this._pending = string !== undefined ? [() => this.insert(0, string)] : [];\n    /**\n     * @type {Array<ArraySearchMarker>|null}\n     */\n    this._searchMarker = [];\n    /**\n     * Whether this YText contains formatting attributes.\n     * This flag is updated when a formatting item is integrated (see ContentFormat.integrate)\n     */\n    this._hasFormatting = false;\n  }\n\n  /**\n   * Number of characters of this text type.\n   *\n   * @type {number}\n   */\n  get length () {\n    this.doc ?? warnPrematureAccess();\n    return this._length\n  }\n\n  /**\n   * @param {Doc} y\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item);\n    try {\n      /** @type {Array<function>} */ (this._pending).forEach(f => f());\n    } catch (e) {\n      console.error(e);\n    }\n    this._pending = null;\n  }\n\n  _copy () {\n    return new YText()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YText}\n   */\n  clone () {\n    const text = new YText();\n    text.applyDelta(this.toDelta());\n    return text\n  }\n\n  /**\n   * Creates YTextEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    super._callObserver(transaction, parentSubs);\n    const event = new YTextEvent(this, transaction, parentSubs);\n    callTypeObservers(this, transaction, event);\n    // If a remote change happened, we try to cleanup potential formatting duplicates.\n    if (!transaction.local && this._hasFormatting) {\n      transaction._needFormattingCleanup = true;\n    }\n  }\n\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @public\n   */\n  toString () {\n    this.doc ?? warnPrematureAccess();\n    let str = '';\n    /**\n     * @type {Item|null}\n     */\n    let n = this._start;\n    while (n !== null) {\n      if (!n.deleted && n.countable && n.content.constructor === ContentString) {\n        str += /** @type {ContentString} */ (n.content).str;\n      }\n      n = n.right;\n    }\n    return str\n  }\n\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @return {string}\n   * @public\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Apply a {@link Delta} on this shared YText type.\n   *\n   * @param {any} delta The changes to apply on this element.\n   * @param {object}  opts\n   * @param {boolean} [opts.sanitize] Sanitize input delta. Removes ending newlines if set to true.\n   *\n   *\n   * @public\n   */\n  applyDelta (delta, { sanitize = true } = {}) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        const currPos = new ItemTextListPosition(null, this._start, 0, new Map());\n        for (let i = 0; i < delta.length; i++) {\n          const op = delta[i];\n          if (op.insert !== undefined) {\n            // Quill assumes that the content starts with an empty paragraph.\n            // Yjs/Y.Text assumes that it starts empty. We always hide that\n            // there is a newline at the end of the content.\n            // If we omit this step, clients will see a different number of\n            // paragraphs, but nothing bad will happen.\n            const ins = (!sanitize && typeof op.insert === 'string' && i === delta.length - 1 && currPos.right === null && op.insert.slice(-1) === '\\n') ? op.insert.slice(0, -1) : op.insert;\n            if (typeof ins !== 'string' || ins.length > 0) {\n              insertText(transaction, this, currPos, ins, op.attributes || {});\n            }\n          } else if (op.retain !== undefined) {\n            formatText(transaction, this, currPos, op.retain, op.attributes || {});\n          } else if (op.delete !== undefined) {\n            deleteText(transaction, currPos, op.delete);\n          }\n        }\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.applyDelta(delta));\n    }\n  }\n\n  /**\n   * Returns the Delta representation of this YText type.\n   *\n   * @param {Snapshot} [snapshot]\n   * @param {Snapshot} [prevSnapshot]\n   * @param {function('removed' | 'added', ID):any} [computeYChange]\n   * @return {any} The Delta representation of this type.\n   *\n   * @public\n   */\n  toDelta (snapshot, prevSnapshot, computeYChange) {\n    this.doc ?? warnPrematureAccess();\n    /**\n     * @type{Array<any>}\n     */\n    const ops = [];\n    const currentAttributes = new Map();\n    const doc = /** @type {Doc} */ (this.doc);\n    let str = '';\n    let n = this._start;\n    function packStr () {\n      if (str.length > 0) {\n        // pack str with attributes to ops\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {};\n        let addAttributes = false;\n        currentAttributes.forEach((value, key) => {\n          addAttributes = true;\n          attributes[key] = value;\n        });\n        /**\n         * @type {Object<string,any>}\n         */\n        const op = { insert: str };\n        if (addAttributes) {\n          op.attributes = attributes;\n        }\n        ops.push(op);\n        str = '';\n      }\n    }\n    const computeDelta = () => {\n      while (n !== null) {\n        if (isVisible(n, snapshot) || (prevSnapshot !== undefined && isVisible(n, prevSnapshot))) {\n          switch (n.content.constructor) {\n            case ContentString: {\n              const cur = currentAttributes.get('ychange');\n              if (snapshot !== undefined && !isVisible(n, snapshot)) {\n                if (cur === undefined || cur.user !== n.id.client || cur.type !== 'removed') {\n                  packStr();\n                  currentAttributes.set('ychange', computeYChange ? computeYChange('removed', n.id) : { type: 'removed' });\n                }\n              } else if (prevSnapshot !== undefined && !isVisible(n, prevSnapshot)) {\n                if (cur === undefined || cur.user !== n.id.client || cur.type !== 'added') {\n                  packStr();\n                  currentAttributes.set('ychange', computeYChange ? computeYChange('added', n.id) : { type: 'added' });\n                }\n              } else if (cur !== undefined) {\n                packStr();\n                currentAttributes.delete('ychange');\n              }\n              str += /** @type {ContentString} */ (n.content).str;\n              break\n            }\n            case ContentType:\n            case ContentEmbed: {\n              packStr();\n              /**\n               * @type {Object<string,any>}\n               */\n              const op = {\n                insert: n.content.getContent()[0]\n              };\n              if (currentAttributes.size > 0) {\n                const attrs = /** @type {Object<string,any>} */ ({});\n                op.attributes = attrs;\n                currentAttributes.forEach((value, key) => {\n                  attrs[key] = value;\n                });\n              }\n              ops.push(op);\n              break\n            }\n            case ContentFormat:\n              if (isVisible(n, snapshot)) {\n                packStr();\n                updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (n.content));\n              }\n              break\n          }\n        }\n        n = n.right;\n      }\n      packStr();\n    };\n    if (snapshot || prevSnapshot) {\n      // snapshots are merged again after the transaction, so we need to keep the\n      // transaction alive until we are done\n      transact(doc, transaction => {\n        if (snapshot) {\n          splitSnapshotAffectedStructs(transaction, snapshot);\n        }\n        if (prevSnapshot) {\n          splitSnapshotAffectedStructs(transaction, prevSnapshot);\n        }\n        computeDelta();\n      }, 'cleanup');\n    } else {\n      computeDelta();\n    }\n    return ops\n  }\n\n  /**\n   * Insert text at a given index.\n   *\n   * @param {number} index The index at which to start inserting.\n   * @param {String} text The text to insert at the specified position.\n   * @param {TextAttributes} [attributes] Optionally define some formatting\n   *                                    information to apply on the inserted\n   *                                    Text.\n   * @public\n   */\n  insert (index, text, attributes) {\n    if (text.length <= 0) {\n      return\n    }\n    const y = this.doc;\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index, !attributes);\n        if (!attributes) {\n          attributes = {};\n          // @ts-ignore\n          pos.currentAttributes.forEach((v, k) => { attributes[k] = v; });\n        }\n        insertText(transaction, this, pos, text, attributes);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.insert(index, text, attributes));\n    }\n  }\n\n  /**\n   * Inserts an embed at a index.\n   *\n   * @param {number} index The index to insert the embed at.\n   * @param {Object | AbstractType<any>} embed The Object that represents the embed.\n   * @param {TextAttributes} [attributes] Attribute information to apply on the\n   *                                    embed\n   *\n   * @public\n   */\n  insertEmbed (index, embed, attributes) {\n    const y = this.doc;\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index, !attributes);\n        insertText(transaction, this, pos, embed, attributes || {});\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.insertEmbed(index, embed, attributes || {}));\n    }\n  }\n\n  /**\n   * Deletes text starting from an index.\n   *\n   * @param {number} index Index at which to start deleting.\n   * @param {number} length The number of characters to remove. Defaults to 1.\n   *\n   * @public\n   */\n  delete (index, length) {\n    if (length === 0) {\n      return\n    }\n    const y = this.doc;\n    if (y !== null) {\n      transact(y, transaction => {\n        deleteText(transaction, findPosition(transaction, this, index, true), length);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.delete(index, length));\n    }\n  }\n\n  /**\n   * Assigns properties to a range of text.\n   *\n   * @param {number} index The position where to start formatting.\n   * @param {number} length The amount of characters to assign properties to.\n   * @param {TextAttributes} attributes Attribute information to apply on the\n   *                                    text.\n   *\n   * @public\n   */\n  format (index, length, attributes) {\n    if (length === 0) {\n      return\n    }\n    const y = this.doc;\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index, false);\n        if (pos.right === null) {\n          return\n        }\n        formatText(transaction, this, pos, length, attributes);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.format(index, length, attributes));\n    }\n  }\n\n  /**\n   * Removes an attribute.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */\n  removeAttribute (attributeName) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, attributeName);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.removeAttribute(attributeName));\n    }\n  }\n\n  /**\n   * Sets or updates an attribute.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that is to be set.\n   * @param {any} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */\n  setAttribute (attributeName, attributeValue) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, attributeName, attributeValue);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.setAttribute(attributeName, attributeValue));\n    }\n  }\n\n  /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {any} The queried attribute value.\n   *\n   * @public\n   */\n  getAttribute (attributeName) {\n    return /** @type {any} */ (typeMapGet(this, attributeName))\n  }\n\n  /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @return {Object<string, any>} A JSON Object that describes the attributes.\n   *\n   * @public\n   */\n  getAttributes () {\n    return typeMapGetAll(this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YTextRefID);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} _decoder\n * @return {YText}\n *\n * @private\n * @function\n */\nconst readYText = _decoder => new YText();\n\n/**\n * @module YXml\n */\n\n\n/**\n * Define the elements to which a set of CSS queries apply.\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}\n *\n * @example\n *   query = '.classSelector'\n *   query = 'nodeSelector'\n *   query = '#idSelector'\n *\n * @typedef {string} CSS_Selector\n */\n\n/**\n * Dom filter function.\n *\n * @callback domFilter\n * @param {string} nodeName The nodeName of the element\n * @param {Map} attributes The map of attributes.\n * @return {boolean} Whether to include the Dom node in the YXmlElement.\n */\n\n/**\n * Represents a subset of the nodes of a YXmlElement / YXmlFragment and a\n * position within them.\n *\n * Can be created with {@link YXmlFragment#createTreeWalker}\n *\n * @public\n * @implements {Iterable<YXmlElement|YXmlText|YXmlElement|YXmlHook>}\n */\nclass YXmlTreeWalker {\n  /**\n   * @param {YXmlFragment | YXmlElement} root\n   * @param {function(AbstractType<any>):boolean} [f]\n   */\n  constructor (root, f = () => true) {\n    this._filter = f;\n    this._root = root;\n    /**\n     * @type {Item}\n     */\n    this._currentNode = /** @type {Item} */ (root._start);\n    this._firstCall = true;\n    root.doc ?? warnPrematureAccess();\n  }\n\n  [Symbol.iterator] () {\n    return this\n  }\n\n  /**\n   * Get the next node.\n   *\n   * @return {IteratorResult<YXmlElement|YXmlText|YXmlHook>} The next node.\n   *\n   * @public\n   */\n  next () {\n    /**\n     * @type {Item|null}\n     */\n    let n = this._currentNode;\n    let type = n && n.content && /** @type {any} */ (n.content).type;\n    if (n !== null && (!this._firstCall || n.deleted || !this._filter(type))) { // if first call, we check if we can use the first item\n      do {\n        type = /** @type {any} */ (n.content).type;\n        if (!n.deleted && (type.constructor === YXmlElement || type.constructor === YXmlFragment) && type._start !== null) {\n          // walk down in the tree\n          n = type._start;\n        } else {\n          // walk right or up in the tree\n          while (n !== null) {\n            if (n.right !== null) {\n              n = n.right;\n              break\n            } else if (n.parent === this._root) {\n              n = null;\n            } else {\n              n = /** @type {AbstractType<any>} */ (n.parent)._item;\n            }\n          }\n        }\n      } while (n !== null && (n.deleted || !this._filter(/** @type {ContentType} */ (n.content).type)))\n    }\n    this._firstCall = false;\n    if (n === null) {\n      // @ts-ignore\n      return { value: undefined, done: true }\n    }\n    this._currentNode = n;\n    return { value: /** @type {any} */ (n.content).type, done: false }\n  }\n}\n\n/**\n * Represents a list of {@link YXmlElement}.and {@link YXmlText} types.\n * A YxmlFragment is similar to a {@link YXmlElement}, but it does not have a\n * nodeName and it does not have attributes. Though it can be bound to a DOM\n * element - in this case the attributes and the nodeName are not shared.\n *\n * @public\n * @extends AbstractType<YXmlEvent>\n */\nclass YXmlFragment extends AbstractType {\n  constructor () {\n    super();\n    /**\n     * @type {Array<any>|null}\n     */\n    this._prelimContent = [];\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get firstChild () {\n    const first = this._first;\n    return first ? first.content.getContent()[0] : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item);\n    this.insert(0, /** @type {Array<any>} */ (this._prelimContent));\n    this._prelimContent = null;\n  }\n\n  _copy () {\n    return new YXmlFragment()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YXmlFragment}\n   */\n  clone () {\n    const el = new YXmlFragment();\n    // @ts-ignore\n    el.insert(0, this.toArray().map(item => item instanceof AbstractType ? item.clone() : item));\n    return el\n  }\n\n  get length () {\n    this.doc ?? warnPrematureAccess();\n    return this._prelimContent === null ? this._length : this._prelimContent.length\n  }\n\n  /**\n   * Create a subtree of childNodes.\n   *\n   * @example\n   * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')\n   * for (let node in walker) {\n   *   // `node` is a div node\n   *   nop(node)\n   * }\n   *\n   * @param {function(AbstractType<any>):boolean} filter Function that is called on each child element and\n   *                          returns a Boolean indicating whether the child\n   *                          is to be included in the subtree.\n   * @return {YXmlTreeWalker} A subtree and a position within it.\n   *\n   * @public\n   */\n  createTreeWalker (filter) {\n    return new YXmlTreeWalker(this, filter)\n  }\n\n  /**\n   * Returns the first YXmlElement that matches the query.\n   * Similar to DOM's {@link querySelector}.\n   *\n   * Query support:\n   *   - tagname\n   * TODO:\n   *   - id\n   *   - attribute\n   *\n   * @param {CSS_Selector} query The query on the children.\n   * @return {YXmlElement|YXmlText|YXmlHook|null} The first element that matches the query or null.\n   *\n   * @public\n   */\n  querySelector (query) {\n    query = query.toUpperCase();\n    // @ts-ignore\n    const iterator = new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query);\n    const next = iterator.next();\n    if (next.done) {\n      return null\n    } else {\n      return next.value\n    }\n  }\n\n  /**\n   * Returns all YXmlElements that match the query.\n   * Similar to Dom's {@link querySelectorAll}.\n   *\n   * @todo Does not yet support all queries. Currently only query by tagName.\n   *\n   * @param {CSS_Selector} query The query on the children\n   * @return {Array<YXmlElement|YXmlText|YXmlHook|null>} The elements that match this query.\n   *\n   * @public\n   */\n  querySelectorAll (query) {\n    query = query.toUpperCase();\n    // @ts-ignore\n    return array.from(new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query))\n  }\n\n  /**\n   * Creates YXmlEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YXmlEvent(this, parentSubs, transaction));\n  }\n\n  /**\n   * Get the string representation of all the children of this YXmlFragment.\n   *\n   * @return {string} The string representation of all children.\n   */\n  toString () {\n    return typeListMap(this, xml => xml.toString()).join('')\n  }\n\n  /**\n   * @return {string}\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const fragment = _document.createDocumentFragment();\n    if (binding !== undefined) {\n      binding._createAssociation(fragment, this);\n    }\n    typeListForEach(this, xmlType => {\n      fragment.insertBefore(xmlType.toDOM(_document, hooks, binding), null);\n    });\n    return fragment\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {number} index The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */\n  insert (index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, content);\n      });\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, 0, ...content);\n    }\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {null|Item|YXmlElement|YXmlText} ref The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */\n  insertAfter (ref, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        const refItem = (ref && ref instanceof AbstractType) ? ref._item : ref;\n        typeListInsertGenericsAfter(transaction, this, refItem, content);\n      });\n    } else {\n      const pc = /** @type {Array<any>} */ (this._prelimContent);\n      const index = ref === null ? 0 : pc.findIndex(el => el === ref) + 1;\n      if (index === 0 && ref !== null) {\n        throw error.create('Reference item not found')\n      }\n      pc.splice(index, 0, ...content);\n    }\n  }\n\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} [length=1] The number of elements to remove. Defaults to 1.\n   */\n  delete (index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length);\n      });\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, length);\n    }\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<YXmlElement|YXmlText|YXmlHook>}\n   */\n  toArray () {\n    return typeListToArray(this)\n  }\n\n  /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<YXmlElement|YXmlText>} content Array of content to append.\n   */\n  push (content) {\n    this.insert(this.length, content);\n  }\n\n  /**\n   * Prepends content to this YArray.\n   *\n   * @param {Array<YXmlElement|YXmlText>} content Array of content to prepend.\n   */\n  unshift (content) {\n    this.insert(0, content);\n  }\n\n  /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {YXmlElement|YXmlText}\n   */\n  get (index) {\n    return typeListGet(this, index)\n  }\n\n  /**\n   * Returns a portion of this YXmlFragment into a JavaScript Array selected\n   * from start to end (end not included).\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @return {Array<YXmlElement|YXmlText>}\n   */\n  slice (start = 0, end = this.length) {\n    return typeListSlice(this, start, end)\n  }\n\n  /**\n   * Executes a provided function on once on every child element.\n   *\n   * @param {function(YXmlElement|YXmlText,number, typeof self):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    typeListForEach(this, f);\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlFragmentRefID);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} _decoder\n * @return {YXmlFragment}\n *\n * @private\n * @function\n */\nconst readYXmlFragment = _decoder => new YXmlFragment();\n\n/**\n * @typedef {Object|number|null|Array<any>|string|Uint8Array|AbstractType<any>} ValueTypes\n */\n\n/**\n * An YXmlElement imitates the behavior of a\n * https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element\n *\n * * An YXmlElement has attributes (key value pairs)\n * * An YXmlElement has childElements that must inherit from YXmlElement\n *\n * @template {{ [key: string]: ValueTypes }} [KV={ [key: string]: string }]\n */\nclass YXmlElement extends YXmlFragment {\n  constructor (nodeName = 'UNDEFINED') {\n    super();\n    this.nodeName = nodeName;\n    /**\n     * @type {Map<string, any>|null}\n     */\n    this._prelimAttrs = new Map();\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get nextSibling () {\n    const n = this._item ? this._item.next : null;\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get prevSibling () {\n    const n = this._item ? this._item.prev : null;\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    ;(/** @type {Map<string, any>} */ (this._prelimAttrs)).forEach((value, key) => {\n      this.setAttribute(key, value);\n    });\n    this._prelimAttrs = null;\n  }\n\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   *\n   * @return {YXmlElement}\n   */\n  _copy () {\n    return new YXmlElement(this.nodeName)\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YXmlElement<KV>}\n   */\n  clone () {\n    /**\n     * @type {YXmlElement<KV>}\n     */\n    const el = new YXmlElement(this.nodeName);\n    const attrs = this.getAttributes();\n    object.forEach(attrs, (value, key) => {\n      if (typeof value === 'string') {\n        el.setAttribute(key, value);\n      }\n    });\n    // @ts-ignore\n    el.insert(0, this.toArray().map(item => item instanceof AbstractType ? item.clone() : item));\n    return el\n  }\n\n  /**\n   * Returns the XML serialization of this YXmlElement.\n   * The attributes are ordered by attribute-name, so you can easily use this\n   * method to compare YXmlElements\n   *\n   * @return {string} The string representation of this type.\n   *\n   * @public\n   */\n  toString () {\n    const attrs = this.getAttributes();\n    const stringBuilder = [];\n    const keys = [];\n    for (const key in attrs) {\n      keys.push(key);\n    }\n    keys.sort();\n    const keysLen = keys.length;\n    for (let i = 0; i < keysLen; i++) {\n      const key = keys[i];\n      stringBuilder.push(key + '=\"' + attrs[key] + '\"');\n    }\n    const nodeName = this.nodeName.toLocaleLowerCase();\n    const attrsString = stringBuilder.length > 0 ? ' ' + stringBuilder.join(' ') : '';\n    return `<${nodeName}${attrsString}>${super.toString()}</${nodeName}>`\n  }\n\n  /**\n   * Removes an attribute from this YXmlElement.\n   *\n   * @param {string} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */\n  removeAttribute (attributeName) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, attributeName);\n      });\n    } else {\n      /** @type {Map<string,any>} */ (this._prelimAttrs).delete(attributeName);\n    }\n  }\n\n  /**\n   * Sets or updates an attribute.\n   *\n   * @template {keyof KV & string} KEY\n   *\n   * @param {KEY} attributeName The attribute name that is to be set.\n   * @param {KV[KEY]} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */\n  setAttribute (attributeName, attributeValue) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, attributeName, attributeValue);\n      });\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimAttrs).set(attributeName, attributeValue);\n    }\n  }\n\n  /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @template {keyof KV & string} KEY\n   *\n   * @param {KEY} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {KV[KEY]|undefined} The queried attribute value.\n   *\n   * @public\n   */\n  getAttribute (attributeName) {\n    return /** @type {any} */ (typeMapGet(this, attributeName))\n  }\n\n  /**\n   * Returns whether an attribute exists\n   *\n   * @param {string} attributeName The attribute name to check for existence.\n   * @return {boolean} whether the attribute exists.\n   *\n   * @public\n   */\n  hasAttribute (attributeName) {\n    return /** @type {any} */ (typeMapHas(this, attributeName))\n  }\n\n  /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @param {Snapshot} [snapshot]\n   * @return {{ [Key in Extract<keyof KV,string>]?: KV[Key]}} A JSON Object that describes the attributes.\n   *\n   * @public\n   */\n  getAttributes (snapshot) {\n    return /** @type {any} */ (snapshot ? typeMapGetAllSnapshot(this, snapshot) : typeMapGetAll(this))\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const dom = _document.createElement(this.nodeName);\n    const attrs = this.getAttributes();\n    for (const key in attrs) {\n      const value = attrs[key];\n      if (typeof value === 'string') {\n        dom.setAttribute(key, value);\n      }\n    }\n    typeListForEach(this, yxml => {\n      dom.appendChild(yxml.toDOM(_document, hooks, binding));\n    });\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this);\n    }\n    return dom\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlElementRefID);\n    encoder.writeKey(this.nodeName);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlElement}\n *\n * @function\n */\nconst readYXmlElement = decoder => new YXmlElement(decoder.readKey());\n\n/**\n * @extends YEvent<YXmlElement|YXmlText|YXmlFragment>\n * An Event that describes changes on a YXml Element or Yxml Fragment\n */\nclass YXmlEvent extends YEvent {\n  /**\n   * @param {YXmlElement|YXmlText|YXmlFragment} target The target on which the event is created.\n   * @param {Set<string|null>} subs The set of changed attributes. `null` is included if the\n   *                   child list changed.\n   * @param {Transaction} transaction The transaction instance with wich the\n   *                                  change was created.\n   */\n  constructor (target, subs, transaction) {\n    super(target, transaction);\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n    this.childListChanged = false;\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */\n    this.attributesChanged = new Set();\n    subs.forEach((sub) => {\n      if (sub === null) {\n        this.childListChanged = true;\n      } else {\n        this.attributesChanged.add(sub);\n      }\n    });\n  }\n}\n\n/**\n * You can manage binding to a custom type with YXmlHook.\n *\n * @extends {YMap<any>}\n */\nclass YXmlHook extends YMap {\n  /**\n   * @param {string} hookName nodeName of the Dom Node.\n   */\n  constructor (hookName) {\n    super();\n    /**\n     * @type {string}\n     */\n    this.hookName = hookName;\n  }\n\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   */\n  _copy () {\n    return new YXmlHook(this.hookName)\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YXmlHook}\n   */\n  clone () {\n    const el = new YXmlHook(this.hookName);\n    this.forEach((value, key) => {\n      el.set(key, value);\n    });\n    return el\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object.<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type\n   * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const hook = hooks[this.hookName];\n    let dom;\n    if (hook !== undefined) {\n      dom = hook.createDom(this);\n    } else {\n      dom = document.createElement(this.hookName);\n    }\n    dom.setAttribute('data-yjs-hook', this.hookName);\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this);\n    }\n    return dom\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlHookRefID);\n    encoder.writeKey(this.hookName);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlHook}\n *\n * @private\n * @function\n */\nconst readYXmlHook = decoder =>\n  new YXmlHook(decoder.readKey());\n\n/**\n * Represents text in a Dom Element. In the future this type will also handle\n * simple formatting information like bold and italic.\n */\nclass YXmlText extends YText {\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get nextSibling () {\n    const n = this._item ? this._item.next : null;\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get prevSibling () {\n    const n = this._item ? this._item.prev : null;\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  _copy () {\n    return new YXmlText()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YXmlText}\n   */\n  clone () {\n    const text = new YXmlText();\n    text.applyDelta(this.toDelta());\n    return text\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlText.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Text} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks, binding) {\n    const dom = _document.createTextNode(this.toString());\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this);\n    }\n    return dom\n  }\n\n  toString () {\n    // @ts-ignore\n    return this.toDelta().map(delta => {\n      const nestedNodes = [];\n      for (const nodeName in delta.attributes) {\n        const attrs = [];\n        for (const key in delta.attributes[nodeName]) {\n          attrs.push({ key, value: delta.attributes[nodeName][key] });\n        }\n        // sort attributes to get a unique order\n        attrs.sort((a, b) => a.key < b.key ? -1 : 1);\n        nestedNodes.push({ nodeName, attrs });\n      }\n      // sort node order to get a unique order\n      nestedNodes.sort((a, b) => a.nodeName < b.nodeName ? -1 : 1);\n      // now convert to dom string\n      let str = '';\n      for (let i = 0; i < nestedNodes.length; i++) {\n        const node = nestedNodes[i];\n        str += `<${node.nodeName}`;\n        for (let j = 0; j < node.attrs.length; j++) {\n          const attr = node.attrs[j];\n          str += ` ${attr.key}=\"${attr.value}\"`;\n        }\n        str += '>';\n      }\n      str += delta.insert;\n      for (let i = nestedNodes.length - 1; i >= 0; i--) {\n        str += `</${nestedNodes[i].nodeName}>`;\n      }\n      return str\n    }).join('')\n  }\n\n  /**\n   * @return {string}\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlTextRefID);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlText}\n *\n * @private\n * @function\n */\nconst readYXmlText = decoder => new YXmlText();\n\nclass AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {number} length\n   */\n  constructor (id, length) {\n    this.id = id;\n    this.length = length;\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get deleted () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * Merge this struct with the item to the right.\n   * This method is already assuming that `this.id.clock + this.length === this.id.clock`.\n   * Also this method does *not* remove right from StructStore!\n   * @param {AbstractStruct} right\n   * @return {boolean} wether this merged with right\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   * @param {number} offset\n   * @param {number} encodingRef\n   */\n  write (encoder, offset, encodingRef) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    throw error.methodUnimplemented()\n  }\n}\n\nconst structGCRefNumber = 0;\n\n/**\n * @private\n */\nclass GC extends AbstractStruct {\n  get deleted () {\n    return true\n  }\n\n  delete () {}\n\n  /**\n   * @param {GC} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (this.constructor !== right.constructor) {\n      return false\n    }\n    this.length += right.length;\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    if (offset > 0) {\n      this.id.clock += offset;\n      this.length -= offset;\n    }\n    addStruct(transaction.doc.store, this);\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeInfo(structGCRefNumber);\n    encoder.writeLen(this.length - offset);\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    return null\n  }\n}\n\nclass ContentBinary {\n  /**\n   * @param {Uint8Array} content\n   */\n  constructor (content) {\n    this.content = content;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.content]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentBinary}\n   */\n  copy () {\n    return new ContentBinary(this.content)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentBinary}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentBinary} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeBuf(this.content);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 3\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2 } decoder\n * @return {ContentBinary}\n */\nconst readContentBinary = decoder => new ContentBinary(decoder.readBuf());\n\nclass ContentDeleted {\n  /**\n   * @param {number} len\n   */\n  constructor (len) {\n    this.len = len;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.len\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return []\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return false\n  }\n\n  /**\n   * @return {ContentDeleted}\n   */\n  copy () {\n    return new ContentDeleted(this.len)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentDeleted}\n   */\n  splice (offset) {\n    const right = new ContentDeleted(this.len - offset);\n    this.len = offset;\n    return right\n  }\n\n  /**\n   * @param {ContentDeleted} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.len += right.len;\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    addToDeleteSet(transaction.deleteSet, item.id.client, item.id.clock, this.len);\n    item.markDeleted();\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeLen(this.len - offset);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 1\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2 } decoder\n * @return {ContentDeleted}\n */\nconst readContentDeleted = decoder => new ContentDeleted(decoder.readLen());\n\n/**\n * @param {string} guid\n * @param {Object<string, any>} opts\n */\nconst createDocFromOpts = (guid, opts) => new Doc({ guid, ...opts, shouldLoad: opts.shouldLoad || opts.autoLoad || false });\n\n/**\n * @private\n */\nclass ContentDoc {\n  /**\n   * @param {Doc} doc\n   */\n  constructor (doc) {\n    if (doc._item) {\n      console.error('This document was already integrated as a sub-document. You should create a second instance instead with the same guid.');\n    }\n    /**\n     * @type {Doc}\n     */\n    this.doc = doc;\n    /**\n     * @type {any}\n     */\n    const opts = {};\n    this.opts = opts;\n    if (!doc.gc) {\n      opts.gc = false;\n    }\n    if (doc.autoLoad) {\n      opts.autoLoad = true;\n    }\n    if (doc.meta !== null) {\n      opts.meta = doc.meta;\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.doc]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentDoc}\n   */\n  copy () {\n    return new ContentDoc(createDocFromOpts(this.doc.guid, this.opts))\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentDoc}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentDoc} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    // this needs to be reflected in doc.destroy as well\n    this.doc._item = item;\n    transaction.subdocsAdded.add(this.doc);\n    if (this.doc.shouldLoad) {\n      transaction.subdocsLoaded.add(this.doc);\n    }\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    if (transaction.subdocsAdded.has(this.doc)) {\n      transaction.subdocsAdded.delete(this.doc);\n    } else {\n      transaction.subdocsRemoved.add(this.doc);\n    }\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) { }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeString(this.doc.guid);\n    encoder.writeAny(this.opts);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 9\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentDoc}\n */\nconst readContentDoc = decoder => new ContentDoc(createDocFromOpts(decoder.readString(), decoder.readAny()));\n\n/**\n * @private\n */\nclass ContentEmbed {\n  /**\n   * @param {Object} embed\n   */\n  constructor (embed) {\n    this.embed = embed;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.embed]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentEmbed}\n   */\n  copy () {\n    return new ContentEmbed(this.embed)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentEmbed}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentEmbed} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeJSON(this.embed);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 5\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentEmbed}\n */\nconst readContentEmbed = decoder => new ContentEmbed(decoder.readJSON());\n\n/**\n * @private\n */\nclass ContentFormat {\n  /**\n   * @param {string} key\n   * @param {Object} value\n   */\n  constructor (key, value) {\n    this.key = key;\n    this.value = value;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return []\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return false\n  }\n\n  /**\n   * @return {ContentFormat}\n   */\n  copy () {\n    return new ContentFormat(this.key, this.value)\n  }\n\n  /**\n   * @param {number} _offset\n   * @return {ContentFormat}\n   */\n  splice (_offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentFormat} _right\n   * @return {boolean}\n   */\n  mergeWith (_right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} _transaction\n   * @param {Item} item\n   */\n  integrate (_transaction, item) {\n    // @todo searchmarker are currently unsupported for rich text documents\n    const p = /** @type {YText} */ (item.parent);\n    p._searchMarker = null;\n    p._hasFormatting = true;\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeKey(this.key);\n    encoder.writeJSON(this.value);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 6\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentFormat}\n */\nconst readContentFormat = decoder => new ContentFormat(decoder.readKey(), decoder.readJSON());\n\n/**\n * @private\n */\nclass ContentJSON {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor (arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.arr.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.arr\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentJSON}\n   */\n  copy () {\n    return new ContentJSON(this.arr)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentJSON}\n   */\n  splice (offset) {\n    const right = new ContentJSON(this.arr.slice(offset));\n    this.arr = this.arr.slice(0, offset);\n    return right\n  }\n\n  /**\n   * @param {ContentJSON} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.arr = this.arr.concat(right.arr);\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const len = this.arr.length;\n    encoder.writeLen(len - offset);\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i];\n      encoder.writeString(c === undefined ? 'undefined' : JSON.stringify(c));\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 2\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentJSON}\n */\nconst readContentJSON = decoder => {\n  const len = decoder.readLen();\n  const cs = [];\n  for (let i = 0; i < len; i++) {\n    const c = decoder.readString();\n    if (c === 'undefined') {\n      cs.push(undefined);\n    } else {\n      cs.push(JSON.parse(c));\n    }\n  }\n  return new ContentJSON(cs)\n};\n\nconst isDevMode = env.getVariable('node_env') === 'development';\n\nclass ContentAny {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor (arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr;\n    isDevMode && object.deepFreeze(arr);\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.arr.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.arr\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentAny}\n   */\n  copy () {\n    return new ContentAny(this.arr)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentAny}\n   */\n  splice (offset) {\n    const right = new ContentAny(this.arr.slice(offset));\n    this.arr = this.arr.slice(0, offset);\n    return right\n  }\n\n  /**\n   * @param {ContentAny} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.arr = this.arr.concat(right.arr);\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const len = this.arr.length;\n    encoder.writeLen(len - offset);\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i];\n      encoder.writeAny(c);\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 8\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentAny}\n */\nconst readContentAny = decoder => {\n  const len = decoder.readLen();\n  const cs = [];\n  for (let i = 0; i < len; i++) {\n    cs.push(decoder.readAny());\n  }\n  return new ContentAny(cs)\n};\n\n/**\n * @private\n */\nclass ContentString {\n  /**\n   * @param {string} str\n   */\n  constructor (str) {\n    /**\n     * @type {string}\n     */\n    this.str = str;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.str.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.str.split('')\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentString}\n   */\n  copy () {\n    return new ContentString(this.str)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentString}\n   */\n  splice (offset) {\n    const right = new ContentString(this.str.slice(offset));\n    this.str = this.str.slice(0, offset);\n\n    // Prevent encoding invalid documents because of splitting of surrogate pairs: https://github.com/yjs/yjs/issues/248\n    const firstCharCode = this.str.charCodeAt(offset - 1);\n    if (firstCharCode >= 0xD800 && firstCharCode <= 0xDBFF) {\n      // Last character of the left split is the start of a surrogate utf16/ucs2 pair.\n      // We don't support splitting of surrogate pairs because this may lead to invalid documents.\n      // Replace the invalid character with a unicode replacement character (� / U+FFFD)\n      this.str = this.str.slice(0, offset - 1) + '�';\n      // replace right as well\n      right.str = '�' + right.str.slice(1);\n    }\n    return right\n  }\n\n  /**\n   * @param {ContentString} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.str += right.str;\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeString(offset === 0 ? this.str : this.str.slice(offset));\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 4\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentString}\n */\nconst readContentString = decoder => new ContentString(decoder.readString());\n\n/**\n * @type {Array<function(UpdateDecoderV1 | UpdateDecoderV2):AbstractType<any>>}\n * @private\n */\nconst typeRefs = [\n  readYArray,\n  readYMap,\n  readYText,\n  readYXmlElement,\n  readYXmlFragment,\n  readYXmlHook,\n  readYXmlText\n];\n\nconst YArrayRefID = 0;\nconst YMapRefID = 1;\nconst YTextRefID = 2;\nconst YXmlElementRefID = 3;\nconst YXmlFragmentRefID = 4;\nconst YXmlHookRefID = 5;\nconst YXmlTextRefID = 6;\n\n/**\n * @private\n */\nclass ContentType {\n  /**\n   * @param {AbstractType<any>} type\n   */\n  constructor (type) {\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.type]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentType}\n   */\n  copy () {\n    return new ContentType(this.type._copy())\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentType}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentType} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    this.type._integrate(transaction.doc, item);\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    let item = this.type._start;\n    while (item !== null) {\n      if (!item.deleted) {\n        item.delete(transaction);\n      } else if (item.id.clock < (transaction.beforeState.get(item.id.client) || 0)) {\n        // This will be gc'd later and we want to merge it if possible\n        // We try to merge all deleted items after each transaction,\n        // but we have no knowledge about that this needs to be merged\n        // since it is not in transaction.ds. Hence we add it to transaction._mergeStructs\n        transaction._mergeStructs.push(item);\n      }\n      item = item.right;\n    }\n    this.type._map.forEach(item => {\n      if (!item.deleted) {\n        item.delete(transaction);\n      } else if (item.id.clock < (transaction.beforeState.get(item.id.client) || 0)) {\n        // same as above\n        transaction._mergeStructs.push(item);\n      }\n    });\n    transaction.changed.delete(this.type);\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {\n    let item = this.type._start;\n    while (item !== null) {\n      item.gc(store, true);\n      item = item.right;\n    }\n    this.type._start = null;\n    this.type._map.forEach(/** @param {Item | null} item */ (item) => {\n      while (item !== null) {\n        item.gc(store, true);\n        item = item.left;\n      }\n    });\n    this.type._map = new Map();\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    this.type._write(encoder);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 7\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentType}\n */\nconst readContentType = decoder => new ContentType(typeRefs[decoder.readTypeRef()](decoder));\n\n/**\n * @todo This should return several items\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {{item:Item, diff:number}}\n */\nconst followRedone = (store, id) => {\n  /**\n   * @type {ID|null}\n   */\n  let nextID = id;\n  let diff = 0;\n  let item;\n  do {\n    if (diff > 0) {\n      nextID = createID(nextID.client, nextID.clock + diff);\n    }\n    item = getItem(store, nextID);\n    diff = nextID.clock - item.id.clock;\n    nextID = item.redone;\n  } while (nextID !== null && item instanceof Item)\n  return {\n    item, diff\n  }\n};\n\n/**\n * Make sure that neither item nor any of its parents is ever deleted.\n *\n * This property does not persist when storing it into a database or when\n * sending it to other peers\n *\n * @param {Item|null} item\n * @param {boolean} keep\n */\nconst keepItem = (item, keep) => {\n  while (item !== null && item.keep !== keep) {\n    item.keep = keep;\n    item = /** @type {AbstractType<any>} */ (item.parent)._item;\n  }\n};\n\n/**\n * Split leftItem into two items\n * @param {Transaction} transaction\n * @param {Item} leftItem\n * @param {number} diff\n * @return {Item}\n *\n * @function\n * @private\n */\nconst splitItem = (transaction, leftItem, diff) => {\n  // create rightItem\n  const { client, clock } = leftItem.id;\n  const rightItem = new Item(\n    createID(client, clock + diff),\n    leftItem,\n    createID(client, clock + diff - 1),\n    leftItem.right,\n    leftItem.rightOrigin,\n    leftItem.parent,\n    leftItem.parentSub,\n    leftItem.content.splice(diff)\n  );\n  if (leftItem.deleted) {\n    rightItem.markDeleted();\n  }\n  if (leftItem.keep) {\n    rightItem.keep = true;\n  }\n  if (leftItem.redone !== null) {\n    rightItem.redone = createID(leftItem.redone.client, leftItem.redone.clock + diff);\n  }\n  // update left (do not set leftItem.rightOrigin as it will lead to problems when syncing)\n  leftItem.right = rightItem;\n  // update right\n  if (rightItem.right !== null) {\n    rightItem.right.left = rightItem;\n  }\n  // right is more specific.\n  transaction._mergeStructs.push(rightItem);\n  // update parent._map\n  if (rightItem.parentSub !== null && rightItem.right === null) {\n    /** @type {AbstractType<any>} */ (rightItem.parent)._map.set(rightItem.parentSub, rightItem);\n  }\n  leftItem.length = diff;\n  return rightItem\n};\n\n/**\n * @param {Array<StackItem>} stack\n * @param {ID} id\n */\nconst isDeletedByUndoStack = (stack, id) => array.some(stack, /** @param {StackItem} s */ s => isDeleted(s.deletions, id));\n\n/**\n * Redoes the effect of this operation.\n *\n * @param {Transaction} transaction The Yjs instance.\n * @param {Item} item\n * @param {Set<Item>} redoitems\n * @param {DeleteSet} itemsToDelete\n * @param {boolean} ignoreRemoteMapChanges\n * @param {import('../utils/UndoManager.js').UndoManager} um\n *\n * @return {Item|null}\n *\n * @private\n */\nconst redoItem = (transaction, item, redoitems, itemsToDelete, ignoreRemoteMapChanges, um) => {\n  const doc = transaction.doc;\n  const store = doc.store;\n  const ownClientID = doc.clientID;\n  const redone = item.redone;\n  if (redone !== null) {\n    return getItemCleanStart(transaction, redone)\n  }\n  let parentItem = /** @type {AbstractType<any>} */ (item.parent)._item;\n  /**\n   * @type {Item|null}\n   */\n  let left = null;\n  /**\n   * @type {Item|null}\n   */\n  let right;\n  // make sure that parent is redone\n  if (parentItem !== null && parentItem.deleted === true) {\n    // try to undo parent if it will be undone anyway\n    if (parentItem.redone === null && (!redoitems.has(parentItem) || redoItem(transaction, parentItem, redoitems, itemsToDelete, ignoreRemoteMapChanges, um) === null)) {\n      return null\n    }\n    while (parentItem.redone !== null) {\n      parentItem = getItemCleanStart(transaction, parentItem.redone);\n    }\n  }\n  const parentType = parentItem === null ? /** @type {AbstractType<any>} */ (item.parent) : /** @type {ContentType} */ (parentItem.content).type;\n\n  if (item.parentSub === null) {\n    // Is an array item. Insert at the old position\n    left = item.left;\n    right = item;\n    // find next cloned_redo items\n    while (left !== null) {\n      /**\n       * @type {Item|null}\n       */\n      let leftTrace = left;\n      // trace redone until parent matches\n      while (leftTrace !== null && /** @type {AbstractType<any>} */ (leftTrace.parent)._item !== parentItem) {\n        leftTrace = leftTrace.redone === null ? null : getItemCleanStart(transaction, leftTrace.redone);\n      }\n      if (leftTrace !== null && /** @type {AbstractType<any>} */ (leftTrace.parent)._item === parentItem) {\n        left = leftTrace;\n        break\n      }\n      left = left.left;\n    }\n    while (right !== null) {\n      /**\n       * @type {Item|null}\n       */\n      let rightTrace = right;\n      // trace redone until parent matches\n      while (rightTrace !== null && /** @type {AbstractType<any>} */ (rightTrace.parent)._item !== parentItem) {\n        rightTrace = rightTrace.redone === null ? null : getItemCleanStart(transaction, rightTrace.redone);\n      }\n      if (rightTrace !== null && /** @type {AbstractType<any>} */ (rightTrace.parent)._item === parentItem) {\n        right = rightTrace;\n        break\n      }\n      right = right.right;\n    }\n  } else {\n    right = null;\n    if (item.right && !ignoreRemoteMapChanges) {\n      left = item;\n      // Iterate right while right is in itemsToDelete\n      // If it is intended to delete right while item is redone, we can expect that item should replace right.\n      while (left !== null && left.right !== null && (left.right.redone || isDeleted(itemsToDelete, left.right.id) || isDeletedByUndoStack(um.undoStack, left.right.id) || isDeletedByUndoStack(um.redoStack, left.right.id))) {\n        left = left.right;\n        // follow redone\n        while (left.redone) left = getItemCleanStart(transaction, left.redone);\n      }\n      if (left && left.right !== null) {\n        // It is not possible to redo this item because it conflicts with a\n        // change from another client\n        return null\n      }\n    } else {\n      left = parentType._map.get(item.parentSub) || null;\n    }\n  }\n  const nextClock = getState(store, ownClientID);\n  const nextId = createID(ownClientID, nextClock);\n  const redoneItem = new Item(\n    nextId,\n    left, left && left.lastId,\n    right, right && right.id,\n    parentType,\n    item.parentSub,\n    item.content.copy()\n  );\n  item.redone = nextId;\n  keepItem(redoneItem, true);\n  redoneItem.integrate(transaction, 0);\n  return redoneItem\n};\n\n/**\n * Abstract class that represents any content.\n */\nclass Item extends AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {Item | null} left\n   * @param {ID | null} origin\n   * @param {Item | null} right\n   * @param {ID | null} rightOrigin\n   * @param {AbstractType<any>|ID|null} parent Is a type if integrated, is null if it is possible to copy parent from left or right, is ID before integration to search for it.\n   * @param {string | null} parentSub\n   * @param {AbstractContent} content\n   */\n  constructor (id, left, origin, right, rightOrigin, parent, parentSub, content) {\n    super(id, content.getLength());\n    /**\n     * The item that was originally to the left of this item.\n     * @type {ID | null}\n     */\n    this.origin = origin;\n    /**\n     * The item that is currently to the left of this item.\n     * @type {Item | null}\n     */\n    this.left = left;\n    /**\n     * The item that is currently to the right of this item.\n     * @type {Item | null}\n     */\n    this.right = right;\n    /**\n     * The item that was originally to the right of this item.\n     * @type {ID | null}\n     */\n    this.rightOrigin = rightOrigin;\n    /**\n     * @type {AbstractType<any>|ID|null}\n     */\n    this.parent = parent;\n    /**\n     * If the parent refers to this item with some kind of key (e.g. YMap, the\n     * key is specified here. The key is then used to refer to the list in which\n     * to insert this item. If `parentSub = null` type._start is the list in\n     * which to insert to. Otherwise it is `parent._map`.\n     * @type {String | null}\n     */\n    this.parentSub = parentSub;\n    /**\n     * If this type's effect is redone this type refers to the type that undid\n     * this operation.\n     * @type {ID | null}\n     */\n    this.redone = null;\n    /**\n     * @type {AbstractContent}\n     */\n    this.content = content;\n    /**\n     * bit1: keep\n     * bit2: countable\n     * bit3: deleted\n     * bit4: mark - mark node as fast-search-marker\n     * @type {number} byte\n     */\n    this.info = this.content.isCountable() ? binary.BIT2 : 0;\n  }\n\n  /**\n   * This is used to mark the item as an indexed fast-search marker\n   *\n   * @type {boolean}\n   */\n  set marker (isMarked) {\n    if (((this.info & binary.BIT4) > 0) !== isMarked) {\n      this.info ^= binary.BIT4;\n    }\n  }\n\n  get marker () {\n    return (this.info & binary.BIT4) > 0\n  }\n\n  /**\n   * If true, do not garbage collect this Item.\n   */\n  get keep () {\n    return (this.info & binary.BIT1) > 0\n  }\n\n  set keep (doKeep) {\n    if (this.keep !== doKeep) {\n      this.info ^= binary.BIT1;\n    }\n  }\n\n  get countable () {\n    return (this.info & binary.BIT2) > 0\n  }\n\n  /**\n   * Whether this item was deleted or not.\n   * @type {Boolean}\n   */\n  get deleted () {\n    return (this.info & binary.BIT3) > 0\n  }\n\n  set deleted (doDelete) {\n    if (this.deleted !== doDelete) {\n      this.info ^= binary.BIT3;\n    }\n  }\n\n  markDeleted () {\n    this.info |= binary.BIT3;\n  }\n\n  /**\n   * Return the creator clientID of the missing op or define missing items and return null.\n   *\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    if (this.origin && this.origin.client !== this.id.client && this.origin.clock >= getState(store, this.origin.client)) {\n      return this.origin.client\n    }\n    if (this.rightOrigin && this.rightOrigin.client !== this.id.client && this.rightOrigin.clock >= getState(store, this.rightOrigin.client)) {\n      return this.rightOrigin.client\n    }\n    if (this.parent && this.parent.constructor === ID && this.id.client !== this.parent.client && this.parent.clock >= getState(store, this.parent.client)) {\n      return this.parent.client\n    }\n\n    // We have all missing ids, now find the items\n\n    if (this.origin) {\n      this.left = getItemCleanEnd(transaction, store, this.origin);\n      this.origin = this.left.lastId;\n    }\n    if (this.rightOrigin) {\n      this.right = getItemCleanStart(transaction, this.rightOrigin);\n      this.rightOrigin = this.right.id;\n    }\n    if ((this.left && this.left.constructor === GC) || (this.right && this.right.constructor === GC)) {\n      this.parent = null;\n    } else if (!this.parent) {\n      // only set parent if this shouldn't be garbage collected\n      if (this.left && this.left.constructor === Item) {\n        this.parent = this.left.parent;\n        this.parentSub = this.left.parentSub;\n      }\n      if (this.right && this.right.constructor === Item) {\n        this.parent = this.right.parent;\n        this.parentSub = this.right.parentSub;\n      }\n    } else if (this.parent.constructor === ID) {\n      const parentItem = getItem(store, this.parent);\n      if (parentItem.constructor === GC) {\n        this.parent = null;\n      } else {\n        this.parent = /** @type {ContentType} */ (parentItem.content).type;\n      }\n    }\n    return null\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    if (offset > 0) {\n      this.id.clock += offset;\n      this.left = getItemCleanEnd(transaction, transaction.doc.store, createID(this.id.client, this.id.clock - 1));\n      this.origin = this.left.lastId;\n      this.content = this.content.splice(offset);\n      this.length -= offset;\n    }\n\n    if (this.parent) {\n      if ((!this.left && (!this.right || this.right.left !== null)) || (this.left && this.left.right !== this.right)) {\n        /**\n         * @type {Item|null}\n         */\n        let left = this.left;\n\n        /**\n         * @type {Item|null}\n         */\n        let o;\n        // set o to the first conflicting item\n        if (left !== null) {\n          o = left.right;\n        } else if (this.parentSub !== null) {\n          o = /** @type {AbstractType<any>} */ (this.parent)._map.get(this.parentSub) || null;\n          while (o !== null && o.left !== null) {\n            o = o.left;\n          }\n        } else {\n          o = /** @type {AbstractType<any>} */ (this.parent)._start;\n        }\n        // TODO: use something like DeleteSet here (a tree implementation would be best)\n        // @todo use global set definitions\n        /**\n         * @type {Set<Item>}\n         */\n        const conflictingItems = new Set();\n        /**\n         * @type {Set<Item>}\n         */\n        const itemsBeforeOrigin = new Set();\n        // Let c in conflictingItems, b in itemsBeforeOrigin\n        // ***{origin}bbbb{this}{c,b}{c,b}{o}***\n        // Note that conflictingItems is a subset of itemsBeforeOrigin\n        while (o !== null && o !== this.right) {\n          itemsBeforeOrigin.add(o);\n          conflictingItems.add(o);\n          if (compareIDs(this.origin, o.origin)) {\n            // case 1\n            if (o.id.client < this.id.client) {\n              left = o;\n              conflictingItems.clear();\n            } else if (compareIDs(this.rightOrigin, o.rightOrigin)) {\n              // this and o are conflicting and point to the same integration points. The id decides which item comes first.\n              // Since this is to the left of o, we can break here\n              break\n            } // else, o might be integrated before an item that this conflicts with. If so, we will find it in the next iterations\n          } else if (o.origin !== null && itemsBeforeOrigin.has(getItem(transaction.doc.store, o.origin))) { // use getItem instead of getItemCleanEnd because we don't want / need to split items.\n            // case 2\n            if (!conflictingItems.has(getItem(transaction.doc.store, o.origin))) {\n              left = o;\n              conflictingItems.clear();\n            }\n          } else {\n            break\n          }\n          o = o.right;\n        }\n        this.left = left;\n      }\n      // reconnect left/right + update parent map/start if necessary\n      if (this.left !== null) {\n        const right = this.left.right;\n        this.right = right;\n        this.left.right = this;\n      } else {\n        let r;\n        if (this.parentSub !== null) {\n          r = /** @type {AbstractType<any>} */ (this.parent)._map.get(this.parentSub) || null;\n          while (r !== null && r.left !== null) {\n            r = r.left;\n          }\n        } else {\n          r = /** @type {AbstractType<any>} */ (this.parent)._start\n          ;/** @type {AbstractType<any>} */ (this.parent)._start = this;\n        }\n        this.right = r;\n      }\n      if (this.right !== null) {\n        this.right.left = this;\n      } else if (this.parentSub !== null) {\n        // set as current parent value if right === null and this is parentSub\n        /** @type {AbstractType<any>} */ (this.parent)._map.set(this.parentSub, this);\n        if (this.left !== null) {\n          // this is the current attribute value of parent. delete right\n          this.left.delete(transaction);\n        }\n      }\n      // adjust length of parent\n      if (this.parentSub === null && this.countable && !this.deleted) {\n        /** @type {AbstractType<any>} */ (this.parent)._length += this.length;\n      }\n      addStruct(transaction.doc.store, this);\n      this.content.integrate(transaction, this);\n      // add parent to transaction.changed\n      addChangedTypeToTransaction(transaction, /** @type {AbstractType<any>} */ (this.parent), this.parentSub);\n      if ((/** @type {AbstractType<any>} */ (this.parent)._item !== null && /** @type {AbstractType<any>} */ (this.parent)._item.deleted) || (this.parentSub !== null && this.right !== null)) {\n        // delete if parent is deleted or if this is not the current attribute value of parent\n        this.delete(transaction);\n      }\n    } else {\n      // parent is not defined. Integrate GC struct instead\n      new GC(this.id, this.length).integrate(transaction, 0);\n    }\n  }\n\n  /**\n   * Returns the next non-deleted item\n   */\n  get next () {\n    let n = this.right;\n    while (n !== null && n.deleted) {\n      n = n.right;\n    }\n    return n\n  }\n\n  /**\n   * Returns the previous non-deleted item\n   */\n  get prev () {\n    let n = this.left;\n    while (n !== null && n.deleted) {\n      n = n.left;\n    }\n    return n\n  }\n\n  /**\n   * Computes the last content address of this Item.\n   */\n  get lastId () {\n    // allocating ids is pretty costly because of the amount of ids created, so we try to reuse whenever possible\n    return this.length === 1 ? this.id : createID(this.id.client, this.id.clock + this.length - 1)\n  }\n\n  /**\n   * Try to merge two items\n   *\n   * @param {Item} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (\n      this.constructor === right.constructor &&\n      compareIDs(right.origin, this.lastId) &&\n      this.right === right &&\n      compareIDs(this.rightOrigin, right.rightOrigin) &&\n      this.id.client === right.id.client &&\n      this.id.clock + this.length === right.id.clock &&\n      this.deleted === right.deleted &&\n      this.redone === null &&\n      right.redone === null &&\n      this.content.constructor === right.content.constructor &&\n      this.content.mergeWith(right.content)\n    ) {\n      const searchMarker = /** @type {AbstractType<any>} */ (this.parent)._searchMarker;\n      if (searchMarker) {\n        searchMarker.forEach(marker => {\n          if (marker.p === right) {\n            // right is going to be \"forgotten\" so we need to update the marker\n            marker.p = this;\n            // adjust marker index\n            if (!this.deleted && this.countable) {\n              marker.index -= this.length;\n            }\n          }\n        });\n      }\n      if (right.keep) {\n        this.keep = true;\n      }\n      this.right = right.right;\n      if (this.right !== null) {\n        this.right.left = this;\n      }\n      this.length += right.length;\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Mark this Item as deleted.\n   *\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    if (!this.deleted) {\n      const parent = /** @type {AbstractType<any>} */ (this.parent);\n      // adjust the length of parent\n      if (this.countable && this.parentSub === null) {\n        parent._length -= this.length;\n      }\n      this.markDeleted();\n      addToDeleteSet(transaction.deleteSet, this.id.client, this.id.clock, this.length);\n      addChangedTypeToTransaction(transaction, parent, this.parentSub);\n      this.content.delete(transaction);\n    }\n  }\n\n  /**\n   * @param {StructStore} store\n   * @param {boolean} parentGCd\n   */\n  gc (store, parentGCd) {\n    if (!this.deleted) {\n      throw error.unexpectedCase()\n    }\n    this.content.gc(store);\n    if (parentGCd) {\n      replaceStruct(store, this, new GC(this.id, this.length));\n    } else {\n      this.content = new ContentDeleted(this.length);\n    }\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const origin = offset > 0 ? createID(this.id.client, this.id.clock + offset - 1) : this.origin;\n    const rightOrigin = this.rightOrigin;\n    const parentSub = this.parentSub;\n    const info = (this.content.getRef() & binary.BITS5) |\n      (origin === null ? 0 : binary.BIT8) | // origin is defined\n      (rightOrigin === null ? 0 : binary.BIT7) | // right origin is defined\n      (parentSub === null ? 0 : binary.BIT6); // parentSub is non-null\n    encoder.writeInfo(info);\n    if (origin !== null) {\n      encoder.writeLeftID(origin);\n    }\n    if (rightOrigin !== null) {\n      encoder.writeRightID(rightOrigin);\n    }\n    if (origin === null && rightOrigin === null) {\n      const parent = /** @type {AbstractType<any>} */ (this.parent);\n      if (parent._item !== undefined) {\n        const parentItem = parent._item;\n        if (parentItem === null) {\n          // parent type on y._map\n          // find the correct key\n          const ykey = findRootTypeKey(parent);\n          encoder.writeParentInfo(true); // write parentYKey\n          encoder.writeString(ykey);\n        } else {\n          encoder.writeParentInfo(false); // write parent id\n          encoder.writeLeftID(parentItem.id);\n        }\n      } else if (parent.constructor === String) { // this edge case was added by differential updates\n        encoder.writeParentInfo(true); // write parentYKey\n        encoder.writeString(parent);\n      } else if (parent.constructor === ID) {\n        encoder.writeParentInfo(false); // write parent id\n        encoder.writeLeftID(parent);\n      } else {\n        error.unexpectedCase();\n      }\n      if (parentSub !== null) {\n        encoder.writeString(parentSub);\n      }\n    }\n    this.content.write(encoder, offset);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @param {number} info\n */\nconst readItemContent = (decoder, info) => contentRefs[info & binary.BITS5](decoder);\n\n/**\n * A lookup map for reading Item content.\n *\n * @type {Array<function(UpdateDecoderV1 | UpdateDecoderV2):AbstractContent>}\n */\nconst contentRefs = [\n  () => { error.unexpectedCase(); }, // GC is not ItemContent\n  readContentDeleted, // 1\n  readContentJSON, // 2\n  readContentBinary, // 3\n  readContentString, // 4\n  readContentEmbed, // 5\n  readContentFormat, // 6\n  readContentType, // 7\n  readContentAny, // 8\n  readContentDoc, // 9\n  () => { error.unexpectedCase(); } // 10 - Skip is not ItemContent\n];\n\nconst structSkipRefNumber = 10;\n\n/**\n * @private\n */\nclass Skip extends AbstractStruct {\n  get deleted () {\n    return true\n  }\n\n  delete () {}\n\n  /**\n   * @param {Skip} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (this.constructor !== right.constructor) {\n      return false\n    }\n    this.length += right.length;\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    // skip structs cannot be integrated\n    error.unexpectedCase();\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeInfo(structSkipRefNumber);\n    // write as VarUint because Skips can't make use of predictable length-encoding\n    encoding.writeVarUint(encoder.restEncoder, this.length - offset);\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    return null\n  }\n}\n\n/** eslint-env browser */\n\n\nconst glo = /** @type {any} */ (typeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof window !== 'undefined'\n    ? window\n    // @ts-ignore\n    : typeof global !== 'undefined' ? global : {});\n\nconst importIdentifier = '__ $YJS$ __';\n\nif (glo[importIdentifier] === true) {\n  /**\n   * Dear reader of this message. Please take this seriously.\n   *\n   * If you see this message, make sure that you only import one version of Yjs. In many cases,\n   * your package manager installs two versions of Yjs that are used by different packages within your project.\n   * Another reason for this message is that some parts of your project use the commonjs version of Yjs\n   * and others use the EcmaScript version of Yjs.\n   *\n   * This often leads to issues that are hard to debug. We often need to perform constructor checks,\n   * e.g. `struct instanceof GC`. If you imported different versions of Yjs, it is impossible for us to\n   * do the constructor checks anymore - which might break the CRDT algorithm.\n   *\n   * https://github.com/yjs/yjs/issues/438\n   */\n  console.error('Yjs was already imported. This breaks constructor checks and will lead to issues! - https://github.com/yjs/yjs/issues/438');\n}\nglo[importIdentifier] = true;\n\nexport { AbsolutePosition, AbstractConnector, AbstractStruct, AbstractType, YArray as Array, ContentAny, ContentBinary, ContentDeleted, ContentDoc, ContentEmbed, ContentFormat, ContentJSON, ContentString, ContentType, Doc, GC, ID, Item, YMap as Map, PermanentUserData, RelativePosition, Skip, Snapshot, YText as Text, Transaction, UndoManager, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, YXmlElement as XmlElement, YXmlFragment as XmlFragment, YXmlHook as XmlHook, YXmlText as XmlText, YArrayEvent, YEvent, YMapEvent, YTextEvent, YXmlEvent, applyUpdate, applyUpdateV2, cleanupYTextFormatting, compareIDs, compareRelativePositions, convertUpdateFormatV1ToV2, convertUpdateFormatV2ToV1, createAbsolutePositionFromRelativePosition, createDeleteSet, createDeleteSetFromStructStore, createDocFromSnapshot, createID, createRelativePositionFromJSON, createRelativePositionFromTypeIndex, createSnapshot, decodeRelativePosition, decodeSnapshot, decodeSnapshotV2, decodeStateVector, decodeUpdate, decodeUpdateV2, diffUpdate, diffUpdateV2, emptySnapshot, encodeRelativePosition, encodeSnapshot, encodeSnapshotV2, encodeStateAsUpdate, encodeStateAsUpdateV2, encodeStateVector, encodeStateVectorFromUpdate, encodeStateVectorFromUpdateV2, equalDeleteSets, equalSnapshots, findIndexSS, findRootTypeKey, getItem, getState, getTypeChildren, isDeleted, isParentOf, iterateDeletedStructs, logType, logUpdate, logUpdateV2, mergeDeleteSets, mergeUpdates, mergeUpdatesV2, obfuscateUpdate, obfuscateUpdateV2, parseUpdateMeta, parseUpdateMetaV2, readUpdate, readUpdateV2, relativePositionToJSON, snapshot, snapshotContainsUpdate, transact, tryGc, typeListToArraySnapshot, typeMapGetAllSnapshot, typeMapGetSnapshot };\n//# sourceMappingURL=yjs.mjs.map\n","import { ObservableV2 } from 'lib0/observable'\n\nimport {\n  Doc // eslint-disable-line\n} from '../internals.js'\n\n/**\n * This is an abstract interface that all Connectors should implement to keep them interchangeable.\n *\n * @note This interface is experimental and it is not advised to actually inherit this class.\n *       It just serves as typing information.\n *\n * @extends {ObservableV2<any>}\n */\nexport class AbstractConnector extends ObservableV2 {\n  /**\n   * @param {Doc} ydoc\n   * @param {any} awareness\n   */\n  constructor (ydoc, awareness) {\n    super()\n    this.doc = ydoc\n    this.awareness = awareness\n  }\n}\n","import {\n  findIndexSS,\n  getState,\n  splitItem,\n  iterateStructs,\n  UpdateEncoderV2,\n  DSDecoderV1, DSEncoderV1, DSDecoderV2, DSEncoderV2, Item, GC, StructStore, Transaction, ID // eslint-disable-line\n} from '../internals.js'\n\nimport * as array from 'lib0/array'\nimport * as math from 'lib0/math'\nimport * as map from 'lib0/map'\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\n\nexport class DeleteItem {\n  /**\n   * @param {number} clock\n   * @param {number} len\n   */\n  constructor (clock, len) {\n    /**\n     * @type {number}\n     */\n    this.clock = clock\n    /**\n     * @type {number}\n     */\n    this.len = len\n  }\n}\n\n/**\n * We no longer maintain a DeleteStore. DeleteSet is a temporary object that is created when needed.\n * - When created in a transaction, it must only be accessed after sorting, and merging\n *   - This DeleteSet is send to other clients\n * - We do not create a DeleteSet when we send a sync message. The DeleteSet message is created directly from StructStore\n * - We read a DeleteSet as part of a sync/update message. In this case the DeleteSet is already sorted and merged.\n */\nexport class DeleteSet {\n  constructor () {\n    /**\n     * @type {Map<number,Array<DeleteItem>>}\n     */\n    this.clients = new Map()\n  }\n}\n\n/**\n * Iterate over all structs that the DeleteSet gc's.\n *\n * @param {Transaction} transaction\n * @param {DeleteSet} ds\n * @param {function(GC|Item):void} f\n *\n * @function\n */\nexport const iterateDeletedStructs = (transaction, ds, f) =>\n  ds.clients.forEach((deletes, clientid) => {\n    const structs = /** @type {Array<GC|Item>} */ (transaction.doc.store.clients.get(clientid))\n    for (let i = 0; i < deletes.length; i++) {\n      const del = deletes[i]\n      iterateStructs(transaction, structs, del.clock, del.len, f)\n    }\n  })\n\n/**\n * @param {Array<DeleteItem>} dis\n * @param {number} clock\n * @return {number|null}\n *\n * @private\n * @function\n */\nexport const findIndexDS = (dis, clock) => {\n  let left = 0\n  let right = dis.length - 1\n  while (left <= right) {\n    const midindex = math.floor((left + right) / 2)\n    const mid = dis[midindex]\n    const midclock = mid.clock\n    if (midclock <= clock) {\n      if (clock < midclock + mid.len) {\n        return midindex\n      }\n      left = midindex + 1\n    } else {\n      right = midindex - 1\n    }\n  }\n  return null\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {ID} id\n * @return {boolean}\n *\n * @private\n * @function\n */\nexport const isDeleted = (ds, id) => {\n  const dis = ds.clients.get(id.client)\n  return dis !== undefined && findIndexDS(dis, id.clock) !== null\n}\n\n/**\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\nexport const sortAndMergeDeleteSet = ds => {\n  ds.clients.forEach(dels => {\n    dels.sort((a, b) => a.clock - b.clock)\n    // merge items without filtering or splicing the array\n    // i is the current pointer\n    // j refers to the current insert position for the pointed item\n    // try to merge dels[i] into dels[j-1] or set dels[j]=dels[i]\n    let i, j\n    for (i = 1, j = 1; i < dels.length; i++) {\n      const left = dels[j - 1]\n      const right = dels[i]\n      if (left.clock + left.len >= right.clock) {\n        left.len = math.max(left.len, right.clock + right.len - left.clock)\n      } else {\n        if (j < i) {\n          dels[j] = right\n        }\n        j++\n      }\n    }\n    dels.length = j\n  })\n}\n\n/**\n * @param {Array<DeleteSet>} dss\n * @return {DeleteSet} A fresh DeleteSet\n */\nexport const mergeDeleteSets = dss => {\n  const merged = new DeleteSet()\n  for (let dssI = 0; dssI < dss.length; dssI++) {\n    dss[dssI].clients.forEach((delsLeft, client) => {\n      if (!merged.clients.has(client)) {\n        // Write all missing keys from current ds and all following.\n        // If merged already contains `client` current ds has already been added.\n        /**\n         * @type {Array<DeleteItem>}\n         */\n        const dels = delsLeft.slice()\n        for (let i = dssI + 1; i < dss.length; i++) {\n          array.appendTo(dels, dss[i].clients.get(client) || [])\n        }\n        merged.clients.set(client, dels)\n      }\n    })\n  }\n  sortAndMergeDeleteSet(merged)\n  return merged\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {number} client\n * @param {number} clock\n * @param {number} length\n *\n * @private\n * @function\n */\nexport const addToDeleteSet = (ds, client, clock, length) => {\n  map.setIfUndefined(ds.clients, client, () => /** @type {Array<DeleteItem>} */ ([])).push(new DeleteItem(clock, length))\n}\n\nexport const createDeleteSet = () => new DeleteSet()\n\n/**\n * @param {StructStore} ss\n * @return {DeleteSet} Merged and sorted DeleteSet\n *\n * @private\n * @function\n */\nexport const createDeleteSetFromStructStore = ss => {\n  const ds = createDeleteSet()\n  ss.clients.forEach((structs, client) => {\n    /**\n     * @type {Array<DeleteItem>}\n     */\n    const dsitems = []\n    for (let i = 0; i < structs.length; i++) {\n      const struct = structs[i]\n      if (struct.deleted) {\n        const clock = struct.id.clock\n        let len = struct.length\n        if (i + 1 < structs.length) {\n          for (let next = structs[i + 1]; i + 1 < structs.length && next.deleted; next = structs[++i + 1]) {\n            len += next.length\n          }\n        }\n        dsitems.push(new DeleteItem(clock, len))\n      }\n    }\n    if (dsitems.length > 0) {\n      ds.clients.set(client, dsitems)\n    }\n  })\n  return ds\n}\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\nexport const writeDeleteSet = (encoder, ds) => {\n  encoding.writeVarUint(encoder.restEncoder, ds.clients.size)\n\n  // Ensure that the delete set is written in a deterministic order\n  array.from(ds.clients.entries())\n    .sort((a, b) => b[0] - a[0])\n    .forEach(([client, dsitems]) => {\n      encoder.resetDsCurVal()\n      encoding.writeVarUint(encoder.restEncoder, client)\n      const len = dsitems.length\n      encoding.writeVarUint(encoder.restEncoder, len)\n      for (let i = 0; i < len; i++) {\n        const item = dsitems[i]\n        encoder.writeDsClock(item.clock)\n        encoder.writeDsLen(item.len)\n      }\n    })\n}\n\n/**\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @return {DeleteSet}\n *\n * @private\n * @function\n */\nexport const readDeleteSet = decoder => {\n  const ds = new DeleteSet()\n  const numClients = decoding.readVarUint(decoder.restDecoder)\n  for (let i = 0; i < numClients; i++) {\n    decoder.resetDsCurVal()\n    const client = decoding.readVarUint(decoder.restDecoder)\n    const numberOfDeletes = decoding.readVarUint(decoder.restDecoder)\n    if (numberOfDeletes > 0) {\n      const dsField = map.setIfUndefined(ds.clients, client, () => /** @type {Array<DeleteItem>} */ ([]))\n      for (let i = 0; i < numberOfDeletes; i++) {\n        dsField.push(new DeleteItem(decoder.readDsClock(), decoder.readDsLen()))\n      }\n    }\n  }\n  return ds\n}\n\n/**\n * @todo YDecoder also contains references to String and other Decoders. Would make sense to exchange YDecoder.toUint8Array for YDecoder.DsToUint8Array()..\n */\n\n/**\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @return {Uint8Array|null} Returns a v2 update containing all deletes that couldn't be applied yet; or null if all deletes were applied successfully.\n *\n * @private\n * @function\n */\nexport const readAndApplyDeleteSet = (decoder, transaction, store) => {\n  const unappliedDS = new DeleteSet()\n  const numClients = decoding.readVarUint(decoder.restDecoder)\n  for (let i = 0; i < numClients; i++) {\n    decoder.resetDsCurVal()\n    const client = decoding.readVarUint(decoder.restDecoder)\n    const numberOfDeletes = decoding.readVarUint(decoder.restDecoder)\n    const structs = store.clients.get(client) || []\n    const state = getState(store, client)\n    for (let i = 0; i < numberOfDeletes; i++) {\n      const clock = decoder.readDsClock()\n      const clockEnd = clock + decoder.readDsLen()\n      if (clock < state) {\n        if (state < clockEnd) {\n          addToDeleteSet(unappliedDS, client, state, clockEnd - state)\n        }\n        let index = findIndexSS(structs, clock)\n        /**\n         * We can ignore the case of GC and Delete structs, because we are going to skip them\n         * @type {Item}\n         */\n        // @ts-ignore\n        let struct = structs[index]\n        // split the first item if necessary\n        if (!struct.deleted && struct.id.clock < clock) {\n          structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock))\n          index++ // increase we now want to use the next struct\n        }\n        while (index < structs.length) {\n          // @ts-ignore\n          struct = structs[index++]\n          if (struct.id.clock < clockEnd) {\n            if (!struct.deleted) {\n              if (clockEnd < struct.id.clock + struct.length) {\n                structs.splice(index, 0, splitItem(transaction, struct, clockEnd - struct.id.clock))\n              }\n              struct.delete(transaction)\n            }\n          } else {\n            break\n          }\n        }\n      } else {\n        addToDeleteSet(unappliedDS, client, clock, clockEnd - clock)\n      }\n    }\n  }\n  if (unappliedDS.clients.size > 0) {\n    const ds = new UpdateEncoderV2()\n    encoding.writeVarUint(ds.restEncoder, 0) // encode 0 structs\n    writeDeleteSet(ds, unappliedDS)\n    return ds.toUint8Array()\n  }\n  return null\n}\n\n/**\n * @param {DeleteSet} ds1\n * @param {DeleteSet} ds2\n */\nexport const equalDeleteSets = (ds1, ds2) => {\n  if (ds1.clients.size !== ds2.clients.size) return false\n  for (const [client, deleteItems1] of ds1.clients.entries()) {\n    const deleteItems2 = /** @type {Array<import('../internals.js').DeleteItem>} */ (ds2.clients.get(client))\n    if (deleteItems2 === undefined || deleteItems1.length !== deleteItems2.length) return false\n    for (let i = 0; i < deleteItems1.length; i++) {\n      const di1 = deleteItems1[i]\n      const di2 = deleteItems2[i]\n      if (di1.clock !== di2.clock || di1.len !== di2.len) {\n        return false\n      }\n    }\n  }\n  return true\n}\n","/**\n * @module Y\n */\n\nimport {\n  StructStore,\n  AbstractType,\n  YArray,\n  YText,\n  YMap,\n  YXmlElement,\n  YXmlFragment,\n  transact,\n  ContentDoc, Item, Transaction, YEvent // eslint-disable-line\n} from '../internals.js'\n\nimport { ObservableV2 } from 'lib0/observable'\nimport * as random from 'lib0/random'\nimport * as map from 'lib0/map'\nimport * as array from 'lib0/array'\nimport * as promise from 'lib0/promise'\n\nexport const generateNewClientId = random.uint32\n\n/**\n * @typedef {Object} DocOpts\n * @property {boolean} [DocOpts.gc=true] Disable garbage collection (default: gc=true)\n * @property {function(Item):boolean} [DocOpts.gcFilter] Will be called before an Item is garbage collected. Return false to keep the Item.\n * @property {string} [DocOpts.guid] Define a globally unique identifier for this document\n * @property {string | null} [DocOpts.collectionid] Associate this document with a collection. This only plays a role if your provider has a concept of collection.\n * @property {any} [DocOpts.meta] Any kind of meta information you want to associate with this document. If this is a subdocument, remote peers will store the meta information as well.\n * @property {boolean} [DocOpts.autoLoad] If a subdocument, automatically load document. If this is a subdocument, remote peers will load the document as well automatically.\n * @property {boolean} [DocOpts.shouldLoad] Whether the document should be synced by the provider now. This is toggled to true when you call ydoc.load()\n */\n\n/**\n * @typedef {Object} DocEvents\n * @property {function(Doc):void} DocEvents.destroy\n * @property {function(Doc):void} DocEvents.load\n * @property {function(boolean, Doc):void} DocEvents.sync\n * @property {function(Uint8Array, any, Doc, Transaction):void} DocEvents.update\n * @property {function(Uint8Array, any, Doc, Transaction):void} DocEvents.updateV2\n * @property {function(Doc):void} DocEvents.beforeAllTransactions\n * @property {function(Transaction, Doc):void} DocEvents.beforeTransaction\n * @property {function(Transaction, Doc):void} DocEvents.beforeObserverCalls\n * @property {function(Transaction, Doc):void} DocEvents.afterTransaction\n * @property {function(Transaction, Doc):void} DocEvents.afterTransactionCleanup\n * @property {function(Doc, Array<Transaction>):void} DocEvents.afterAllTransactions\n * @property {function({ loaded: Set<Doc>, added: Set<Doc>, removed: Set<Doc> }, Doc, Transaction):void} DocEvents.subdocs\n */\n\n/**\n * A Yjs instance handles the state of shared data.\n * @extends ObservableV2<DocEvents>\n */\nexport class Doc extends ObservableV2 {\n  /**\n   * @param {DocOpts} opts configuration\n   */\n  constructor ({ guid = random.uuidv4(), collectionid = null, gc = true, gcFilter = () => true, meta = null, autoLoad = false, shouldLoad = true } = {}) {\n    super()\n    this.gc = gc\n    this.gcFilter = gcFilter\n    this.clientID = generateNewClientId()\n    this.guid = guid\n    this.collectionid = collectionid\n    /**\n     * @type {Map<string, AbstractType<YEvent<any>>>}\n     */\n    this.share = new Map()\n    this.store = new StructStore()\n    /**\n     * @type {Transaction | null}\n     */\n    this._transaction = null\n    /**\n     * @type {Array<Transaction>}\n     */\n    this._transactionCleanups = []\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocs = new Set()\n    /**\n     * If this document is a subdocument - a document integrated into another document - then _item is defined.\n     * @type {Item?}\n     */\n    this._item = null\n    this.shouldLoad = shouldLoad\n    this.autoLoad = autoLoad\n    this.meta = meta\n    /**\n     * This is set to true when the persistence provider loaded the document from the database or when the `sync` event fires.\n     * Note that not all providers implement this feature. Provider authors are encouraged to fire the `load` event when the doc content is loaded from the database.\n     *\n     * @type {boolean}\n     */\n    this.isLoaded = false\n    /**\n     * This is set to true when the connection provider has successfully synced with a backend.\n     * Note that when using peer-to-peer providers this event may not provide very useful.\n     * Also note that not all providers implement this feature. Provider authors are encouraged to fire\n     * the `sync` event when the doc has been synced (with `true` as a parameter) or if connection is\n     * lost (with false as a parameter).\n     */\n    this.isSynced = false\n    this.isDestroyed = false\n    /**\n     * Promise that resolves once the document has been loaded from a presistence provider.\n     */\n    this.whenLoaded = promise.create(resolve => {\n      this.on('load', () => {\n        this.isLoaded = true\n        resolve(this)\n      })\n    })\n    const provideSyncedPromise = () => promise.create(resolve => {\n      /**\n       * @param {boolean} isSynced\n       */\n      const eventHandler = (isSynced) => {\n        if (isSynced === undefined || isSynced === true) {\n          this.off('sync', eventHandler)\n          resolve()\n        }\n      }\n      this.on('sync', eventHandler)\n    })\n    this.on('sync', isSynced => {\n      if (isSynced === false && this.isSynced) {\n        this.whenSynced = provideSyncedPromise()\n      }\n      this.isSynced = isSynced === undefined || isSynced === true\n      if (this.isSynced && !this.isLoaded) {\n        this.emit('load', [this])\n      }\n    })\n    /**\n     * Promise that resolves once the document has been synced with a backend.\n     * This promise is recreated when the connection is lost.\n     * Note the documentation about the `isSynced` property.\n     */\n    this.whenSynced = provideSyncedPromise()\n  }\n\n  /**\n   * Notify the parent document that you request to load data into this subdocument (if it is a subdocument).\n   *\n   * `load()` might be used in the future to request any provider to load the most current data.\n   *\n   * It is safe to call `load()` multiple times.\n   */\n  load () {\n    const item = this._item\n    if (item !== null && !this.shouldLoad) {\n      transact(/** @type {any} */ (item.parent).doc, transaction => {\n        transaction.subdocsLoaded.add(this)\n      }, null, true)\n    }\n    this.shouldLoad = true\n  }\n\n  getSubdocs () {\n    return this.subdocs\n  }\n\n  getSubdocGuids () {\n    return new Set(array.from(this.subdocs).map(doc => doc.guid))\n  }\n\n  /**\n   * Changes that happen inside of a transaction are bundled. This means that\n   * the observer fires _after_ the transaction is finished and that all changes\n   * that happened inside of the transaction are sent as one message to the\n   * other peers.\n   *\n   * @template T\n   * @param {function(Transaction):T} f The function that should be executed as a transaction\n   * @param {any} [origin] Origin of who started the transaction. Will be stored on transaction.origin\n   * @return T\n   *\n   * @public\n   */\n  transact (f, origin = null) {\n    return transact(this, f, origin)\n  }\n\n  /**\n   * Define a shared data type.\n   *\n   * Multiple calls of `ydoc.get(name, TypeConstructor)` yield the same result\n   * and do not overwrite each other. I.e.\n   * `ydoc.get(name, Y.Array) === ydoc.get(name, Y.Array)`\n   *\n   * After this method is called, the type is also available on `ydoc.share.get(name)`.\n   *\n   * *Best Practices:*\n   * Define all types right after the Y.Doc instance is created and store them in a separate object.\n   * Also use the typed methods `getText(name)`, `getArray(name)`, ..\n   *\n   * @template {typeof AbstractType<any>} Type\n   * @example\n   *   const ydoc = new Y.Doc(..)\n   *   const appState = {\n   *     document: ydoc.getText('document')\n   *     comments: ydoc.getArray('comments')\n   *   }\n   *\n   * @param {string} name\n   * @param {Type} TypeConstructor The constructor of the type definition. E.g. Y.Text, Y.Array, Y.Map, ...\n   * @return {InstanceType<Type>} The created type. Constructed with TypeConstructor\n   *\n   * @public\n   */\n  get (name, TypeConstructor = /** @type {any} */ (AbstractType)) {\n    const type = map.setIfUndefined(this.share, name, () => {\n      // @ts-ignore\n      const t = new TypeConstructor()\n      t._integrate(this, null)\n      return t\n    })\n    const Constr = type.constructor\n    if (TypeConstructor !== AbstractType && Constr !== TypeConstructor) {\n      if (Constr === AbstractType) {\n        // @ts-ignore\n        const t = new TypeConstructor()\n        t._map = type._map\n        type._map.forEach(/** @param {Item?} n */ n => {\n          for (; n !== null; n = n.left) {\n            // @ts-ignore\n            n.parent = t\n          }\n        })\n        t._start = type._start\n        for (let n = t._start; n !== null; n = n.right) {\n          n.parent = t\n        }\n        t._length = type._length\n        this.share.set(name, t)\n        t._integrate(this, null)\n        return /** @type {InstanceType<Type>} */ (t)\n      } else {\n        throw new Error(`Type with the name ${name} has already been defined with a different constructor`)\n      }\n    }\n    return /** @type {InstanceType<Type>} */ (type)\n  }\n\n  /**\n   * @template T\n   * @param {string} [name]\n   * @return {YArray<T>}\n   *\n   * @public\n   */\n  getArray (name = '') {\n    return /** @type {YArray<T>} */ (this.get(name, YArray))\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YText}\n   *\n   * @public\n   */\n  getText (name = '') {\n    return this.get(name, YText)\n  }\n\n  /**\n   * @template T\n   * @param {string} [name]\n   * @return {YMap<T>}\n   *\n   * @public\n   */\n  getMap (name = '') {\n    return /** @type {YMap<T>} */ (this.get(name, YMap))\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YXmlElement}\n   *\n   * @public\n   */\n  getXmlElement (name = '') {\n    return /** @type {YXmlElement<{[key:string]:string}>} */ (this.get(name, YXmlElement))\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YXmlFragment}\n   *\n   * @public\n   */\n  getXmlFragment (name = '') {\n    return this.get(name, YXmlFragment)\n  }\n\n  /**\n   * Converts the entire document into a js object, recursively traversing each yjs type\n   * Doesn't log types that have not been defined (using ydoc.getType(..)).\n   *\n   * @deprecated Do not use this method and rather call toJSON directly on the shared types.\n   *\n   * @return {Object<string, any>}\n   */\n  toJSON () {\n    /**\n     * @type {Object<string, any>}\n     */\n    const doc = {}\n\n    this.share.forEach((value, key) => {\n      doc[key] = value.toJSON()\n    })\n\n    return doc\n  }\n\n  /**\n   * Emit `destroy` event and unregister all event handlers.\n   */\n  destroy () {\n    this.isDestroyed = true\n    array.from(this.subdocs).forEach(subdoc => subdoc.destroy())\n    const item = this._item\n    if (item !== null) {\n      this._item = null\n      const content = /** @type {ContentDoc} */ (item.content)\n      content.doc = new Doc({ guid: this.guid, ...content.opts, shouldLoad: false })\n      content.doc._item = item\n      transact(/** @type {any} */ (item).parent.doc, transaction => {\n        const doc = content.doc\n        if (!item.deleted) {\n          transaction.subdocsAdded.add(doc)\n        }\n        transaction.subdocsRemoved.add(this)\n      }, null, true)\n    }\n    // @ts-ignore\n    this.emit('destroyed', [true]) // DEPRECATED!\n    this.emit('destroy', [this])\n    super.destroy()\n  }\n}\n","import * as buffer from 'lib0/buffer'\nimport * as decoding from 'lib0/decoding'\nimport {\n  ID, createID\n} from '../internals.js'\n\nexport class DSDecoderV1 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    this.restDecoder = decoder\n  }\n\n  resetDsCurVal () {\n    // nop\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsClock () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsLen () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n}\n\nexport class UpdateDecoderV1 extends DSDecoderV1 {\n  /**\n   * @return {ID}\n   */\n  readLeftID () {\n    return createID(decoding.readVarUint(this.restDecoder), decoding.readVarUint(this.restDecoder))\n  }\n\n  /**\n   * @return {ID}\n   */\n  readRightID () {\n    return createID(decoding.readVarUint(this.restDecoder), decoding.readVarUint(this.restDecoder))\n  }\n\n  /**\n   * Read the next client id.\n   * Use this in favor of readID whenever possible to reduce the number of objects created.\n   */\n  readClient () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readInfo () {\n    return decoding.readUint8(this.restDecoder)\n  }\n\n  /**\n   * @return {string}\n   */\n  readString () {\n    return decoding.readVarString(this.restDecoder)\n  }\n\n  /**\n   * @return {boolean} isKey\n   */\n  readParentInfo () {\n    return decoding.readVarUint(this.restDecoder) === 1\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readTypeRef () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @return {number} len\n   */\n  readLen () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {any}\n   */\n  readAny () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {Uint8Array}\n   */\n  readBuf () {\n    return buffer.copyUint8Array(decoding.readVarUint8Array(this.restDecoder))\n  }\n\n  /**\n   * Legacy implementation uses JSON parse. We use any-decoding in v2.\n   *\n   * @return {any}\n   */\n  readJSON () {\n    return JSON.parse(decoding.readVarString(this.restDecoder))\n  }\n\n  /**\n   * @return {string}\n   */\n  readKey () {\n    return decoding.readVarString(this.restDecoder)\n  }\n}\n\nexport class DSDecoderV2 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    /**\n     * @private\n     */\n    this.dsCurrVal = 0\n    this.restDecoder = decoder\n  }\n\n  resetDsCurVal () {\n    this.dsCurrVal = 0\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsClock () {\n    this.dsCurrVal += decoding.readVarUint(this.restDecoder)\n    return this.dsCurrVal\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsLen () {\n    const diff = decoding.readVarUint(this.restDecoder) + 1\n    this.dsCurrVal += diff\n    return diff\n  }\n}\n\nexport class UpdateDecoderV2 extends DSDecoderV2 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    super(decoder)\n    /**\n     * List of cached keys. If the keys[id] does not exist, we read a new key\n     * from stringEncoder and push it to keys.\n     *\n     * @type {Array<string>}\n     */\n    this.keys = []\n    decoding.readVarUint(decoder) // read feature flag - currently unused\n    this.keyClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder))\n    this.clientDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder))\n    this.leftClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder))\n    this.rightClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder))\n    this.infoDecoder = new decoding.RleDecoder(decoding.readVarUint8Array(decoder), decoding.readUint8)\n    this.stringDecoder = new decoding.StringDecoder(decoding.readVarUint8Array(decoder))\n    this.parentInfoDecoder = new decoding.RleDecoder(decoding.readVarUint8Array(decoder), decoding.readUint8)\n    this.typeRefDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder))\n    this.lenDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder))\n  }\n\n  /**\n   * @return {ID}\n   */\n  readLeftID () {\n    return new ID(this.clientDecoder.read(), this.leftClockDecoder.read())\n  }\n\n  /**\n   * @return {ID}\n   */\n  readRightID () {\n    return new ID(this.clientDecoder.read(), this.rightClockDecoder.read())\n  }\n\n  /**\n   * Read the next client id.\n   * Use this in favor of readID whenever possible to reduce the number of objects created.\n   */\n  readClient () {\n    return this.clientDecoder.read()\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readInfo () {\n    return /** @type {number} */ (this.infoDecoder.read())\n  }\n\n  /**\n   * @return {string}\n   */\n  readString () {\n    return this.stringDecoder.read()\n  }\n\n  /**\n   * @return {boolean}\n   */\n  readParentInfo () {\n    return this.parentInfoDecoder.read() === 1\n  }\n\n  /**\n   * @return {number} An unsigned 8-bit integer\n   */\n  readTypeRef () {\n    return this.typeRefDecoder.read()\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @return {number}\n   */\n  readLen () {\n    return this.lenDecoder.read()\n  }\n\n  /**\n   * @return {any}\n   */\n  readAny () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {Uint8Array}\n   */\n  readBuf () {\n    return decoding.readVarUint8Array(this.restDecoder)\n  }\n\n  /**\n   * This is mainly here for legacy purposes.\n   *\n   * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n   *\n   * @return {any}\n   */\n  readJSON () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {string}\n   */\n  readKey () {\n    const keyClock = this.keyClockDecoder.read()\n    if (keyClock < this.keys.length) {\n      return this.keys[keyClock]\n    } else {\n      const key = this.stringDecoder.read()\n      this.keys.push(key)\n      return key\n    }\n  }\n}\n","import * as error from 'lib0/error'\nimport * as encoding from 'lib0/encoding'\n\nimport {\n  ID // eslint-disable-line\n} from '../internals.js'\n\nexport class DSEncoderV1 {\n  constructor () {\n    this.restEncoder = encoding.createEncoder()\n  }\n\n  toUint8Array () {\n    return encoding.toUint8Array(this.restEncoder)\n  }\n\n  resetDsCurVal () {\n    // nop\n  }\n\n  /**\n   * @param {number} clock\n   */\n  writeDsClock (clock) {\n    encoding.writeVarUint(this.restEncoder, clock)\n  }\n\n  /**\n   * @param {number} len\n   */\n  writeDsLen (len) {\n    encoding.writeVarUint(this.restEncoder, len)\n  }\n}\n\nexport class UpdateEncoderV1 extends DSEncoderV1 {\n  /**\n   * @param {ID} id\n   */\n  writeLeftID (id) {\n    encoding.writeVarUint(this.restEncoder, id.client)\n    encoding.writeVarUint(this.restEncoder, id.clock)\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeRightID (id) {\n    encoding.writeVarUint(this.restEncoder, id.client)\n    encoding.writeVarUint(this.restEncoder, id.clock)\n  }\n\n  /**\n   * Use writeClient and writeClock instead of writeID if possible.\n   * @param {number} client\n   */\n  writeClient (client) {\n    encoding.writeVarUint(this.restEncoder, client)\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeInfo (info) {\n    encoding.writeUint8(this.restEncoder, info)\n  }\n\n  /**\n   * @param {string} s\n   */\n  writeString (s) {\n    encoding.writeVarString(this.restEncoder, s)\n  }\n\n  /**\n   * @param {boolean} isYKey\n   */\n  writeParentInfo (isYKey) {\n    encoding.writeVarUint(this.restEncoder, isYKey ? 1 : 0)\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeTypeRef (info) {\n    encoding.writeVarUint(this.restEncoder, info)\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @param {number} len\n   */\n  writeLen (len) {\n    encoding.writeVarUint(this.restEncoder, len)\n  }\n\n  /**\n   * @param {any} any\n   */\n  writeAny (any) {\n    encoding.writeAny(this.restEncoder, any)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   */\n  writeBuf (buf) {\n    encoding.writeVarUint8Array(this.restEncoder, buf)\n  }\n\n  /**\n   * @param {any} embed\n   */\n  writeJSON (embed) {\n    encoding.writeVarString(this.restEncoder, JSON.stringify(embed))\n  }\n\n  /**\n   * @param {string} key\n   */\n  writeKey (key) {\n    encoding.writeVarString(this.restEncoder, key)\n  }\n}\n\nexport class DSEncoderV2 {\n  constructor () {\n    this.restEncoder = encoding.createEncoder() // encodes all the rest / non-optimized\n    this.dsCurrVal = 0\n  }\n\n  toUint8Array () {\n    return encoding.toUint8Array(this.restEncoder)\n  }\n\n  resetDsCurVal () {\n    this.dsCurrVal = 0\n  }\n\n  /**\n   * @param {number} clock\n   */\n  writeDsClock (clock) {\n    const diff = clock - this.dsCurrVal\n    this.dsCurrVal = clock\n    encoding.writeVarUint(this.restEncoder, diff)\n  }\n\n  /**\n   * @param {number} len\n   */\n  writeDsLen (len) {\n    if (len === 0) {\n      error.unexpectedCase()\n    }\n    encoding.writeVarUint(this.restEncoder, len - 1)\n    this.dsCurrVal += len\n  }\n}\n\nexport class UpdateEncoderV2 extends DSEncoderV2 {\n  constructor () {\n    super()\n    /**\n     * @type {Map<string,number>}\n     */\n    this.keyMap = new Map()\n    /**\n     * Refers to the next uniqe key-identifier to me used.\n     * See writeKey method for more information.\n     *\n     * @type {number}\n     */\n    this.keyClock = 0\n    this.keyClockEncoder = new encoding.IntDiffOptRleEncoder()\n    this.clientEncoder = new encoding.UintOptRleEncoder()\n    this.leftClockEncoder = new encoding.IntDiffOptRleEncoder()\n    this.rightClockEncoder = new encoding.IntDiffOptRleEncoder()\n    this.infoEncoder = new encoding.RleEncoder(encoding.writeUint8)\n    this.stringEncoder = new encoding.StringEncoder()\n    this.parentInfoEncoder = new encoding.RleEncoder(encoding.writeUint8)\n    this.typeRefEncoder = new encoding.UintOptRleEncoder()\n    this.lenEncoder = new encoding.UintOptRleEncoder()\n  }\n\n  toUint8Array () {\n    const encoder = encoding.createEncoder()\n    encoding.writeVarUint(encoder, 0) // this is a feature flag that we might use in the future\n    encoding.writeVarUint8Array(encoder, this.keyClockEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, this.clientEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, this.leftClockEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, this.rightClockEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, encoding.toUint8Array(this.infoEncoder))\n    encoding.writeVarUint8Array(encoder, this.stringEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, encoding.toUint8Array(this.parentInfoEncoder))\n    encoding.writeVarUint8Array(encoder, this.typeRefEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, this.lenEncoder.toUint8Array())\n    // @note The rest encoder is appended! (note the missing var)\n    encoding.writeUint8Array(encoder, encoding.toUint8Array(this.restEncoder))\n    return encoding.toUint8Array(encoder)\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeLeftID (id) {\n    this.clientEncoder.write(id.client)\n    this.leftClockEncoder.write(id.clock)\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeRightID (id) {\n    this.clientEncoder.write(id.client)\n    this.rightClockEncoder.write(id.clock)\n  }\n\n  /**\n   * @param {number} client\n   */\n  writeClient (client) {\n    this.clientEncoder.write(client)\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeInfo (info) {\n    this.infoEncoder.write(info)\n  }\n\n  /**\n   * @param {string} s\n   */\n  writeString (s) {\n    this.stringEncoder.write(s)\n  }\n\n  /**\n   * @param {boolean} isYKey\n   */\n  writeParentInfo (isYKey) {\n    this.parentInfoEncoder.write(isYKey ? 1 : 0)\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeTypeRef (info) {\n    this.typeRefEncoder.write(info)\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @param {number} len\n   */\n  writeLen (len) {\n    this.lenEncoder.write(len)\n  }\n\n  /**\n   * @param {any} any\n   */\n  writeAny (any) {\n    encoding.writeAny(this.restEncoder, any)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   */\n  writeBuf (buf) {\n    encoding.writeVarUint8Array(this.restEncoder, buf)\n  }\n\n  /**\n   * This is mainly here for legacy purposes.\n   *\n   * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n   *\n   * @param {any} embed\n   */\n  writeJSON (embed) {\n    encoding.writeAny(this.restEncoder, embed)\n  }\n\n  /**\n   * Property keys are often reused. For example, in y-prosemirror the key `bold` might\n   * occur very often. For a 3d application, the key `position` might occur very often.\n   *\n   * We cache these keys in a Map and refer to them via a unique number.\n   *\n   * @param {string} key\n   */\n  writeKey (key) {\n    const clock = this.keyMap.get(key)\n    if (clock === undefined) {\n      /**\n       * @todo uncomment to introduce this feature finally\n       *\n       * Background. The ContentFormat object was always encoded using writeKey, but the decoder used to use readString.\n       * Furthermore, I forgot to set the keyclock. So everything was working fine.\n       *\n       * However, this feature here is basically useless as it is not being used (it actually only consumes extra memory).\n       *\n       * I don't know yet how to reintroduce this feature..\n       *\n       * Older clients won't be able to read updates when we reintroduce this feature. So this should probably be done using a flag.\n       *\n       */\n      // this.keyMap.set(key, this.keyClock)\n      this.keyClockEncoder.write(this.keyClock++)\n      this.stringEncoder.write(key)\n    } else {\n      this.keyClockEncoder.write(clock)\n    }\n  }\n}\n","/**\n * @module encoding\n */\n/*\n * We use the first five bits in the info flag for determining the type of the struct.\n *\n * 0: GC\n * 1: Item with Deleted content\n * 2: Item with JSON content\n * 3: Item with Binary content\n * 4: Item with String content\n * 5: Item with Embed content (for richtext content)\n * 6: Item with Format content (a formatting marker for richtext content)\n * 7: Item with Type\n */\n\nimport {\n  findIndexSS,\n  getState,\n  createID,\n  getStateVector,\n  readAndApplyDeleteSet,\n  writeDeleteSet,\n  createDeleteSetFromStructStore,\n  transact,\n  readItemContent,\n  UpdateDecoderV1,\n  UpdateDecoderV2,\n  UpdateEncoderV1,\n  UpdateEncoderV2,\n  DSEncoderV2,\n  DSDecoderV1,\n  DSEncoderV1,\n  mergeUpdates,\n  mergeUpdatesV2,\n  Skip,\n  diffUpdateV2,\n  convertUpdateFormatV2ToV1,\n  DSDecoderV2, Doc, Transaction, GC, Item, StructStore // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as binary from 'lib0/binary'\nimport * as map from 'lib0/map'\nimport * as math from 'lib0/math'\nimport * as array from 'lib0/array'\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Array<GC|Item>} structs All structs by `client`\n * @param {number} client\n * @param {number} clock write structs starting with `ID(client,clock)`\n *\n * @function\n */\nconst writeStructs = (encoder, structs, client, clock) => {\n  // write first id\n  clock = math.max(clock, structs[0].id.clock) // make sure the first id exists\n  const startNewStructs = findIndexSS(structs, clock)\n  // write # encoded structs\n  encoding.writeVarUint(encoder.restEncoder, structs.length - startNewStructs)\n  encoder.writeClient(client)\n  encoding.writeVarUint(encoder.restEncoder, clock)\n  const firstStruct = structs[startNewStructs]\n  // write first struct with an offset\n  firstStruct.write(encoder, clock - firstStruct.id.clock)\n  for (let i = startNewStructs + 1; i < structs.length; i++) {\n    structs[i].write(encoder, 0)\n  }\n}\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {StructStore} store\n * @param {Map<number,number>} _sm\n *\n * @private\n * @function\n */\nexport const writeClientsStructs = (encoder, store, _sm) => {\n  // we filter all valid _sm entries into sm\n  const sm = new Map()\n  _sm.forEach((clock, client) => {\n    // only write if new structs are available\n    if (getState(store, client) > clock) {\n      sm.set(client, clock)\n    }\n  })\n  getStateVector(store).forEach((_clock, client) => {\n    if (!_sm.has(client)) {\n      sm.set(client, 0)\n    }\n  })\n  // write # states that were updated\n  encoding.writeVarUint(encoder.restEncoder, sm.size)\n  // Write items with higher client ids first\n  // This heavily improves the conflict algorithm.\n  array.from(sm.entries()).sort((a, b) => b[0] - a[0]).forEach(([client, clock]) => {\n    writeStructs(encoder, /** @type {Array<GC|Item>} */ (store.clients.get(client)), client, clock)\n  })\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder The decoder object to read data from.\n * @param {Doc} doc\n * @return {Map<number, { i: number, refs: Array<Item | GC> }>}\n *\n * @private\n * @function\n */\nexport const readClientsStructRefs = (decoder, doc) => {\n  /**\n   * @type {Map<number, { i: number, refs: Array<Item | GC> }>}\n   */\n  const clientRefs = map.create()\n  const numOfStateUpdates = decoding.readVarUint(decoder.restDecoder)\n  for (let i = 0; i < numOfStateUpdates; i++) {\n    const numberOfStructs = decoding.readVarUint(decoder.restDecoder)\n    /**\n     * @type {Array<GC|Item>}\n     */\n    const refs = new Array(numberOfStructs)\n    const client = decoder.readClient()\n    let clock = decoding.readVarUint(decoder.restDecoder)\n    // const start = performance.now()\n    clientRefs.set(client, { i: 0, refs })\n    for (let i = 0; i < numberOfStructs; i++) {\n      const info = decoder.readInfo()\n      switch (binary.BITS5 & info) {\n        case 0: { // GC\n          const len = decoder.readLen()\n          refs[i] = new GC(createID(client, clock), len)\n          clock += len\n          break\n        }\n        case 10: { // Skip Struct (nothing to apply)\n          // @todo we could reduce the amount of checks by adding Skip struct to clientRefs so we know that something is missing.\n          const len = decoding.readVarUint(decoder.restDecoder)\n          refs[i] = new Skip(createID(client, clock), len)\n          clock += len\n          break\n        }\n        default: { // Item with content\n          /**\n           * The optimized implementation doesn't use any variables because inlining variables is faster.\n           * Below a non-optimized version is shown that implements the basic algorithm with\n           * a few comments\n           */\n          const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0\n          // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n          // and we read the next string as parentYKey.\n          // It indicates how we store/retrieve parent from `y.share`\n          // @type {string|null}\n          const struct = new Item(\n            createID(client, clock),\n            null, // left\n            (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null, // origin\n            null, // right\n            (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null, // right origin\n            cantCopyParentInfo ? (decoder.readParentInfo() ? doc.get(decoder.readString()) : decoder.readLeftID()) : null, // parent\n            cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n            readItemContent(decoder, info) // item content\n          )\n          /* A non-optimized implementation of the above algorithm:\n\n          // The item that was originally to the left of this item.\n          const origin = (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null\n          // The item that was originally to the right of this item.\n          const rightOrigin = (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null\n          const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0\n          const hasParentYKey = cantCopyParentInfo ? decoder.readParentInfo() : false\n          // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n          // and we read the next string as parentYKey.\n          // It indicates how we store/retrieve parent from `y.share`\n          // @type {string|null}\n          const parentYKey = cantCopyParentInfo && hasParentYKey ? decoder.readString() : null\n\n          const struct = new Item(\n            createID(client, clock),\n            null, // left\n            origin, // origin\n            null, // right\n            rightOrigin, // right origin\n            cantCopyParentInfo && !hasParentYKey ? decoder.readLeftID() : (parentYKey !== null ? doc.get(parentYKey) : null), // parent\n            cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n            readItemContent(decoder, info) // item content\n          )\n          */\n          refs[i] = struct\n          clock += struct.length\n        }\n      }\n    }\n    // console.log('time to read: ', performance.now() - start) // @todo remove\n  }\n  return clientRefs\n}\n\n/**\n * Resume computing structs generated by struct readers.\n *\n * While there is something to do, we integrate structs in this order\n * 1. top element on stack, if stack is not empty\n * 2. next element from current struct reader (if empty, use next struct reader)\n *\n * If struct causally depends on another struct (ref.missing), we put next reader of\n * `ref.id.client` on top of stack.\n *\n * At some point we find a struct that has no causal dependencies,\n * then we start emptying the stack.\n *\n * It is not possible to have circles: i.e. struct1 (from client1) depends on struct2 (from client2)\n * depends on struct3 (from client1). Therefore the max stack size is eqaul to `structReaders.length`.\n *\n * This method is implemented in a way so that we can resume computation if this update\n * causally depends on another update.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {Map<number, { i: number, refs: (GC | Item)[] }>} clientsStructRefs\n * @return { null | { update: Uint8Array, missing: Map<number,number> } }\n *\n * @private\n * @function\n */\nconst integrateStructs = (transaction, store, clientsStructRefs) => {\n  /**\n   * @type {Array<Item | GC>}\n   */\n  const stack = []\n  // sort them so that we take the higher id first, in case of conflicts the lower id will probably not conflict with the id from the higher user.\n  let clientsStructRefsIds = array.from(clientsStructRefs.keys()).sort((a, b) => a - b)\n  if (clientsStructRefsIds.length === 0) {\n    return null\n  }\n  const getNextStructTarget = () => {\n    if (clientsStructRefsIds.length === 0) {\n      return null\n    }\n    let nextStructsTarget = /** @type {{i:number,refs:Array<GC|Item>}} */ (clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]))\n    while (nextStructsTarget.refs.length === nextStructsTarget.i) {\n      clientsStructRefsIds.pop()\n      if (clientsStructRefsIds.length > 0) {\n        nextStructsTarget = /** @type {{i:number,refs:Array<GC|Item>}} */ (clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]))\n      } else {\n        return null\n      }\n    }\n    return nextStructsTarget\n  }\n  let curStructsTarget = getNextStructTarget()\n  if (curStructsTarget === null) {\n    return null\n  }\n\n  /**\n   * @type {StructStore}\n   */\n  const restStructs = new StructStore()\n  const missingSV = new Map()\n  /**\n   * @param {number} client\n   * @param {number} clock\n   */\n  const updateMissingSv = (client, clock) => {\n    const mclock = missingSV.get(client)\n    if (mclock == null || mclock > clock) {\n      missingSV.set(client, clock)\n    }\n  }\n  /**\n   * @type {GC|Item}\n   */\n  let stackHead = /** @type {any} */ (curStructsTarget).refs[/** @type {any} */ (curStructsTarget).i++]\n  // caching the state because it is used very often\n  const state = new Map()\n\n  const addStackToRestSS = () => {\n    for (const item of stack) {\n      const client = item.id.client\n      const unapplicableItems = clientsStructRefs.get(client)\n      if (unapplicableItems) {\n        // decrement because we weren't able to apply previous operation\n        unapplicableItems.i--\n        restStructs.clients.set(client, unapplicableItems.refs.slice(unapplicableItems.i))\n        clientsStructRefs.delete(client)\n        unapplicableItems.i = 0\n        unapplicableItems.refs = []\n      } else {\n        // item was the last item on clientsStructRefs and the field was already cleared. Add item to restStructs and continue\n        restStructs.clients.set(client, [item])\n      }\n      // remove client from clientsStructRefsIds to prevent users from applying the same update again\n      clientsStructRefsIds = clientsStructRefsIds.filter(c => c !== client)\n    }\n    stack.length = 0\n  }\n\n  // iterate over all struct readers until we are done\n  while (true) {\n    if (stackHead.constructor !== Skip) {\n      const localClock = map.setIfUndefined(state, stackHead.id.client, () => getState(store, stackHead.id.client))\n      const offset = localClock - stackHead.id.clock\n      if (offset < 0) {\n        // update from the same client is missing\n        stack.push(stackHead)\n        updateMissingSv(stackHead.id.client, stackHead.id.clock - 1)\n        // hid a dead wall, add all items from stack to restSS\n        addStackToRestSS()\n      } else {\n        const missing = stackHead.getMissing(transaction, store)\n        if (missing !== null) {\n          stack.push(stackHead)\n          // get the struct reader that has the missing struct\n          /**\n           * @type {{ refs: Array<GC|Item>, i: number }}\n           */\n          const structRefs = clientsStructRefs.get(/** @type {number} */ (missing)) || { refs: [], i: 0 }\n          if (structRefs.refs.length === structRefs.i) {\n            // This update message causally depends on another update message that doesn't exist yet\n            updateMissingSv(/** @type {number} */ (missing), getState(store, missing))\n            addStackToRestSS()\n          } else {\n            stackHead = structRefs.refs[structRefs.i++]\n            continue\n          }\n        } else if (offset === 0 || offset < stackHead.length) {\n          // all fine, apply the stackhead\n          stackHead.integrate(transaction, offset)\n          state.set(stackHead.id.client, stackHead.id.clock + stackHead.length)\n        }\n      }\n    }\n    // iterate to next stackHead\n    if (stack.length > 0) {\n      stackHead = /** @type {GC|Item} */ (stack.pop())\n    } else if (curStructsTarget !== null && curStructsTarget.i < curStructsTarget.refs.length) {\n      stackHead = /** @type {GC|Item} */ (curStructsTarget.refs[curStructsTarget.i++])\n    } else {\n      curStructsTarget = getNextStructTarget()\n      if (curStructsTarget === null) {\n        // we are done!\n        break\n      } else {\n        stackHead = /** @type {GC|Item} */ (curStructsTarget.refs[curStructsTarget.i++])\n      }\n    }\n  }\n  if (restStructs.clients.size > 0) {\n    const encoder = new UpdateEncoderV2()\n    writeClientsStructs(encoder, restStructs, new Map())\n    // write empty deleteset\n    // writeDeleteSet(encoder, new DeleteSet())\n    encoding.writeVarUint(encoder.restEncoder, 0) // => no need for an extra function call, just write 0 deletes\n    return { missing: missingSV, update: encoder.toUint8Array() }\n  }\n  return null\n}\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n *\n * @private\n * @function\n */\nexport const writeStructsFromTransaction = (encoder, transaction) => writeClientsStructs(encoder, transaction.doc.store, transaction.beforeState)\n\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts a decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n * @param {UpdateDecoderV1 | UpdateDecoderV2} [structDecoder]\n *\n * @function\n */\nexport const readUpdateV2 = (decoder, ydoc, transactionOrigin, structDecoder = new UpdateDecoderV2(decoder)) =>\n  transact(ydoc, transaction => {\n    // force that transaction.local is set to non-local\n    transaction.local = false\n    let retry = false\n    const doc = transaction.doc\n    const store = doc.store\n    // let start = performance.now()\n    const ss = readClientsStructRefs(structDecoder, doc)\n    // console.log('time to read structs: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    // console.log('time to merge: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    const restStructs = integrateStructs(transaction, store, ss)\n    const pending = store.pendingStructs\n    if (pending) {\n      // check if we can apply something\n      for (const [client, clock] of pending.missing) {\n        if (clock < getState(store, client)) {\n          retry = true\n          break\n        }\n      }\n      if (restStructs) {\n        // merge restStructs into store.pending\n        for (const [client, clock] of restStructs.missing) {\n          const mclock = pending.missing.get(client)\n          if (mclock == null || mclock > clock) {\n            pending.missing.set(client, clock)\n          }\n        }\n        pending.update = mergeUpdatesV2([pending.update, restStructs.update])\n      }\n    } else {\n      store.pendingStructs = restStructs\n    }\n    // console.log('time to integrate: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    const dsRest = readAndApplyDeleteSet(structDecoder, transaction, store)\n    if (store.pendingDs) {\n      // @todo we could make a lower-bound state-vector check as we do above\n      const pendingDSUpdate = new UpdateDecoderV2(decoding.createDecoder(store.pendingDs))\n      decoding.readVarUint(pendingDSUpdate.restDecoder) // read 0 structs, because we only encode deletes in pendingdsupdate\n      const dsRest2 = readAndApplyDeleteSet(pendingDSUpdate, transaction, store)\n      if (dsRest && dsRest2) {\n        // case 1: ds1 != null && ds2 != null\n        store.pendingDs = mergeUpdatesV2([dsRest, dsRest2])\n      } else {\n        // case 2: ds1 != null\n        // case 3: ds2 != null\n        // case 4: ds1 == null && ds2 == null\n        store.pendingDs = dsRest || dsRest2\n      }\n    } else {\n      // Either dsRest == null && pendingDs == null OR dsRest != null\n      store.pendingDs = dsRest\n    }\n    // console.log('time to cleanup: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n\n    // console.log('time to resume delete readers: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    if (retry) {\n      const update = /** @type {{update: Uint8Array}} */ (store.pendingStructs).update\n      store.pendingStructs = null\n      applyUpdateV2(transaction.doc, update)\n    }\n  }, transactionOrigin, false)\n\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts a decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\nexport const readUpdate = (decoder, ydoc, transactionOrigin) => readUpdateV2(decoder, ydoc, transactionOrigin, new UpdateDecoderV1(decoder))\n\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n *\n * @function\n */\nexport const applyUpdateV2 = (ydoc, update, transactionOrigin, YDecoder = UpdateDecoderV2) => {\n  const decoder = decoding.createDecoder(update)\n  readUpdateV2(decoder, ydoc, transactionOrigin, new YDecoder(decoder))\n}\n\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\nexport const applyUpdate = (ydoc, update, transactionOrigin) => applyUpdateV2(ydoc, update, transactionOrigin, UpdateDecoderV1)\n\n/**\n * Write all the document as a single update message. If you specify the state of the remote client (`targetStateVector`) it will\n * only write the operations that are missing.\n *\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Doc} doc\n * @param {Map<number,number>} [targetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n *\n * @function\n */\nexport const writeStateAsUpdate = (encoder, doc, targetStateVector = new Map()) => {\n  writeClientsStructs(encoder, doc.store, targetStateVector)\n  writeDeleteSet(encoder, createDeleteSetFromStructStore(doc.store))\n}\n\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @param {UpdateEncoderV1 | UpdateEncoderV2} [encoder]\n * @return {Uint8Array}\n *\n * @function\n */\nexport const encodeStateAsUpdateV2 = (doc, encodedTargetStateVector = new Uint8Array([0]), encoder = new UpdateEncoderV2()) => {\n  const targetStateVector = decodeStateVector(encodedTargetStateVector)\n  writeStateAsUpdate(encoder, doc, targetStateVector)\n  const updates = [encoder.toUint8Array()]\n  // also add the pending updates (if there are any)\n  if (doc.store.pendingDs) {\n    updates.push(doc.store.pendingDs)\n  }\n  if (doc.store.pendingStructs) {\n    updates.push(diffUpdateV2(doc.store.pendingStructs.update, encodedTargetStateVector))\n  }\n  if (updates.length > 1) {\n    if (encoder.constructor === UpdateEncoderV1) {\n      return mergeUpdates(updates.map((update, i) => i === 0 ? update : convertUpdateFormatV2ToV1(update)))\n    } else if (encoder.constructor === UpdateEncoderV2) {\n      return mergeUpdatesV2(updates)\n    }\n  }\n  return updates[0]\n}\n\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @return {Uint8Array}\n *\n * @function\n */\nexport const encodeStateAsUpdate = (doc, encodedTargetStateVector) => encodeStateAsUpdateV2(doc, encodedTargetStateVector, new UpdateEncoderV1())\n\n/**\n * Read state vector from Decoder and return as Map\n *\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\nexport const readStateVector = decoder => {\n  const ss = new Map()\n  const ssLength = decoding.readVarUint(decoder.restDecoder)\n  for (let i = 0; i < ssLength; i++) {\n    const client = decoding.readVarUint(decoder.restDecoder)\n    const clock = decoding.readVarUint(decoder.restDecoder)\n    ss.set(client, clock)\n  }\n  return ss\n}\n\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\n// export const decodeStateVectorV2 = decodedState => readStateVector(new DSDecoderV2(decoding.createDecoder(decodedState)))\n\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\nexport const decodeStateVector = decodedState => readStateVector(new DSDecoderV1(decoding.createDecoder(decodedState)))\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {Map<number,number>} sv\n * @function\n */\nexport const writeStateVector = (encoder, sv) => {\n  encoding.writeVarUint(encoder.restEncoder, sv.size)\n  array.from(sv.entries()).sort((a, b) => b[0] - a[0]).forEach(([client, clock]) => {\n    encoding.writeVarUint(encoder.restEncoder, client) // @todo use a special client decoder that is based on mapping\n    encoding.writeVarUint(encoder.restEncoder, clock)\n  })\n  return encoder\n}\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {Doc} doc\n *\n * @function\n */\nexport const writeDocumentStateVector = (encoder, doc) => writeStateVector(encoder, getStateVector(doc.store))\n\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc|Map<number,number>} doc\n * @param {DSEncoderV1 | DSEncoderV2} [encoder]\n * @return {Uint8Array}\n *\n * @function\n */\nexport const encodeStateVectorV2 = (doc, encoder = new DSEncoderV2()) => {\n  if (doc instanceof Map) {\n    writeStateVector(encoder, doc)\n  } else {\n    writeDocumentStateVector(encoder, doc)\n  }\n  return encoder.toUint8Array()\n}\n\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc|Map<number,number>} doc\n * @return {Uint8Array}\n *\n * @function\n */\nexport const encodeStateVector = doc => encodeStateVectorV2(doc, new DSEncoderV1())\n","import * as f from 'lib0/function'\n\n/**\n * General event handler implementation.\n *\n * @template ARG0, ARG1\n *\n * @private\n */\nexport class EventHandler {\n  constructor () {\n    /**\n     * @type {Array<function(ARG0, ARG1):void>}\n     */\n    this.l = []\n  }\n}\n\n/**\n * @template ARG0,ARG1\n * @returns {EventHandler<ARG0,ARG1>}\n *\n * @private\n * @function\n */\nexport const createEventHandler = () => new EventHandler()\n\n/**\n * Adds an event listener that is called when\n * {@link EventHandler#callEventListeners} is called.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler.\n *\n * @private\n * @function\n */\nexport const addEventHandlerListener = (eventHandler, f) =>\n  eventHandler.l.push(f)\n\n/**\n * Removes an event listener.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler that was added with\n *                     {@link EventHandler#addEventListener}\n *\n * @private\n * @function\n */\nexport const removeEventHandlerListener = (eventHandler, f) => {\n  const l = eventHandler.l\n  const len = l.length\n  eventHandler.l = l.filter(g => f !== g)\n  if (len === eventHandler.l.length) {\n    console.error('[yjs] Tried to remove event handler that doesn\\'t exist.')\n  }\n}\n\n/**\n * Removes all event listeners.\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n *\n * @private\n * @function\n */\nexport const removeAllEventHandlerListeners = eventHandler => {\n  eventHandler.l.length = 0\n}\n\n/**\n * Call all event listeners that were added via\n * {@link EventHandler#addEventListener}.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {ARG0} arg0\n * @param {ARG1} arg1\n *\n * @private\n * @function\n */\nexport const callEventHandlerListeners = (eventHandler, arg0, arg1) =>\n  f.callAll(eventHandler.l, [arg0, arg1])\n","import { AbstractType } from '../internals.js' // eslint-disable-line\n\nimport * as decoding from 'lib0/decoding'\nimport * as encoding from 'lib0/encoding'\nimport * as error from 'lib0/error'\n\nexport class ID {\n  /**\n   * @param {number} client client id\n   * @param {number} clock unique per client id, continuous number\n   */\n  constructor (client, clock) {\n    /**\n     * Client id\n     * @type {number}\n     */\n    this.client = client\n    /**\n     * unique per client id, continuous number\n     * @type {number}\n     */\n    this.clock = clock\n  }\n}\n\n/**\n * @param {ID | null} a\n * @param {ID | null} b\n * @return {boolean}\n *\n * @function\n */\nexport const compareIDs = (a, b) => a === b || (a !== null && b !== null && a.client === b.client && a.clock === b.clock)\n\n/**\n * @param {number} client\n * @param {number} clock\n *\n * @private\n * @function\n */\nexport const createID = (client, clock) => new ID(client, clock)\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {ID} id\n *\n * @private\n * @function\n */\nexport const writeID = (encoder, id) => {\n  encoding.writeVarUint(encoder, id.client)\n  encoding.writeVarUint(encoder, id.clock)\n}\n\n/**\n * Read ID.\n * * If first varUint read is 0xFFFFFF a RootID is returned.\n * * Otherwise an ID is returned\n *\n * @param {decoding.Decoder} decoder\n * @return {ID}\n *\n * @private\n * @function\n */\nexport const readID = decoder =>\n  createID(decoding.readVarUint(decoder), decoding.readVarUint(decoder))\n\n/**\n * The top types are mapped from y.share.get(keyname) => type.\n * `type` does not store any information about the `keyname`.\n * This function finds the correct `keyname` for `type` and throws otherwise.\n *\n * @param {AbstractType<any>} type\n * @return {string}\n *\n * @private\n * @function\n */\nexport const findRootTypeKey = type => {\n  // @ts-ignore _y must be defined, otherwise unexpected case\n  for (const [key, value] of type.doc.share.entries()) {\n    if (value === type) {\n      return key\n    }\n  }\n  throw error.unexpectedCase()\n}\n","import { AbstractType, Item } from '../internals.js' // eslint-disable-line\n\n/**\n * Check if `parent` is a parent of `child`.\n *\n * @param {AbstractType<any>} parent\n * @param {Item|null} child\n * @return {Boolean} Whether `parent` is a parent of `child`.\n *\n * @private\n * @function\n */\nexport const isParentOf = (parent, child) => {\n  while (child !== null) {\n    if (child.parent === parent) {\n      return true\n    }\n    child = /** @type {AbstractType<any>} */ (child.parent)._item\n  }\n  return false\n}\n","import {\n  AbstractType // eslint-disable-line\n} from '../internals.js'\n\n/**\n * Convenient helper to log type information.\n *\n * Do not use in productive systems as the output can be immense!\n *\n * @param {AbstractType<any>} type\n */\nexport const logType = type => {\n  const res = []\n  let n = type._start\n  while (n) {\n    res.push(n)\n    n = n.right\n  }\n  console.log('Children: ', res)\n  console.log('Children content: ', res.filter(m => !m.deleted).map(m => m.content))\n}\n","import {\n  YArray,\n  YMap,\n  readDeleteSet,\n  writeDeleteSet,\n  createDeleteSet,\n  DSEncoderV1, DSDecoderV1, ID, DeleteSet, YArrayEvent, Transaction, Doc // eslint-disable-line\n} from '../internals.js'\n\nimport * as decoding from 'lib0/decoding'\n\nimport { mergeDeleteSets, isDeleted } from './DeleteSet.js'\n\nexport class PermanentUserData {\n  /**\n   * @param {Doc} doc\n   * @param {YMap<any>} [storeType]\n   */\n  constructor (doc, storeType = doc.getMap('users')) {\n    /**\n     * @type {Map<string,DeleteSet>}\n     */\n    const dss = new Map()\n    this.yusers = storeType\n    this.doc = doc\n    /**\n     * Maps from clientid to userDescription\n     *\n     * @type {Map<number,string>}\n     */\n    this.clients = new Map()\n    this.dss = dss\n    /**\n     * @param {YMap<any>} user\n     * @param {string} userDescription\n     */\n    const initUser = (user, userDescription) => {\n      /**\n       * @type {YArray<Uint8Array>}\n       */\n      const ds = user.get('ds')\n      const ids = user.get('ids')\n      const addClientId = /** @param {number} clientid */ clientid => this.clients.set(clientid, userDescription)\n      ds.observe(/** @param {YArrayEvent<any>} event */ event => {\n        event.changes.added.forEach(item => {\n          item.content.getContent().forEach(encodedDs => {\n            if (encodedDs instanceof Uint8Array) {\n              this.dss.set(userDescription, mergeDeleteSets([this.dss.get(userDescription) || createDeleteSet(), readDeleteSet(new DSDecoderV1(decoding.createDecoder(encodedDs)))]))\n            }\n          })\n        })\n      })\n      this.dss.set(userDescription, mergeDeleteSets(ds.map(encodedDs => readDeleteSet(new DSDecoderV1(decoding.createDecoder(encodedDs))))))\n      ids.observe(/** @param {YArrayEvent<any>} event */ event =>\n        event.changes.added.forEach(item => item.content.getContent().forEach(addClientId))\n      )\n      ids.forEach(addClientId)\n    }\n    // observe users\n    storeType.observe(event => {\n      event.keysChanged.forEach(userDescription =>\n        initUser(storeType.get(userDescription), userDescription)\n      )\n    })\n    // add intial data\n    storeType.forEach(initUser)\n  }\n\n  /**\n   * @param {Doc} doc\n   * @param {number} clientid\n   * @param {string} userDescription\n   * @param {Object} conf\n   * @param {function(Transaction, DeleteSet):boolean} [conf.filter]\n   */\n  setUserMapping (doc, clientid, userDescription, { filter = () => true } = {}) {\n    const users = this.yusers\n    let user = users.get(userDescription)\n    if (!user) {\n      user = new YMap()\n      user.set('ids', new YArray())\n      user.set('ds', new YArray())\n      users.set(userDescription, user)\n    }\n    user.get('ids').push([clientid])\n    users.observe(_event => {\n      setTimeout(() => {\n        const userOverwrite = users.get(userDescription)\n        if (userOverwrite !== user) {\n          // user was overwritten, port all data over to the next user object\n          // @todo Experiment with Y.Sets here\n          user = userOverwrite\n          // @todo iterate over old type\n          this.clients.forEach((_userDescription, clientid) => {\n            if (userDescription === _userDescription) {\n              user.get('ids').push([clientid])\n            }\n          })\n          const encoder = new DSEncoderV1()\n          const ds = this.dss.get(userDescription)\n          if (ds) {\n            writeDeleteSet(encoder, ds)\n            user.get('ds').push([encoder.toUint8Array()])\n          }\n        }\n      }, 0)\n    })\n    doc.on('afterTransaction', /** @param {Transaction} transaction */ transaction => {\n      setTimeout(() => {\n        const yds = user.get('ds')\n        const ds = transaction.deleteSet\n        if (transaction.local && ds.clients.size > 0 && filter(transaction, ds)) {\n          const encoder = new DSEncoderV1()\n          writeDeleteSet(encoder, ds)\n          yds.push([encoder.toUint8Array()])\n        }\n      })\n    })\n  }\n\n  /**\n   * @param {number} clientid\n   * @return {any}\n   */\n  getUserByClientId (clientid) {\n    return this.clients.get(clientid) || null\n  }\n\n  /**\n   * @param {ID} id\n   * @return {string | null}\n   */\n  getUserByDeletedId (id) {\n    for (const [userDescription, ds] of this.dss.entries()) {\n      if (isDeleted(ds, id)) {\n        return userDescription\n      }\n    }\n    return null\n  }\n}\n","import {\n  writeID,\n  readID,\n  compareIDs,\n  getState,\n  findRootTypeKey,\n  Item,\n  createID,\n  ContentType,\n  followRedone,\n  getItem,\n  ID, Doc, AbstractType // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as error from 'lib0/error'\n\n/**\n * A relative position is based on the Yjs model and is not affected by document changes.\n * E.g. If you place a relative position before a certain character, it will always point to this character.\n * If you place a relative position at the end of a type, it will always point to the end of the type.\n *\n * A numeric position is often unsuited for user selections, because it does not change when content is inserted\n * before or after.\n *\n * ```Insert(0, 'x')('a|bc') = 'xa|bc'``` Where | is the relative position.\n *\n * One of the properties must be defined.\n *\n * @example\n *   // Current cursor position is at position 10\n *   const relativePosition = createRelativePositionFromIndex(yText, 10)\n *   // modify yText\n *   yText.insert(0, 'abc')\n *   yText.delete(3, 10)\n *   // Compute the cursor position\n *   const absolutePosition = createAbsolutePositionFromRelativePosition(y, relativePosition)\n *   absolutePosition.type === yText // => true\n *   console.log('cursor location is ' + absolutePosition.index) // => cursor location is 3\n *\n */\nexport class RelativePosition {\n  /**\n   * @param {ID|null} type\n   * @param {string|null} tname\n   * @param {ID|null} item\n   * @param {number} assoc\n   */\n  constructor (type, tname, item, assoc = 0) {\n    /**\n     * @type {ID|null}\n     */\n    this.type = type\n    /**\n     * @type {string|null}\n     */\n    this.tname = tname\n    /**\n     * @type {ID | null}\n     */\n    this.item = item\n    /**\n     * A relative position is associated to a specific character. By default\n     * assoc >= 0, the relative position is associated to the character\n     * after the meant position.\n     * I.e. position 1 in 'ab' is associated to character 'b'.\n     *\n     * If assoc < 0, then the relative position is associated to the caharacter\n     * before the meant position.\n     *\n     * @type {number}\n     */\n    this.assoc = assoc\n  }\n}\n\n/**\n * @param {RelativePosition} rpos\n * @return {any}\n */\nexport const relativePositionToJSON = rpos => {\n  const json = {}\n  if (rpos.type) {\n    json.type = rpos.type\n  }\n  if (rpos.tname) {\n    json.tname = rpos.tname\n  }\n  if (rpos.item) {\n    json.item = rpos.item\n  }\n  if (rpos.assoc != null) {\n    json.assoc = rpos.assoc\n  }\n  return json\n}\n\n/**\n * @param {any} json\n * @return {RelativePosition}\n *\n * @function\n */\nexport const createRelativePositionFromJSON = json => new RelativePosition(json.type == null ? null : createID(json.type.client, json.type.clock), json.tname ?? null, json.item == null ? null : createID(json.item.client, json.item.clock), json.assoc == null ? 0 : json.assoc)\n\nexport class AbsolutePosition {\n  /**\n   * @param {AbstractType<any>} type\n   * @param {number} index\n   * @param {number} [assoc]\n   */\n  constructor (type, index, assoc = 0) {\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type\n    /**\n     * @type {number}\n     */\n    this.index = index\n    this.assoc = assoc\n  }\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @param {number} [assoc]\n *\n * @function\n */\nexport const createAbsolutePosition = (type, index, assoc = 0) => new AbsolutePosition(type, index, assoc)\n\n/**\n * @param {AbstractType<any>} type\n * @param {ID|null} item\n * @param {number} [assoc]\n *\n * @function\n */\nexport const createRelativePosition = (type, item, assoc) => {\n  let typeid = null\n  let tname = null\n  if (type._item === null) {\n    tname = findRootTypeKey(type)\n  } else {\n    typeid = createID(type._item.id.client, type._item.id.clock)\n  }\n  return new RelativePosition(typeid, tname, item, assoc)\n}\n\n/**\n * Create a relativePosition based on a absolute position.\n *\n * @param {AbstractType<any>} type The base type (e.g. YText or YArray).\n * @param {number} index The absolute position.\n * @param {number} [assoc]\n * @return {RelativePosition}\n *\n * @function\n */\nexport const createRelativePositionFromTypeIndex = (type, index, assoc = 0) => {\n  let t = type._start\n  if (assoc < 0) {\n    // associated to the left character or the beginning of a type, increment index if possible.\n    if (index === 0) {\n      return createRelativePosition(type, null, assoc)\n    }\n    index--\n  }\n  while (t !== null) {\n    if (!t.deleted && t.countable) {\n      if (t.length > index) {\n        // case 1: found position somewhere in the linked list\n        return createRelativePosition(type, createID(t.id.client, t.id.clock + index), assoc)\n      }\n      index -= t.length\n    }\n    if (t.right === null && assoc < 0) {\n      // left-associated position, return last available id\n      return createRelativePosition(type, t.lastId, assoc)\n    }\n    t = t.right\n  }\n  return createRelativePosition(type, null, assoc)\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {RelativePosition} rpos\n *\n * @function\n */\nexport const writeRelativePosition = (encoder, rpos) => {\n  const { type, tname, item, assoc } = rpos\n  if (item !== null) {\n    encoding.writeVarUint(encoder, 0)\n    writeID(encoder, item)\n  } else if (tname !== null) {\n    // case 2: found position at the end of the list and type is stored in y.share\n    encoding.writeUint8(encoder, 1)\n    encoding.writeVarString(encoder, tname)\n  } else if (type !== null) {\n    // case 3: found position at the end of the list and type is attached to an item\n    encoding.writeUint8(encoder, 2)\n    writeID(encoder, type)\n  } else {\n    throw error.unexpectedCase()\n  }\n  encoding.writeVarInt(encoder, assoc)\n  return encoder\n}\n\n/**\n * @param {RelativePosition} rpos\n * @return {Uint8Array}\n */\nexport const encodeRelativePosition = rpos => {\n  const encoder = encoding.createEncoder()\n  writeRelativePosition(encoder, rpos)\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * @param {decoding.Decoder} decoder\n * @return {RelativePosition}\n *\n * @function\n */\nexport const readRelativePosition = decoder => {\n  let type = null\n  let tname = null\n  let itemID = null\n  switch (decoding.readVarUint(decoder)) {\n    case 0:\n      // case 1: found position somewhere in the linked list\n      itemID = readID(decoder)\n      break\n    case 1:\n      // case 2: found position at the end of the list and type is stored in y.share\n      tname = decoding.readVarString(decoder)\n      break\n    case 2: {\n      // case 3: found position at the end of the list and type is attached to an item\n      type = readID(decoder)\n    }\n  }\n  const assoc = decoding.hasContent(decoder) ? decoding.readVarInt(decoder) : 0\n  return new RelativePosition(type, tname, itemID, assoc)\n}\n\n/**\n * @param {Uint8Array} uint8Array\n * @return {RelativePosition}\n */\nexport const decodeRelativePosition = uint8Array => readRelativePosition(decoding.createDecoder(uint8Array))\n\n/**\n * Transform a relative position to an absolute position.\n *\n * If you want to share the relative position with other users, you should set\n * `followUndoneDeletions` to false to get consistent results across all clients.\n *\n * When calculating the absolute position, we try to follow the \"undone deletions\". This yields\n * better results for the user who performed undo. However, only the user who performed the undo\n * will get the better results, the other users don't know which operations recreated a deleted\n * range of content. There is more information in this ticket: https://github.com/yjs/yjs/issues/638\n *\n * @param {RelativePosition} rpos\n * @param {Doc} doc\n * @param {boolean} followUndoneDeletions - whether to follow undone deletions - see https://github.com/yjs/yjs/issues/638\n * @return {AbsolutePosition|null}\n *\n * @function\n */\nexport const createAbsolutePositionFromRelativePosition = (rpos, doc, followUndoneDeletions = true) => {\n  const store = doc.store\n  const rightID = rpos.item\n  const typeID = rpos.type\n  const tname = rpos.tname\n  const assoc = rpos.assoc\n  let type = null\n  let index = 0\n  if (rightID !== null) {\n    if (getState(store, rightID.client) <= rightID.clock) {\n      return null\n    }\n    const res = followUndoneDeletions ? followRedone(store, rightID) : { item: getItem(store, rightID), diff: 0 }\n    const right = res.item\n    if (!(right instanceof Item)) {\n      return null\n    }\n    type = /** @type {AbstractType<any>} */ (right.parent)\n    if (type._item === null || !type._item.deleted) {\n      index = (right.deleted || !right.countable) ? 0 : (res.diff + (assoc >= 0 ? 0 : 1)) // adjust position based on left association if necessary\n      let n = right.left\n      while (n !== null) {\n        if (!n.deleted && n.countable) {\n          index += n.length\n        }\n        n = n.left\n      }\n    }\n  } else {\n    if (tname !== null) {\n      type = doc.get(tname)\n    } else if (typeID !== null) {\n      if (getState(store, typeID.client) <= typeID.clock) {\n        // type does not exist yet\n        return null\n      }\n      const { item } = followUndoneDeletions ? followRedone(store, typeID) : { item: getItem(store, typeID) }\n      if (item instanceof Item && item.content instanceof ContentType) {\n        type = item.content.type\n      } else {\n        // struct is garbage collected\n        return null\n      }\n    } else {\n      throw error.unexpectedCase()\n    }\n    if (assoc >= 0) {\n      index = type._length\n    } else {\n      index = 0\n    }\n  }\n  return createAbsolutePosition(type, index, rpos.assoc)\n}\n\n/**\n * @param {RelativePosition|null} a\n * @param {RelativePosition|null} b\n * @return {boolean}\n *\n * @function\n */\nexport const compareRelativePositions = (a, b) => a === b || (\n  a !== null && b !== null && a.tname === b.tname && compareIDs(a.item, b.item) && compareIDs(a.type, b.type) && a.assoc === b.assoc\n)\n","import {\n  isDeleted,\n  createDeleteSetFromStructStore,\n  getStateVector,\n  getItemCleanStart,\n  iterateDeletedStructs,\n  writeDeleteSet,\n  writeStateVector,\n  readDeleteSet,\n  readStateVector,\n  createDeleteSet,\n  createID,\n  getState,\n  findIndexSS,\n  UpdateEncoderV2,\n  applyUpdateV2,\n  LazyStructReader,\n  equalDeleteSets,\n  UpdateDecoderV1, UpdateDecoderV2, DSEncoderV1, DSEncoderV2, DSDecoderV1, DSDecoderV2, Transaction, Doc, DeleteSet, Item, // eslint-disable-line\n  mergeDeleteSets\n} from '../internals.js'\n\nimport * as map from 'lib0/map'\nimport * as set from 'lib0/set'\nimport * as decoding from 'lib0/decoding'\nimport * as encoding from 'lib0/encoding'\n\nexport class Snapshot {\n  /**\n   * @param {DeleteSet} ds\n   * @param {Map<number,number>} sv state map\n   */\n  constructor (ds, sv) {\n    /**\n     * @type {DeleteSet}\n     */\n    this.ds = ds\n    /**\n     * State Map\n     * @type {Map<number,number>}\n     */\n    this.sv = sv\n  }\n}\n\n/**\n * @param {Snapshot} snap1\n * @param {Snapshot} snap2\n * @return {boolean}\n */\nexport const equalSnapshots = (snap1, snap2) => {\n  const ds1 = snap1.ds.clients\n  const ds2 = snap2.ds.clients\n  const sv1 = snap1.sv\n  const sv2 = snap2.sv\n  if (sv1.size !== sv2.size || ds1.size !== ds2.size) {\n    return false\n  }\n  for (const [key, value] of sv1.entries()) {\n    if (sv2.get(key) !== value) {\n      return false\n    }\n  }\n  for (const [client, dsitems1] of ds1.entries()) {\n    const dsitems2 = ds2.get(client) || []\n    if (dsitems1.length !== dsitems2.length) {\n      return false\n    }\n    for (let i = 0; i < dsitems1.length; i++) {\n      const dsitem1 = dsitems1[i]\n      const dsitem2 = dsitems2[i]\n      if (dsitem1.clock !== dsitem2.clock || dsitem1.len !== dsitem2.len) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\n/**\n * @param {Snapshot} snapshot\n * @param {DSEncoderV1 | DSEncoderV2} [encoder]\n * @return {Uint8Array}\n */\nexport const encodeSnapshotV2 = (snapshot, encoder = new DSEncoderV2()) => {\n  writeDeleteSet(encoder, snapshot.ds)\n  writeStateVector(encoder, snapshot.sv)\n  return encoder.toUint8Array()\n}\n\n/**\n * @param {Snapshot} snapshot\n * @return {Uint8Array}\n */\nexport const encodeSnapshot = snapshot => encodeSnapshotV2(snapshot, new DSEncoderV1())\n\n/**\n * @param {Uint8Array} buf\n * @param {DSDecoderV1 | DSDecoderV2} [decoder]\n * @return {Snapshot}\n */\nexport const decodeSnapshotV2 = (buf, decoder = new DSDecoderV2(decoding.createDecoder(buf))) => {\n  return new Snapshot(readDeleteSet(decoder), readStateVector(decoder))\n}\n\n/**\n * @param {Uint8Array} buf\n * @return {Snapshot}\n */\nexport const decodeSnapshot = buf => decodeSnapshotV2(buf, new DSDecoderV1(decoding.createDecoder(buf)))\n\n/**\n * @param {DeleteSet} ds\n * @param {Map<number,number>} sm\n * @return {Snapshot}\n */\nexport const createSnapshot = (ds, sm) => new Snapshot(ds, sm)\n\nexport const emptySnapshot = createSnapshot(createDeleteSet(), new Map())\n\n/**\n * @param {Doc} doc\n * @return {Snapshot}\n */\nexport const snapshot = doc => createSnapshot(createDeleteSetFromStructStore(doc.store), getStateVector(doc.store))\n\n/**\n * @param {Item} item\n * @param {Snapshot|undefined} snapshot\n *\n * @protected\n * @function\n */\nexport const isVisible = (item, snapshot) => snapshot === undefined\n  ? !item.deleted\n  : snapshot.sv.has(item.id.client) && (snapshot.sv.get(item.id.client) || 0) > item.id.clock && !isDeleted(snapshot.ds, item.id)\n\n/**\n * @param {Transaction} transaction\n * @param {Snapshot} snapshot\n */\nexport const splitSnapshotAffectedStructs = (transaction, snapshot) => {\n  const meta = map.setIfUndefined(transaction.meta, splitSnapshotAffectedStructs, set.create)\n  const store = transaction.doc.store\n  // check if we already split for this snapshot\n  if (!meta.has(snapshot)) {\n    snapshot.sv.forEach((clock, client) => {\n      if (clock < getState(store, client)) {\n        getItemCleanStart(transaction, createID(client, clock))\n      }\n    })\n    iterateDeletedStructs(transaction, snapshot.ds, _item => {})\n    meta.add(snapshot)\n  }\n}\n\n/**\n * @example\n *  const ydoc = new Y.Doc({ gc: false })\n *  ydoc.getText().insert(0, 'world!')\n *  const snapshot = Y.snapshot(ydoc)\n *  ydoc.getText().insert(0, 'hello ')\n *  const restored = Y.createDocFromSnapshot(ydoc, snapshot)\n *  assert(restored.getText().toString() === 'world!')\n *\n * @param {Doc} originDoc\n * @param {Snapshot} snapshot\n * @param {Doc} [newDoc] Optionally, you may define the Yjs document that receives the data from originDoc\n * @return {Doc}\n */\nexport const createDocFromSnapshot = (originDoc, snapshot, newDoc = new Doc()) => {\n  if (originDoc.gc) {\n    // we should not try to restore a GC-ed document, because some of the restored items might have their content deleted\n    throw new Error('Garbage-collection must be disabled in `originDoc`!')\n  }\n  const { sv, ds } = snapshot\n\n  const encoder = new UpdateEncoderV2()\n  originDoc.transact(transaction => {\n    let size = 0\n    sv.forEach(clock => {\n      if (clock > 0) {\n        size++\n      }\n    })\n    encoding.writeVarUint(encoder.restEncoder, size)\n    // splitting the structs before writing them to the encoder\n    for (const [client, clock] of sv) {\n      if (clock === 0) {\n        continue\n      }\n      if (clock < getState(originDoc.store, client)) {\n        getItemCleanStart(transaction, createID(client, clock))\n      }\n      const structs = originDoc.store.clients.get(client) || []\n      const lastStructIndex = findIndexSS(structs, clock - 1)\n      // write # encoded structs\n      encoding.writeVarUint(encoder.restEncoder, lastStructIndex + 1)\n      encoder.writeClient(client)\n      // first clock written is 0\n      encoding.writeVarUint(encoder.restEncoder, 0)\n      for (let i = 0; i <= lastStructIndex; i++) {\n        structs[i].write(encoder, 0)\n      }\n    }\n    writeDeleteSet(encoder, ds)\n  })\n\n  applyUpdateV2(newDoc, encoder.toUint8Array(), 'snapshot')\n  return newDoc\n}\n\n/**\n * @param {Snapshot} snapshot\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} [YDecoder]\n */\nexport const snapshotContainsUpdateV2 = (snapshot, update, YDecoder = UpdateDecoderV2) => {\n  const structs = []\n  const updateDecoder = new YDecoder(decoding.createDecoder(update))\n  const lazyDecoder = new LazyStructReader(updateDecoder, false)\n  for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {\n    structs.push(curr)\n    if ((snapshot.sv.get(curr.id.client) || 0) < curr.id.clock + curr.length) {\n      return false\n    }\n  }\n  const mergedDS = mergeDeleteSets([snapshot.ds, readDeleteSet(updateDecoder)])\n  return equalDeleteSets(snapshot.ds, mergedDS)\n}\n\n/**\n * @param {Snapshot} snapshot\n * @param {Uint8Array} update\n */\nexport const snapshotContainsUpdate = (snapshot, update) => snapshotContainsUpdateV2(snapshot, update, UpdateDecoderV1)\n","import {\n  GC,\n  splitItem,\n  Transaction, ID, Item, DSDecoderV2 // eslint-disable-line\n} from '../internals.js'\n\nimport * as math from 'lib0/math'\nimport * as error from 'lib0/error'\n\nexport class StructStore {\n  constructor () {\n    /**\n     * @type {Map<number,Array<GC|Item>>}\n     */\n    this.clients = new Map()\n    /**\n     * @type {null | { missing: Map<number, number>, update: Uint8Array }}\n     */\n    this.pendingStructs = null\n    /**\n     * @type {null | Uint8Array}\n     */\n    this.pendingDs = null\n  }\n}\n\n/**\n * Return the states as a Map<client,clock>.\n * Note that clock refers to the next expected clock id.\n *\n * @param {StructStore} store\n * @return {Map<number,number>}\n *\n * @public\n * @function\n */\nexport const getStateVector = store => {\n  const sm = new Map()\n  store.clients.forEach((structs, client) => {\n    const struct = structs[structs.length - 1]\n    sm.set(client, struct.id.clock + struct.length)\n  })\n  return sm\n}\n\n/**\n * @param {StructStore} store\n * @param {number} client\n * @return {number}\n *\n * @public\n * @function\n */\nexport const getState = (store, client) => {\n  const structs = store.clients.get(client)\n  if (structs === undefined) {\n    return 0\n  }\n  const lastStruct = structs[structs.length - 1]\n  return lastStruct.id.clock + lastStruct.length\n}\n\n/**\n * @param {StructStore} store\n *\n * @private\n * @function\n */\nexport const integretyCheck = store => {\n  store.clients.forEach(structs => {\n    for (let i = 1; i < structs.length; i++) {\n      const l = structs[i - 1]\n      const r = structs[i]\n      if (l.id.clock + l.length !== r.id.clock) {\n        throw new Error('StructStore failed integrety check')\n      }\n    }\n  })\n}\n\n/**\n * @param {StructStore} store\n * @param {GC|Item} struct\n *\n * @private\n * @function\n */\nexport const addStruct = (store, struct) => {\n  let structs = store.clients.get(struct.id.client)\n  if (structs === undefined) {\n    structs = []\n    store.clients.set(struct.id.client, structs)\n  } else {\n    const lastStruct = structs[structs.length - 1]\n    if (lastStruct.id.clock + lastStruct.length !== struct.id.clock) {\n      throw error.unexpectedCase()\n    }\n  }\n  structs.push(struct)\n}\n\n/**\n * Perform a binary search on a sorted array\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n * @return {number}\n *\n * @private\n * @function\n */\nexport const findIndexSS = (structs, clock) => {\n  let left = 0\n  let right = structs.length - 1\n  let mid = structs[right]\n  let midclock = mid.id.clock\n  if (midclock === clock) {\n    return right\n  }\n  // @todo does it even make sense to pivot the search?\n  // If a good split misses, it might actually increase the time to find the correct item.\n  // Currently, the only advantage is that search with pivoting might find the item on the first try.\n  let midindex = math.floor((clock / (midclock + mid.length - 1)) * right) // pivoting the search\n  while (left <= right) {\n    mid = structs[midindex]\n    midclock = mid.id.clock\n    if (midclock <= clock) {\n      if (clock < midclock + mid.length) {\n        return midindex\n      }\n      left = midindex + 1\n    } else {\n      right = midindex - 1\n    }\n    midindex = math.floor((left + right) / 2)\n  }\n  // Always check state before looking for a struct in StructStore\n  // Therefore the case of not finding a struct is unexpected\n  throw error.unexpectedCase()\n}\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {GC|Item}\n *\n * @private\n * @function\n */\nexport const find = (store, id) => {\n  /**\n   * @type {Array<GC|Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client)\n  return structs[findIndexSS(structs, id.clock)]\n}\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n * @private\n * @function\n */\nexport const getItem = /** @type {function(StructStore,ID):Item} */ (find)\n\n/**\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n */\nexport const findIndexCleanStart = (transaction, structs, clock) => {\n  const index = findIndexSS(structs, clock)\n  const struct = structs[index]\n  if (struct.id.clock < clock && struct instanceof Item) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock))\n    return index + 1\n  }\n  return index\n}\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\nexport const getItemCleanStart = (transaction, id) => {\n  const structs = /** @type {Array<Item>} */ (transaction.doc.store.clients.get(id.client))\n  return structs[findIndexCleanStart(transaction, structs, id.clock)]\n}\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\nexport const getItemCleanEnd = (transaction, store, id) => {\n  /**\n   * @type {Array<Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client)\n  const index = findIndexSS(structs, id.clock)\n  const struct = structs[index]\n  if (id.clock !== struct.id.clock + struct.length - 1 && struct.constructor !== GC) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, id.clock - struct.id.clock + 1))\n  }\n  return struct\n}\n\n/**\n * Replace `item` with `newitem` in store\n * @param {StructStore} store\n * @param {GC|Item} struct\n * @param {GC|Item} newStruct\n *\n * @private\n * @function\n */\nexport const replaceStruct = (store, struct, newStruct) => {\n  const structs = /** @type {Array<GC|Item>} */ (store.clients.get(struct.id.client))\n  structs[findIndexSS(structs, struct.id.clock)] = newStruct\n}\n\n/**\n * Iterate over a range of structs\n *\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clockStart Inclusive start\n * @param {number} len\n * @param {function(GC|Item):void} f\n *\n * @function\n */\nexport const iterateStructs = (transaction, structs, clockStart, len, f) => {\n  if (len === 0) {\n    return\n  }\n  const clockEnd = clockStart + len\n  let index = findIndexCleanStart(transaction, structs, clockStart)\n  let struct\n  do {\n    struct = structs[index++]\n    if (clockEnd < struct.id.clock + struct.length) {\n      findIndexCleanStart(transaction, structs, clockEnd)\n    }\n    f(struct)\n  } while (index < structs.length && structs[index].id.clock < clockEnd)\n}\n","import {\n  getState,\n  writeStructsFromTransaction,\n  writeDeleteSet,\n  DeleteSet,\n  sortAndMergeDeleteSet,\n  getStateVector,\n  findIndexSS,\n  callEventHandlerListeners,\n  Item,\n  generateNewClientId,\n  createID,\n  cleanupYTextAfterTransaction,\n  UpdateEncoderV1, UpdateEncoderV2, GC, StructStore, AbstractType, AbstractStruct, YEvent, Doc // eslint-disable-line\n} from '../internals.js'\n\nimport * as map from 'lib0/map'\nimport * as math from 'lib0/math'\nimport * as set from 'lib0/set'\nimport * as logging from 'lib0/logging'\nimport { callAll } from 'lib0/function'\n\n/**\n * A transaction is created for every change on the Yjs model. It is possible\n * to bundle changes on the Yjs model in a single transaction to\n * minimize the number on messages sent and the number of observer calls.\n * If possible the user of this library should bundle as many changes as\n * possible. Here is an example to illustrate the advantages of bundling:\n *\n * @example\n * const ydoc = new Y.Doc()\n * const map = ydoc.getMap('map')\n * // Log content when change is triggered\n * map.observe(() => {\n *   console.log('change triggered')\n * })\n * // Each change on the map type triggers a log message:\n * map.set('a', 0) // => \"change triggered\"\n * map.set('b', 0) // => \"change triggered\"\n * // When put in a transaction, it will trigger the log after the transaction:\n * ydoc.transact(() => {\n *   map.set('a', 1)\n *   map.set('b', 1)\n * }) // => \"change triggered\"\n *\n * @public\n */\nexport class Transaction {\n  /**\n   * @param {Doc} doc\n   * @param {any} origin\n   * @param {boolean} local\n   */\n  constructor (doc, origin, local) {\n    /**\n     * The Yjs instance.\n     * @type {Doc}\n     */\n    this.doc = doc\n    /**\n     * Describes the set of deleted items by ids\n     * @type {DeleteSet}\n     */\n    this.deleteSet = new DeleteSet()\n    /**\n     * Holds the state before the transaction started.\n     * @type {Map<Number,Number>}\n     */\n    this.beforeState = getStateVector(doc.store)\n    /**\n     * Holds the state after the transaction.\n     * @type {Map<Number,Number>}\n     */\n    this.afterState = new Map()\n    /**\n     * All types that were directly modified (property added or child\n     * inserted/deleted). New types are not included in this Set.\n     * Maps from type to parentSubs (`item.parentSub = null` for YArray)\n     * @type {Map<AbstractType<YEvent<any>>,Set<String|null>>}\n     */\n    this.changed = new Map()\n    /**\n     * Stores the events for the types that observe also child elements.\n     * It is mainly used by `observeDeep`.\n     * @type {Map<AbstractType<YEvent<any>>,Array<YEvent<any>>>}\n     */\n    this.changedParentTypes = new Map()\n    /**\n     * @type {Array<AbstractStruct>}\n     */\n    this._mergeStructs = []\n    /**\n     * @type {any}\n     */\n    this.origin = origin\n    /**\n     * Stores meta information on the transaction\n     * @type {Map<any,any>}\n     */\n    this.meta = new Map()\n    /**\n     * Whether this change originates from this doc.\n     * @type {boolean}\n     */\n    this.local = local\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsAdded = new Set()\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsRemoved = new Set()\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsLoaded = new Set()\n    /**\n     * @type {boolean}\n     */\n    this._needFormattingCleanup = false\n  }\n}\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n * @return {boolean} Whether data was written.\n */\nexport const writeUpdateMessageFromTransaction = (encoder, transaction) => {\n  if (transaction.deleteSet.clients.size === 0 && !map.any(transaction.afterState, (clock, client) => transaction.beforeState.get(client) !== clock)) {\n    return false\n  }\n  sortAndMergeDeleteSet(transaction.deleteSet)\n  writeStructsFromTransaction(encoder, transaction)\n  writeDeleteSet(encoder, transaction.deleteSet)\n  return true\n}\n\n/**\n * @param {Transaction} transaction\n *\n * @private\n * @function\n */\nexport const nextID = transaction => {\n  const y = transaction.doc\n  return createID(y.clientID, getState(y.store, y.clientID))\n}\n\n/**\n * If `type.parent` was added in current transaction, `type` technically\n * did not change, it was just added and we should not fire events for `type`.\n *\n * @param {Transaction} transaction\n * @param {AbstractType<YEvent<any>>} type\n * @param {string|null} parentSub\n */\nexport const addChangedTypeToTransaction = (transaction, type, parentSub) => {\n  const item = type._item\n  if (item === null || (item.id.clock < (transaction.beforeState.get(item.id.client) || 0) && !item.deleted)) {\n    map.setIfUndefined(transaction.changed, type, set.create).add(parentSub)\n  }\n}\n\n/**\n * @param {Array<AbstractStruct>} structs\n * @param {number} pos\n * @return {number} # of merged structs\n */\nconst tryToMergeWithLefts = (structs, pos) => {\n  let right = structs[pos]\n  let left = structs[pos - 1]\n  let i = pos\n  for (; i > 0; right = left, left = structs[--i - 1]) {\n    if (left.deleted === right.deleted && left.constructor === right.constructor) {\n      if (left.mergeWith(right)) {\n        if (right instanceof Item && right.parentSub !== null && /** @type {AbstractType<any>} */ (right.parent)._map.get(right.parentSub) === right) {\n          /** @type {AbstractType<any>} */ (right.parent)._map.set(right.parentSub, /** @type {Item} */ (left))\n        }\n        continue\n      }\n    }\n    break\n  }\n  const merged = pos - i\n  if (merged) {\n    // remove all merged structs from the array\n    structs.splice(pos + 1 - merged, merged)\n  }\n  return merged\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\nconst tryGcDeleteSet = (ds, store, gcFilter) => {\n  for (const [client, deleteItems] of ds.clients.entries()) {\n    const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di]\n      const endDeleteItemClock = deleteItem.clock + deleteItem.len\n      for (\n        let si = findIndexSS(structs, deleteItem.clock), struct = structs[si];\n        si < structs.length && struct.id.clock < endDeleteItemClock;\n        struct = structs[++si]\n      ) {\n        const struct = structs[si]\n        if (deleteItem.clock + deleteItem.len <= struct.id.clock) {\n          break\n        }\n        if (struct instanceof Item && struct.deleted && !struct.keep && gcFilter(struct)) {\n          struct.gc(store, false)\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n */\nconst tryMergeDeleteSet = (ds, store) => {\n  // try to merge deleted / gc'd items\n  // merge from right to left for better efficiency and so we don't miss any merge targets\n  ds.clients.forEach((deleteItems, client) => {\n    const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di]\n      // start with merging the item next to the last deleted item\n      const mostRightIndexToCheck = math.min(structs.length - 1, 1 + findIndexSS(structs, deleteItem.clock + deleteItem.len - 1))\n      for (\n        let si = mostRightIndexToCheck, struct = structs[si];\n        si > 0 && struct.id.clock >= deleteItem.clock;\n        struct = structs[si]\n      ) {\n        si -= 1 + tryToMergeWithLefts(structs, si)\n      }\n    }\n  })\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\nexport const tryGc = (ds, store, gcFilter) => {\n  tryGcDeleteSet(ds, store, gcFilter)\n  tryMergeDeleteSet(ds, store)\n}\n\n/**\n * @param {Array<Transaction>} transactionCleanups\n * @param {number} i\n */\nconst cleanupTransactions = (transactionCleanups, i) => {\n  if (i < transactionCleanups.length) {\n    const transaction = transactionCleanups[i]\n    const doc = transaction.doc\n    const store = doc.store\n    const ds = transaction.deleteSet\n    const mergeStructs = transaction._mergeStructs\n    try {\n      sortAndMergeDeleteSet(ds)\n      transaction.afterState = getStateVector(transaction.doc.store)\n      doc.emit('beforeObserverCalls', [transaction, doc])\n      /**\n       * An array of event callbacks.\n       *\n       * Each callback is called even if the other ones throw errors.\n       *\n       * @type {Array<function():void>}\n       */\n      const fs = []\n      // observe events on changed types\n      transaction.changed.forEach((subs, itemtype) =>\n        fs.push(() => {\n          if (itemtype._item === null || !itemtype._item.deleted) {\n            itemtype._callObserver(transaction, subs)\n          }\n        })\n      )\n      fs.push(() => {\n        // deep observe events\n        transaction.changedParentTypes.forEach((events, type) => {\n          // We need to think about the possibility that the user transforms the\n          // Y.Doc in the event.\n          if (type._dEH.l.length > 0 && (type._item === null || !type._item.deleted)) {\n            events = events\n              .filter(event =>\n                event.target._item === null || !event.target._item.deleted\n              )\n            events\n              .forEach(event => {\n                event.currentTarget = type\n                // path is relative to the current target\n                event._path = null\n              })\n            // sort events by path length so that top-level events are fired first.\n            events\n              .sort((event1, event2) => event1.path.length - event2.path.length)\n            // We don't need to check for events.length\n            // because we know it has at least one element\n            callEventHandlerListeners(type._dEH, events, transaction)\n          }\n        })\n      })\n      fs.push(() => doc.emit('afterTransaction', [transaction, doc]))\n      callAll(fs, [])\n      if (transaction._needFormattingCleanup) {\n        cleanupYTextAfterTransaction(transaction)\n      }\n    } finally {\n      // Replace deleted items with ItemDeleted / GC.\n      // This is where content is actually remove from the Yjs Doc.\n      if (doc.gc) {\n        tryGcDeleteSet(ds, store, doc.gcFilter)\n      }\n      tryMergeDeleteSet(ds, store)\n\n      // on all affected store.clients props, try to merge\n      transaction.afterState.forEach((clock, client) => {\n        const beforeClock = transaction.beforeState.get(client) || 0\n        if (beforeClock !== clock) {\n          const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n          // we iterate from right to left so we can safely remove entries\n          const firstChangePos = math.max(findIndexSS(structs, beforeClock), 1)\n          for (let i = structs.length - 1; i >= firstChangePos;) {\n            i -= 1 + tryToMergeWithLefts(structs, i)\n          }\n        }\n      })\n      // try to merge mergeStructs\n      // @todo: it makes more sense to transform mergeStructs to a DS, sort it, and merge from right to left\n      //        but at the moment DS does not handle duplicates\n      for (let i = mergeStructs.length - 1; i >= 0; i--) {\n        const { client, clock } = mergeStructs[i].id\n        const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n        const replacedStructPos = findIndexSS(structs, clock)\n        if (replacedStructPos + 1 < structs.length) {\n          if (tryToMergeWithLefts(structs, replacedStructPos + 1) > 1) {\n            continue // no need to perform next check, both are already merged\n          }\n        }\n        if (replacedStructPos > 0) {\n          tryToMergeWithLefts(structs, replacedStructPos)\n        }\n      }\n      if (!transaction.local && transaction.afterState.get(doc.clientID) !== transaction.beforeState.get(doc.clientID)) {\n        logging.print(logging.ORANGE, logging.BOLD, '[yjs] ', logging.UNBOLD, logging.RED, 'Changed the client-id because another client seems to be using it.')\n        doc.clientID = generateNewClientId()\n      }\n      // @todo Merge all the transactions into one and provide send the data as a single update message\n      doc.emit('afterTransactionCleanup', [transaction, doc])\n      if (doc._observers.has('update')) {\n        const encoder = new UpdateEncoderV1()\n        const hasContent = writeUpdateMessageFromTransaction(encoder, transaction)\n        if (hasContent) {\n          doc.emit('update', [encoder.toUint8Array(), transaction.origin, doc, transaction])\n        }\n      }\n      if (doc._observers.has('updateV2')) {\n        const encoder = new UpdateEncoderV2()\n        const hasContent = writeUpdateMessageFromTransaction(encoder, transaction)\n        if (hasContent) {\n          doc.emit('updateV2', [encoder.toUint8Array(), transaction.origin, doc, transaction])\n        }\n      }\n      const { subdocsAdded, subdocsLoaded, subdocsRemoved } = transaction\n      if (subdocsAdded.size > 0 || subdocsRemoved.size > 0 || subdocsLoaded.size > 0) {\n        subdocsAdded.forEach(subdoc => {\n          subdoc.clientID = doc.clientID\n          if (subdoc.collectionid == null) {\n            subdoc.collectionid = doc.collectionid\n          }\n          doc.subdocs.add(subdoc)\n        })\n        subdocsRemoved.forEach(subdoc => doc.subdocs.delete(subdoc))\n        doc.emit('subdocs', [{ loaded: subdocsLoaded, added: subdocsAdded, removed: subdocsRemoved }, doc, transaction])\n        subdocsRemoved.forEach(subdoc => subdoc.destroy())\n      }\n\n      if (transactionCleanups.length <= i + 1) {\n        doc._transactionCleanups = []\n        doc.emit('afterAllTransactions', [doc, transactionCleanups])\n      } else {\n        cleanupTransactions(transactionCleanups, i + 1)\n      }\n    }\n  }\n}\n\n/**\n * Implements the functionality of `y.transact(()=>{..})`\n *\n * @template T\n * @param {Doc} doc\n * @param {function(Transaction):T} f\n * @param {any} [origin=true]\n * @return {T}\n *\n * @function\n */\nexport const transact = (doc, f, origin = null, local = true) => {\n  const transactionCleanups = doc._transactionCleanups\n  let initialCall = false\n  /**\n   * @type {any}\n   */\n  let result = null\n  if (doc._transaction === null) {\n    initialCall = true\n    doc._transaction = new Transaction(doc, origin, local)\n    transactionCleanups.push(doc._transaction)\n    if (transactionCleanups.length === 1) {\n      doc.emit('beforeAllTransactions', [doc])\n    }\n    doc.emit('beforeTransaction', [doc._transaction, doc])\n  }\n  try {\n    result = f(doc._transaction)\n  } finally {\n    if (initialCall) {\n      const finishCleanup = doc._transaction === transactionCleanups[0]\n      doc._transaction = null\n      if (finishCleanup) {\n        // The first transaction ended, now process observer calls.\n        // Observer call may create new transactions for which we need to call the observers and do cleanup.\n        // We don't want to nest these calls, so we execute these calls one after\n        // another.\n        // Also we need to ensure that all cleanups are called, even if the\n        // observes throw errors.\n        // This file is full of hacky try {} finally {} blocks to ensure that an\n        // event can throw errors and also that the cleanup is called.\n        cleanupTransactions(transactionCleanups, 0)\n      }\n    }\n  }\n  return result\n}\n","import {\n  mergeDeleteSets,\n  iterateDeletedStructs,\n  keepItem,\n  transact,\n  createID,\n  redoItem,\n  isParentOf,\n  followRedone,\n  getItemCleanStart,\n  isDeleted,\n  addToDeleteSet,\n  YEvent, Transaction, Doc, Item, GC, DeleteSet, AbstractType // eslint-disable-line\n} from '../internals.js'\n\nimport * as time from 'lib0/time'\nimport * as array from 'lib0/array'\nimport * as logging from 'lib0/logging'\nimport { ObservableV2 } from 'lib0/observable'\n\nexport class StackItem {\n  /**\n   * @param {DeleteSet} deletions\n   * @param {DeleteSet} insertions\n   */\n  constructor (deletions, insertions) {\n    this.insertions = insertions\n    this.deletions = deletions\n    /**\n     * Use this to save and restore metadata like selection range\n     */\n    this.meta = new Map()\n  }\n}\n/**\n * @param {Transaction} tr\n * @param {UndoManager} um\n * @param {StackItem} stackItem\n */\nconst clearUndoManagerStackItem = (tr, um, stackItem) => {\n  iterateDeletedStructs(tr, stackItem.deletions, item => {\n    if (item instanceof Item && um.scope.some(type => isParentOf(type, item))) {\n      keepItem(item, false)\n    }\n  })\n}\n\n/**\n * @param {UndoManager} undoManager\n * @param {Array<StackItem>} stack\n * @param {'undo'|'redo'} eventType\n * @return {StackItem?}\n */\nconst popStackItem = (undoManager, stack, eventType) => {\n  /**\n   * Keep a reference to the transaction so we can fire the event with the changedParentTypes\n   * @type {any}\n   */\n  let _tr = null\n  const doc = undoManager.doc\n  const scope = undoManager.scope\n  transact(doc, transaction => {\n    while (stack.length > 0 && undoManager.currStackItem === null) {\n      const store = doc.store\n      const stackItem = /** @type {StackItem} */ (stack.pop())\n      /**\n       * @type {Set<Item>}\n       */\n      const itemsToRedo = new Set()\n      /**\n       * @type {Array<Item>}\n       */\n      const itemsToDelete = []\n      let performedChange = false\n      iterateDeletedStructs(transaction, stackItem.insertions, struct => {\n        if (struct instanceof Item) {\n          if (struct.redone !== null) {\n            let { item, diff } = followRedone(store, struct.id)\n            if (diff > 0) {\n              item = getItemCleanStart(transaction, createID(item.id.client, item.id.clock + diff))\n            }\n            struct = item\n          }\n          if (!struct.deleted && scope.some(type => isParentOf(type, /** @type {Item} */ (struct)))) {\n            itemsToDelete.push(struct)\n          }\n        }\n      })\n      iterateDeletedStructs(transaction, stackItem.deletions, struct => {\n        if (\n          struct instanceof Item &&\n          scope.some(type => isParentOf(type, struct)) &&\n          // Never redo structs in stackItem.insertions because they were created and deleted in the same capture interval.\n          !isDeleted(stackItem.insertions, struct.id)\n        ) {\n          itemsToRedo.add(struct)\n        }\n      })\n      itemsToRedo.forEach(struct => {\n        performedChange = redoItem(transaction, struct, itemsToRedo, stackItem.insertions, undoManager.ignoreRemoteMapChanges, undoManager) !== null || performedChange\n      })\n      // We want to delete in reverse order so that children are deleted before\n      // parents, so we have more information available when items are filtered.\n      for (let i = itemsToDelete.length - 1; i >= 0; i--) {\n        const item = itemsToDelete[i]\n        if (undoManager.deleteFilter(item)) {\n          item.delete(transaction)\n          performedChange = true\n        }\n      }\n      undoManager.currStackItem = performedChange ? stackItem : null\n    }\n    transaction.changed.forEach((subProps, type) => {\n      // destroy search marker if necessary\n      if (subProps.has(null) && type._searchMarker) {\n        type._searchMarker.length = 0\n      }\n    })\n    _tr = transaction\n  }, undoManager)\n  const res = undoManager.currStackItem\n  if (res != null) {\n    const changedParentTypes = _tr.changedParentTypes\n    undoManager.emit('stack-item-popped', [{ stackItem: res, type: eventType, changedParentTypes, origin: undoManager }, undoManager])\n    undoManager.currStackItem = null\n  }\n  return res\n}\n\n/**\n * @typedef {Object} UndoManagerOptions\n * @property {number} [UndoManagerOptions.captureTimeout=500]\n * @property {function(Transaction):boolean} [UndoManagerOptions.captureTransaction] Do not capture changes of a Transaction if result false.\n * @property {function(Item):boolean} [UndoManagerOptions.deleteFilter=()=>true] Sometimes\n * it is necessary to filter what an Undo/Redo operation can delete. If this\n * filter returns false, the type/item won't be deleted even it is in the\n * undo/redo scope.\n * @property {Set<any>} [UndoManagerOptions.trackedOrigins=new Set([null])]\n * @property {boolean} [ignoreRemoteMapChanges] Experimental. By default, the UndoManager will never overwrite remote changes. Enable this property to enable overwriting remote changes on key-value changes (Y.Map, properties on Y.Xml, etc..).\n * @property {Doc} [doc] The document that this UndoManager operates on. Only needed if typeScope is empty.\n */\n\n/**\n * @typedef {Object} StackItemEvent\n * @property {StackItem} StackItemEvent.stackItem\n * @property {any} StackItemEvent.origin\n * @property {'undo'|'redo'} StackItemEvent.type\n * @property {Map<AbstractType<YEvent<any>>,Array<YEvent<any>>>} StackItemEvent.changedParentTypes\n */\n\n/**\n * Fires 'stack-item-added' event when a stack item was added to either the undo- or\n * the redo-stack. You may store additional stack information via the\n * metadata property on `event.stackItem.meta` (it is a `Map` of metadata properties).\n * Fires 'stack-item-popped' event when a stack item was popped from either the\n * undo- or the redo-stack. You may restore the saved stack information from `event.stackItem.meta`.\n *\n * @extends {ObservableV2<{'stack-item-added':function(StackItemEvent, UndoManager):void, 'stack-item-popped': function(StackItemEvent, UndoManager):void, 'stack-cleared': function({ undoStackCleared: boolean, redoStackCleared: boolean }):void, 'stack-item-updated': function(StackItemEvent, UndoManager):void }>}\n */\nexport class UndoManager extends ObservableV2 {\n  /**\n   * @param {AbstractType<any>|Array<AbstractType<any>>} typeScope Accepts either a single type, or an array of types\n   * @param {UndoManagerOptions} options\n   */\n  constructor (typeScope, {\n    captureTimeout = 500,\n    captureTransaction = _tr => true,\n    deleteFilter = () => true,\n    trackedOrigins = new Set([null]),\n    ignoreRemoteMapChanges = false,\n    doc = /** @type {Doc} */ (array.isArray(typeScope) ? typeScope[0].doc : typeScope.doc)\n  } = {}) {\n    super()\n    /**\n     * @type {Array<AbstractType<any>>}\n     */\n    this.scope = []\n    this.doc = doc\n    this.addToScope(typeScope)\n    this.deleteFilter = deleteFilter\n    trackedOrigins.add(this)\n    this.trackedOrigins = trackedOrigins\n    this.captureTransaction = captureTransaction\n    /**\n     * @type {Array<StackItem>}\n     */\n    this.undoStack = []\n    /**\n     * @type {Array<StackItem>}\n     */\n    this.redoStack = []\n    /**\n     * Whether the client is currently undoing (calling UndoManager.undo)\n     *\n     * @type {boolean}\n     */\n    this.undoing = false\n    this.redoing = false\n    /**\n     * The currently popped stack item if UndoManager.undoing or UndoManager.redoing\n     *\n     * @type {StackItem|null}\n     */\n    this.currStackItem = null\n    this.lastChange = 0\n    this.ignoreRemoteMapChanges = ignoreRemoteMapChanges\n    this.captureTimeout = captureTimeout\n    /**\n     * @param {Transaction} transaction\n     */\n    this.afterTransactionHandler = transaction => {\n      // Only track certain transactions\n      if (\n        !this.captureTransaction(transaction) ||\n        !this.scope.some(type => transaction.changedParentTypes.has(type)) ||\n        (!this.trackedOrigins.has(transaction.origin) && (!transaction.origin || !this.trackedOrigins.has(transaction.origin.constructor)))\n      ) {\n        return\n      }\n      const undoing = this.undoing\n      const redoing = this.redoing\n      const stack = undoing ? this.redoStack : this.undoStack\n      if (undoing) {\n        this.stopCapturing() // next undo should not be appended to last stack item\n      } else if (!redoing) {\n        // neither undoing nor redoing: delete redoStack\n        this.clear(false, true)\n      }\n      const insertions = new DeleteSet()\n      transaction.afterState.forEach((endClock, client) => {\n        const startClock = transaction.beforeState.get(client) || 0\n        const len = endClock - startClock\n        if (len > 0) {\n          addToDeleteSet(insertions, client, startClock, len)\n        }\n      })\n      const now = time.getUnixTime()\n      let didAdd = false\n      if (this.lastChange > 0 && now - this.lastChange < this.captureTimeout && stack.length > 0 && !undoing && !redoing) {\n        // append change to last stack op\n        const lastOp = stack[stack.length - 1]\n        lastOp.deletions = mergeDeleteSets([lastOp.deletions, transaction.deleteSet])\n        lastOp.insertions = mergeDeleteSets([lastOp.insertions, insertions])\n      } else {\n        // create a new stack op\n        stack.push(new StackItem(transaction.deleteSet, insertions))\n        didAdd = true\n      }\n      if (!undoing && !redoing) {\n        this.lastChange = now\n      }\n      // make sure that deleted structs are not gc'd\n      iterateDeletedStructs(transaction, transaction.deleteSet, /** @param {Item|GC} item */ item => {\n        if (item instanceof Item && this.scope.some(type => isParentOf(type, item))) {\n          keepItem(item, true)\n        }\n      })\n      /**\n       * @type {[StackItemEvent, UndoManager]}\n       */\n      const changeEvent = [{ stackItem: stack[stack.length - 1], origin: transaction.origin, type: undoing ? 'redo' : 'undo', changedParentTypes: transaction.changedParentTypes }, this]\n      if (didAdd) {\n        this.emit('stack-item-added', changeEvent)\n      } else {\n        this.emit('stack-item-updated', changeEvent)\n      }\n    }\n    this.doc.on('afterTransaction', this.afterTransactionHandler)\n    this.doc.on('destroy', () => {\n      this.destroy()\n    })\n  }\n\n  /**\n   * @param {Array<AbstractType<any>> | AbstractType<any>} ytypes\n   */\n  addToScope (ytypes) {\n    ytypes = array.isArray(ytypes) ? ytypes : [ytypes]\n    ytypes.forEach(ytype => {\n      if (this.scope.every(yt => yt !== ytype)) {\n        if (ytype.doc !== this.doc) logging.warn('[yjs#509] Not same Y.Doc') // use MultiDocUndoManager instead. also see https://github.com/yjs/yjs/issues/509\n        this.scope.push(ytype)\n      }\n    })\n  }\n\n  /**\n   * @param {any} origin\n   */\n  addTrackedOrigin (origin) {\n    this.trackedOrigins.add(origin)\n  }\n\n  /**\n   * @param {any} origin\n   */\n  removeTrackedOrigin (origin) {\n    this.trackedOrigins.delete(origin)\n  }\n\n  clear (clearUndoStack = true, clearRedoStack = true) {\n    if ((clearUndoStack && this.canUndo()) || (clearRedoStack && this.canRedo())) {\n      this.doc.transact(tr => {\n        if (clearUndoStack) {\n          this.undoStack.forEach(item => clearUndoManagerStackItem(tr, this, item))\n          this.undoStack = []\n        }\n        if (clearRedoStack) {\n          this.redoStack.forEach(item => clearUndoManagerStackItem(tr, this, item))\n          this.redoStack = []\n        }\n        this.emit('stack-cleared', [{ undoStackCleared: clearUndoStack, redoStackCleared: clearRedoStack }])\n      })\n    }\n  }\n\n  /**\n   * UndoManager merges Undo-StackItem if they are created within time-gap\n   * smaller than `options.captureTimeout`. Call `um.stopCapturing()` so that the next\n   * StackItem won't be merged.\n   *\n   *\n   * @example\n   *     // without stopCapturing\n   *     ytext.insert(0, 'a')\n   *     ytext.insert(1, 'b')\n   *     um.undo()\n   *     ytext.toString() // => '' (note that 'ab' was removed)\n   *     // with stopCapturing\n   *     ytext.insert(0, 'a')\n   *     um.stopCapturing()\n   *     ytext.insert(0, 'b')\n   *     um.undo()\n   *     ytext.toString() // => 'a' (note that only 'b' was removed)\n   *\n   */\n  stopCapturing () {\n    this.lastChange = 0\n  }\n\n  /**\n   * Undo last changes on type.\n   *\n   * @return {StackItem?} Returns StackItem if a change was applied\n   */\n  undo () {\n    this.undoing = true\n    let res\n    try {\n      res = popStackItem(this, this.undoStack, 'undo')\n    } finally {\n      this.undoing = false\n    }\n    return res\n  }\n\n  /**\n   * Redo last undo operation.\n   *\n   * @return {StackItem?} Returns StackItem if a change was applied\n   */\n  redo () {\n    this.redoing = true\n    let res\n    try {\n      res = popStackItem(this, this.redoStack, 'redo')\n    } finally {\n      this.redoing = false\n    }\n    return res\n  }\n\n  /**\n   * Are undo steps available?\n   *\n   * @return {boolean} `true` if undo is possible\n   */\n  canUndo () {\n    return this.undoStack.length > 0\n  }\n\n  /**\n   * Are redo steps available?\n   *\n   * @return {boolean} `true` if redo is possible\n   */\n  canRedo () {\n    return this.redoStack.length > 0\n  }\n\n  destroy () {\n    this.trackedOrigins.delete(this)\n    this.doc.off('afterTransaction', this.afterTransactionHandler)\n    super.destroy()\n  }\n}\n","import * as binary from 'lib0/binary'\nimport * as decoding from 'lib0/decoding'\nimport * as encoding from 'lib0/encoding'\nimport * as error from 'lib0/error'\nimport * as f from 'lib0/function'\nimport * as logging from 'lib0/logging'\nimport * as map from 'lib0/map'\nimport * as math from 'lib0/math'\nimport * as string from 'lib0/string'\n\nimport {\n  ContentAny,\n  ContentBinary,\n  ContentDeleted,\n  ContentDoc,\n  ContentEmbed,\n  ContentFormat,\n  ContentJSON,\n  ContentString,\n  ContentType,\n  createID,\n  decodeStateVector,\n  DSEncoderV1,\n  DSEncoderV2,\n  GC,\n  Item,\n  mergeDeleteSets,\n  readDeleteSet,\n  readItemContent,\n  Skip,\n  UpdateDecoderV1,\n  UpdateDecoderV2,\n  UpdateEncoderV1,\n  UpdateEncoderV2,\n  writeDeleteSet,\n  YXmlElement,\n  YXmlHook\n} from '../internals.js'\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n */\nfunction * lazyStructReaderGenerator (decoder) {\n  const numOfStateUpdates = decoding.readVarUint(decoder.restDecoder)\n  for (let i = 0; i < numOfStateUpdates; i++) {\n    const numberOfStructs = decoding.readVarUint(decoder.restDecoder)\n    const client = decoder.readClient()\n    let clock = decoding.readVarUint(decoder.restDecoder)\n    for (let i = 0; i < numberOfStructs; i++) {\n      const info = decoder.readInfo()\n      // @todo use switch instead of ifs\n      if (info === 10) {\n        const len = decoding.readVarUint(decoder.restDecoder)\n        yield new Skip(createID(client, clock), len)\n        clock += len\n      } else if ((binary.BITS5 & info) !== 0) {\n        const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0\n        // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n        // and we read the next string as parentYKey.\n        // It indicates how we store/retrieve parent from `y.share`\n        // @type {string|null}\n        const struct = new Item(\n          createID(client, clock),\n          null, // left\n          (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null, // origin\n          null, // right\n          (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null, // right origin\n          // @ts-ignore Force writing a string here.\n          cantCopyParentInfo ? (decoder.readParentInfo() ? decoder.readString() : decoder.readLeftID()) : null, // parent\n          cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n          readItemContent(decoder, info) // item content\n        )\n        yield struct\n        clock += struct.length\n      } else {\n        const len = decoder.readLen()\n        yield new GC(createID(client, clock), len)\n        clock += len\n      }\n    }\n  }\n}\n\nexport class LazyStructReader {\n  /**\n   * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n   * @param {boolean} filterSkips\n   */\n  constructor (decoder, filterSkips) {\n    this.gen = lazyStructReaderGenerator(decoder)\n    /**\n     * @type {null | Item | Skip | GC}\n     */\n    this.curr = null\n    this.done = false\n    this.filterSkips = filterSkips\n    this.next()\n  }\n\n  /**\n   * @return {Item | GC | Skip |null}\n   */\n  next () {\n    // ignore \"Skip\" structs\n    do {\n      this.curr = this.gen.next().value || null\n    } while (this.filterSkips && this.curr !== null && this.curr.constructor === Skip)\n    return this.curr\n  }\n}\n\n/**\n * @param {Uint8Array} update\n *\n */\nexport const logUpdate = update => logUpdateV2(update, UpdateDecoderV1)\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} [YDecoder]\n *\n */\nexport const logUpdateV2 = (update, YDecoder = UpdateDecoderV2) => {\n  const structs = []\n  const updateDecoder = new YDecoder(decoding.createDecoder(update))\n  const lazyDecoder = new LazyStructReader(updateDecoder, false)\n  for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {\n    structs.push(curr)\n  }\n  logging.print('Structs: ', structs)\n  const ds = readDeleteSet(updateDecoder)\n  logging.print('DeleteSet: ', ds)\n}\n\n/**\n * @param {Uint8Array} update\n *\n */\nexport const decodeUpdate = (update) => decodeUpdateV2(update, UpdateDecoderV1)\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} [YDecoder]\n *\n */\nexport const decodeUpdateV2 = (update, YDecoder = UpdateDecoderV2) => {\n  const structs = []\n  const updateDecoder = new YDecoder(decoding.createDecoder(update))\n  const lazyDecoder = new LazyStructReader(updateDecoder, false)\n  for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {\n    structs.push(curr)\n  }\n  return {\n    structs,\n    ds: readDeleteSet(updateDecoder)\n  }\n}\n\nexport class LazyStructWriter {\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  constructor (encoder) {\n    this.currClient = 0\n    this.startClock = 0\n    this.written = 0\n    this.encoder = encoder\n    /**\n     * We want to write operations lazily, but also we need to know beforehand how many operations we want to write for each client.\n     *\n     * This kind of meta-information (#clients, #structs-per-client-written) is written to the restEncoder.\n     *\n     * We fragment the restEncoder and store a slice of it per-client until we know how many clients there are.\n     * When we flush (toUint8Array) we write the restEncoder using the fragments and the meta-information.\n     *\n     * @type {Array<{ written: number, restEncoder: Uint8Array }>}\n     */\n    this.clientStructs = []\n  }\n}\n\n/**\n * @param {Array<Uint8Array>} updates\n * @return {Uint8Array}\n */\nexport const mergeUpdates = updates => mergeUpdatesV2(updates, UpdateDecoderV1, UpdateEncoderV1)\n\n/**\n * @param {Uint8Array} update\n * @param {typeof DSEncoderV1 | typeof DSEncoderV2} YEncoder\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} YDecoder\n * @return {Uint8Array}\n */\nexport const encodeStateVectorFromUpdateV2 = (update, YEncoder = DSEncoderV2, YDecoder = UpdateDecoderV2) => {\n  const encoder = new YEncoder()\n  const updateDecoder = new LazyStructReader(new YDecoder(decoding.createDecoder(update)), false)\n  let curr = updateDecoder.curr\n  if (curr !== null) {\n    let size = 0\n    let currClient = curr.id.client\n    let stopCounting = curr.id.clock !== 0 // must start at 0\n    let currClock = stopCounting ? 0 : curr.id.clock + curr.length\n    for (; curr !== null; curr = updateDecoder.next()) {\n      if (currClient !== curr.id.client) {\n        if (currClock !== 0) {\n          size++\n          // We found a new client\n          // write what we have to the encoder\n          encoding.writeVarUint(encoder.restEncoder, currClient)\n          encoding.writeVarUint(encoder.restEncoder, currClock)\n        }\n        currClient = curr.id.client\n        currClock = 0\n        stopCounting = curr.id.clock !== 0\n      }\n      // we ignore skips\n      if (curr.constructor === Skip) {\n        stopCounting = true\n      }\n      if (!stopCounting) {\n        currClock = curr.id.clock + curr.length\n      }\n    }\n    // write what we have\n    if (currClock !== 0) {\n      size++\n      encoding.writeVarUint(encoder.restEncoder, currClient)\n      encoding.writeVarUint(encoder.restEncoder, currClock)\n    }\n    // prepend the size of the state vector\n    const enc = encoding.createEncoder()\n    encoding.writeVarUint(enc, size)\n    encoding.writeBinaryEncoder(enc, encoder.restEncoder)\n    encoder.restEncoder = enc\n    return encoder.toUint8Array()\n  } else {\n    encoding.writeVarUint(encoder.restEncoder, 0)\n    return encoder.toUint8Array()\n  }\n}\n\n/**\n * @param {Uint8Array} update\n * @return {Uint8Array}\n */\nexport const encodeStateVectorFromUpdate = update => encodeStateVectorFromUpdateV2(update, DSEncoderV1, UpdateDecoderV1)\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} YDecoder\n * @return {{ from: Map<number,number>, to: Map<number,number> }}\n */\nexport const parseUpdateMetaV2 = (update, YDecoder = UpdateDecoderV2) => {\n  /**\n   * @type {Map<number, number>}\n   */\n  const from = new Map()\n  /**\n   * @type {Map<number, number>}\n   */\n  const to = new Map()\n  const updateDecoder = new LazyStructReader(new YDecoder(decoding.createDecoder(update)), false)\n  let curr = updateDecoder.curr\n  if (curr !== null) {\n    let currClient = curr.id.client\n    let currClock = curr.id.clock\n    // write the beginning to `from`\n    from.set(currClient, currClock)\n    for (; curr !== null; curr = updateDecoder.next()) {\n      if (currClient !== curr.id.client) {\n        // We found a new client\n        // write the end to `to`\n        to.set(currClient, currClock)\n        // write the beginning to `from`\n        from.set(curr.id.client, curr.id.clock)\n        // update currClient\n        currClient = curr.id.client\n      }\n      currClock = curr.id.clock + curr.length\n    }\n    // write the end to `to`\n    to.set(currClient, currClock)\n  }\n  return { from, to }\n}\n\n/**\n * @param {Uint8Array} update\n * @return {{ from: Map<number,number>, to: Map<number,number> }}\n */\nexport const parseUpdateMeta = update => parseUpdateMetaV2(update, UpdateDecoderV1)\n\n/**\n * This method is intended to slice any kind of struct and retrieve the right part.\n * It does not handle side-effects, so it should only be used by the lazy-encoder.\n *\n * @param {Item | GC | Skip} left\n * @param {number} diff\n * @return {Item | GC}\n */\nconst sliceStruct = (left, diff) => {\n  if (left.constructor === GC) {\n    const { client, clock } = left.id\n    return new GC(createID(client, clock + diff), left.length - diff)\n  } else if (left.constructor === Skip) {\n    const { client, clock } = left.id\n    return new Skip(createID(client, clock + diff), left.length - diff)\n  } else {\n    const leftItem = /** @type {Item} */ (left)\n    const { client, clock } = leftItem.id\n    return new Item(\n      createID(client, clock + diff),\n      null,\n      createID(client, clock + diff - 1),\n      null,\n      leftItem.rightOrigin,\n      leftItem.parent,\n      leftItem.parentSub,\n      leftItem.content.splice(diff)\n    )\n  }\n}\n\n/**\n *\n * This function works similarly to `readUpdateV2`.\n *\n * @param {Array<Uint8Array>} updates\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n * @param {typeof UpdateEncoderV1 | typeof UpdateEncoderV2} [YEncoder]\n * @return {Uint8Array}\n */\nexport const mergeUpdatesV2 = (updates, YDecoder = UpdateDecoderV2, YEncoder = UpdateEncoderV2) => {\n  if (updates.length === 1) {\n    return updates[0]\n  }\n  const updateDecoders = updates.map(update => new YDecoder(decoding.createDecoder(update)))\n  let lazyStructDecoders = updateDecoders.map(decoder => new LazyStructReader(decoder, true))\n\n  /**\n   * @todo we don't need offset because we always slice before\n   * @type {null | { struct: Item | GC | Skip, offset: number }}\n   */\n  let currWrite = null\n\n  const updateEncoder = new YEncoder()\n  // write structs lazily\n  const lazyStructEncoder = new LazyStructWriter(updateEncoder)\n\n  // Note: We need to ensure that all lazyStructDecoders are fully consumed\n  // Note: Should merge document updates whenever possible - even from different updates\n  // Note: Should handle that some operations cannot be applied yet ()\n\n  while (true) {\n    // Write higher clients first ⇒ sort by clientID & clock and remove decoders without content\n    lazyStructDecoders = lazyStructDecoders.filter(dec => dec.curr !== null)\n    lazyStructDecoders.sort(\n      /** @type {function(any,any):number} */ (dec1, dec2) => {\n        if (dec1.curr.id.client === dec2.curr.id.client) {\n          const clockDiff = dec1.curr.id.clock - dec2.curr.id.clock\n          if (clockDiff === 0) {\n            // @todo remove references to skip since the structDecoders must filter Skips.\n            return dec1.curr.constructor === dec2.curr.constructor\n              ? 0\n              : dec1.curr.constructor === Skip ? 1 : -1 // we are filtering skips anyway.\n          } else {\n            return clockDiff\n          }\n        } else {\n          return dec2.curr.id.client - dec1.curr.id.client\n        }\n      }\n    )\n    if (lazyStructDecoders.length === 0) {\n      break\n    }\n    const currDecoder = lazyStructDecoders[0]\n    // write from currDecoder until the next operation is from another client or if filler-struct\n    // then we need to reorder the decoders and find the next operation to write\n    const firstClient = /** @type {Item | GC} */ (currDecoder.curr).id.client\n\n    if (currWrite !== null) {\n      let curr = /** @type {Item | GC | null} */ (currDecoder.curr)\n      let iterated = false\n\n      // iterate until we find something that we haven't written already\n      // remember: first the high client-ids are written\n      while (curr !== null && curr.id.clock + curr.length <= currWrite.struct.id.clock + currWrite.struct.length && curr.id.client >= currWrite.struct.id.client) {\n        curr = currDecoder.next()\n        iterated = true\n      }\n      if (\n        curr === null || // current decoder is empty\n        curr.id.client !== firstClient || // check whether there is another decoder that has has updates from `firstClient`\n        (iterated && curr.id.clock > currWrite.struct.id.clock + currWrite.struct.length) // the above while loop was used and we are potentially missing updates\n      ) {\n        continue\n      }\n\n      if (firstClient !== currWrite.struct.id.client) {\n        writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset)\n        currWrite = { struct: curr, offset: 0 }\n        currDecoder.next()\n      } else {\n        if (currWrite.struct.id.clock + currWrite.struct.length < curr.id.clock) {\n          // @todo write currStruct & set currStruct = Skip(clock = currStruct.id.clock + currStruct.length, length = curr.id.clock - self.clock)\n          if (currWrite.struct.constructor === Skip) {\n            // extend existing skip\n            currWrite.struct.length = curr.id.clock + curr.length - currWrite.struct.id.clock\n          } else {\n            writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset)\n            const diff = curr.id.clock - currWrite.struct.id.clock - currWrite.struct.length\n            /**\n             * @type {Skip}\n             */\n            const struct = new Skip(createID(firstClient, currWrite.struct.id.clock + currWrite.struct.length), diff)\n            currWrite = { struct, offset: 0 }\n          }\n        } else { // if (currWrite.struct.id.clock + currWrite.struct.length >= curr.id.clock) {\n          const diff = currWrite.struct.id.clock + currWrite.struct.length - curr.id.clock\n          if (diff > 0) {\n            if (currWrite.struct.constructor === Skip) {\n              // prefer to slice Skip because the other struct might contain more information\n              currWrite.struct.length -= diff\n            } else {\n              curr = sliceStruct(curr, diff)\n            }\n          }\n          if (!currWrite.struct.mergeWith(/** @type {any} */ (curr))) {\n            writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset)\n            currWrite = { struct: curr, offset: 0 }\n            currDecoder.next()\n          }\n        }\n      }\n    } else {\n      currWrite = { struct: /** @type {Item | GC} */ (currDecoder.curr), offset: 0 }\n      currDecoder.next()\n    }\n    for (\n      let next = currDecoder.curr;\n      next !== null && next.id.client === firstClient && next.id.clock === currWrite.struct.id.clock + currWrite.struct.length && next.constructor !== Skip;\n      next = currDecoder.next()\n    ) {\n      writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset)\n      currWrite = { struct: next, offset: 0 }\n    }\n  }\n  if (currWrite !== null) {\n    writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset)\n    currWrite = null\n  }\n  finishLazyStructWriting(lazyStructEncoder)\n\n  const dss = updateDecoders.map(decoder => readDeleteSet(decoder))\n  const ds = mergeDeleteSets(dss)\n  writeDeleteSet(updateEncoder, ds)\n  return updateEncoder.toUint8Array()\n}\n\n/**\n * @param {Uint8Array} update\n * @param {Uint8Array} sv\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n * @param {typeof UpdateEncoderV1 | typeof UpdateEncoderV2} [YEncoder]\n */\nexport const diffUpdateV2 = (update, sv, YDecoder = UpdateDecoderV2, YEncoder = UpdateEncoderV2) => {\n  const state = decodeStateVector(sv)\n  const encoder = new YEncoder()\n  const lazyStructWriter = new LazyStructWriter(encoder)\n  const decoder = new YDecoder(decoding.createDecoder(update))\n  const reader = new LazyStructReader(decoder, false)\n  while (reader.curr) {\n    const curr = reader.curr\n    const currClient = curr.id.client\n    const svClock = state.get(currClient) || 0\n    if (reader.curr.constructor === Skip) {\n      // the first written struct shouldn't be a skip\n      reader.next()\n      continue\n    }\n    if (curr.id.clock + curr.length > svClock) {\n      writeStructToLazyStructWriter(lazyStructWriter, curr, math.max(svClock - curr.id.clock, 0))\n      reader.next()\n      while (reader.curr && reader.curr.id.client === currClient) {\n        writeStructToLazyStructWriter(lazyStructWriter, reader.curr, 0)\n        reader.next()\n      }\n    } else {\n      // read until something new comes up\n      while (reader.curr && reader.curr.id.client === currClient && reader.curr.id.clock + reader.curr.length <= svClock) {\n        reader.next()\n      }\n    }\n  }\n  finishLazyStructWriting(lazyStructWriter)\n  // write ds\n  const ds = readDeleteSet(decoder)\n  writeDeleteSet(encoder, ds)\n  return encoder.toUint8Array()\n}\n\n/**\n * @param {Uint8Array} update\n * @param {Uint8Array} sv\n */\nexport const diffUpdate = (update, sv) => diffUpdateV2(update, sv, UpdateDecoderV1, UpdateEncoderV1)\n\n/**\n * @param {LazyStructWriter} lazyWriter\n */\nconst flushLazyStructWriter = lazyWriter => {\n  if (lazyWriter.written > 0) {\n    lazyWriter.clientStructs.push({ written: lazyWriter.written, restEncoder: encoding.toUint8Array(lazyWriter.encoder.restEncoder) })\n    lazyWriter.encoder.restEncoder = encoding.createEncoder()\n    lazyWriter.written = 0\n  }\n}\n\n/**\n * @param {LazyStructWriter} lazyWriter\n * @param {Item | GC} struct\n * @param {number} offset\n */\nconst writeStructToLazyStructWriter = (lazyWriter, struct, offset) => {\n  // flush curr if we start another client\n  if (lazyWriter.written > 0 && lazyWriter.currClient !== struct.id.client) {\n    flushLazyStructWriter(lazyWriter)\n  }\n  if (lazyWriter.written === 0) {\n    lazyWriter.currClient = struct.id.client\n    // write next client\n    lazyWriter.encoder.writeClient(struct.id.client)\n    // write startClock\n    encoding.writeVarUint(lazyWriter.encoder.restEncoder, struct.id.clock + offset)\n  }\n  struct.write(lazyWriter.encoder, offset)\n  lazyWriter.written++\n}\n/**\n * Call this function when we collected all parts and want to\n * put all the parts together. After calling this method,\n * you can continue using the UpdateEncoder.\n *\n * @param {LazyStructWriter} lazyWriter\n */\nconst finishLazyStructWriting = (lazyWriter) => {\n  flushLazyStructWriter(lazyWriter)\n\n  // this is a fresh encoder because we called flushCurr\n  const restEncoder = lazyWriter.encoder.restEncoder\n\n  /**\n   * Now we put all the fragments together.\n   * This works similarly to `writeClientsStructs`\n   */\n\n  // write # states that were updated - i.e. the clients\n  encoding.writeVarUint(restEncoder, lazyWriter.clientStructs.length)\n\n  for (let i = 0; i < lazyWriter.clientStructs.length; i++) {\n    const partStructs = lazyWriter.clientStructs[i]\n    /**\n     * Works similarly to `writeStructs`\n     */\n    // write # encoded structs\n    encoding.writeVarUint(restEncoder, partStructs.written)\n    // write the rest of the fragment\n    encoding.writeUint8Array(restEncoder, partStructs.restEncoder)\n  }\n}\n\n/**\n * @param {Uint8Array} update\n * @param {function(Item|GC|Skip):Item|GC|Skip} blockTransformer\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} YDecoder\n * @param {typeof UpdateEncoderV2 | typeof UpdateEncoderV1 } YEncoder\n */\nexport const convertUpdateFormat = (update, blockTransformer, YDecoder, YEncoder) => {\n  const updateDecoder = new YDecoder(decoding.createDecoder(update))\n  const lazyDecoder = new LazyStructReader(updateDecoder, false)\n  const updateEncoder = new YEncoder()\n  const lazyWriter = new LazyStructWriter(updateEncoder)\n  for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {\n    writeStructToLazyStructWriter(lazyWriter, blockTransformer(curr), 0)\n  }\n  finishLazyStructWriting(lazyWriter)\n  const ds = readDeleteSet(updateDecoder)\n  writeDeleteSet(updateEncoder, ds)\n  return updateEncoder.toUint8Array()\n}\n\n/**\n * @typedef {Object} ObfuscatorOptions\n * @property {boolean} [ObfuscatorOptions.formatting=true]\n * @property {boolean} [ObfuscatorOptions.subdocs=true]\n * @property {boolean} [ObfuscatorOptions.yxml=true] Whether to obfuscate nodeName / hookName\n */\n\n/**\n * @param {ObfuscatorOptions} obfuscator\n */\nconst createObfuscator = ({ formatting = true, subdocs = true, yxml = true } = {}) => {\n  let i = 0\n  const mapKeyCache = map.create()\n  const nodeNameCache = map.create()\n  const formattingKeyCache = map.create()\n  const formattingValueCache = map.create()\n  formattingValueCache.set(null, null) // end of a formatting range should always be the end of a formatting range\n  /**\n   * @param {Item|GC|Skip} block\n   * @return {Item|GC|Skip}\n   */\n  return block => {\n    switch (block.constructor) {\n      case GC:\n      case Skip:\n        return block\n      case Item: {\n        const item = /** @type {Item} */ (block)\n        const content = item.content\n        switch (content.constructor) {\n          case ContentDeleted:\n            break\n          case ContentType: {\n            if (yxml) {\n              const type = /** @type {ContentType} */ (content).type\n              if (type instanceof YXmlElement) {\n                type.nodeName = map.setIfUndefined(nodeNameCache, type.nodeName, () => 'node-' + i)\n              }\n              if (type instanceof YXmlHook) {\n                type.hookName = map.setIfUndefined(nodeNameCache, type.hookName, () => 'hook-' + i)\n              }\n            }\n            break\n          }\n          case ContentAny: {\n            const c = /** @type {ContentAny} */ (content)\n            c.arr = c.arr.map(() => i)\n            break\n          }\n          case ContentBinary: {\n            const c = /** @type {ContentBinary} */ (content)\n            c.content = new Uint8Array([i])\n            break\n          }\n          case ContentDoc: {\n            const c = /** @type {ContentDoc} */ (content)\n            if (subdocs) {\n              c.opts = {}\n              c.doc.guid = i + ''\n            }\n            break\n          }\n          case ContentEmbed: {\n            const c = /** @type {ContentEmbed} */ (content)\n            c.embed = {}\n            break\n          }\n          case ContentFormat: {\n            const c = /** @type {ContentFormat} */ (content)\n            if (formatting) {\n              c.key = map.setIfUndefined(formattingKeyCache, c.key, () => i + '')\n              c.value = map.setIfUndefined(formattingValueCache, c.value, () => ({ i }))\n            }\n            break\n          }\n          case ContentJSON: {\n            const c = /** @type {ContentJSON} */ (content)\n            c.arr = c.arr.map(() => i)\n            break\n          }\n          case ContentString: {\n            const c = /** @type {ContentString} */ (content)\n            c.str = string.repeat((i % 10) + '', c.str.length)\n            break\n          }\n          default:\n            // unknown content type\n            error.unexpectedCase()\n        }\n        if (item.parentSub) {\n          item.parentSub = map.setIfUndefined(mapKeyCache, item.parentSub, () => i + '')\n        }\n        i++\n        return block\n      }\n      default:\n        // unknown block-type\n        error.unexpectedCase()\n    }\n  }\n}\n\n/**\n * This function obfuscates the content of a Yjs update. This is useful to share\n * buggy Yjs documents while significantly limiting the possibility that a\n * developer can on the user. Note that it might still be possible to deduce\n * some information by analyzing the \"structure\" of the document or by analyzing\n * the typing behavior using the CRDT-related metadata that is still kept fully\n * intact.\n *\n * @param {Uint8Array} update\n * @param {ObfuscatorOptions} [opts]\n */\nexport const obfuscateUpdate = (update, opts) => convertUpdateFormat(update, createObfuscator(opts), UpdateDecoderV1, UpdateEncoderV1)\n\n/**\n * @param {Uint8Array} update\n * @param {ObfuscatorOptions} [opts]\n */\nexport const obfuscateUpdateV2 = (update, opts) => convertUpdateFormat(update, createObfuscator(opts), UpdateDecoderV2, UpdateEncoderV2)\n\n/**\n * @param {Uint8Array} update\n */\nexport const convertUpdateFormatV1ToV2 = update => convertUpdateFormat(update, f.id, UpdateDecoderV1, UpdateEncoderV2)\n\n/**\n * @param {Uint8Array} update\n */\nexport const convertUpdateFormatV2ToV1 = update => convertUpdateFormat(update, f.id, UpdateDecoderV2, UpdateEncoderV1)\n","import {\n  isDeleted,\n  Item, AbstractType, Transaction, AbstractStruct // eslint-disable-line\n} from '../internals.js'\n\nimport * as set from 'lib0/set'\nimport * as array from 'lib0/array'\nimport * as error from 'lib0/error'\n\nconst errorComputeChanges = 'You must not compute changes after the event-handler fired.'\n\n/**\n * @template {AbstractType<any>} T\n * YEvent describes the changes on a YType.\n */\nexport class YEvent {\n  /**\n   * @param {T} target The changed type.\n   * @param {Transaction} transaction\n   */\n  constructor (target, transaction) {\n    /**\n     * The type on which this event was created on.\n     * @type {T}\n     */\n    this.target = target\n    /**\n     * The current target on which the observe callback is called.\n     * @type {AbstractType<any>}\n     */\n    this.currentTarget = target\n    /**\n     * The transaction that triggered this event.\n     * @type {Transaction}\n     */\n    this.transaction = transaction\n    /**\n     * @type {Object|null}\n     */\n    this._changes = null\n    /**\n     * @type {null | Map<string, { action: 'add' | 'update' | 'delete', oldValue: any, newValue: any }>}\n     */\n    this._keys = null\n    /**\n     * @type {null | Array<{ insert?: string | Array<any> | object | AbstractType<any>, retain?: number, delete?: number, attributes?: Object<string, any> }>}\n     */\n    this._delta = null\n    /**\n     * @type {Array<string|number>|null}\n     */\n    this._path = null\n  }\n\n  /**\n   * Computes the path from `y` to the changed type.\n   *\n   * @todo v14 should standardize on path: Array<{parent, index}> because that is easier to work with.\n   *\n   * The following property holds:\n   * @example\n   *   let type = y\n   *   event.path.forEach(dir => {\n   *     type = type.get(dir)\n   *   })\n   *   type === event.target // => true\n   */\n  get path () {\n    return this._path || (this._path = getPathTo(this.currentTarget, this.target))\n  }\n\n  /**\n   * Check if a struct is deleted by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n  deletes (struct) {\n    return isDeleted(this.transaction.deleteSet, struct.id)\n  }\n\n  /**\n   * @type {Map<string, { action: 'add' | 'update' | 'delete', oldValue: any, newValue: any }>}\n   */\n  get keys () {\n    if (this._keys === null) {\n      if (this.transaction.doc._transactionCleanups.length === 0) {\n        throw error.create(errorComputeChanges)\n      }\n      const keys = new Map()\n      const target = this.target\n      const changed = /** @type Set<string|null> */ (this.transaction.changed.get(target))\n      changed.forEach(key => {\n        if (key !== null) {\n          const item = /** @type {Item} */ (target._map.get(key))\n          /**\n           * @type {'delete' | 'add' | 'update'}\n           */\n          let action\n          let oldValue\n          if (this.adds(item)) {\n            let prev = item.left\n            while (prev !== null && this.adds(prev)) {\n              prev = prev.left\n            }\n            if (this.deletes(item)) {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'delete'\n                oldValue = array.last(prev.content.getContent())\n              } else {\n                return\n              }\n            } else {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'update'\n                oldValue = array.last(prev.content.getContent())\n              } else {\n                action = 'add'\n                oldValue = undefined\n              }\n            }\n          } else {\n            if (this.deletes(item)) {\n              action = 'delete'\n              oldValue = array.last(/** @type {Item} */ item.content.getContent())\n            } else {\n              return // nop\n            }\n          }\n          keys.set(key, { action, oldValue })\n        }\n      })\n      this._keys = keys\n    }\n    return this._keys\n  }\n\n  /**\n   * This is a computed property. Note that this can only be safely computed during the\n   * event call. Computing this property after other changes happened might result in\n   * unexpected behavior (incorrect computation of deltas). A safe way to collect changes\n   * is to store the `changes` or the `delta` object. Avoid storing the `transaction` object.\n   *\n   * @type {Array<{insert?: string | Array<any> | object | AbstractType<any>, retain?: number, delete?: number, attributes?: Object<string, any>}>}\n   */\n  get delta () {\n    return this.changes.delta\n  }\n\n  /**\n   * Check if a struct is added by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n  adds (struct) {\n    return struct.id.clock >= (this.transaction.beforeState.get(struct.id.client) || 0)\n  }\n\n  /**\n   * This is a computed property. Note that this can only be safely computed during the\n   * event call. Computing this property after other changes happened might result in\n   * unexpected behavior (incorrect computation of deltas). A safe way to collect changes\n   * is to store the `changes` or the `delta` object. Avoid storing the `transaction` object.\n   *\n   * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}\n   */\n  get changes () {\n    let changes = this._changes\n    if (changes === null) {\n      if (this.transaction.doc._transactionCleanups.length === 0) {\n        throw error.create(errorComputeChanges)\n      }\n      const target = this.target\n      const added = set.create()\n      const deleted = set.create()\n      /**\n       * @type {Array<{insert:Array<any>}|{delete:number}|{retain:number}>}\n       */\n      const delta = []\n      changes = {\n        added,\n        deleted,\n        delta,\n        keys: this.keys\n      }\n      const changed = /** @type Set<string|null> */ (this.transaction.changed.get(target))\n      if (changed.has(null)) {\n        /**\n         * @type {any}\n         */\n        let lastOp = null\n        const packOp = () => {\n          if (lastOp) {\n            delta.push(lastOp)\n          }\n        }\n        for (let item = target._start; item !== null; item = item.right) {\n          if (item.deleted) {\n            if (this.deletes(item) && !this.adds(item)) {\n              if (lastOp === null || lastOp.delete === undefined) {\n                packOp()\n                lastOp = { delete: 0 }\n              }\n              lastOp.delete += item.length\n              deleted.add(item)\n            } // else nop\n          } else {\n            if (this.adds(item)) {\n              if (lastOp === null || lastOp.insert === undefined) {\n                packOp()\n                lastOp = { insert: [] }\n              }\n              lastOp.insert = lastOp.insert.concat(item.content.getContent())\n              added.add(item)\n            } else {\n              if (lastOp === null || lastOp.retain === undefined) {\n                packOp()\n                lastOp = { retain: 0 }\n              }\n              lastOp.retain += item.length\n            }\n          }\n        }\n        if (lastOp !== null && lastOp.retain === undefined) {\n          packOp()\n        }\n      }\n      this._changes = changes\n    }\n    return /** @type {any} */ (changes)\n  }\n}\n\n/**\n * Compute the path from this type to the specified target.\n *\n * @example\n *   // `child` should be accessible via `type.get(path[0]).get(path[1])..`\n *   const path = type.getPathTo(child)\n *   // assuming `type instanceof YArray`\n *   console.log(path) // might look like => [2, 'key1']\n *   child === type.get(path[0]).get(path[1])\n *\n * @param {AbstractType<any>} parent\n * @param {AbstractType<any>} child target\n * @return {Array<string|number>} Path to the target\n *\n * @private\n * @function\n */\nconst getPathTo = (parent, child) => {\n  const path = []\n  while (child._item !== null && child !== parent) {\n    if (child._item.parentSub !== null) {\n      // parent is map-ish\n      path.unshift(child._item.parentSub)\n    } else {\n      // parent is array-ish\n      let i = 0\n      let c = /** @type {AbstractType<any>} */ (child._item.parent)._start\n      while (c !== child._item && c !== null) {\n        if (!c.deleted && c.countable) {\n          i += c.length\n        }\n        c = c.right\n      }\n      path.unshift(i)\n    }\n    child = /** @type {AbstractType<any>} */ (child._item.parent)\n  }\n  return path\n}\n","import {\n  removeEventHandlerListener,\n  callEventHandlerListeners,\n  addEventHandlerListener,\n  createEventHandler,\n  getState,\n  isVisible,\n  ContentType,\n  createID,\n  ContentAny,\n  ContentBinary,\n  getItemCleanStart,\n  ContentDoc, YText, YArray, UpdateEncoderV1, UpdateEncoderV2, Doc, Snapshot, Transaction, EventHandler, YEvent, Item, // eslint-disable-line\n} from '../internals.js'\n\nimport * as map from 'lib0/map'\nimport * as iterator from 'lib0/iterator'\nimport * as error from 'lib0/error'\nimport * as math from 'lib0/math'\nimport * as log from 'lib0/logging'\n\n/**\n * https://docs.yjs.dev/getting-started/working-with-shared-types#caveats\n */\nexport const warnPrematureAccess = () => { log.warn('Invalid access: Add Yjs type to a document before reading data.') }\n\nconst maxSearchMarker = 80\n\n/**\n * A unique timestamp that identifies each marker.\n *\n * Time is relative,.. this is more like an ever-increasing clock.\n *\n * @type {number}\n */\nlet globalSearchMarkerTimestamp = 0\n\nexport class ArraySearchMarker {\n  /**\n   * @param {Item} p\n   * @param {number} index\n   */\n  constructor (p, index) {\n    p.marker = true\n    this.p = p\n    this.index = index\n    this.timestamp = globalSearchMarkerTimestamp++\n  }\n}\n\n/**\n * @param {ArraySearchMarker} marker\n */\nconst refreshMarkerTimestamp = marker => { marker.timestamp = globalSearchMarkerTimestamp++ }\n\n/**\n * This is rather complex so this function is the only thing that should overwrite a marker\n *\n * @param {ArraySearchMarker} marker\n * @param {Item} p\n * @param {number} index\n */\nconst overwriteMarker = (marker, p, index) => {\n  marker.p.marker = false\n  marker.p = p\n  p.marker = true\n  marker.index = index\n  marker.timestamp = globalSearchMarkerTimestamp++\n}\n\n/**\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {Item} p\n * @param {number} index\n */\nconst markPosition = (searchMarker, p, index) => {\n  if (searchMarker.length >= maxSearchMarker) {\n    // override oldest marker (we don't want to create more objects)\n    const marker = searchMarker.reduce((a, b) => a.timestamp < b.timestamp ? a : b)\n    overwriteMarker(marker, p, index)\n    return marker\n  } else {\n    // create new marker\n    const pm = new ArraySearchMarker(p, index)\n    searchMarker.push(pm)\n    return pm\n  }\n}\n\n/**\n * Search marker help us to find positions in the associative array faster.\n *\n * They speed up the process of finding a position without much bookkeeping.\n *\n * A maximum of `maxSearchMarker` objects are created.\n *\n * This function always returns a refreshed marker (updated timestamp)\n *\n * @param {AbstractType<any>} yarray\n * @param {number} index\n */\nexport const findMarker = (yarray, index) => {\n  if (yarray._start === null || index === 0 || yarray._searchMarker === null) {\n    return null\n  }\n  const marker = yarray._searchMarker.length === 0 ? null : yarray._searchMarker.reduce((a, b) => math.abs(index - a.index) < math.abs(index - b.index) ? a : b)\n  let p = yarray._start\n  let pindex = 0\n  if (marker !== null) {\n    p = marker.p\n    pindex = marker.index\n    refreshMarkerTimestamp(marker) // we used it, we might need to use it again\n  }\n  // iterate to right if possible\n  while (p.right !== null && pindex < index) {\n    if (!p.deleted && p.countable) {\n      if (index < pindex + p.length) {\n        break\n      }\n      pindex += p.length\n    }\n    p = p.right\n  }\n  // iterate to left if necessary (might be that pindex > index)\n  while (p.left !== null && pindex > index) {\n    p = p.left\n    if (!p.deleted && p.countable) {\n      pindex -= p.length\n    }\n  }\n  // we want to make sure that p can't be merged with left, because that would screw up everything\n  // in that cas just return what we have (it is most likely the best marker anyway)\n  // iterate to left until p can't be merged with left\n  while (p.left !== null && p.left.id.client === p.id.client && p.left.id.clock + p.left.length === p.id.clock) {\n    p = p.left\n    if (!p.deleted && p.countable) {\n      pindex -= p.length\n    }\n  }\n\n  // @todo remove!\n  // assure position\n  // {\n  //   let start = yarray._start\n  //   let pos = 0\n  //   while (start !== p) {\n  //     if (!start.deleted && start.countable) {\n  //       pos += start.length\n  //     }\n  //     start = /** @type {Item} */ (start.right)\n  //   }\n  //   if (pos !== pindex) {\n  //     debugger\n  //     throw new Error('Gotcha position fail!')\n  //   }\n  // }\n  // if (marker) {\n  //   if (window.lengthes == null) {\n  //     window.lengthes = []\n  //     window.getLengthes = () => window.lengthes.sort((a, b) => a - b)\n  //   }\n  //   window.lengthes.push(marker.index - pindex)\n  //   console.log('distance', marker.index - pindex, 'len', p && p.parent.length)\n  // }\n  if (marker !== null && math.abs(marker.index - pindex) < /** @type {YText|YArray<any>} */ (p.parent).length / maxSearchMarker) {\n    // adjust existing marker\n    overwriteMarker(marker, p, pindex)\n    return marker\n  } else {\n    // create new marker\n    return markPosition(yarray._searchMarker, p, pindex)\n  }\n}\n\n/**\n * Update markers when a change happened.\n *\n * This should be called before doing a deletion!\n *\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {number} index\n * @param {number} len If insertion, len is positive. If deletion, len is negative.\n */\nexport const updateMarkerChanges = (searchMarker, index, len) => {\n  for (let i = searchMarker.length - 1; i >= 0; i--) {\n    const m = searchMarker[i]\n    if (len > 0) {\n      /**\n       * @type {Item|null}\n       */\n      let p = m.p\n      p.marker = false\n      // Ideally we just want to do a simple position comparison, but this will only work if\n      // search markers don't point to deleted items for formats.\n      // Iterate marker to prev undeleted countable position so we know what to do when updating a position\n      while (p && (p.deleted || !p.countable)) {\n        p = p.left\n        if (p && !p.deleted && p.countable) {\n          // adjust position. the loop should break now\n          m.index -= p.length\n        }\n      }\n      if (p === null || p.marker === true) {\n        // remove search marker if updated position is null or if position is already marked\n        searchMarker.splice(i, 1)\n        continue\n      }\n      m.p = p\n      p.marker = true\n    }\n    if (index < m.index || (len > 0 && index === m.index)) { // a simple index <= m.index check would actually suffice\n      m.index = math.max(index, m.index + len)\n    }\n  }\n}\n\n/**\n * Accumulate all (list) children of a type and return them as an Array.\n *\n * @param {AbstractType<any>} t\n * @return {Array<Item>}\n */\nexport const getTypeChildren = t => {\n  t.doc ?? warnPrematureAccess()\n  let s = t._start\n  const arr = []\n  while (s) {\n    arr.push(s)\n    s = s.right\n  }\n  return arr\n}\n\n/**\n * Call event listeners with an event. This will also add an event to all\n * parents (for `.observeDeep` handlers).\n *\n * @template EventType\n * @param {AbstractType<EventType>} type\n * @param {Transaction} transaction\n * @param {EventType} event\n */\nexport const callTypeObservers = (type, transaction, event) => {\n  const changedType = type\n  const changedParentTypes = transaction.changedParentTypes\n  while (true) {\n    // @ts-ignore\n    map.setIfUndefined(changedParentTypes, type, () => []).push(event)\n    if (type._item === null) {\n      break\n    }\n    type = /** @type {AbstractType<any>} */ (type._item.parent)\n  }\n  callEventHandlerListeners(changedType._eH, event, transaction)\n}\n\n/**\n * @template EventType\n * Abstract Yjs Type class\n */\nexport class AbstractType {\n  constructor () {\n    /**\n     * @type {Item|null}\n     */\n    this._item = null\n    /**\n     * @type {Map<string,Item>}\n     */\n    this._map = new Map()\n    /**\n     * @type {Item|null}\n     */\n    this._start = null\n    /**\n     * @type {Doc|null}\n     */\n    this.doc = null\n    this._length = 0\n    /**\n     * Event handlers\n     * @type {EventHandler<EventType,Transaction>}\n     */\n    this._eH = createEventHandler()\n    /**\n     * Deep event handlers\n     * @type {EventHandler<Array<YEvent<any>>,Transaction>}\n     */\n    this._dEH = createEventHandler()\n    /**\n     * @type {null | Array<ArraySearchMarker>}\n     */\n    this._searchMarker = null\n  }\n\n  /**\n   * @return {AbstractType<any>|null}\n   */\n  get parent () {\n    return this._item ? /** @type {AbstractType<any>} */ (this._item.parent) : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item|null} item\n   */\n  _integrate (y, item) {\n    this.doc = y\n    this._item = item\n  }\n\n  /**\n   * @return {AbstractType<EventType>}\n   */\n  _copy () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {AbstractType<EventType>}\n   */\n  clone () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} _encoder\n   */\n  _write (_encoder) { }\n\n  /**\n   * The first non-deleted item\n   */\n  get _first () {\n    let n = this._start\n    while (n !== null && n.deleted) {\n      n = n.right\n    }\n    return n\n  }\n\n  /**\n   * Creates YEvent and calls all type observers.\n   * Must be implemented by each type.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} _parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, _parentSubs) {\n    if (!transaction.local && this._searchMarker) {\n      this._searchMarker.length = 0\n    }\n  }\n\n  /**\n   * Observe all events that are created on this type.\n   *\n   * @param {function(EventType, Transaction):void} f Observer function\n   */\n  observe (f) {\n    addEventHandlerListener(this._eH, f)\n  }\n\n  /**\n   * Observe all events that are created by this type and its children.\n   *\n   * @param {function(Array<YEvent<any>>,Transaction):void} f Observer function\n   */\n  observeDeep (f) {\n    addEventHandlerListener(this._dEH, f)\n  }\n\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(EventType,Transaction):void} f Observer function\n   */\n  unobserve (f) {\n    removeEventHandlerListener(this._eH, f)\n  }\n\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(Array<YEvent<any>>,Transaction):void} f Observer function\n   */\n  unobserveDeep (f) {\n    removeEventHandlerListener(this._dEH, f)\n  }\n\n  /**\n   * @abstract\n   * @return {any}\n   */\n  toJSON () {}\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} start\n * @param {number} end\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nexport const typeListSlice = (type, start, end) => {\n  type.doc ?? warnPrematureAccess()\n  if (start < 0) {\n    start = type._length + start\n  }\n  if (end < 0) {\n    end = type._length + end\n  }\n  let len = end - start\n  const cs = []\n  let n = type._start\n  while (n !== null && len > 0) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent()\n      if (c.length <= start) {\n        start -= c.length\n      } else {\n        for (let i = start; i < c.length && len > 0; i++) {\n          cs.push(c[i])\n          len--\n        }\n        start = 0\n      }\n    }\n    n = n.right\n  }\n  return cs\n}\n\n/**\n * @param {AbstractType<any>} type\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nexport const typeListToArray = type => {\n  type.doc ?? warnPrematureAccess()\n  const cs = []\n  let n = type._start\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent()\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i])\n      }\n    }\n    n = n.right\n  }\n  return cs\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {Snapshot} snapshot\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nexport const typeListToArraySnapshot = (type, snapshot) => {\n  const cs = []\n  let n = type._start\n  while (n !== null) {\n    if (n.countable && isVisible(n, snapshot)) {\n      const c = n.content.getContent()\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i])\n      }\n    }\n    n = n.right\n  }\n  return cs\n}\n\n/**\n * Executes a provided function on once on every element of this YArray.\n *\n * @param {AbstractType<any>} type\n * @param {function(any,number,any):void} f A function to execute on every element of this YArray.\n *\n * @private\n * @function\n */\nexport const typeListForEach = (type, f) => {\n  let index = 0\n  let n = type._start\n  type.doc ?? warnPrematureAccess()\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent()\n      for (let i = 0; i < c.length; i++) {\n        f(c[i], index++, type)\n      }\n    }\n    n = n.right\n  }\n}\n\n/**\n * @template C,R\n * @param {AbstractType<any>} type\n * @param {function(C,number,AbstractType<any>):R} f\n * @return {Array<R>}\n *\n * @private\n * @function\n */\nexport const typeListMap = (type, f) => {\n  /**\n   * @type {Array<any>}\n   */\n  const result = []\n  typeListForEach(type, (c, i) => {\n    result.push(f(c, i, type))\n  })\n  return result\n}\n\n/**\n * @param {AbstractType<any>} type\n * @return {IterableIterator<any>}\n *\n * @private\n * @function\n */\nexport const typeListCreateIterator = type => {\n  let n = type._start\n  /**\n   * @type {Array<any>|null}\n   */\n  let currentContent = null\n  let currentContentIndex = 0\n  return {\n    [Symbol.iterator] () {\n      return this\n    },\n    next: () => {\n      // find some content\n      if (currentContent === null) {\n        while (n !== null && n.deleted) {\n          n = n.right\n        }\n        // check if we reached the end, no need to check currentContent, because it does not exist\n        if (n === null) {\n          return {\n            done: true,\n            value: undefined\n          }\n        }\n        // we found n, so we can set currentContent\n        currentContent = n.content.getContent()\n        currentContentIndex = 0\n        n = n.right // we used the content of n, now iterate to next\n      }\n      const value = currentContent[currentContentIndex++]\n      // check if we need to empty currentContent\n      if (currentContent.length <= currentContentIndex) {\n        currentContent = null\n      }\n      return {\n        done: false,\n        value\n      }\n    }\n  }\n}\n\n/**\n * Executes a provided function on once on every element of this YArray.\n * Operates on a snapshotted state of the document.\n *\n * @param {AbstractType<any>} type\n * @param {function(any,number,AbstractType<any>):void} f A function to execute on every element of this YArray.\n * @param {Snapshot} snapshot\n *\n * @private\n * @function\n */\nexport const typeListForEachSnapshot = (type, f, snapshot) => {\n  let index = 0\n  let n = type._start\n  while (n !== null) {\n    if (n.countable && isVisible(n, snapshot)) {\n      const c = n.content.getContent()\n      for (let i = 0; i < c.length; i++) {\n        f(c[i], index++, type)\n      }\n    }\n    n = n.right\n  }\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @return {any}\n *\n * @private\n * @function\n */\nexport const typeListGet = (type, index) => {\n  type.doc ?? warnPrematureAccess()\n  const marker = findMarker(type, index)\n  let n = type._start\n  if (marker !== null) {\n    n = marker.p\n    index -= marker.index\n  }\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        return n.content.getContent()[index]\n      }\n      index -= n.length\n    }\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {Item?} referenceItem\n * @param {Array<Object<string,any>|Array<any>|boolean|number|null|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nexport const typeListInsertGenericsAfter = (transaction, parent, referenceItem, content) => {\n  let left = referenceItem\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  const store = doc.store\n  const right = referenceItem === null ? parent._start : referenceItem.right\n  /**\n   * @type {Array<Object|Array<any>|number|null>}\n   */\n  let jsonContent = []\n  const packJsonContent = () => {\n    if (jsonContent.length > 0) {\n      left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentAny(jsonContent))\n      left.integrate(transaction, 0)\n      jsonContent = []\n    }\n  }\n  content.forEach(c => {\n    if (c === null) {\n      jsonContent.push(c)\n    } else {\n      switch (c.constructor) {\n        case Number:\n        case Object:\n        case Boolean:\n        case Array:\n        case String:\n          jsonContent.push(c)\n          break\n        default:\n          packJsonContent()\n          switch (c.constructor) {\n            case Uint8Array:\n            case ArrayBuffer:\n              left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentBinary(new Uint8Array(/** @type {Uint8Array} */ (c))))\n              left.integrate(transaction, 0)\n              break\n            case Doc:\n              left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentDoc(/** @type {Doc} */ (c)))\n              left.integrate(transaction, 0)\n              break\n            default:\n              if (c instanceof AbstractType) {\n                left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentType(c))\n                left.integrate(transaction, 0)\n              } else {\n                throw new Error('Unexpected content type in insert operation')\n              }\n          }\n      }\n    }\n  })\n  packJsonContent()\n}\n\nconst lengthExceeded = () => error.create('Length exceeded!')\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {Array<Object<string,any>|Array<any>|number|null|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nexport const typeListInsertGenerics = (transaction, parent, index, content) => {\n  if (index > parent._length) {\n    throw lengthExceeded()\n  }\n  if (index === 0) {\n    if (parent._searchMarker) {\n      updateMarkerChanges(parent._searchMarker, index, content.length)\n    }\n    return typeListInsertGenericsAfter(transaction, parent, null, content)\n  }\n  const startIndex = index\n  const marker = findMarker(parent, index)\n  let n = parent._start\n  if (marker !== null) {\n    n = marker.p\n    index -= marker.index\n    // we need to iterate one to the left so that the algorithm works\n    if (index === 0) {\n      // @todo refactor this as it actually doesn't consider formats\n      n = n.prev // important! get the left undeleted item so that we can actually decrease index\n      index += (n && n.countable && !n.deleted) ? n.length : 0\n    }\n  }\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index <= n.length) {\n        if (index < n.length) {\n          // insert in-between\n          getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index))\n        }\n        break\n      }\n      index -= n.length\n    }\n  }\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, startIndex, content.length)\n  }\n  return typeListInsertGenericsAfter(transaction, parent, n, content)\n}\n\n/**\n * Pushing content is special as we generally want to push after the last item. So we don't have to update\n * the serach marker.\n *\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {Array<Object<string,any>|Array<any>|number|null|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nexport const typeListPushGenerics = (transaction, parent, content) => {\n  // Use the marker with the highest index and iterate to the right.\n  const marker = (parent._searchMarker || []).reduce((maxMarker, currMarker) => currMarker.index > maxMarker.index ? currMarker : maxMarker, { index: 0, p: parent._start })\n  let n = marker.p\n  if (n) {\n    while (n.right) {\n      n = n.right\n    }\n  }\n  return typeListInsertGenericsAfter(transaction, parent, n, content)\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {number} length\n *\n * @private\n * @function\n */\nexport const typeListDelete = (transaction, parent, index, length) => {\n  if (length === 0) { return }\n  const startIndex = index\n  const startLength = length\n  const marker = findMarker(parent, index)\n  let n = parent._start\n  if (marker !== null) {\n    n = marker.p\n    index -= marker.index\n  }\n  // compute the first item to be deleted\n  for (; n !== null && index > 0; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index))\n      }\n      index -= n.length\n    }\n  }\n  // delete all items until done\n  while (length > 0 && n !== null) {\n    if (!n.deleted) {\n      if (length < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + length))\n      }\n      n.delete(transaction)\n      length -= n.length\n    }\n    n = n.right\n  }\n  if (length > 0) {\n    throw lengthExceeded()\n  }\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, startIndex, -startLength + length /* in case we remove the above exception */)\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n *\n * @private\n * @function\n */\nexport const typeMapDelete = (transaction, parent, key) => {\n  const c = parent._map.get(key)\n  if (c !== undefined) {\n    c.delete(transaction)\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Object|number|null|Array<any>|string|Uint8Array|AbstractType<any>} value\n *\n * @private\n * @function\n */\nexport const typeMapSet = (transaction, parent, key, value) => {\n  const left = parent._map.get(key) || null\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  let content\n  if (value == null) {\n    content = new ContentAny([value])\n  } else {\n    switch (value.constructor) {\n      case Number:\n      case Object:\n      case Boolean:\n      case Array:\n      case String:\n        content = new ContentAny([value])\n        break\n      case Uint8Array:\n        content = new ContentBinary(/** @type {Uint8Array} */ (value))\n        break\n      case Doc:\n        content = new ContentDoc(/** @type {Doc} */ (value))\n        break\n      default:\n        if (value instanceof AbstractType) {\n          content = new ContentType(value)\n        } else {\n          throw new Error('Unexpected content type')\n        }\n    }\n  }\n  new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, null, null, parent, key, content).integrate(transaction, 0)\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\nexport const typeMapGet = (parent, key) => {\n  parent.doc ?? warnPrematureAccess()\n  const val = parent._map.get(key)\n  return val !== undefined && !val.deleted ? val.content.getContent()[val.length - 1] : undefined\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @return {Object<string,Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined>}\n *\n * @private\n * @function\n */\nexport const typeMapGetAll = (parent) => {\n  /**\n   * @type {Object<string,any>}\n   */\n  const res = {}\n  parent.doc ?? warnPrematureAccess()\n  parent._map.forEach((value, key) => {\n    if (!value.deleted) {\n      res[key] = value.content.getContent()[value.length - 1]\n    }\n  })\n  return res\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {boolean}\n *\n * @private\n * @function\n */\nexport const typeMapHas = (parent, key) => {\n  parent.doc ?? warnPrematureAccess()\n  const val = parent._map.get(key)\n  return val !== undefined && !val.deleted\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Snapshot} snapshot\n * @return {Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\nexport const typeMapGetSnapshot = (parent, key, snapshot) => {\n  let v = parent._map.get(key) || null\n  while (v !== null && (!snapshot.sv.has(v.id.client) || v.id.clock >= (snapshot.sv.get(v.id.client) || 0))) {\n    v = v.left\n  }\n  return v !== null && isVisible(v, snapshot) ? v.content.getContent()[v.length - 1] : undefined\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @param {Snapshot} snapshot\n * @return {Object<string,Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined>}\n *\n * @private\n * @function\n */\nexport const typeMapGetAllSnapshot = (parent, snapshot) => {\n  /**\n   * @type {Object<string,any>}\n   */\n  const res = {}\n  parent._map.forEach((value, key) => {\n    /**\n     * @type {Item|null}\n     */\n    let v = value\n    while (v !== null && (!snapshot.sv.has(v.id.client) || v.id.clock >= (snapshot.sv.get(v.id.client) || 0))) {\n      v = v.left\n    }\n    if (v !== null && isVisible(v, snapshot)) {\n      res[key] = v.content.getContent()[v.length - 1]\n    }\n  })\n  return res\n}\n\n/**\n * @param {AbstractType<any> & { _map: Map<string, Item> }} type\n * @return {IterableIterator<Array<any>>}\n *\n * @private\n * @function\n */\nexport const createMapIterator = type => {\n  type.doc ?? warnPrematureAccess()\n  return iterator.iteratorFilter(type._map.entries(), /** @param {any} entry */ entry => !entry[1].deleted)\n}\n","/**\n * @module YArray\n */\n\nimport {\n  YEvent,\n  AbstractType,\n  typeListGet,\n  typeListToArray,\n  typeListForEach,\n  typeListCreateIterator,\n  typeListInsertGenerics,\n  typeListPushGenerics,\n  typeListDelete,\n  typeListMap,\n  YArrayRefID,\n  callTypeObservers,\n  transact,\n  warnPrematureAccess,\n  ArraySearchMarker, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Doc, Transaction, Item // eslint-disable-line\n} from '../internals.js'\nimport { typeListSlice } from './AbstractType.js'\n\n/**\n * Event that describes the changes on a YArray\n * @template T\n * @extends YEvent<YArray<T>>\n */\nexport class YArrayEvent extends YEvent {}\n\n/**\n * A shared Array implementation.\n * @template T\n * @extends AbstractType<YArrayEvent<T>>\n * @implements {Iterable<T>}\n */\nexport class YArray extends AbstractType {\n  constructor () {\n    super()\n    /**\n     * @type {Array<any>?}\n     * @private\n     */\n    this._prelimContent = []\n    /**\n     * @type {Array<ArraySearchMarker>}\n     */\n    this._searchMarker = []\n  }\n\n  /**\n   * Construct a new YArray containing the specified items.\n   * @template {Object<string,any>|Array<any>|number|null|string|Uint8Array} T\n   * @param {Array<T>} items\n   * @return {YArray<T>}\n   */\n  static from (items) {\n    /**\n     * @type {YArray<T>}\n     */\n    const a = new YArray()\n    a.push(items)\n    return a\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    this.insert(0, /** @type {Array<any>} */ (this._prelimContent))\n    this._prelimContent = null\n  }\n\n  /**\n   * @return {YArray<T>}\n   */\n  _copy () {\n    return new YArray()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YArray<T>}\n   */\n  clone () {\n    /**\n     * @type {YArray<T>}\n     */\n    const arr = new YArray()\n    arr.insert(0, this.toArray().map(el =>\n      el instanceof AbstractType ? /** @type {typeof el} */ (el.clone()) : el\n    ))\n    return arr\n  }\n\n  get length () {\n    this.doc ?? warnPrematureAccess()\n    return this._length\n  }\n\n  /**\n   * Creates YArrayEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    super._callObserver(transaction, parentSubs)\n    callTypeObservers(this, transaction, new YArrayEvent(this, transaction))\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * Important: This function expects an array of content. Not just a content\n   * object. The reason for this \"weirdness\" is that inserting several elements\n   * is very efficient when it is done as a single operation.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  yarray.insert(0, ['a'])\n   *  // Insert numbers 1, 2 at position 1\n   *  yarray.insert(1, [1, 2])\n   *\n   * @param {number} index The index to insert content at.\n   * @param {Array<T>} content The array of content\n   */\n  insert (index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, /** @type {any} */ (content))\n      })\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).splice(index, 0, ...content)\n    }\n  }\n\n  /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to append.\n   *\n   * @todo Use the following implementation in all types.\n   */\n  push (content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListPushGenerics(transaction, this, /** @type {any} */ (content))\n      })\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).push(...content)\n    }\n  }\n\n  /**\n   * Prepends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to prepend.\n   */\n  unshift (content) {\n    this.insert(0, content)\n  }\n\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} length The number of elements to remove. Defaults to 1.\n   */\n  delete (index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length)\n      })\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).splice(index, length)\n    }\n  }\n\n  /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {T}\n   */\n  get (index) {\n    return typeListGet(this, index)\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<T>}\n   */\n  toArray () {\n    return typeListToArray(this)\n  }\n\n  /**\n   * Returns a portion of this YArray into a JavaScript Array selected\n   * from start to end (end not included).\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @return {Array<T>}\n   */\n  slice (start = 0, end = this.length) {\n    return typeListSlice(this, start, end)\n  }\n\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Array<any>}\n   */\n  toJSON () {\n    return this.map(c => c instanceof AbstractType ? c.toJSON() : c)\n  }\n\n  /**\n   * Returns an Array with the result of calling a provided function on every\n   * element of this YArray.\n   *\n   * @template M\n   * @param {function(T,number,YArray<T>):M} f Function that produces an element of the new Array\n   * @return {Array<M>} A new array with each element being the result of the\n   *                 callback function\n   */\n  map (f) {\n    return typeListMap(this, /** @type {any} */ (f))\n  }\n\n  /**\n   * Executes a provided function once on every element of this YArray.\n   *\n   * @param {function(T,number,YArray<T>):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    typeListForEach(this, f)\n  }\n\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return typeListCreateIterator(this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YArrayRefID)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} _decoder\n *\n * @private\n * @function\n */\nexport const readYArray = _decoder => new YArray()\n","/**\n * @module YMap\n */\n\nimport {\n  YEvent,\n  AbstractType,\n  typeMapDelete,\n  typeMapSet,\n  typeMapGet,\n  typeMapHas,\n  createMapIterator,\n  YMapRefID,\n  callTypeObservers,\n  transact,\n  warnPrematureAccess,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Doc, Transaction, Item // eslint-disable-line\n} from '../internals.js'\n\nimport * as iterator from 'lib0/iterator'\n\n/**\n * @template T\n * @extends YEvent<YMap<T>>\n * Event that describes the changes on a YMap.\n */\nexport class YMapEvent extends YEvent {\n  /**\n   * @param {YMap<T>} ymap The YArray that changed.\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed.\n   */\n  constructor (ymap, transaction, subs) {\n    super(ymap, transaction)\n    this.keysChanged = subs\n  }\n}\n\n/**\n * @template MapType\n * A shared Map implementation.\n *\n * @extends AbstractType<YMapEvent<MapType>>\n * @implements {Iterable<[string, MapType]>}\n */\nexport class YMap extends AbstractType {\n  /**\n   *\n   * @param {Iterable<readonly [string, any]>=} entries - an optional iterable to initialize the YMap\n   */\n  constructor (entries) {\n    super()\n    /**\n     * @type {Map<string,any>?}\n     * @private\n     */\n    this._prelimContent = null\n\n    if (entries === undefined) {\n      this._prelimContent = new Map()\n    } else {\n      this._prelimContent = new Map(entries)\n    }\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    ;/** @type {Map<string, any>} */ (this._prelimContent).forEach((value, key) => {\n      this.set(key, value)\n    })\n    this._prelimContent = null\n  }\n\n  /**\n   * @return {YMap<MapType>}\n   */\n  _copy () {\n    return new YMap()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YMap<MapType>}\n   */\n  clone () {\n    /**\n     * @type {YMap<MapType>}\n     */\n    const map = new YMap()\n    this.forEach((value, key) => {\n      map.set(key, value instanceof AbstractType ? /** @type {typeof value} */ (value.clone()) : value)\n    })\n    return map\n  }\n\n  /**\n   * Creates YMapEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YMapEvent(this, transaction, parentSubs))\n  }\n\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Object<string,any>}\n   */\n  toJSON () {\n    this.doc ?? warnPrematureAccess()\n    /**\n     * @type {Object<string,MapType>}\n     */\n    const map = {}\n    this._map.forEach((item, key) => {\n      if (!item.deleted) {\n        const v = item.content.getContent()[item.length - 1]\n        map[key] = v instanceof AbstractType ? v.toJSON() : v\n      }\n    })\n    return map\n  }\n\n  /**\n   * Returns the size of the YMap (count of key/value pairs)\n   *\n   * @return {number}\n   */\n  get size () {\n    return [...createMapIterator(this)].length\n  }\n\n  /**\n   * Returns the keys for each element in the YMap Type.\n   *\n   * @return {IterableIterator<string>}\n   */\n  keys () {\n    return iterator.iteratorMap(createMapIterator(this), /** @param {any} v */ v => v[0])\n  }\n\n  /**\n   * Returns the values for each element in the YMap Type.\n   *\n   * @return {IterableIterator<MapType>}\n   */\n  values () {\n    return iterator.iteratorMap(createMapIterator(this), /** @param {any} v */ v => v[1].content.getContent()[v[1].length - 1])\n  }\n\n  /**\n   * Returns an Iterator of [key, value] pairs\n   *\n   * @return {IterableIterator<[string, MapType]>}\n   */\n  entries () {\n    return iterator.iteratorMap(createMapIterator(this), /** @param {any} v */ v => /** @type {any} */ ([v[0], v[1].content.getContent()[v[1].length - 1]]))\n  }\n\n  /**\n   * Executes a provided function on once on every key-value pair.\n   *\n   * @param {function(MapType,string,YMap<MapType>):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    this.doc ?? warnPrematureAccess()\n    this._map.forEach((item, key) => {\n      if (!item.deleted) {\n        f(item.content.getContent()[item.length - 1], key, this)\n      }\n    })\n  }\n\n  /**\n   * Returns an Iterator of [key, value] pairs\n   *\n   * @return {IterableIterator<[string, MapType]>}\n   */\n  [Symbol.iterator] () {\n    return this.entries()\n  }\n\n  /**\n   * Remove a specified element from this YMap.\n   *\n   * @param {string} key The key of the element to remove.\n   */\n  delete (key) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, key)\n      })\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).delete(key)\n    }\n  }\n\n  /**\n   * Adds or updates an element with a specified key and value.\n   * @template {MapType} VAL\n   *\n   * @param {string} key The key of the element to add to this YMap\n   * @param {VAL} value The value of the element to add\n   * @return {VAL}\n   */\n  set (key, value) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, key, /** @type {any} */ (value))\n      })\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).set(key, value)\n    }\n    return value\n  }\n\n  /**\n   * Returns a specified element from this YMap.\n   *\n   * @param {string} key\n   * @return {MapType|undefined}\n   */\n  get (key) {\n    return /** @type {any} */ (typeMapGet(this, key))\n  }\n\n  /**\n   * Returns a boolean indicating whether the specified key exists or not.\n   *\n   * @param {string} key The key to test.\n   * @return {boolean}\n   */\n  has (key) {\n    return typeMapHas(this, key)\n  }\n\n  /**\n   * Removes all elements from this YMap.\n   */\n  clear () {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        this.forEach(function (_value, key, map) {\n          typeMapDelete(transaction, map, key)\n        })\n      })\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).clear()\n    }\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YMapRefID)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} _decoder\n *\n * @private\n * @function\n */\nexport const readYMap = _decoder => new YMap()\n","/**\n * @module YText\n */\n\nimport {\n  YEvent,\n  AbstractType,\n  getItemCleanStart,\n  getState,\n  isVisible,\n  createID,\n  YTextRefID,\n  callTypeObservers,\n  transact,\n  ContentEmbed,\n  GC,\n  ContentFormat,\n  ContentString,\n  splitSnapshotAffectedStructs,\n  iterateDeletedStructs,\n  iterateStructs,\n  findMarker,\n  typeMapDelete,\n  typeMapSet,\n  typeMapGet,\n  typeMapGetAll,\n  updateMarkerChanges,\n  ContentType,\n  warnPrematureAccess,\n  ArraySearchMarker, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, ID, Doc, Item, Snapshot, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as object from 'lib0/object'\nimport * as map from 'lib0/map'\nimport * as error from 'lib0/error'\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nconst equalAttrs = (a, b) => a === b || (typeof a === 'object' && typeof b === 'object' && a && b && object.equalFlat(a, b))\n\nexport class ItemTextListPosition {\n  /**\n   * @param {Item|null} left\n   * @param {Item|null} right\n   * @param {number} index\n   * @param {Map<string,any>} currentAttributes\n   */\n  constructor (left, right, index, currentAttributes) {\n    this.left = left\n    this.right = right\n    this.index = index\n    this.currentAttributes = currentAttributes\n  }\n\n  /**\n   * Only call this if you know that this.right is defined\n   */\n  forward () {\n    if (this.right === null) {\n      error.unexpectedCase()\n    }\n    switch (this.right.content.constructor) {\n      case ContentFormat:\n        if (!this.right.deleted) {\n          updateCurrentAttributes(this.currentAttributes, /** @type {ContentFormat} */ (this.right.content))\n        }\n        break\n      default:\n        if (!this.right.deleted) {\n          this.index += this.right.length\n        }\n        break\n    }\n    this.left = this.right\n    this.right = this.right.right\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} pos\n * @param {number} count steps to move forward\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst findNextPosition = (transaction, pos, count) => {\n  while (pos.right !== null && count > 0) {\n    switch (pos.right.content.constructor) {\n      case ContentFormat:\n        if (!pos.right.deleted) {\n          updateCurrentAttributes(pos.currentAttributes, /** @type {ContentFormat} */ (pos.right.content))\n        }\n        break\n      default:\n        if (!pos.right.deleted) {\n          if (count < pos.right.length) {\n            // split right\n            getItemCleanStart(transaction, createID(pos.right.id.client, pos.right.id.clock + count))\n          }\n          pos.index += pos.right.length\n          count -= pos.right.length\n        }\n        break\n    }\n    pos.left = pos.right\n    pos.right = pos.right.right\n    // pos.forward() - we don't forward because that would halve the performance because we already do the checks above\n  }\n  return pos\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {boolean} useSearchMarker\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst findPosition = (transaction, parent, index, useSearchMarker) => {\n  const currentAttributes = new Map()\n  const marker = useSearchMarker ? findMarker(parent, index) : null\n  if (marker) {\n    const pos = new ItemTextListPosition(marker.p.left, marker.p, marker.index, currentAttributes)\n    return findNextPosition(transaction, pos, index - marker.index)\n  } else {\n    const pos = new ItemTextListPosition(null, parent._start, 0, currentAttributes)\n    return findNextPosition(transaction, pos, index)\n  }\n}\n\n/**\n * Negate applied formats\n *\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Map<string,any>} negatedAttributes\n *\n * @private\n * @function\n */\nconst insertNegatedAttributes = (transaction, parent, currPos, negatedAttributes) => {\n  // check if we really need to remove attributes\n  while (\n    currPos.right !== null && (\n      currPos.right.deleted === true || (\n        currPos.right.content.constructor === ContentFormat &&\n        equalAttrs(negatedAttributes.get(/** @type {ContentFormat} */ (currPos.right.content).key), /** @type {ContentFormat} */ (currPos.right.content).value)\n      )\n    )\n  ) {\n    if (!currPos.right.deleted) {\n      negatedAttributes.delete(/** @type {ContentFormat} */ (currPos.right.content).key)\n    }\n    currPos.forward()\n  }\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  negatedAttributes.forEach((val, key) => {\n    const left = currPos.left\n    const right = currPos.right\n    const nextFormat = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val))\n    nextFormat.integrate(transaction, 0)\n    currPos.right = nextFormat\n    currPos.forward()\n  })\n}\n\n/**\n * @param {Map<string,any>} currentAttributes\n * @param {ContentFormat} format\n *\n * @private\n * @function\n */\nconst updateCurrentAttributes = (currentAttributes, format) => {\n  const { key, value } = format\n  if (value === null) {\n    currentAttributes.delete(key)\n  } else {\n    currentAttributes.set(key, value)\n  }\n}\n\n/**\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\nconst minimizeAttributeChanges = (currPos, attributes) => {\n  // go right while attributes[right.key] === right.value (or right is deleted)\n  while (true) {\n    if (currPos.right === null) {\n      break\n    } else if (currPos.right.deleted || (currPos.right.content.constructor === ContentFormat && equalAttrs(attributes[(/** @type {ContentFormat} */ (currPos.right.content)).key] ?? null, /** @type {ContentFormat} */ (currPos.right.content).value))) {\n      //\n    } else {\n      break\n    }\n    currPos.forward()\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n * @return {Map<string,any>}\n *\n * @private\n * @function\n **/\nconst insertAttributes = (transaction, parent, currPos, attributes) => {\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  const negatedAttributes = new Map()\n  // insert format-start items\n  for (const key in attributes) {\n    const val = attributes[key]\n    const currentVal = currPos.currentAttributes.get(key) ?? null\n    if (!equalAttrs(currentVal, val)) {\n      // save negated attribute (set null if currentVal undefined)\n      negatedAttributes.set(key, currentVal)\n      const { left, right } = currPos\n      currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val))\n      currPos.right.integrate(transaction, 0)\n      currPos.forward()\n    }\n  }\n  return negatedAttributes\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {string|object|AbstractType<any>} text\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n **/\nconst insertText = (transaction, parent, currPos, text, attributes) => {\n  currPos.currentAttributes.forEach((_val, key) => {\n    if (attributes[key] === undefined) {\n      attributes[key] = null\n    }\n  })\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  minimizeAttributeChanges(currPos, attributes)\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes)\n  // insert content\n  const content = text.constructor === String ? new ContentString(/** @type {string} */ (text)) : (text instanceof AbstractType ? new ContentType(text) : new ContentEmbed(text))\n  let { left, right, index } = currPos\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, currPos.index, content.getLength())\n  }\n  right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, content)\n  right.integrate(transaction, 0)\n  currPos.right = right\n  currPos.index = index\n  currPos.forward()\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes)\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\nconst formatText = (transaction, parent, currPos, length, attributes) => {\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  minimizeAttributeChanges(currPos, attributes)\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes)\n  // iterate until first non-format or null is found\n  // delete all formats with attributes[format.key] != null\n  // also check the attributes after the first non-format as we do not want to insert redundant negated attributes there\n  // eslint-disable-next-line no-labels\n  iterationLoop: while (\n    currPos.right !== null &&\n    (length > 0 ||\n      (\n        negatedAttributes.size > 0 &&\n        (currPos.right.deleted || currPos.right.content.constructor === ContentFormat)\n      )\n    )\n  ) {\n    if (!currPos.right.deleted) {\n      switch (currPos.right.content.constructor) {\n        case ContentFormat: {\n          const { key, value } = /** @type {ContentFormat} */ (currPos.right.content)\n          const attr = attributes[key]\n          if (attr !== undefined) {\n            if (equalAttrs(attr, value)) {\n              negatedAttributes.delete(key)\n            } else {\n              if (length === 0) {\n                // no need to further extend negatedAttributes\n                // eslint-disable-next-line no-labels\n                break iterationLoop\n              }\n              negatedAttributes.set(key, value)\n            }\n            currPos.right.delete(transaction)\n          } else {\n            currPos.currentAttributes.set(key, value)\n          }\n          break\n        }\n        default:\n          if (length < currPos.right.length) {\n            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length))\n          }\n          length -= currPos.right.length\n          break\n      }\n    }\n    currPos.forward()\n  }\n  // Quill just assumes that the editor starts with a newline and that it always\n  // ends with a newline. We only insert that newline when a new newline is\n  // inserted - i.e when length is bigger than type.length\n  if (length > 0) {\n    let newlines = ''\n    for (; length > 0; length--) {\n      newlines += '\\n'\n    }\n    currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), currPos.left, currPos.left && currPos.left.lastId, currPos.right, currPos.right && currPos.right.id, parent, null, new ContentString(newlines))\n    currPos.right.integrate(transaction, 0)\n    currPos.forward()\n  }\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes)\n}\n\n/**\n * Call this function after string content has been deleted in order to\n * clean up formatting Items.\n *\n * @param {Transaction} transaction\n * @param {Item} start\n * @param {Item|null} curr exclusive end, automatically iterates to the next Content Item\n * @param {Map<string,any>} startAttributes\n * @param {Map<string,any>} currAttributes\n * @return {number} The amount of formatting Items deleted.\n *\n * @function\n */\nconst cleanupFormattingGap = (transaction, start, curr, startAttributes, currAttributes) => {\n  /**\n   * @type {Item|null}\n   */\n  let end = start\n  /**\n   * @type {Map<string,ContentFormat>}\n   */\n  const endFormats = map.create()\n  while (end && (!end.countable || end.deleted)) {\n    if (!end.deleted && end.content.constructor === ContentFormat) {\n      const cf = /** @type {ContentFormat} */ (end.content)\n      endFormats.set(cf.key, cf)\n    }\n    end = end.right\n  }\n  let cleanups = 0\n  let reachedCurr = false\n  while (start !== end) {\n    if (curr === start) {\n      reachedCurr = true\n    }\n    if (!start.deleted) {\n      const content = start.content\n      switch (content.constructor) {\n        case ContentFormat: {\n          const { key, value } = /** @type {ContentFormat} */ (content)\n          const startAttrValue = startAttributes.get(key) ?? null\n          if (endFormats.get(key) !== content || startAttrValue === value) {\n            // Either this format is overwritten or it is not necessary because the attribute already existed.\n            start.delete(transaction)\n            cleanups++\n            if (!reachedCurr && (currAttributes.get(key) ?? null) === value && startAttrValue !== value) {\n              if (startAttrValue === null) {\n                currAttributes.delete(key)\n              } else {\n                currAttributes.set(key, startAttrValue)\n              }\n            }\n          }\n          if (!reachedCurr && !start.deleted) {\n            updateCurrentAttributes(currAttributes, /** @type {ContentFormat} */ (content))\n          }\n          break\n        }\n      }\n    }\n    start = /** @type {Item} */ (start.right)\n  }\n  return cleanups\n}\n\n/**\n * @param {Transaction} transaction\n * @param {Item | null} item\n */\nconst cleanupContextlessFormattingGap = (transaction, item) => {\n  // iterate until item.right is null or content\n  while (item && item.right && (item.right.deleted || !item.right.countable)) {\n    item = item.right\n  }\n  const attrs = new Set()\n  // iterate back until a content item is found\n  while (item && (item.deleted || !item.countable)) {\n    if (!item.deleted && item.content.constructor === ContentFormat) {\n      const key = /** @type {ContentFormat} */ (item.content).key\n      if (attrs.has(key)) {\n        item.delete(transaction)\n      } else {\n        attrs.add(key)\n      }\n    }\n    item = item.left\n  }\n}\n\n/**\n * This function is experimental and subject to change / be removed.\n *\n * Ideally, we don't need this function at all. Formatting attributes should be cleaned up\n * automatically after each change. This function iterates twice over the complete YText type\n * and removes unnecessary formatting attributes. This is also helpful for testing.\n *\n * This function won't be exported anymore as soon as there is confidence that the YText type works as intended.\n *\n * @param {YText} type\n * @return {number} How many formatting attributes have been cleaned up.\n */\nexport const cleanupYTextFormatting = type => {\n  let res = 0\n  transact(/** @type {Doc} */ (type.doc), transaction => {\n    let start = /** @type {Item} */ (type._start)\n    let end = type._start\n    let startAttributes = map.create()\n    const currentAttributes = map.copy(startAttributes)\n    while (end) {\n      if (end.deleted === false) {\n        switch (end.content.constructor) {\n          case ContentFormat:\n            updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (end.content))\n            break\n          default:\n            res += cleanupFormattingGap(transaction, start, end, startAttributes, currentAttributes)\n            startAttributes = map.copy(currentAttributes)\n            start = end\n            break\n        }\n      }\n      end = end.right\n    }\n  })\n  return res\n}\n\n/**\n * This will be called by the transction once the event handlers are called to potentially cleanup\n * formatting attributes.\n *\n * @param {Transaction} transaction\n */\nexport const cleanupYTextAfterTransaction = transaction => {\n  /**\n   * @type {Set<YText>}\n   */\n  const needFullCleanup = new Set()\n  // check if another formatting item was inserted\n  const doc = transaction.doc\n  for (const [client, afterClock] of transaction.afterState.entries()) {\n    const clock = transaction.beforeState.get(client) || 0\n    if (afterClock === clock) {\n      continue\n    }\n    iterateStructs(transaction, /** @type {Array<Item|GC>} */ (doc.store.clients.get(client)), clock, afterClock, item => {\n      if (\n        !item.deleted && /** @type {Item} */ (item).content.constructor === ContentFormat && item.constructor !== GC\n      ) {\n        needFullCleanup.add(/** @type {any} */ (item).parent)\n      }\n    })\n  }\n  // cleanup in a new transaction\n  transact(doc, (t) => {\n    iterateDeletedStructs(transaction, transaction.deleteSet, item => {\n      if (item instanceof GC || !(/** @type {YText} */ (item.parent)._hasFormatting) || needFullCleanup.has(/** @type {YText} */ (item.parent))) {\n        return\n      }\n      const parent = /** @type {YText} */ (item.parent)\n      if (item.content.constructor === ContentFormat) {\n        needFullCleanup.add(parent)\n      } else {\n        // If no formatting attribute was inserted or deleted, we can make due with contextless\n        // formatting cleanups.\n        // Contextless: it is not necessary to compute currentAttributes for the affected position.\n        cleanupContextlessFormattingGap(t, item)\n      }\n    })\n    // If a formatting item was inserted, we simply clean the whole type.\n    // We need to compute currentAttributes for the current position anyway.\n    for (const yText of needFullCleanup) {\n      cleanupYTextFormatting(yText)\n    }\n  })\n}\n\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst deleteText = (transaction, currPos, length) => {\n  const startLength = length\n  const startAttrs = map.copy(currPos.currentAttributes)\n  const start = currPos.right\n  while (length > 0 && currPos.right !== null) {\n    if (currPos.right.deleted === false) {\n      switch (currPos.right.content.constructor) {\n        case ContentType:\n        case ContentEmbed:\n        case ContentString:\n          if (length < currPos.right.length) {\n            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length))\n          }\n          length -= currPos.right.length\n          currPos.right.delete(transaction)\n          break\n      }\n    }\n    currPos.forward()\n  }\n  if (start) {\n    cleanupFormattingGap(transaction, start, currPos.right, startAttrs, currPos.currentAttributes)\n  }\n  const parent = /** @type {AbstractType<any>} */ (/** @type {Item} */ (currPos.left || currPos.right).parent)\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, currPos.index, -startLength + length)\n  }\n  return currPos\n}\n\n/**\n * The Quill Delta format represents changes on a text document with\n * formatting information. For mor information visit {@link https://quilljs.com/docs/delta/|Quill Delta}\n *\n * @example\n *   {\n *     ops: [\n *       { insert: 'Gandalf', attributes: { bold: true } },\n *       { insert: ' the ' },\n *       { insert: 'Grey', attributes: { color: '#cccccc' } }\n *     ]\n *   }\n *\n */\n\n/**\n  * Attributes that can be assigned to a selection of text.\n  *\n  * @example\n  *   {\n  *     bold: true,\n  *     font-size: '40px'\n  *   }\n  *\n  * @typedef {Object} TextAttributes\n  */\n\n/**\n * @extends YEvent<YText>\n * Event that describes the changes on a YText type.\n */\nexport class YTextEvent extends YEvent {\n  /**\n   * @param {YText} ytext\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed\n   */\n  constructor (ytext, transaction, subs) {\n    super(ytext, transaction)\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n    this.childListChanged = false\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */\n    this.keysChanged = new Set()\n    subs.forEach((sub) => {\n      if (sub === null) {\n        this.childListChanged = true\n      } else {\n        this.keysChanged.add(sub)\n      }\n    })\n  }\n\n  /**\n   * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}\n   */\n  get changes () {\n    if (this._changes === null) {\n      /**\n       * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string|AbstractType<any>|object, delete?:number, retain?:number}>}}\n       */\n      const changes = {\n        keys: this.keys,\n        delta: this.delta,\n        added: new Set(),\n        deleted: new Set()\n      }\n      this._changes = changes\n    }\n    return /** @type {any} */ (this._changes)\n  }\n\n  /**\n   * Compute the changes in the delta format.\n   * A {@link https://quilljs.com/docs/delta/|Quill Delta}) that represents the changes on the document.\n   *\n   * @type {Array<{insert?:string|object|AbstractType<any>, delete?:number, retain?:number, attributes?: Object<string,any>}>}\n   *\n   * @public\n   */\n  get delta () {\n    if (this._delta === null) {\n      const y = /** @type {Doc} */ (this.target.doc)\n      /**\n       * @type {Array<{insert?:string|object|AbstractType<any>, delete?:number, retain?:number, attributes?: Object<string,any>}>}\n       */\n      const delta = []\n      transact(y, transaction => {\n        const currentAttributes = new Map() // saves all current attributes for insert\n        const oldAttributes = new Map()\n        let item = this.target._start\n        /**\n         * @type {string?}\n         */\n        let action = null\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {} // counts added or removed new attributes for retain\n        /**\n         * @type {string|object}\n         */\n        let insert = ''\n        let retain = 0\n        let deleteLen = 0\n        const addOp = () => {\n          if (action !== null) {\n            /**\n             * @type {any}\n             */\n            let op = null\n            switch (action) {\n              case 'delete':\n                if (deleteLen > 0) {\n                  op = { delete: deleteLen }\n                }\n                deleteLen = 0\n                break\n              case 'insert':\n                if (typeof insert === 'object' || insert.length > 0) {\n                  op = { insert }\n                  if (currentAttributes.size > 0) {\n                    op.attributes = {}\n                    currentAttributes.forEach((value, key) => {\n                      if (value !== null) {\n                        op.attributes[key] = value\n                      }\n                    })\n                  }\n                }\n                insert = ''\n                break\n              case 'retain':\n                if (retain > 0) {\n                  op = { retain }\n                  if (!object.isEmpty(attributes)) {\n                    op.attributes = object.assign({}, attributes)\n                  }\n                }\n                retain = 0\n                break\n            }\n            if (op) delta.push(op)\n            action = null\n          }\n        }\n        while (item !== null) {\n          switch (item.content.constructor) {\n            case ContentType:\n            case ContentEmbed:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  addOp()\n                  action = 'insert'\n                  insert = item.content.getContent()[0]\n                  addOp()\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp()\n                  action = 'delete'\n                }\n                deleteLen += 1\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp()\n                  action = 'retain'\n                }\n                retain += 1\n              }\n              break\n            case ContentString:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  if (action !== 'insert') {\n                    addOp()\n                    action = 'insert'\n                  }\n                  insert += /** @type {ContentString} */ (item.content).str\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp()\n                  action = 'delete'\n                }\n                deleteLen += item.length\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp()\n                  action = 'retain'\n                }\n                retain += item.length\n              }\n              break\n            case ContentFormat: {\n              const { key, value } = /** @type {ContentFormat} */ (item.content)\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  const curVal = currentAttributes.get(key) ?? null\n                  if (!equalAttrs(curVal, value)) {\n                    if (action === 'retain') {\n                      addOp()\n                    }\n                    if (equalAttrs(value, (oldAttributes.get(key) ?? null))) {\n                      delete attributes[key]\n                    } else {\n                      attributes[key] = value\n                    }\n                  } else if (value !== null) {\n                    item.delete(transaction)\n                  }\n                }\n              } else if (this.deletes(item)) {\n                oldAttributes.set(key, value)\n                const curVal = currentAttributes.get(key) ?? null\n                if (!equalAttrs(curVal, value)) {\n                  if (action === 'retain') {\n                    addOp()\n                  }\n                  attributes[key] = curVal\n                }\n              } else if (!item.deleted) {\n                oldAttributes.set(key, value)\n                const attr = attributes[key]\n                if (attr !== undefined) {\n                  if (!equalAttrs(attr, value)) {\n                    if (action === 'retain') {\n                      addOp()\n                    }\n                    if (value === null) {\n                      delete attributes[key]\n                    } else {\n                      attributes[key] = value\n                    }\n                  } else if (attr !== null) { // this will be cleaned up automatically by the contextless cleanup function\n                    item.delete(transaction)\n                  }\n                }\n              }\n              if (!item.deleted) {\n                if (action === 'insert') {\n                  addOp()\n                }\n                updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (item.content))\n              }\n              break\n            }\n          }\n          item = item.right\n        }\n        addOp()\n        while (delta.length > 0) {\n          const lastOp = delta[delta.length - 1]\n          if (lastOp.retain !== undefined && lastOp.attributes === undefined) {\n            // retain delta's if they don't assign attributes\n            delta.pop()\n          } else {\n            break\n          }\n        }\n      })\n      this._delta = delta\n    }\n    return /** @type {any} */ (this._delta)\n  }\n}\n\n/**\n * Type that represents text with formatting information.\n *\n * This type replaces y-richtext as this implementation is able to handle\n * block formats (format information on a paragraph), embeds (complex elements\n * like pictures and videos), and text formats (**bold**, *italic*).\n *\n * @extends AbstractType<YTextEvent>\n */\nexport class YText extends AbstractType {\n  /**\n   * @param {String} [string] The initial value of the YText.\n   */\n  constructor (string) {\n    super()\n    /**\n     * Array of pending operations on this type\n     * @type {Array<function():void>?}\n     */\n    this._pending = string !== undefined ? [() => this.insert(0, string)] : []\n    /**\n     * @type {Array<ArraySearchMarker>|null}\n     */\n    this._searchMarker = []\n    /**\n     * Whether this YText contains formatting attributes.\n     * This flag is updated when a formatting item is integrated (see ContentFormat.integrate)\n     */\n    this._hasFormatting = false\n  }\n\n  /**\n   * Number of characters of this text type.\n   *\n   * @type {number}\n   */\n  get length () {\n    this.doc ?? warnPrematureAccess()\n    return this._length\n  }\n\n  /**\n   * @param {Doc} y\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    try {\n      /** @type {Array<function>} */ (this._pending).forEach(f => f())\n    } catch (e) {\n      console.error(e)\n    }\n    this._pending = null\n  }\n\n  _copy () {\n    return new YText()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YText}\n   */\n  clone () {\n    const text = new YText()\n    text.applyDelta(this.toDelta())\n    return text\n  }\n\n  /**\n   * Creates YTextEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    super._callObserver(transaction, parentSubs)\n    const event = new YTextEvent(this, transaction, parentSubs)\n    callTypeObservers(this, transaction, event)\n    // If a remote change happened, we try to cleanup potential formatting duplicates.\n    if (!transaction.local && this._hasFormatting) {\n      transaction._needFormattingCleanup = true\n    }\n  }\n\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @public\n   */\n  toString () {\n    this.doc ?? warnPrematureAccess()\n    let str = ''\n    /**\n     * @type {Item|null}\n     */\n    let n = this._start\n    while (n !== null) {\n      if (!n.deleted && n.countable && n.content.constructor === ContentString) {\n        str += /** @type {ContentString} */ (n.content).str\n      }\n      n = n.right\n    }\n    return str\n  }\n\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @return {string}\n   * @public\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Apply a {@link Delta} on this shared YText type.\n   *\n   * @param {any} delta The changes to apply on this element.\n   * @param {object}  opts\n   * @param {boolean} [opts.sanitize] Sanitize input delta. Removes ending newlines if set to true.\n   *\n   *\n   * @public\n   */\n  applyDelta (delta, { sanitize = true } = {}) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        const currPos = new ItemTextListPosition(null, this._start, 0, new Map())\n        for (let i = 0; i < delta.length; i++) {\n          const op = delta[i]\n          if (op.insert !== undefined) {\n            // Quill assumes that the content starts with an empty paragraph.\n            // Yjs/Y.Text assumes that it starts empty. We always hide that\n            // there is a newline at the end of the content.\n            // If we omit this step, clients will see a different number of\n            // paragraphs, but nothing bad will happen.\n            const ins = (!sanitize && typeof op.insert === 'string' && i === delta.length - 1 && currPos.right === null && op.insert.slice(-1) === '\\n') ? op.insert.slice(0, -1) : op.insert\n            if (typeof ins !== 'string' || ins.length > 0) {\n              insertText(transaction, this, currPos, ins, op.attributes || {})\n            }\n          } else if (op.retain !== undefined) {\n            formatText(transaction, this, currPos, op.retain, op.attributes || {})\n          } else if (op.delete !== undefined) {\n            deleteText(transaction, currPos, op.delete)\n          }\n        }\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.applyDelta(delta))\n    }\n  }\n\n  /**\n   * Returns the Delta representation of this YText type.\n   *\n   * @param {Snapshot} [snapshot]\n   * @param {Snapshot} [prevSnapshot]\n   * @param {function('removed' | 'added', ID):any} [computeYChange]\n   * @return {any} The Delta representation of this type.\n   *\n   * @public\n   */\n  toDelta (snapshot, prevSnapshot, computeYChange) {\n    this.doc ?? warnPrematureAccess()\n    /**\n     * @type{Array<any>}\n     */\n    const ops = []\n    const currentAttributes = new Map()\n    const doc = /** @type {Doc} */ (this.doc)\n    let str = ''\n    let n = this._start\n    function packStr () {\n      if (str.length > 0) {\n        // pack str with attributes to ops\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {}\n        let addAttributes = false\n        currentAttributes.forEach((value, key) => {\n          addAttributes = true\n          attributes[key] = value\n        })\n        /**\n         * @type {Object<string,any>}\n         */\n        const op = { insert: str }\n        if (addAttributes) {\n          op.attributes = attributes\n        }\n        ops.push(op)\n        str = ''\n      }\n    }\n    const computeDelta = () => {\n      while (n !== null) {\n        if (isVisible(n, snapshot) || (prevSnapshot !== undefined && isVisible(n, prevSnapshot))) {\n          switch (n.content.constructor) {\n            case ContentString: {\n              const cur = currentAttributes.get('ychange')\n              if (snapshot !== undefined && !isVisible(n, snapshot)) {\n                if (cur === undefined || cur.user !== n.id.client || cur.type !== 'removed') {\n                  packStr()\n                  currentAttributes.set('ychange', computeYChange ? computeYChange('removed', n.id) : { type: 'removed' })\n                }\n              } else if (prevSnapshot !== undefined && !isVisible(n, prevSnapshot)) {\n                if (cur === undefined || cur.user !== n.id.client || cur.type !== 'added') {\n                  packStr()\n                  currentAttributes.set('ychange', computeYChange ? computeYChange('added', n.id) : { type: 'added' })\n                }\n              } else if (cur !== undefined) {\n                packStr()\n                currentAttributes.delete('ychange')\n              }\n              str += /** @type {ContentString} */ (n.content).str\n              break\n            }\n            case ContentType:\n            case ContentEmbed: {\n              packStr()\n              /**\n               * @type {Object<string,any>}\n               */\n              const op = {\n                insert: n.content.getContent()[0]\n              }\n              if (currentAttributes.size > 0) {\n                const attrs = /** @type {Object<string,any>} */ ({})\n                op.attributes = attrs\n                currentAttributes.forEach((value, key) => {\n                  attrs[key] = value\n                })\n              }\n              ops.push(op)\n              break\n            }\n            case ContentFormat:\n              if (isVisible(n, snapshot)) {\n                packStr()\n                updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (n.content))\n              }\n              break\n          }\n        }\n        n = n.right\n      }\n      packStr()\n    }\n    if (snapshot || prevSnapshot) {\n      // snapshots are merged again after the transaction, so we need to keep the\n      // transaction alive until we are done\n      transact(doc, transaction => {\n        if (snapshot) {\n          splitSnapshotAffectedStructs(transaction, snapshot)\n        }\n        if (prevSnapshot) {\n          splitSnapshotAffectedStructs(transaction, prevSnapshot)\n        }\n        computeDelta()\n      }, 'cleanup')\n    } else {\n      computeDelta()\n    }\n    return ops\n  }\n\n  /**\n   * Insert text at a given index.\n   *\n   * @param {number} index The index at which to start inserting.\n   * @param {String} text The text to insert at the specified position.\n   * @param {TextAttributes} [attributes] Optionally define some formatting\n   *                                    information to apply on the inserted\n   *                                    Text.\n   * @public\n   */\n  insert (index, text, attributes) {\n    if (text.length <= 0) {\n      return\n    }\n    const y = this.doc\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index, !attributes)\n        if (!attributes) {\n          attributes = {}\n          // @ts-ignore\n          pos.currentAttributes.forEach((v, k) => { attributes[k] = v })\n        }\n        insertText(transaction, this, pos, text, attributes)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.insert(index, text, attributes))\n    }\n  }\n\n  /**\n   * Inserts an embed at a index.\n   *\n   * @param {number} index The index to insert the embed at.\n   * @param {Object | AbstractType<any>} embed The Object that represents the embed.\n   * @param {TextAttributes} [attributes] Attribute information to apply on the\n   *                                    embed\n   *\n   * @public\n   */\n  insertEmbed (index, embed, attributes) {\n    const y = this.doc\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index, !attributes)\n        insertText(transaction, this, pos, embed, attributes || {})\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.insertEmbed(index, embed, attributes || {}))\n    }\n  }\n\n  /**\n   * Deletes text starting from an index.\n   *\n   * @param {number} index Index at which to start deleting.\n   * @param {number} length The number of characters to remove. Defaults to 1.\n   *\n   * @public\n   */\n  delete (index, length) {\n    if (length === 0) {\n      return\n    }\n    const y = this.doc\n    if (y !== null) {\n      transact(y, transaction => {\n        deleteText(transaction, findPosition(transaction, this, index, true), length)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.delete(index, length))\n    }\n  }\n\n  /**\n   * Assigns properties to a range of text.\n   *\n   * @param {number} index The position where to start formatting.\n   * @param {number} length The amount of characters to assign properties to.\n   * @param {TextAttributes} attributes Attribute information to apply on the\n   *                                    text.\n   *\n   * @public\n   */\n  format (index, length, attributes) {\n    if (length === 0) {\n      return\n    }\n    const y = this.doc\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index, false)\n        if (pos.right === null) {\n          return\n        }\n        formatText(transaction, this, pos, length, attributes)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.format(index, length, attributes))\n    }\n  }\n\n  /**\n   * Removes an attribute.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */\n  removeAttribute (attributeName) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, attributeName)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.removeAttribute(attributeName))\n    }\n  }\n\n  /**\n   * Sets or updates an attribute.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that is to be set.\n   * @param {any} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */\n  setAttribute (attributeName, attributeValue) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, attributeName, attributeValue)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.setAttribute(attributeName, attributeValue))\n    }\n  }\n\n  /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {any} The queried attribute value.\n   *\n   * @public\n   */\n  getAttribute (attributeName) {\n    return /** @type {any} */ (typeMapGet(this, attributeName))\n  }\n\n  /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @return {Object<string, any>} A JSON Object that describes the attributes.\n   *\n   * @public\n   */\n  getAttributes () {\n    return typeMapGetAll(this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YTextRefID)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} _decoder\n * @return {YText}\n *\n * @private\n * @function\n */\nexport const readYText = _decoder => new YText()\n","/**\n * @module YXml\n */\n\nimport {\n  YXmlEvent,\n  YXmlElement,\n  AbstractType,\n  typeListMap,\n  typeListForEach,\n  typeListInsertGenerics,\n  typeListInsertGenericsAfter,\n  typeListDelete,\n  typeListToArray,\n  YXmlFragmentRefID,\n  callTypeObservers,\n  transact,\n  typeListGet,\n  typeListSlice,\n  warnPrematureAccess,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Doc, ContentType, Transaction, Item, YXmlText, YXmlHook // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error'\nimport * as array from 'lib0/array'\n\n/**\n * Define the elements to which a set of CSS queries apply.\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}\n *\n * @example\n *   query = '.classSelector'\n *   query = 'nodeSelector'\n *   query = '#idSelector'\n *\n * @typedef {string} CSS_Selector\n */\n\n/**\n * Dom filter function.\n *\n * @callback domFilter\n * @param {string} nodeName The nodeName of the element\n * @param {Map} attributes The map of attributes.\n * @return {boolean} Whether to include the Dom node in the YXmlElement.\n */\n\n/**\n * Represents a subset of the nodes of a YXmlElement / YXmlFragment and a\n * position within them.\n *\n * Can be created with {@link YXmlFragment#createTreeWalker}\n *\n * @public\n * @implements {Iterable<YXmlElement|YXmlText|YXmlElement|YXmlHook>}\n */\nexport class YXmlTreeWalker {\n  /**\n   * @param {YXmlFragment | YXmlElement} root\n   * @param {function(AbstractType<any>):boolean} [f]\n   */\n  constructor (root, f = () => true) {\n    this._filter = f\n    this._root = root\n    /**\n     * @type {Item}\n     */\n    this._currentNode = /** @type {Item} */ (root._start)\n    this._firstCall = true\n    root.doc ?? warnPrematureAccess()\n  }\n\n  [Symbol.iterator] () {\n    return this\n  }\n\n  /**\n   * Get the next node.\n   *\n   * @return {IteratorResult<YXmlElement|YXmlText|YXmlHook>} The next node.\n   *\n   * @public\n   */\n  next () {\n    /**\n     * @type {Item|null}\n     */\n    let n = this._currentNode\n    let type = n && n.content && /** @type {any} */ (n.content).type\n    if (n !== null && (!this._firstCall || n.deleted || !this._filter(type))) { // if first call, we check if we can use the first item\n      do {\n        type = /** @type {any} */ (n.content).type\n        if (!n.deleted && (type.constructor === YXmlElement || type.constructor === YXmlFragment) && type._start !== null) {\n          // walk down in the tree\n          n = type._start\n        } else {\n          // walk right or up in the tree\n          while (n !== null) {\n            if (n.right !== null) {\n              n = n.right\n              break\n            } else if (n.parent === this._root) {\n              n = null\n            } else {\n              n = /** @type {AbstractType<any>} */ (n.parent)._item\n            }\n          }\n        }\n      } while (n !== null && (n.deleted || !this._filter(/** @type {ContentType} */ (n.content).type)))\n    }\n    this._firstCall = false\n    if (n === null) {\n      // @ts-ignore\n      return { value: undefined, done: true }\n    }\n    this._currentNode = n\n    return { value: /** @type {any} */ (n.content).type, done: false }\n  }\n}\n\n/**\n * Represents a list of {@link YXmlElement}.and {@link YXmlText} types.\n * A YxmlFragment is similar to a {@link YXmlElement}, but it does not have a\n * nodeName and it does not have attributes. Though it can be bound to a DOM\n * element - in this case the attributes and the nodeName are not shared.\n *\n * @public\n * @extends AbstractType<YXmlEvent>\n */\nexport class YXmlFragment extends AbstractType {\n  constructor () {\n    super()\n    /**\n     * @type {Array<any>|null}\n     */\n    this._prelimContent = []\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get firstChild () {\n    const first = this._first\n    return first ? first.content.getContent()[0] : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    this.insert(0, /** @type {Array<any>} */ (this._prelimContent))\n    this._prelimContent = null\n  }\n\n  _copy () {\n    return new YXmlFragment()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YXmlFragment}\n   */\n  clone () {\n    const el = new YXmlFragment()\n    // @ts-ignore\n    el.insert(0, this.toArray().map(item => item instanceof AbstractType ? item.clone() : item))\n    return el\n  }\n\n  get length () {\n    this.doc ?? warnPrematureAccess()\n    return this._prelimContent === null ? this._length : this._prelimContent.length\n  }\n\n  /**\n   * Create a subtree of childNodes.\n   *\n   * @example\n   * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')\n   * for (let node in walker) {\n   *   // `node` is a div node\n   *   nop(node)\n   * }\n   *\n   * @param {function(AbstractType<any>):boolean} filter Function that is called on each child element and\n   *                          returns a Boolean indicating whether the child\n   *                          is to be included in the subtree.\n   * @return {YXmlTreeWalker} A subtree and a position within it.\n   *\n   * @public\n   */\n  createTreeWalker (filter) {\n    return new YXmlTreeWalker(this, filter)\n  }\n\n  /**\n   * Returns the first YXmlElement that matches the query.\n   * Similar to DOM's {@link querySelector}.\n   *\n   * Query support:\n   *   - tagname\n   * TODO:\n   *   - id\n   *   - attribute\n   *\n   * @param {CSS_Selector} query The query on the children.\n   * @return {YXmlElement|YXmlText|YXmlHook|null} The first element that matches the query or null.\n   *\n   * @public\n   */\n  querySelector (query) {\n    query = query.toUpperCase()\n    // @ts-ignore\n    const iterator = new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query)\n    const next = iterator.next()\n    if (next.done) {\n      return null\n    } else {\n      return next.value\n    }\n  }\n\n  /**\n   * Returns all YXmlElements that match the query.\n   * Similar to Dom's {@link querySelectorAll}.\n   *\n   * @todo Does not yet support all queries. Currently only query by tagName.\n   *\n   * @param {CSS_Selector} query The query on the children\n   * @return {Array<YXmlElement|YXmlText|YXmlHook|null>} The elements that match this query.\n   *\n   * @public\n   */\n  querySelectorAll (query) {\n    query = query.toUpperCase()\n    // @ts-ignore\n    return array.from(new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query))\n  }\n\n  /**\n   * Creates YXmlEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YXmlEvent(this, parentSubs, transaction))\n  }\n\n  /**\n   * Get the string representation of all the children of this YXmlFragment.\n   *\n   * @return {string} The string representation of all children.\n   */\n  toString () {\n    return typeListMap(this, xml => xml.toString()).join('')\n  }\n\n  /**\n   * @return {string}\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const fragment = _document.createDocumentFragment()\n    if (binding !== undefined) {\n      binding._createAssociation(fragment, this)\n    }\n    typeListForEach(this, xmlType => {\n      fragment.insertBefore(xmlType.toDOM(_document, hooks, binding), null)\n    })\n    return fragment\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {number} index The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */\n  insert (index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, content)\n      })\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, 0, ...content)\n    }\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {null|Item|YXmlElement|YXmlText} ref The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */\n  insertAfter (ref, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        const refItem = (ref && ref instanceof AbstractType) ? ref._item : ref\n        typeListInsertGenericsAfter(transaction, this, refItem, content)\n      })\n    } else {\n      const pc = /** @type {Array<any>} */ (this._prelimContent)\n      const index = ref === null ? 0 : pc.findIndex(el => el === ref) + 1\n      if (index === 0 && ref !== null) {\n        throw error.create('Reference item not found')\n      }\n      pc.splice(index, 0, ...content)\n    }\n  }\n\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} [length=1] The number of elements to remove. Defaults to 1.\n   */\n  delete (index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length)\n      })\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, length)\n    }\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<YXmlElement|YXmlText|YXmlHook>}\n   */\n  toArray () {\n    return typeListToArray(this)\n  }\n\n  /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<YXmlElement|YXmlText>} content Array of content to append.\n   */\n  push (content) {\n    this.insert(this.length, content)\n  }\n\n  /**\n   * Prepends content to this YArray.\n   *\n   * @param {Array<YXmlElement|YXmlText>} content Array of content to prepend.\n   */\n  unshift (content) {\n    this.insert(0, content)\n  }\n\n  /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {YXmlElement|YXmlText}\n   */\n  get (index) {\n    return typeListGet(this, index)\n  }\n\n  /**\n   * Returns a portion of this YXmlFragment into a JavaScript Array selected\n   * from start to end (end not included).\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @return {Array<YXmlElement|YXmlText>}\n   */\n  slice (start = 0, end = this.length) {\n    return typeListSlice(this, start, end)\n  }\n\n  /**\n   * Executes a provided function on once on every child element.\n   *\n   * @param {function(YXmlElement|YXmlText,number, typeof self):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    typeListForEach(this, f)\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlFragmentRefID)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} _decoder\n * @return {YXmlFragment}\n *\n * @private\n * @function\n */\nexport const readYXmlFragment = _decoder => new YXmlFragment()\n","import * as object from 'lib0/object'\n\nimport {\n  YXmlFragment,\n  transact,\n  typeMapDelete,\n  typeMapHas,\n  typeMapSet,\n  typeMapGet,\n  typeMapGetAll,\n  typeMapGetAllSnapshot,\n  typeListForEach,\n  YXmlElementRefID,\n  Snapshot, YXmlText, ContentType, AbstractType, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Doc, Item // eslint-disable-line\n} from '../internals.js'\n\n/**\n * @typedef {Object|number|null|Array<any>|string|Uint8Array|AbstractType<any>} ValueTypes\n */\n\n/**\n * An YXmlElement imitates the behavior of a\n * https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element\n *\n * * An YXmlElement has attributes (key value pairs)\n * * An YXmlElement has childElements that must inherit from YXmlElement\n *\n * @template {{ [key: string]: ValueTypes }} [KV={ [key: string]: string }]\n */\nexport class YXmlElement extends YXmlFragment {\n  constructor (nodeName = 'UNDEFINED') {\n    super()\n    this.nodeName = nodeName\n    /**\n     * @type {Map<string, any>|null}\n     */\n    this._prelimAttrs = new Map()\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get nextSibling () {\n    const n = this._item ? this._item.next : null\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get prevSibling () {\n    const n = this._item ? this._item.prev : null\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    ;(/** @type {Map<string, any>} */ (this._prelimAttrs)).forEach((value, key) => {\n      this.setAttribute(key, value)\n    })\n    this._prelimAttrs = null\n  }\n\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   *\n   * @return {YXmlElement}\n   */\n  _copy () {\n    return new YXmlElement(this.nodeName)\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YXmlElement<KV>}\n   */\n  clone () {\n    /**\n     * @type {YXmlElement<KV>}\n     */\n    const el = new YXmlElement(this.nodeName)\n    const attrs = this.getAttributes()\n    object.forEach(attrs, (value, key) => {\n      if (typeof value === 'string') {\n        el.setAttribute(key, value)\n      }\n    })\n    // @ts-ignore\n    el.insert(0, this.toArray().map(item => item instanceof AbstractType ? item.clone() : item))\n    return el\n  }\n\n  /**\n   * Returns the XML serialization of this YXmlElement.\n   * The attributes are ordered by attribute-name, so you can easily use this\n   * method to compare YXmlElements\n   *\n   * @return {string} The string representation of this type.\n   *\n   * @public\n   */\n  toString () {\n    const attrs = this.getAttributes()\n    const stringBuilder = []\n    const keys = []\n    for (const key in attrs) {\n      keys.push(key)\n    }\n    keys.sort()\n    const keysLen = keys.length\n    for (let i = 0; i < keysLen; i++) {\n      const key = keys[i]\n      stringBuilder.push(key + '=\"' + attrs[key] + '\"')\n    }\n    const nodeName = this.nodeName.toLocaleLowerCase()\n    const attrsString = stringBuilder.length > 0 ? ' ' + stringBuilder.join(' ') : ''\n    return `<${nodeName}${attrsString}>${super.toString()}</${nodeName}>`\n  }\n\n  /**\n   * Removes an attribute from this YXmlElement.\n   *\n   * @param {string} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */\n  removeAttribute (attributeName) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, attributeName)\n      })\n    } else {\n      /** @type {Map<string,any>} */ (this._prelimAttrs).delete(attributeName)\n    }\n  }\n\n  /**\n   * Sets or updates an attribute.\n   *\n   * @template {keyof KV & string} KEY\n   *\n   * @param {KEY} attributeName The attribute name that is to be set.\n   * @param {KV[KEY]} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */\n  setAttribute (attributeName, attributeValue) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, attributeName, attributeValue)\n      })\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimAttrs).set(attributeName, attributeValue)\n    }\n  }\n\n  /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @template {keyof KV & string} KEY\n   *\n   * @param {KEY} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {KV[KEY]|undefined} The queried attribute value.\n   *\n   * @public\n   */\n  getAttribute (attributeName) {\n    return /** @type {any} */ (typeMapGet(this, attributeName))\n  }\n\n  /**\n   * Returns whether an attribute exists\n   *\n   * @param {string} attributeName The attribute name to check for existence.\n   * @return {boolean} whether the attribute exists.\n   *\n   * @public\n   */\n  hasAttribute (attributeName) {\n    return /** @type {any} */ (typeMapHas(this, attributeName))\n  }\n\n  /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @param {Snapshot} [snapshot]\n   * @return {{ [Key in Extract<keyof KV,string>]?: KV[Key]}} A JSON Object that describes the attributes.\n   *\n   * @public\n   */\n  getAttributes (snapshot) {\n    return /** @type {any} */ (snapshot ? typeMapGetAllSnapshot(this, snapshot) : typeMapGetAll(this))\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const dom = _document.createElement(this.nodeName)\n    const attrs = this.getAttributes()\n    for (const key in attrs) {\n      const value = attrs[key]\n      if (typeof value === 'string') {\n        dom.setAttribute(key, value)\n      }\n    }\n    typeListForEach(this, yxml => {\n      dom.appendChild(yxml.toDOM(_document, hooks, binding))\n    })\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this)\n    }\n    return dom\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlElementRefID)\n    encoder.writeKey(this.nodeName)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlElement}\n *\n * @function\n */\nexport const readYXmlElement = decoder => new YXmlElement(decoder.readKey())\n","import {\n  YEvent,\n  YXmlText, YXmlElement, YXmlFragment, Transaction // eslint-disable-line\n} from '../internals.js'\n\n/**\n * @extends YEvent<YXmlElement|YXmlText|YXmlFragment>\n * An Event that describes changes on a YXml Element or Yxml Fragment\n */\nexport class YXmlEvent extends YEvent {\n  /**\n   * @param {YXmlElement|YXmlText|YXmlFragment} target The target on which the event is created.\n   * @param {Set<string|null>} subs The set of changed attributes. `null` is included if the\n   *                   child list changed.\n   * @param {Transaction} transaction The transaction instance with wich the\n   *                                  change was created.\n   */\n  constructor (target, subs, transaction) {\n    super(target, transaction)\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n    this.childListChanged = false\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */\n    this.attributesChanged = new Set()\n    subs.forEach((sub) => {\n      if (sub === null) {\n        this.childListChanged = true\n      } else {\n        this.attributesChanged.add(sub)\n      }\n    })\n  }\n}\n","import {\n  YMap,\n  YXmlHookRefID,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2 // eslint-disable-line\n} from '../internals.js'\n\n/**\n * You can manage binding to a custom type with YXmlHook.\n *\n * @extends {YMap<any>}\n */\nexport class YXmlHook extends YMap {\n  /**\n   * @param {string} hookName nodeName of the Dom Node.\n   */\n  constructor (hookName) {\n    super()\n    /**\n     * @type {string}\n     */\n    this.hookName = hookName\n  }\n\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   */\n  _copy () {\n    return new YXmlHook(this.hookName)\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YXmlHook}\n   */\n  clone () {\n    const el = new YXmlHook(this.hookName)\n    this.forEach((value, key) => {\n      el.set(key, value)\n    })\n    return el\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object.<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type\n   * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const hook = hooks[this.hookName]\n    let dom\n    if (hook !== undefined) {\n      dom = hook.createDom(this)\n    } else {\n      dom = document.createElement(this.hookName)\n    }\n    dom.setAttribute('data-yjs-hook', this.hookName)\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this)\n    }\n    return dom\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlHookRefID)\n    encoder.writeKey(this.hookName)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlHook}\n *\n * @private\n * @function\n */\nexport const readYXmlHook = decoder =>\n  new YXmlHook(decoder.readKey())\n","import {\n  YText,\n  YXmlTextRefID,\n  ContentType, YXmlElement, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, // eslint-disable-line\n} from '../internals.js'\n\n/**\n * Represents text in a Dom Element. In the future this type will also handle\n * simple formatting information like bold and italic.\n */\nexport class YXmlText extends YText {\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get nextSibling () {\n    const n = this._item ? this._item.next : null\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get prevSibling () {\n    const n = this._item ? this._item.prev : null\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  _copy () {\n    return new YXmlText()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YXmlText}\n   */\n  clone () {\n    const text = new YXmlText()\n    text.applyDelta(this.toDelta())\n    return text\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlText.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Text} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks, binding) {\n    const dom = _document.createTextNode(this.toString())\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this)\n    }\n    return dom\n  }\n\n  toString () {\n    // @ts-ignore\n    return this.toDelta().map(delta => {\n      const nestedNodes = []\n      for (const nodeName in delta.attributes) {\n        const attrs = []\n        for (const key in delta.attributes[nodeName]) {\n          attrs.push({ key, value: delta.attributes[nodeName][key] })\n        }\n        // sort attributes to get a unique order\n        attrs.sort((a, b) => a.key < b.key ? -1 : 1)\n        nestedNodes.push({ nodeName, attrs })\n      }\n      // sort node order to get a unique order\n      nestedNodes.sort((a, b) => a.nodeName < b.nodeName ? -1 : 1)\n      // now convert to dom string\n      let str = ''\n      for (let i = 0; i < nestedNodes.length; i++) {\n        const node = nestedNodes[i]\n        str += `<${node.nodeName}`\n        for (let j = 0; j < node.attrs.length; j++) {\n          const attr = node.attrs[j]\n          str += ` ${attr.key}=\"${attr.value}\"`\n        }\n        str += '>'\n      }\n      str += delta.insert\n      for (let i = nestedNodes.length - 1; i >= 0; i--) {\n        str += `</${nestedNodes[i].nodeName}>`\n      }\n      return str\n    }).join('')\n  }\n\n  /**\n   * @return {string}\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlTextRefID)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlText}\n *\n * @private\n * @function\n */\nexport const readYXmlText = decoder => new YXmlText()\n","import {\n  UpdateEncoderV1, UpdateEncoderV2, ID, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error'\n\nexport class AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {number} length\n   */\n  constructor (id, length) {\n    this.id = id\n    this.length = length\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get deleted () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * Merge this struct with the item to the right.\n   * This method is already assuming that `this.id.clock + this.length === this.id.clock`.\n   * Also this method does *not* remove right from StructStore!\n   * @param {AbstractStruct} right\n   * @return {boolean} wether this merged with right\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   * @param {number} offset\n   * @param {number} encodingRef\n   */\n  write (encoder, offset, encodingRef) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    throw error.methodUnimplemented()\n  }\n}\n","import {\n  AbstractStruct,\n  addStruct,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Transaction, ID // eslint-disable-line\n} from '../internals.js'\n\nexport const structGCRefNumber = 0\n\n/**\n * @private\n */\nexport class GC extends AbstractStruct {\n  get deleted () {\n    return true\n  }\n\n  delete () {}\n\n  /**\n   * @param {GC} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (this.constructor !== right.constructor) {\n      return false\n    }\n    this.length += right.length\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    if (offset > 0) {\n      this.id.clock += offset\n      this.length -= offset\n    }\n    addStruct(transaction.doc.store, this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeInfo(structGCRefNumber)\n    encoder.writeLen(this.length - offset)\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    return null\n  }\n}\n","import {\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Item, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error'\n\nexport class ContentBinary {\n  /**\n   * @param {Uint8Array} content\n   */\n  constructor (content) {\n    this.content = content\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.content]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentBinary}\n   */\n  copy () {\n    return new ContentBinary(this.content)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentBinary}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentBinary} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeBuf(this.content)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 3\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2 } decoder\n * @return {ContentBinary}\n */\nexport const readContentBinary = decoder => new ContentBinary(decoder.readBuf())\n","import {\n  addToDeleteSet,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Item, Transaction // eslint-disable-line\n} from '../internals.js'\n\nexport class ContentDeleted {\n  /**\n   * @param {number} len\n   */\n  constructor (len) {\n    this.len = len\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.len\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return []\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return false\n  }\n\n  /**\n   * @return {ContentDeleted}\n   */\n  copy () {\n    return new ContentDeleted(this.len)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentDeleted}\n   */\n  splice (offset) {\n    const right = new ContentDeleted(this.len - offset)\n    this.len = offset\n    return right\n  }\n\n  /**\n   * @param {ContentDeleted} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.len += right.len\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    addToDeleteSet(transaction.deleteSet, item.id.client, item.id.clock, this.len)\n    item.markDeleted()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeLen(this.len - offset)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 1\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2 } decoder\n * @return {ContentDeleted}\n */\nexport const readContentDeleted = decoder => new ContentDeleted(decoder.readLen())\n","import {\n  Doc, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Transaction, Item // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error'\n\n/**\n * @param {string} guid\n * @param {Object<string, any>} opts\n */\nconst createDocFromOpts = (guid, opts) => new Doc({ guid, ...opts, shouldLoad: opts.shouldLoad || opts.autoLoad || false })\n\n/**\n * @private\n */\nexport class ContentDoc {\n  /**\n   * @param {Doc} doc\n   */\n  constructor (doc) {\n    if (doc._item) {\n      console.error('This document was already integrated as a sub-document. You should create a second instance instead with the same guid.')\n    }\n    /**\n     * @type {Doc}\n     */\n    this.doc = doc\n    /**\n     * @type {any}\n     */\n    const opts = {}\n    this.opts = opts\n    if (!doc.gc) {\n      opts.gc = false\n    }\n    if (doc.autoLoad) {\n      opts.autoLoad = true\n    }\n    if (doc.meta !== null) {\n      opts.meta = doc.meta\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.doc]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentDoc}\n   */\n  copy () {\n    return new ContentDoc(createDocFromOpts(this.doc.guid, this.opts))\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentDoc}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentDoc} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    // this needs to be reflected in doc.destroy as well\n    this.doc._item = item\n    transaction.subdocsAdded.add(this.doc)\n    if (this.doc.shouldLoad) {\n      transaction.subdocsLoaded.add(this.doc)\n    }\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    if (transaction.subdocsAdded.has(this.doc)) {\n      transaction.subdocsAdded.delete(this.doc)\n    } else {\n      transaction.subdocsRemoved.add(this.doc)\n    }\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) { }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeString(this.doc.guid)\n    encoder.writeAny(this.opts)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 9\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentDoc}\n */\nexport const readContentDoc = decoder => new ContentDoc(createDocFromOpts(decoder.readString(), decoder.readAny()))\n","import {\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Item, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error'\n\n/**\n * @private\n */\nexport class ContentEmbed {\n  /**\n   * @param {Object} embed\n   */\n  constructor (embed) {\n    this.embed = embed\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.embed]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentEmbed}\n   */\n  copy () {\n    return new ContentEmbed(this.embed)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentEmbed}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentEmbed} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeJSON(this.embed)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 5\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentEmbed}\n */\nexport const readContentEmbed = decoder => new ContentEmbed(decoder.readJSON())\n","import {\n  YText, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Item, StructStore, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error'\n\n/**\n * @private\n */\nexport class ContentFormat {\n  /**\n   * @param {string} key\n   * @param {Object} value\n   */\n  constructor (key, value) {\n    this.key = key\n    this.value = value\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return []\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return false\n  }\n\n  /**\n   * @return {ContentFormat}\n   */\n  copy () {\n    return new ContentFormat(this.key, this.value)\n  }\n\n  /**\n   * @param {number} _offset\n   * @return {ContentFormat}\n   */\n  splice (_offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentFormat} _right\n   * @return {boolean}\n   */\n  mergeWith (_right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} _transaction\n   * @param {Item} item\n   */\n  integrate (_transaction, item) {\n    // @todo searchmarker are currently unsupported for rich text documents\n    const p = /** @type {YText} */ (item.parent)\n    p._searchMarker = null\n    p._hasFormatting = true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeKey(this.key)\n    encoder.writeJSON(this.value)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 6\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentFormat}\n */\nexport const readContentFormat = decoder => new ContentFormat(decoder.readKey(), decoder.readJSON())\n","import {\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Transaction, Item, StructStore // eslint-disable-line\n} from '../internals.js'\n\n/**\n * @private\n */\nexport class ContentJSON {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor (arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.arr.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.arr\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentJSON}\n   */\n  copy () {\n    return new ContentJSON(this.arr)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentJSON}\n   */\n  splice (offset) {\n    const right = new ContentJSON(this.arr.slice(offset))\n    this.arr = this.arr.slice(0, offset)\n    return right\n  }\n\n  /**\n   * @param {ContentJSON} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.arr = this.arr.concat(right.arr)\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const len = this.arr.length\n    encoder.writeLen(len - offset)\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i]\n      encoder.writeString(c === undefined ? 'undefined' : JSON.stringify(c))\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 2\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentJSON}\n */\nexport const readContentJSON = decoder => {\n  const len = decoder.readLen()\n  const cs = []\n  for (let i = 0; i < len; i++) {\n    const c = decoder.readString()\n    if (c === 'undefined') {\n      cs.push(undefined)\n    } else {\n      cs.push(JSON.parse(c))\n    }\n  }\n  return new ContentJSON(cs)\n}\n","import {\n  UpdateEncoderV1, UpdateEncoderV2, UpdateDecoderV1, UpdateDecoderV2, Transaction, Item, StructStore // eslint-disable-line\n} from '../internals.js'\n\nimport * as env from 'lib0/environment'\nimport * as object from 'lib0/object'\n\nconst isDevMode = env.getVariable('node_env') === 'development'\n\nexport class ContentAny {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor (arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr\n    isDevMode && object.deepFreeze(arr)\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.arr.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.arr\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentAny}\n   */\n  copy () {\n    return new ContentAny(this.arr)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentAny}\n   */\n  splice (offset) {\n    const right = new ContentAny(this.arr.slice(offset))\n    this.arr = this.arr.slice(0, offset)\n    return right\n  }\n\n  /**\n   * @param {ContentAny} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.arr = this.arr.concat(right.arr)\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const len = this.arr.length\n    encoder.writeLen(len - offset)\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i]\n      encoder.writeAny(c)\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 8\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentAny}\n */\nexport const readContentAny = decoder => {\n  const len = decoder.readLen()\n  const cs = []\n  for (let i = 0; i < len; i++) {\n    cs.push(decoder.readAny())\n  }\n  return new ContentAny(cs)\n}\n","import {\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Transaction, Item, StructStore // eslint-disable-line\n} from '../internals.js'\n\n/**\n * @private\n */\nexport class ContentString {\n  /**\n   * @param {string} str\n   */\n  constructor (str) {\n    /**\n     * @type {string}\n     */\n    this.str = str\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.str.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.str.split('')\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentString}\n   */\n  copy () {\n    return new ContentString(this.str)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentString}\n   */\n  splice (offset) {\n    const right = new ContentString(this.str.slice(offset))\n    this.str = this.str.slice(0, offset)\n\n    // Prevent encoding invalid documents because of splitting of surrogate pairs: https://github.com/yjs/yjs/issues/248\n    const firstCharCode = this.str.charCodeAt(offset - 1)\n    if (firstCharCode >= 0xD800 && firstCharCode <= 0xDBFF) {\n      // Last character of the left split is the start of a surrogate utf16/ucs2 pair.\n      // We don't support splitting of surrogate pairs because this may lead to invalid documents.\n      // Replace the invalid character with a unicode replacement character (� / U+FFFD)\n      this.str = this.str.slice(0, offset - 1) + '�'\n      // replace right as well\n      right.str = '�' + right.str.slice(1)\n    }\n    return right\n  }\n\n  /**\n   * @param {ContentString} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.str += right.str\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeString(offset === 0 ? this.str : this.str.slice(offset))\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 4\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentString}\n */\nexport const readContentString = decoder => new ContentString(decoder.readString())\n","import {\n  readYArray,\n  readYMap,\n  readYText,\n  readYXmlElement,\n  readYXmlFragment,\n  readYXmlHook,\n  readYXmlText,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Transaction, Item, YEvent, AbstractType // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error'\n\n/**\n * @type {Array<function(UpdateDecoderV1 | UpdateDecoderV2):AbstractType<any>>}\n * @private\n */\nexport const typeRefs = [\n  readYArray,\n  readYMap,\n  readYText,\n  readYXmlElement,\n  readYXmlFragment,\n  readYXmlHook,\n  readYXmlText\n]\n\nexport const YArrayRefID = 0\nexport const YMapRefID = 1\nexport const YTextRefID = 2\nexport const YXmlElementRefID = 3\nexport const YXmlFragmentRefID = 4\nexport const YXmlHookRefID = 5\nexport const YXmlTextRefID = 6\n\n/**\n * @private\n */\nexport class ContentType {\n  /**\n   * @param {AbstractType<any>} type\n   */\n  constructor (type) {\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.type]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentType}\n   */\n  copy () {\n    return new ContentType(this.type._copy())\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentType}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentType} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    this.type._integrate(transaction.doc, item)\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    let item = this.type._start\n    while (item !== null) {\n      if (!item.deleted) {\n        item.delete(transaction)\n      } else if (item.id.clock < (transaction.beforeState.get(item.id.client) || 0)) {\n        // This will be gc'd later and we want to merge it if possible\n        // We try to merge all deleted items after each transaction,\n        // but we have no knowledge about that this needs to be merged\n        // since it is not in transaction.ds. Hence we add it to transaction._mergeStructs\n        transaction._mergeStructs.push(item)\n      }\n      item = item.right\n    }\n    this.type._map.forEach(item => {\n      if (!item.deleted) {\n        item.delete(transaction)\n      } else if (item.id.clock < (transaction.beforeState.get(item.id.client) || 0)) {\n        // same as above\n        transaction._mergeStructs.push(item)\n      }\n    })\n    transaction.changed.delete(this.type)\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {\n    let item = this.type._start\n    while (item !== null) {\n      item.gc(store, true)\n      item = item.right\n    }\n    this.type._start = null\n    this.type._map.forEach(/** @param {Item | null} item */ (item) => {\n      while (item !== null) {\n        item.gc(store, true)\n        item = item.left\n      }\n    })\n    this.type._map = new Map()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    this.type._write(encoder)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 7\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentType}\n */\nexport const readContentType = decoder => new ContentType(typeRefs[decoder.readTypeRef()](decoder))\n","import {\n  GC,\n  getState,\n  AbstractStruct,\n  replaceStruct,\n  addStruct,\n  addToDeleteSet,\n  findRootTypeKey,\n  compareIDs,\n  getItem,\n  getItemCleanEnd,\n  getItemCleanStart,\n  readContentDeleted,\n  readContentBinary,\n  readContentJSON,\n  readContentAny,\n  readContentString,\n  readContentEmbed,\n  readContentDoc,\n  createID,\n  readContentFormat,\n  readContentType,\n  addChangedTypeToTransaction,\n  isDeleted,\n  StackItem, DeleteSet, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, ContentType, ContentDeleted, StructStore, ID, AbstractType, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error'\nimport * as binary from 'lib0/binary'\nimport * as array from 'lib0/array'\n\n/**\n * @todo This should return several items\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {{item:Item, diff:number}}\n */\nexport const followRedone = (store, id) => {\n  /**\n   * @type {ID|null}\n   */\n  let nextID = id\n  let diff = 0\n  let item\n  do {\n    if (diff > 0) {\n      nextID = createID(nextID.client, nextID.clock + diff)\n    }\n    item = getItem(store, nextID)\n    diff = nextID.clock - item.id.clock\n    nextID = item.redone\n  } while (nextID !== null && item instanceof Item)\n  return {\n    item, diff\n  }\n}\n\n/**\n * Make sure that neither item nor any of its parents is ever deleted.\n *\n * This property does not persist when storing it into a database or when\n * sending it to other peers\n *\n * @param {Item|null} item\n * @param {boolean} keep\n */\nexport const keepItem = (item, keep) => {\n  while (item !== null && item.keep !== keep) {\n    item.keep = keep\n    item = /** @type {AbstractType<any>} */ (item.parent)._item\n  }\n}\n\n/**\n * Split leftItem into two items\n * @param {Transaction} transaction\n * @param {Item} leftItem\n * @param {number} diff\n * @return {Item}\n *\n * @function\n * @private\n */\nexport const splitItem = (transaction, leftItem, diff) => {\n  // create rightItem\n  const { client, clock } = leftItem.id\n  const rightItem = new Item(\n    createID(client, clock + diff),\n    leftItem,\n    createID(client, clock + diff - 1),\n    leftItem.right,\n    leftItem.rightOrigin,\n    leftItem.parent,\n    leftItem.parentSub,\n    leftItem.content.splice(diff)\n  )\n  if (leftItem.deleted) {\n    rightItem.markDeleted()\n  }\n  if (leftItem.keep) {\n    rightItem.keep = true\n  }\n  if (leftItem.redone !== null) {\n    rightItem.redone = createID(leftItem.redone.client, leftItem.redone.clock + diff)\n  }\n  // update left (do not set leftItem.rightOrigin as it will lead to problems when syncing)\n  leftItem.right = rightItem\n  // update right\n  if (rightItem.right !== null) {\n    rightItem.right.left = rightItem\n  }\n  // right is more specific.\n  transaction._mergeStructs.push(rightItem)\n  // update parent._map\n  if (rightItem.parentSub !== null && rightItem.right === null) {\n    /** @type {AbstractType<any>} */ (rightItem.parent)._map.set(rightItem.parentSub, rightItem)\n  }\n  leftItem.length = diff\n  return rightItem\n}\n\n/**\n * @param {Array<StackItem>} stack\n * @param {ID} id\n */\nconst isDeletedByUndoStack = (stack, id) => array.some(stack, /** @param {StackItem} s */ s => isDeleted(s.deletions, id))\n\n/**\n * Redoes the effect of this operation.\n *\n * @param {Transaction} transaction The Yjs instance.\n * @param {Item} item\n * @param {Set<Item>} redoitems\n * @param {DeleteSet} itemsToDelete\n * @param {boolean} ignoreRemoteMapChanges\n * @param {import('../utils/UndoManager.js').UndoManager} um\n *\n * @return {Item|null}\n *\n * @private\n */\nexport const redoItem = (transaction, item, redoitems, itemsToDelete, ignoreRemoteMapChanges, um) => {\n  const doc = transaction.doc\n  const store = doc.store\n  const ownClientID = doc.clientID\n  const redone = item.redone\n  if (redone !== null) {\n    return getItemCleanStart(transaction, redone)\n  }\n  let parentItem = /** @type {AbstractType<any>} */ (item.parent)._item\n  /**\n   * @type {Item|null}\n   */\n  let left = null\n  /**\n   * @type {Item|null}\n   */\n  let right\n  // make sure that parent is redone\n  if (parentItem !== null && parentItem.deleted === true) {\n    // try to undo parent if it will be undone anyway\n    if (parentItem.redone === null && (!redoitems.has(parentItem) || redoItem(transaction, parentItem, redoitems, itemsToDelete, ignoreRemoteMapChanges, um) === null)) {\n      return null\n    }\n    while (parentItem.redone !== null) {\n      parentItem = getItemCleanStart(transaction, parentItem.redone)\n    }\n  }\n  const parentType = parentItem === null ? /** @type {AbstractType<any>} */ (item.parent) : /** @type {ContentType} */ (parentItem.content).type\n\n  if (item.parentSub === null) {\n    // Is an array item. Insert at the old position\n    left = item.left\n    right = item\n    // find next cloned_redo items\n    while (left !== null) {\n      /**\n       * @type {Item|null}\n       */\n      let leftTrace = left\n      // trace redone until parent matches\n      while (leftTrace !== null && /** @type {AbstractType<any>} */ (leftTrace.parent)._item !== parentItem) {\n        leftTrace = leftTrace.redone === null ? null : getItemCleanStart(transaction, leftTrace.redone)\n      }\n      if (leftTrace !== null && /** @type {AbstractType<any>} */ (leftTrace.parent)._item === parentItem) {\n        left = leftTrace\n        break\n      }\n      left = left.left\n    }\n    while (right !== null) {\n      /**\n       * @type {Item|null}\n       */\n      let rightTrace = right\n      // trace redone until parent matches\n      while (rightTrace !== null && /** @type {AbstractType<any>} */ (rightTrace.parent)._item !== parentItem) {\n        rightTrace = rightTrace.redone === null ? null : getItemCleanStart(transaction, rightTrace.redone)\n      }\n      if (rightTrace !== null && /** @type {AbstractType<any>} */ (rightTrace.parent)._item === parentItem) {\n        right = rightTrace\n        break\n      }\n      right = right.right\n    }\n  } else {\n    right = null\n    if (item.right && !ignoreRemoteMapChanges) {\n      left = item\n      // Iterate right while right is in itemsToDelete\n      // If it is intended to delete right while item is redone, we can expect that item should replace right.\n      while (left !== null && left.right !== null && (left.right.redone || isDeleted(itemsToDelete, left.right.id) || isDeletedByUndoStack(um.undoStack, left.right.id) || isDeletedByUndoStack(um.redoStack, left.right.id))) {\n        left = left.right\n        // follow redone\n        while (left.redone) left = getItemCleanStart(transaction, left.redone)\n      }\n      if (left && left.right !== null) {\n        // It is not possible to redo this item because it conflicts with a\n        // change from another client\n        return null\n      }\n    } else {\n      left = parentType._map.get(item.parentSub) || null\n    }\n  }\n  const nextClock = getState(store, ownClientID)\n  const nextId = createID(ownClientID, nextClock)\n  const redoneItem = new Item(\n    nextId,\n    left, left && left.lastId,\n    right, right && right.id,\n    parentType,\n    item.parentSub,\n    item.content.copy()\n  )\n  item.redone = nextId\n  keepItem(redoneItem, true)\n  redoneItem.integrate(transaction, 0)\n  return redoneItem\n}\n\n/**\n * Abstract class that represents any content.\n */\nexport class Item extends AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {Item | null} left\n   * @param {ID | null} origin\n   * @param {Item | null} right\n   * @param {ID | null} rightOrigin\n   * @param {AbstractType<any>|ID|null} parent Is a type if integrated, is null if it is possible to copy parent from left or right, is ID before integration to search for it.\n   * @param {string | null} parentSub\n   * @param {AbstractContent} content\n   */\n  constructor (id, left, origin, right, rightOrigin, parent, parentSub, content) {\n    super(id, content.getLength())\n    /**\n     * The item that was originally to the left of this item.\n     * @type {ID | null}\n     */\n    this.origin = origin\n    /**\n     * The item that is currently to the left of this item.\n     * @type {Item | null}\n     */\n    this.left = left\n    /**\n     * The item that is currently to the right of this item.\n     * @type {Item | null}\n     */\n    this.right = right\n    /**\n     * The item that was originally to the right of this item.\n     * @type {ID | null}\n     */\n    this.rightOrigin = rightOrigin\n    /**\n     * @type {AbstractType<any>|ID|null}\n     */\n    this.parent = parent\n    /**\n     * If the parent refers to this item with some kind of key (e.g. YMap, the\n     * key is specified here. The key is then used to refer to the list in which\n     * to insert this item. If `parentSub = null` type._start is the list in\n     * which to insert to. Otherwise it is `parent._map`.\n     * @type {String | null}\n     */\n    this.parentSub = parentSub\n    /**\n     * If this type's effect is redone this type refers to the type that undid\n     * this operation.\n     * @type {ID | null}\n     */\n    this.redone = null\n    /**\n     * @type {AbstractContent}\n     */\n    this.content = content\n    /**\n     * bit1: keep\n     * bit2: countable\n     * bit3: deleted\n     * bit4: mark - mark node as fast-search-marker\n     * @type {number} byte\n     */\n    this.info = this.content.isCountable() ? binary.BIT2 : 0\n  }\n\n  /**\n   * This is used to mark the item as an indexed fast-search marker\n   *\n   * @type {boolean}\n   */\n  set marker (isMarked) {\n    if (((this.info & binary.BIT4) > 0) !== isMarked) {\n      this.info ^= binary.BIT4\n    }\n  }\n\n  get marker () {\n    return (this.info & binary.BIT4) > 0\n  }\n\n  /**\n   * If true, do not garbage collect this Item.\n   */\n  get keep () {\n    return (this.info & binary.BIT1) > 0\n  }\n\n  set keep (doKeep) {\n    if (this.keep !== doKeep) {\n      this.info ^= binary.BIT1\n    }\n  }\n\n  get countable () {\n    return (this.info & binary.BIT2) > 0\n  }\n\n  /**\n   * Whether this item was deleted or not.\n   * @type {Boolean}\n   */\n  get deleted () {\n    return (this.info & binary.BIT3) > 0\n  }\n\n  set deleted (doDelete) {\n    if (this.deleted !== doDelete) {\n      this.info ^= binary.BIT3\n    }\n  }\n\n  markDeleted () {\n    this.info |= binary.BIT3\n  }\n\n  /**\n   * Return the creator clientID of the missing op or define missing items and return null.\n   *\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    if (this.origin && this.origin.client !== this.id.client && this.origin.clock >= getState(store, this.origin.client)) {\n      return this.origin.client\n    }\n    if (this.rightOrigin && this.rightOrigin.client !== this.id.client && this.rightOrigin.clock >= getState(store, this.rightOrigin.client)) {\n      return this.rightOrigin.client\n    }\n    if (this.parent && this.parent.constructor === ID && this.id.client !== this.parent.client && this.parent.clock >= getState(store, this.parent.client)) {\n      return this.parent.client\n    }\n\n    // We have all missing ids, now find the items\n\n    if (this.origin) {\n      this.left = getItemCleanEnd(transaction, store, this.origin)\n      this.origin = this.left.lastId\n    }\n    if (this.rightOrigin) {\n      this.right = getItemCleanStart(transaction, this.rightOrigin)\n      this.rightOrigin = this.right.id\n    }\n    if ((this.left && this.left.constructor === GC) || (this.right && this.right.constructor === GC)) {\n      this.parent = null\n    } else if (!this.parent) {\n      // only set parent if this shouldn't be garbage collected\n      if (this.left && this.left.constructor === Item) {\n        this.parent = this.left.parent\n        this.parentSub = this.left.parentSub\n      }\n      if (this.right && this.right.constructor === Item) {\n        this.parent = this.right.parent\n        this.parentSub = this.right.parentSub\n      }\n    } else if (this.parent.constructor === ID) {\n      const parentItem = getItem(store, this.parent)\n      if (parentItem.constructor === GC) {\n        this.parent = null\n      } else {\n        this.parent = /** @type {ContentType} */ (parentItem.content).type\n      }\n    }\n    return null\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    if (offset > 0) {\n      this.id.clock += offset\n      this.left = getItemCleanEnd(transaction, transaction.doc.store, createID(this.id.client, this.id.clock - 1))\n      this.origin = this.left.lastId\n      this.content = this.content.splice(offset)\n      this.length -= offset\n    }\n\n    if (this.parent) {\n      if ((!this.left && (!this.right || this.right.left !== null)) || (this.left && this.left.right !== this.right)) {\n        /**\n         * @type {Item|null}\n         */\n        let left = this.left\n\n        /**\n         * @type {Item|null}\n         */\n        let o\n        // set o to the first conflicting item\n        if (left !== null) {\n          o = left.right\n        } else if (this.parentSub !== null) {\n          o = /** @type {AbstractType<any>} */ (this.parent)._map.get(this.parentSub) || null\n          while (o !== null && o.left !== null) {\n            o = o.left\n          }\n        } else {\n          o = /** @type {AbstractType<any>} */ (this.parent)._start\n        }\n        // TODO: use something like DeleteSet here (a tree implementation would be best)\n        // @todo use global set definitions\n        /**\n         * @type {Set<Item>}\n         */\n        const conflictingItems = new Set()\n        /**\n         * @type {Set<Item>}\n         */\n        const itemsBeforeOrigin = new Set()\n        // Let c in conflictingItems, b in itemsBeforeOrigin\n        // ***{origin}bbbb{this}{c,b}{c,b}{o}***\n        // Note that conflictingItems is a subset of itemsBeforeOrigin\n        while (o !== null && o !== this.right) {\n          itemsBeforeOrigin.add(o)\n          conflictingItems.add(o)\n          if (compareIDs(this.origin, o.origin)) {\n            // case 1\n            if (o.id.client < this.id.client) {\n              left = o\n              conflictingItems.clear()\n            } else if (compareIDs(this.rightOrigin, o.rightOrigin)) {\n              // this and o are conflicting and point to the same integration points. The id decides which item comes first.\n              // Since this is to the left of o, we can break here\n              break\n            } // else, o might be integrated before an item that this conflicts with. If so, we will find it in the next iterations\n          } else if (o.origin !== null && itemsBeforeOrigin.has(getItem(transaction.doc.store, o.origin))) { // use getItem instead of getItemCleanEnd because we don't want / need to split items.\n            // case 2\n            if (!conflictingItems.has(getItem(transaction.doc.store, o.origin))) {\n              left = o\n              conflictingItems.clear()\n            }\n          } else {\n            break\n          }\n          o = o.right\n        }\n        this.left = left\n      }\n      // reconnect left/right + update parent map/start if necessary\n      if (this.left !== null) {\n        const right = this.left.right\n        this.right = right\n        this.left.right = this\n      } else {\n        let r\n        if (this.parentSub !== null) {\n          r = /** @type {AbstractType<any>} */ (this.parent)._map.get(this.parentSub) || null\n          while (r !== null && r.left !== null) {\n            r = r.left\n          }\n        } else {\n          r = /** @type {AbstractType<any>} */ (this.parent)._start\n          ;/** @type {AbstractType<any>} */ (this.parent)._start = this\n        }\n        this.right = r\n      }\n      if (this.right !== null) {\n        this.right.left = this\n      } else if (this.parentSub !== null) {\n        // set as current parent value if right === null and this is parentSub\n        /** @type {AbstractType<any>} */ (this.parent)._map.set(this.parentSub, this)\n        if (this.left !== null) {\n          // this is the current attribute value of parent. delete right\n          this.left.delete(transaction)\n        }\n      }\n      // adjust length of parent\n      if (this.parentSub === null && this.countable && !this.deleted) {\n        /** @type {AbstractType<any>} */ (this.parent)._length += this.length\n      }\n      addStruct(transaction.doc.store, this)\n      this.content.integrate(transaction, this)\n      // add parent to transaction.changed\n      addChangedTypeToTransaction(transaction, /** @type {AbstractType<any>} */ (this.parent), this.parentSub)\n      if ((/** @type {AbstractType<any>} */ (this.parent)._item !== null && /** @type {AbstractType<any>} */ (this.parent)._item.deleted) || (this.parentSub !== null && this.right !== null)) {\n        // delete if parent is deleted or if this is not the current attribute value of parent\n        this.delete(transaction)\n      }\n    } else {\n      // parent is not defined. Integrate GC struct instead\n      new GC(this.id, this.length).integrate(transaction, 0)\n    }\n  }\n\n  /**\n   * Returns the next non-deleted item\n   */\n  get next () {\n    let n = this.right\n    while (n !== null && n.deleted) {\n      n = n.right\n    }\n    return n\n  }\n\n  /**\n   * Returns the previous non-deleted item\n   */\n  get prev () {\n    let n = this.left\n    while (n !== null && n.deleted) {\n      n = n.left\n    }\n    return n\n  }\n\n  /**\n   * Computes the last content address of this Item.\n   */\n  get lastId () {\n    // allocating ids is pretty costly because of the amount of ids created, so we try to reuse whenever possible\n    return this.length === 1 ? this.id : createID(this.id.client, this.id.clock + this.length - 1)\n  }\n\n  /**\n   * Try to merge two items\n   *\n   * @param {Item} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (\n      this.constructor === right.constructor &&\n      compareIDs(right.origin, this.lastId) &&\n      this.right === right &&\n      compareIDs(this.rightOrigin, right.rightOrigin) &&\n      this.id.client === right.id.client &&\n      this.id.clock + this.length === right.id.clock &&\n      this.deleted === right.deleted &&\n      this.redone === null &&\n      right.redone === null &&\n      this.content.constructor === right.content.constructor &&\n      this.content.mergeWith(right.content)\n    ) {\n      const searchMarker = /** @type {AbstractType<any>} */ (this.parent)._searchMarker\n      if (searchMarker) {\n        searchMarker.forEach(marker => {\n          if (marker.p === right) {\n            // right is going to be \"forgotten\" so we need to update the marker\n            marker.p = this\n            // adjust marker index\n            if (!this.deleted && this.countable) {\n              marker.index -= this.length\n            }\n          }\n        })\n      }\n      if (right.keep) {\n        this.keep = true\n      }\n      this.right = right.right\n      if (this.right !== null) {\n        this.right.left = this\n      }\n      this.length += right.length\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Mark this Item as deleted.\n   *\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    if (!this.deleted) {\n      const parent = /** @type {AbstractType<any>} */ (this.parent)\n      // adjust the length of parent\n      if (this.countable && this.parentSub === null) {\n        parent._length -= this.length\n      }\n      this.markDeleted()\n      addToDeleteSet(transaction.deleteSet, this.id.client, this.id.clock, this.length)\n      addChangedTypeToTransaction(transaction, parent, this.parentSub)\n      this.content.delete(transaction)\n    }\n  }\n\n  /**\n   * @param {StructStore} store\n   * @param {boolean} parentGCd\n   */\n  gc (store, parentGCd) {\n    if (!this.deleted) {\n      throw error.unexpectedCase()\n    }\n    this.content.gc(store)\n    if (parentGCd) {\n      replaceStruct(store, this, new GC(this.id, this.length))\n    } else {\n      this.content = new ContentDeleted(this.length)\n    }\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const origin = offset > 0 ? createID(this.id.client, this.id.clock + offset - 1) : this.origin\n    const rightOrigin = this.rightOrigin\n    const parentSub = this.parentSub\n    const info = (this.content.getRef() & binary.BITS5) |\n      (origin === null ? 0 : binary.BIT8) | // origin is defined\n      (rightOrigin === null ? 0 : binary.BIT7) | // right origin is defined\n      (parentSub === null ? 0 : binary.BIT6) // parentSub is non-null\n    encoder.writeInfo(info)\n    if (origin !== null) {\n      encoder.writeLeftID(origin)\n    }\n    if (rightOrigin !== null) {\n      encoder.writeRightID(rightOrigin)\n    }\n    if (origin === null && rightOrigin === null) {\n      const parent = /** @type {AbstractType<any>} */ (this.parent)\n      if (parent._item !== undefined) {\n        const parentItem = parent._item\n        if (parentItem === null) {\n          // parent type on y._map\n          // find the correct key\n          const ykey = findRootTypeKey(parent)\n          encoder.writeParentInfo(true) // write parentYKey\n          encoder.writeString(ykey)\n        } else {\n          encoder.writeParentInfo(false) // write parent id\n          encoder.writeLeftID(parentItem.id)\n        }\n      } else if (parent.constructor === String) { // this edge case was added by differential updates\n        encoder.writeParentInfo(true) // write parentYKey\n        encoder.writeString(parent)\n      } else if (parent.constructor === ID) {\n        encoder.writeParentInfo(false) // write parent id\n        encoder.writeLeftID(parent)\n      } else {\n        error.unexpectedCase()\n      }\n      if (parentSub !== null) {\n        encoder.writeString(parentSub)\n      }\n    }\n    this.content.write(encoder, offset)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @param {number} info\n */\nexport const readItemContent = (decoder, info) => contentRefs[info & binary.BITS5](decoder)\n\n/**\n * A lookup map for reading Item content.\n *\n * @type {Array<function(UpdateDecoderV1 | UpdateDecoderV2):AbstractContent>}\n */\nexport const contentRefs = [\n  () => { error.unexpectedCase() }, // GC is not ItemContent\n  readContentDeleted, // 1\n  readContentJSON, // 2\n  readContentBinary, // 3\n  readContentString, // 4\n  readContentEmbed, // 5\n  readContentFormat, // 6\n  readContentType, // 7\n  readContentAny, // 8\n  readContentDoc, // 9\n  () => { error.unexpectedCase() } // 10 - Skip is not ItemContent\n]\n\n/**\n * Do not implement this class!\n */\nexport class AbstractContent {\n  /**\n   * @return {number}\n   */\n  getLength () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * Should return false if this Item is some kind of meta information\n   * (e.g. format information).\n   *\n   * * Whether this Item should be addressable via `yarray.get(i)`\n   * * Whether this Item should be counted when computing yarray.length\n   *\n   * @return {boolean}\n   */\n  isCountable () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @return {AbstractContent}\n   */\n  copy () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {number} _offset\n   * @return {AbstractContent}\n   */\n  splice (_offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {AbstractContent} _right\n   * @return {boolean}\n   */\n  mergeWith (_right) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {Transaction} _transaction\n   * @param {Item} _item\n   */\n  integrate (_transaction, _item) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {Transaction} _transaction\n   */\n  delete (_transaction) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {StructStore} _store\n   */\n  gc (_store) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} _encoder\n   * @param {number} _offset\n   */\n  write (_encoder, _offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    throw error.methodUnimplemented()\n  }\n}\n","import {\n  AbstractStruct,\n  UpdateEncoderV1, UpdateEncoderV2, StructStore, Transaction, ID // eslint-disable-line\n} from '../internals.js'\nimport * as error from 'lib0/error'\nimport * as encoding from 'lib0/encoding'\n\nexport const structSkipRefNumber = 10\n\n/**\n * @private\n */\nexport class Skip extends AbstractStruct {\n  get deleted () {\n    return true\n  }\n\n  delete () {}\n\n  /**\n   * @param {Skip} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (this.constructor !== right.constructor) {\n      return false\n    }\n    this.length += right.length\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    // skip structs cannot be integrated\n    error.unexpectedCase()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeInfo(structSkipRefNumber)\n    // write as VarUint because Skips can't make use of predictable length-encoding\n    encoding.writeVarUint(encoder.restEncoder, this.length - offset)\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    return null\n  }\n}\n","/** eslint-env browser */\n\nexport {\n  Doc,\n  Transaction,\n  YArray as Array,\n  YMap as Map,\n  YText as Text,\n  YXmlText as XmlText,\n  YXmlHook as XmlHook,\n  YXmlElement as XmlElement,\n  YXmlFragment as XmlFragment,\n  YXmlEvent,\n  YMapEvent,\n  YArrayEvent,\n  YTextEvent,\n  YEvent,\n  Item,\n  AbstractStruct,\n  GC,\n  Skip,\n  ContentBinary,\n  ContentDeleted,\n  ContentDoc,\n  ContentEmbed,\n  ContentFormat,\n  ContentJSON,\n  ContentAny,\n  ContentString,\n  ContentType,\n  AbstractType,\n  getTypeChildren,\n  createRelativePositionFromTypeIndex,\n  createRelativePositionFromJSON,\n  createAbsolutePositionFromRelativePosition,\n  compareRelativePositions,\n  AbsolutePosition,\n  RelativePosition,\n  ID,\n  createID,\n  compareIDs,\n  getState,\n  Snapshot,\n  createSnapshot,\n  createDeleteSet,\n  createDeleteSetFromStructStore,\n  cleanupYTextFormatting,\n  snapshot,\n  emptySnapshot,\n  findRootTypeKey,\n  findIndexSS,\n  getItem,\n  typeListToArraySnapshot,\n  typeMapGetSnapshot,\n  typeMapGetAllSnapshot,\n  createDocFromSnapshot,\n  iterateDeletedStructs,\n  applyUpdate,\n  applyUpdateV2,\n  readUpdate,\n  readUpdateV2,\n  encodeStateAsUpdate,\n  encodeStateAsUpdateV2,\n  encodeStateVector,\n  UndoManager,\n  decodeSnapshot,\n  encodeSnapshot,\n  decodeSnapshotV2,\n  encodeSnapshotV2,\n  decodeStateVector,\n  logUpdate,\n  logUpdateV2,\n  decodeUpdate,\n  decodeUpdateV2,\n  relativePositionToJSON,\n  isDeleted,\n  isParentOf,\n  equalSnapshots,\n  PermanentUserData, // @TODO experimental\n  tryGc,\n  transact,\n  AbstractConnector,\n  logType,\n  mergeUpdates,\n  mergeUpdatesV2,\n  parseUpdateMeta,\n  parseUpdateMetaV2,\n  encodeStateVectorFromUpdate,\n  encodeStateVectorFromUpdateV2,\n  encodeRelativePosition,\n  decodeRelativePosition,\n  diffUpdate,\n  diffUpdateV2,\n  convertUpdateFormatV1ToV2,\n  convertUpdateFormatV2ToV1,\n  obfuscateUpdate,\n  obfuscateUpdateV2,\n  UpdateEncoderV1,\n  UpdateEncoderV2,\n  UpdateDecoderV1,\n  UpdateDecoderV2,\n  equalDeleteSets,\n  mergeDeleteSets,\n  snapshotContainsUpdate\n} from './internals.js'\n\nconst glo = /** @type {any} */ (typeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof window !== 'undefined'\n    ? window\n    // @ts-ignore\n    : typeof global !== 'undefined' ? global : {})\n\nconst importIdentifier = '__ $YJS$ __'\n\nif (glo[importIdentifier] === true) {\n  /**\n   * Dear reader of this message. Please take this seriously.\n   *\n   * If you see this message, make sure that you only import one version of Yjs. In many cases,\n   * your package manager installs two versions of Yjs that are used by different packages within your project.\n   * Another reason for this message is that some parts of your project use the commonjs version of Yjs\n   * and others use the EcmaScript version of Yjs.\n   *\n   * This often leads to issues that are hard to debug. We often need to perform constructor checks,\n   * e.g. `struct instanceof GC`. If you imported different versions of Yjs, it is impossible for us to\n   * do the constructor checks anymore - which might break the CRDT algorithm.\n   *\n   * https://github.com/yjs/yjs/issues/438\n   */\n  console.error('Yjs was already imported. This breaks constructor checks and will lead to issues! - https://github.com/yjs/yjs/issues/438')\n}\nglo[importIdentifier] = true\n","function _assert_this_initialized(self) {\n    if (self === void 0) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\n    return self;\n}\nexport { _assert_this_initialized as _ };\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","import { _ as _super_prop_base } from \"./_super_prop_base.js\";\n\nfunction _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) _get = Reflect.get;\n    else {\n        _get = function get(target, property, receiver) {\n            var base = _super_prop_base(target, property);\n\n            if (!base) return;\n\n            var desc = Object.getOwnPropertyDescriptor(base, property);\n\n            if (desc.get) return desc.get.call(receiver || target);\n\n            return desc.value;\n        };\n    }\n\n    return _get(target, property, receiver || target);\n}\nexport { _get as _ };\n","import { _ as _get_prototype_of } from \"./_get_prototype_of.js\";\n\nfunction _super_prop_base(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n        object = _get_prototype_of(object);\n        if (object === null) break;\n    }\n\n    return object;\n}\nexport { _super_prop_base as _ };\n","function _get_prototype_of(o) {\n    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n\n    return _get_prototype_of(o);\n}\nexport { _get_prototype_of as _ };\n","import { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _ as _define_property } from \"./_define_property.js\";\n\nfunction _object_spread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(\n                Object.getOwnPropertySymbols(source).filter(function(sym) {\n                    return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n                })\n            );\n        }\n\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n\n    return target;\n}\nexport { _object_spread as _ };\n","function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n\n    if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n\n    return target;\n}\nexport { _object_spread_props as _ };\n","import { _ as _get_prototype_of } from \"./_get_prototype_of.js\";\nimport { _ as _is_native_reflect_construct } from \"./_is_native_reflect_construct.js\";\nimport { _ as _possible_constructor_return } from \"./_possible_constructor_return.js\";\n\nfunction _create_super(Derived) {\n    var hasNativeReflectConstruct = _is_native_reflect_construct();\n\n    return function _createSuperInternal() {\n        var Super = _get_prototype_of(Derived), result;\n\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _get_prototype_of(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n\n        return _possible_constructor_return(this, result);\n    };\n}\nexport { _create_super as _ };\n","function _is_native_reflect_construct() {\n    // Since Reflect.construct can't be properly polyfilled, some\n    // implementations (e.g. core-js@2) don't set the correct internal slots.\n    // Those polyfills don't allow us to subclass built-ins, so we need to\n    // use our fallback implementation.\n    try {\n        // If the internal slots aren't set, this throws an error similar to\n        //   TypeError: this is not a Boolean object.\n        var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n    } catch (_) {}\n    return (_is_native_reflect_construct = function() {\n        return !!result;\n    })();\n}\n\nexport { _is_native_reflect_construct as _ };\n","import { _ as _assert_this_initialized } from \"./_assert_this_initialized.js\";\nimport { _ as _type_of } from \"./_type_of.js\";\n\nfunction _possible_constructor_return(self, call) {\n    if (call && (_type_of(call) === \"object\" || typeof call === \"function\")) return call;\n\n    return _assert_this_initialized(self);\n}\nexport { _possible_constructor_return as _ };\n","function _type_of(obj) {\n    \"@swc/helpers - typeof\";\n\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\nexport { _type_of as _ };\n","export { __generator as _ } from \"tslib\";\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\r\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose, inner;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n            if (async) inner = dispose;\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    var r, s = 0;\r\n    function next() {\r\n        while (r = env.stack.pop()) {\r\n            try {\r\n                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\r\n                if (r.dispose) {\r\n                    var result = r.dispose.call(r.value);\r\n                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n                }\r\n                else s |= 1;\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\r\n    if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\r\n        return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\r\n            return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\r\n        });\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __esDecorate: __esDecorate,\r\n    __runInitializers: __runInitializers,\r\n    __propKey: __propKey,\r\n    __setFunctionName: __setFunctionName,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n    __rewriteRelativeImportExtension: __rewriteRelativeImportExtension,\r\n};\r\n","/**\n * Observable class prototype.\n *\n * @module observable\n */\n\nimport * as map from './map.js'\nimport * as set from './set.js'\nimport * as array from './array.js'\n\n/**\n * Handles named events.\n * @experimental\n *\n * This is basically a (better typed) duplicate of Observable, which will replace Observable in the\n * next release.\n *\n * @template {{[key in keyof EVENTS]: function(...any):void}} EVENTS\n */\nexport class ObservableV2 {\n  constructor () {\n    /**\n     * Some desc.\n     * @type {Map<string, Set<any>>}\n     */\n    this._observers = map.create()\n  }\n\n  /**\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name\n   * @param {EVENTS[NAME]} f\n   */\n  on (name, f) {\n    map.setIfUndefined(this._observers, /** @type {string} */ (name), set.create).add(f)\n    return f\n  }\n\n  /**\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name\n   * @param {EVENTS[NAME]} f\n   */\n  once (name, f) {\n    /**\n     * @param  {...any} args\n     */\n    const _f = (...args) => {\n      this.off(name, /** @type {any} */ (_f))\n      f(...args)\n    }\n    this.on(name, /** @type {any} */ (_f))\n  }\n\n  /**\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name\n   * @param {EVENTS[NAME]} f\n   */\n  off (name, f) {\n    const observers = this._observers.get(name)\n    if (observers !== undefined) {\n      observers.delete(f)\n      if (observers.size === 0) {\n        this._observers.delete(name)\n      }\n    }\n  }\n\n  /**\n   * Emit a named event. All registered event listeners that listen to the\n   * specified name will receive the event.\n   *\n   * @todo This should catch exceptions\n   *\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name The event name.\n   * @param {Parameters<EVENTS[NAME]>} args The arguments that are applied to the event listener.\n   */\n  emit (name, args) {\n    // copy all listeners to an array first to make sure that no event is emitted to listeners that are subscribed while the event handler is called.\n    return array.from((this._observers.get(name) || map.create()).values()).forEach(f => f(...args))\n  }\n\n  destroy () {\n    this._observers = map.create()\n  }\n}\n\n/* c8 ignore start */\n/**\n * Handles named events.\n *\n * @deprecated\n * @template N\n */\nexport class Observable {\n  constructor () {\n    /**\n     * Some desc.\n     * @type {Map<N, any>}\n     */\n    this._observers = map.create()\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  on (name, f) {\n    map.setIfUndefined(this._observers, name, set.create).add(f)\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  once (name, f) {\n    /**\n     * @param  {...any} args\n     */\n    const _f = (...args) => {\n      this.off(name, _f)\n      f(...args)\n    }\n    this.on(name, _f)\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  off (name, f) {\n    const observers = this._observers.get(name)\n    if (observers !== undefined) {\n      observers.delete(f)\n      if (observers.size === 0) {\n        this._observers.delete(name)\n      }\n    }\n  }\n\n  /**\n   * Emit a named event. All registered event listeners that listen to the\n   * specified name will receive the event.\n   *\n   * @todo This should catch exceptions\n   *\n   * @param {N} name The event name.\n   * @param {Array<any>} args The arguments that are applied to the event listener.\n   */\n  emit (name, args) {\n    // copy all listeners to an array first to make sure that no event is emitted to listeners that are subscribed while the event handler is called.\n    return array.from((this._observers.get(name) || map.create()).values()).forEach(f => f(...args))\n  }\n\n  destroy () {\n    this._observers = map.create()\n  }\n}\n/* c8 ignore end */\n","/**\n * Utility module to work with key-value stores.\n *\n * @module map\n */\n\n/**\n * Creates a new Map instance.\n *\n * @function\n * @return {Map<any, any>}\n *\n * @function\n */\nexport const create = () => new Map()\n\n/**\n * Copy a Map object into a fresh Map object.\n *\n * @function\n * @template K,V\n * @param {Map<K,V>} m\n * @return {Map<K,V>}\n */\nexport const copy = m => {\n  const r = create()\n  m.forEach((v, k) => { r.set(k, v) })\n  return r\n}\n\n/**\n * Get map property. Create T if property is undefined and set T on map.\n *\n * ```js\n * const listeners = map.setIfUndefined(events, 'eventName', set.create)\n * listeners.add(listener)\n * ```\n *\n * @function\n * @template {Map<any, any>} MAP\n * @template {MAP extends Map<any,infer V> ? function():V : unknown} CF\n * @param {MAP} map\n * @param {MAP extends Map<infer K,any> ? K : unknown} key\n * @param {CF} createT\n * @return {ReturnType<CF>}\n */\nexport const setIfUndefined = (map, key, createT) => {\n  let set = map.get(key)\n  if (set === undefined) {\n    map.set(key, set = createT())\n  }\n  return set\n}\n\n/**\n * Creates an Array and populates it with the content of all key-value pairs using the `f(value, key)` function.\n *\n * @function\n * @template K\n * @template V\n * @template R\n * @param {Map<K,V>} m\n * @param {function(V,K):R} f\n * @return {Array<R>}\n */\nexport const map = (m, f) => {\n  const res = []\n  for (const [key, value] of m) {\n    res.push(f(value, key))\n  }\n  return res\n}\n\n/**\n * Tests whether any key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @todo should rename to some - similarly to Array.some\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const any = (m, f) => {\n  for (const [key, value] of m) {\n    if (f(value, key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Tests whether all key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const all = (m, f) => {\n  for (const [key, value] of m) {\n    if (!f(value, key)) {\n      return false\n    }\n  }\n  return true\n}\n","/**\n * Utility module to work with sets.\n *\n * @module set\n */\n\nexport const create = () => new Set()\n\n/**\n * @template T\n * @param {Set<T>} set\n * @return {Array<T>}\n */\nexport const toArray = set => Array.from(set)\n\n/**\n * @template T\n * @param {Set<T>} set\n * @return {T}\n */\nexport const first = set =>\n  set.values().next().value ?? undefined\n\n/**\n * @template T\n * @param {Iterable<T>} entries\n * @return {Set<T>}\n */\nexport const from = entries => new Set(entries)\n","/**\n * Utility module to work with Arrays.\n *\n * @module array\n */\n\nimport * as set from './set.js'\n\n/**\n * Return the last element of an array. The element must exist\n *\n * @template L\n * @param {ArrayLike<L>} arr\n * @return {L}\n */\nexport const last = arr => arr[arr.length - 1]\n\n/**\n * @template C\n * @return {Array<C>}\n */\nexport const create = () => /** @type {Array<C>} */ ([])\n\n/**\n * @template D\n * @param {Array<D>} a\n * @return {Array<D>}\n */\nexport const copy = a => /** @type {Array<D>} */ (a.slice())\n\n/**\n * Append elements from src to dest\n *\n * @template M\n * @param {Array<M>} dest\n * @param {Array<M>} src\n */\nexport const appendTo = (dest, src) => {\n  for (let i = 0; i < src.length; i++) {\n    dest.push(src[i])\n  }\n}\n\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\nexport const from = Array.from\n\n/**\n * True iff condition holds on every element in the Array.\n *\n * @function\n * @template ITEM\n * @template {ArrayLike<ITEM>} ARR\n *\n * @param {ARR} arr\n * @param {function(ITEM, number, ARR):boolean} f\n * @return {boolean}\n */\nexport const every = (arr, f) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (!f(arr[i], i, arr)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * True iff condition holds on some element in the Array.\n *\n * @function\n * @template S\n * @template {ArrayLike<S>} ARR\n * @param {ARR} arr\n * @param {function(S, number, ARR):boolean} f\n * @return {boolean}\n */\nexport const some = (arr, f) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (f(arr[i], i, arr)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * @template ELEM\n *\n * @param {ArrayLike<ELEM>} a\n * @param {ArrayLike<ELEM>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a.length === b.length && every(a, (item, index) => item === b[index])\n\n/**\n * @template ELEM\n * @param {Array<Array<ELEM>>} arr\n * @return {Array<ELEM>}\n */\nexport const flatten = arr => fold(arr, /** @type {Array<ELEM>} */ ([]), (acc, val) => acc.concat(val))\n\n/**\n * @template T\n * @param {number} len\n * @param {function(number, Array<T>):T} f\n * @return {Array<T>}\n */\nexport const unfold = (len, f) => {\n  const array = new Array(len)\n  for (let i = 0; i < len; i++) {\n    array[i] = f(i, array)\n  }\n  return array\n}\n\n/**\n * @template T\n * @template RESULT\n * @param {Array<T>} arr\n * @param {RESULT} seed\n * @param {function(RESULT, T, number):RESULT} folder\n */\nexport const fold = (arr, seed, folder) => arr.reduce(folder, seed)\n\nexport const isArray = Array.isArray\n\n/**\n * @template T\n * @param {Array<T>} arr\n * @return {Array<T>}\n */\nexport const unique = arr => from(set.from(arr))\n\n/**\n * @template T\n * @template M\n * @param {ArrayLike<T>} arr\n * @param {function(T):M} mapper\n * @return {Array<T>}\n */\nexport const uniqueBy = (arr, mapper) => {\n  /**\n   * @type {Set<M>}\n   */\n  const happened = set.create()\n  /**\n   * @type {Array<T>}\n   */\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    const el = arr[i]\n    const mapped = mapper(el)\n    if (!happened.has(mapped)) {\n      happened.add(mapped)\n      result.push(el)\n    }\n  }\n  return result\n}\n\n/**\n * @template {ArrayLike<any>} ARR\n * @template {function(ARR extends ArrayLike<infer T> ? T : never, number, ARR):any} MAPPER\n * @param {ARR} arr\n * @param {MAPPER} mapper\n * @return {Array<MAPPER extends function(...any): infer M ? M : never>}\n */\nexport const map = (arr, mapper) => {\n  /**\n   * @type {Array<any>}\n   */\n  const res = Array(arr.length)\n  for (let i = 0; i < arr.length; i++) {\n    res[i] = mapper(/** @type {any} */ (arr[i]), i, /** @type {any} */ (arr))\n  }\n  return /** @type {any} */ (res)\n}\n","/**\n * Common Math expressions.\n *\n * @module math\n */\n\nexport const floor = Math.floor\nexport const ceil = Math.ceil\nexport const abs = Math.abs\nexport const imul = Math.imul\nexport const round = Math.round\nexport const log10 = Math.log10\nexport const log2 = Math.log2\nexport const log = Math.log\nexport const sqrt = Math.sqrt\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The sum of a and b\n */\nexport const add = (a, b) => a + b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The smaller element of a and b\n */\nexport const min = (a, b) => a < b ? a : b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The bigger element of a and b\n */\nexport const max = (a, b) => a > b ? a : b\n\nexport const isNaN = Number.isNaN\n\nexport const pow = Math.pow\n/**\n * Base 10 exponential function. Returns the value of 10 raised to the power of pow.\n *\n * @param {number} exp\n * @return {number}\n */\nexport const exp10 = exp => Math.pow(10, exp)\n\nexport const sign = Math.sign\n\n/**\n * @param {number} n\n * @return {boolean} Wether n is negative. This function also differentiates between -0 and +0\n */\nexport const isNegativeZero = n => n !== 0 ? n < 0 : 1 / n < 0\n","/**\n * Efficient schema-less binary encoding with support for variable length encoding.\n *\n * Use [lib0/encoding] with [lib0/decoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module encoding\n */\n\nimport * as math from './math.js'\nimport * as number from './number.js'\nimport * as binary from './binary.js'\nimport * as string from './string.js'\nimport * as array from './array.js'\n\n/**\n * A BinaryEncoder handles the encoding to an Uint8Array.\n */\nexport class Encoder {\n  constructor () {\n    this.cpos = 0\n    this.cbuf = new Uint8Array(100)\n    /**\n     * @type {Array<Uint8Array>}\n     */\n    this.bufs = []\n  }\n}\n\n/**\n * @function\n * @return {Encoder}\n */\nexport const createEncoder = () => new Encoder()\n\n/**\n * @param {function(Encoder):void} f\n */\nexport const encode = (f) => {\n  const encoder = createEncoder()\n  f(encoder)\n  return toUint8Array(encoder)\n}\n\n/**\n * The current length of the encoded data.\n *\n * @function\n * @param {Encoder} encoder\n * @return {number}\n */\nexport const length = encoder => {\n  let len = encoder.cpos\n  for (let i = 0; i < encoder.bufs.length; i++) {\n    len += encoder.bufs[i].length\n  }\n  return len\n}\n\n/**\n * Check whether encoder is empty.\n *\n * @function\n * @param {Encoder} encoder\n * @return {boolean}\n */\nexport const hasContent = encoder => encoder.cpos > 0 || encoder.bufs.length > 0\n\n/**\n * Transform to Uint8Array.\n *\n * @function\n * @param {Encoder} encoder\n * @return {Uint8Array} The created ArrayBuffer.\n */\nexport const toUint8Array = encoder => {\n  const uint8arr = new Uint8Array(length(encoder))\n  let curPos = 0\n  for (let i = 0; i < encoder.bufs.length; i++) {\n    const d = encoder.bufs[i]\n    uint8arr.set(d, curPos)\n    curPos += d.length\n  }\n  uint8arr.set(new Uint8Array(encoder.cbuf.buffer, 0, encoder.cpos), curPos)\n  return uint8arr\n}\n\n/**\n * Verify that it is possible to write `len` bytes wtihout checking. If\n * necessary, a new Buffer with the required length is attached.\n *\n * @param {Encoder} encoder\n * @param {number} len\n */\nexport const verifyLen = (encoder, len) => {\n  const bufferLen = encoder.cbuf.length\n  if (bufferLen - encoder.cpos < len) {\n    encoder.bufs.push(new Uint8Array(encoder.cbuf.buffer, 0, encoder.cpos))\n    encoder.cbuf = new Uint8Array(math.max(bufferLen, len) * 2)\n    encoder.cpos = 0\n  }\n}\n\n/**\n * Write one byte to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The byte that is to be encoded.\n */\nexport const write = (encoder, num) => {\n  const bufferLen = encoder.cbuf.length\n  if (encoder.cpos === bufferLen) {\n    encoder.bufs.push(encoder.cbuf)\n    encoder.cbuf = new Uint8Array(bufferLen * 2)\n    encoder.cpos = 0\n  }\n  encoder.cbuf[encoder.cpos++] = num\n}\n\n/**\n * Write one byte at a specific position.\n * Position must already be written (i.e. encoder.length > pos)\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos Position to which to write data\n * @param {number} num Unsigned 8-bit integer\n */\nexport const set = (encoder, pos, num) => {\n  let buffer = null\n  // iterate all buffers and adjust position\n  for (let i = 0; i < encoder.bufs.length && buffer === null; i++) {\n    const b = encoder.bufs[i]\n    if (pos < b.length) {\n      buffer = b // found buffer\n    } else {\n      pos -= b.length\n    }\n  }\n  if (buffer === null) {\n    // use current buffer\n    buffer = encoder.cbuf\n  }\n  buffer[pos] = num\n}\n\n/**\n * Write one byte as an unsigned integer.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint8 = write\n\n/**\n * Write one byte as an unsigned Integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint8 = set\n\n/**\n * Write two bytes as an unsigned integer.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint16 = (encoder, num) => {\n  write(encoder, num & binary.BITS8)\n  write(encoder, (num >>> 8) & binary.BITS8)\n}\n/**\n * Write two bytes as an unsigned integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint16 = (encoder, pos, num) => {\n  set(encoder, pos, num & binary.BITS8)\n  set(encoder, pos + 1, (num >>> 8) & binary.BITS8)\n}\n\n/**\n * Write two bytes as an unsigned integer\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint32 = (encoder, num) => {\n  for (let i = 0; i < 4; i++) {\n    write(encoder, num & binary.BITS8)\n    num >>>= 8\n  }\n}\n\n/**\n * Write two bytes as an unsigned integer in big endian order.\n * (most significant byte first)\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint32BigEndian = (encoder, num) => {\n  for (let i = 3; i >= 0; i--) {\n    write(encoder, (num >>> (8 * i)) & binary.BITS8)\n  }\n}\n\n/**\n * Write two bytes as an unsigned integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint32 = (encoder, pos, num) => {\n  for (let i = 0; i < 4; i++) {\n    set(encoder, pos + i, num & binary.BITS8)\n    num >>>= 8\n  }\n}\n\n/**\n * Write a variable length unsigned integer. Max encodable integer is 2^53.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeVarUint = (encoder, num) => {\n  while (num > binary.BITS7) {\n    write(encoder, binary.BIT8 | (binary.BITS7 & num))\n    num = math.floor(num / 128) // shift >>> 7\n  }\n  write(encoder, binary.BITS7 & num)\n}\n\n/**\n * Write a variable length integer.\n *\n * We use the 7th bit instead for signaling that this is a negative number.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeVarInt = (encoder, num) => {\n  const isNegative = math.isNegativeZero(num)\n  if (isNegative) {\n    num = -num\n  }\n  //             |- whether to continue reading         |- whether is negative     |- number\n  write(encoder, (num > binary.BITS6 ? binary.BIT8 : 0) | (isNegative ? binary.BIT7 : 0) | (binary.BITS6 & num))\n  num = math.floor(num / 64) // shift >>> 6\n  // We don't need to consider the case of num === 0 so we can use a different\n  // pattern here than above.\n  while (num > 0) {\n    write(encoder, (num > binary.BITS7 ? binary.BIT8 : 0) | (binary.BITS7 & num))\n    num = math.floor(num / 128) // shift >>> 7\n  }\n}\n\n/**\n * A cache to store strings temporarily\n */\nconst _strBuffer = new Uint8Array(30000)\nconst _maxStrBSize = _strBuffer.length / 3\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\nexport const _writeVarStringNative = (encoder, str) => {\n  if (str.length < _maxStrBSize) {\n    // We can encode the string into the existing buffer\n    /* c8 ignore next */\n    const written = string.utf8TextEncoder.encodeInto(str, _strBuffer).written || 0\n    writeVarUint(encoder, written)\n    for (let i = 0; i < written; i++) {\n      write(encoder, _strBuffer[i])\n    }\n  } else {\n    writeVarUint8Array(encoder, string.encodeUtf8(str))\n  }\n}\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\nexport const _writeVarStringPolyfill = (encoder, str) => {\n  const encodedString = unescape(encodeURIComponent(str))\n  const len = encodedString.length\n  writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    write(encoder, /** @type {number} */ (encodedString.codePointAt(i)))\n  }\n}\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\n/* c8 ignore next */\nexport const writeVarString = (string.utf8TextEncoder && /** @type {any} */ (string.utf8TextEncoder).encodeInto) ? _writeVarStringNative : _writeVarStringPolyfill\n\n/**\n * Write a string terminated by a special byte sequence. This is not very performant and is\n * generally discouraged. However, the resulting byte arrays are lexiographically ordered which\n * makes this a nice feature for databases.\n *\n * The string will be encoded using utf8 and then terminated and escaped using writeTerminatingUint8Array.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\nexport const writeTerminatedString = (encoder, str) =>\n  writeTerminatedUint8Array(encoder, string.encodeUtf8(str))\n\n/**\n * Write a terminating Uint8Array. Note that this is not performant and is generally\n * discouraged. There are few situations when this is needed.\n *\n * We use 0x0 as a terminating character. 0x1 serves as an escape character for 0x0 and 0x1.\n *\n * Example: [0,1,2] is encoded to [1,0,1,1,2,0]. 0x0, and 0x1 needed to be escaped using 0x1. Then\n * the result is terminated using the 0x0 character.\n *\n * This is basically how many systems implement null terminated strings. However, we use an escape\n * character 0x1 to avoid issues and potenial attacks on our database (if this is used as a key\n * encoder for NoSql databases).\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} buf The string that is to be encoded.\n */\nexport const writeTerminatedUint8Array = (encoder, buf) => {\n  for (let i = 0; i < buf.length; i++) {\n    const b = buf[i]\n    if (b === 0 || b === 1) {\n      write(encoder, 1)\n    }\n    write(encoder, buf[i])\n  }\n  write(encoder, 0)\n}\n\n/**\n * Write the content of another Encoder.\n *\n * @TODO: can be improved!\n *        - Note: Should consider that when appending a lot of small Encoders, we should rather clone than referencing the old structure.\n *                Encoders start with a rather big initial buffer.\n *\n * @function\n * @param {Encoder} encoder The enUint8Arr\n * @param {Encoder} append The BinaryEncoder to be written.\n */\nexport const writeBinaryEncoder = (encoder, append) => writeUint8Array(encoder, toUint8Array(append))\n\n/**\n * Append fixed-length Uint8Array to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nexport const writeUint8Array = (encoder, uint8Array) => {\n  const bufferLen = encoder.cbuf.length\n  const cpos = encoder.cpos\n  const leftCopyLen = math.min(bufferLen - cpos, uint8Array.length)\n  const rightCopyLen = uint8Array.length - leftCopyLen\n  encoder.cbuf.set(uint8Array.subarray(0, leftCopyLen), cpos)\n  encoder.cpos += leftCopyLen\n  if (rightCopyLen > 0) {\n    // Still something to write, write right half..\n    // Append new buffer\n    encoder.bufs.push(encoder.cbuf)\n    // must have at least size of remaining buffer\n    encoder.cbuf = new Uint8Array(math.max(bufferLen * 2, rightCopyLen))\n    // copy array\n    encoder.cbuf.set(uint8Array.subarray(leftCopyLen))\n    encoder.cpos = rightCopyLen\n  }\n}\n\n/**\n * Append an Uint8Array to Encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nexport const writeVarUint8Array = (encoder, uint8Array) => {\n  writeVarUint(encoder, uint8Array.byteLength)\n  writeUint8Array(encoder, uint8Array)\n}\n\n/**\n * Create an DataView of the next `len` bytes. Use it to write data after\n * calling this function.\n *\n * ```js\n * // write float32 using DataView\n * const dv = writeOnDataView(encoder, 4)\n * dv.setFloat32(0, 1.1)\n * // read float32 using DataView\n * const dv = readFromDataView(encoder, 4)\n * dv.getFloat32(0) // => 1.100000023841858 (leaving it to the reader to find out why this is the correct result)\n * ```\n *\n * @param {Encoder} encoder\n * @param {number} len\n * @return {DataView}\n */\nexport const writeOnDataView = (encoder, len) => {\n  verifyLen(encoder, len)\n  const dview = new DataView(encoder.cbuf.buffer, encoder.cpos, len)\n  encoder.cpos += len\n  return dview\n}\n\n/**\n * @param {Encoder} encoder\n * @param {number} num\n */\nexport const writeFloat32 = (encoder, num) => writeOnDataView(encoder, 4).setFloat32(0, num, false)\n\n/**\n * @param {Encoder} encoder\n * @param {number} num\n */\nexport const writeFloat64 = (encoder, num) => writeOnDataView(encoder, 8).setFloat64(0, num, false)\n\n/**\n * @param {Encoder} encoder\n * @param {bigint} num\n */\nexport const writeBigInt64 = (encoder, num) => /** @type {any} */ (writeOnDataView(encoder, 8)).setBigInt64(0, num, false)\n\n/**\n * @param {Encoder} encoder\n * @param {bigint} num\n */\nexport const writeBigUint64 = (encoder, num) => /** @type {any} */ (writeOnDataView(encoder, 8)).setBigUint64(0, num, false)\n\nconst floatTestBed = new DataView(new ArrayBuffer(4))\n/**\n * Check if a number can be encoded as a 32 bit float.\n *\n * @param {number} num\n * @return {boolean}\n */\nconst isFloat32 = num => {\n  floatTestBed.setFloat32(0, num)\n  return floatTestBed.getFloat32(0) === num\n}\n\n/**\n * Encode data with efficient binary format.\n *\n * Differences to JSON:\n * • Transforms data to a binary format (not to a string)\n * • Encodes undefined, NaN, and ArrayBuffer (these can't be represented in JSON)\n * • Numbers are efficiently encoded either as a variable length integer, as a\n *   32 bit float, as a 64 bit float, or as a 64 bit bigint.\n *\n * Encoding table:\n *\n * | Data Type           | Prefix   | Encoding Method    | Comment |\n * | ------------------- | -------- | ------------------ | ------- |\n * | undefined           | 127      |                    | Functions, symbol, and everything that cannot be identified is encoded as undefined |\n * | null                | 126      |                    | |\n * | integer             | 125      | writeVarInt        | Only encodes 32 bit signed integers |\n * | float32             | 124      | writeFloat32       | |\n * | float64             | 123      | writeFloat64       | |\n * | bigint              | 122      | writeBigInt64      | |\n * | boolean (false)     | 121      |                    | True and false are different data types so we save the following byte |\n * | boolean (true)      | 120      |                    | - 0b01111000 so the last bit determines whether true or false |\n * | string              | 119      | writeVarString     | |\n * | object<string,any>  | 118      | custom             | Writes {length} then {length} key-value pairs |\n * | array<any>          | 117      | custom             | Writes {length} then {length} json values |\n * | Uint8Array          | 116      | writeVarUint8Array | We use Uint8Array for any kind of binary data |\n *\n * Reasons for the decreasing prefix:\n * We need the first bit for extendability (later we may want to encode the\n * prefix with writeVarUint). The remaining 7 bits are divided as follows:\n * [0-30]   the beginning of the data range is used for custom purposes\n *          (defined by the function that uses this library)\n * [31-127] the end of the data range is used for data encoding by\n *          lib0/encoding.js\n *\n * @param {Encoder} encoder\n * @param {undefined|null|number|bigint|boolean|string|Object<string,any>|Array<any>|Uint8Array} data\n */\nexport const writeAny = (encoder, data) => {\n  switch (typeof data) {\n    case 'string':\n      // TYPE 119: STRING\n      write(encoder, 119)\n      writeVarString(encoder, data)\n      break\n    case 'number':\n      if (number.isInteger(data) && math.abs(data) <= binary.BITS31) {\n        // TYPE 125: INTEGER\n        write(encoder, 125)\n        writeVarInt(encoder, data)\n      } else if (isFloat32(data)) {\n        // TYPE 124: FLOAT32\n        write(encoder, 124)\n        writeFloat32(encoder, data)\n      } else {\n        // TYPE 123: FLOAT64\n        write(encoder, 123)\n        writeFloat64(encoder, data)\n      }\n      break\n    case 'bigint':\n      // TYPE 122: BigInt\n      write(encoder, 122)\n      writeBigInt64(encoder, data)\n      break\n    case 'object':\n      if (data === null) {\n        // TYPE 126: null\n        write(encoder, 126)\n      } else if (array.isArray(data)) {\n        // TYPE 117: Array\n        write(encoder, 117)\n        writeVarUint(encoder, data.length)\n        for (let i = 0; i < data.length; i++) {\n          writeAny(encoder, data[i])\n        }\n      } else if (data instanceof Uint8Array) {\n        // TYPE 116: ArrayBuffer\n        write(encoder, 116)\n        writeVarUint8Array(encoder, data)\n      } else {\n        // TYPE 118: Object\n        write(encoder, 118)\n        const keys = Object.keys(data)\n        writeVarUint(encoder, keys.length)\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i]\n          writeVarString(encoder, key)\n          writeAny(encoder, data[key])\n        }\n      }\n      break\n    case 'boolean':\n      // TYPE 120/121: boolean (true/false)\n      write(encoder, data ? 120 : 121)\n      break\n    default:\n      // TYPE 127: undefined\n      write(encoder, 127)\n  }\n}\n\n/**\n * Now come a few stateful encoder that have their own classes.\n */\n\n/**\n * Basic Run Length Encoder - a basic compression implementation.\n *\n * Encodes [1,1,1,7] to [1,3,7,1] (3 times 1, 1 time 7). This encoder might do more harm than good if there are a lot of values that are not repeated.\n *\n * It was originally used for image compression. Cool .. article http://csbruce.com/cbm/transactor/pdfs/trans_v7_i06.pdf\n *\n * @note T must not be null!\n *\n * @template T\n */\nexport class RleEncoder extends Encoder {\n  /**\n   * @param {function(Encoder, T):void} writer\n   */\n  constructor (writer) {\n    super()\n    /**\n     * The writer\n     */\n    this.w = writer\n    /**\n     * Current state\n     * @type {T|null}\n     */\n    this.s = null\n    this.count = 0\n  }\n\n  /**\n   * @param {T} v\n   */\n  write (v) {\n    if (this.s === v) {\n      this.count++\n    } else {\n      if (this.count > 0) {\n        // flush counter, unless this is the first value (count = 0)\n        writeVarUint(this, this.count - 1) // since count is always > 0, we can decrement by one. non-standard encoding ftw\n      }\n      this.count = 1\n      // write first value\n      this.w(this, v)\n      this.s = v\n    }\n  }\n}\n\n/**\n * Basic diff decoder using variable length encoding.\n *\n * Encodes the values [3, 1100, 1101, 1050, 0] to [3, 1097, 1, -51, -1050] using writeVarInt.\n */\nexport class IntDiffEncoder extends Encoder {\n  /**\n   * @param {number} start\n   */\n  constructor (start) {\n    super()\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    writeVarInt(this, v - this.s)\n    this.s = v\n  }\n}\n\n/**\n * A combination of IntDiffEncoder and RleEncoder.\n *\n * Basically first writes the IntDiffEncoder and then counts duplicate diffs using RleEncoding.\n *\n * Encodes the values [1,1,1,2,3,4,5,6] as [1,1,0,2,1,5] (RLE([1,0,0,1,1,1,1,1]) ⇒ RleIntDiff[1,1,0,2,1,5])\n */\nexport class RleIntDiffEncoder extends Encoder {\n  /**\n   * @param {number} start\n   */\n  constructor (start) {\n    super()\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n    this.count = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.s === v && this.count > 0) {\n      this.count++\n    } else {\n      if (this.count > 0) {\n        // flush counter, unless this is the first value (count = 0)\n        writeVarUint(this, this.count - 1) // since count is always > 0, we can decrement by one. non-standard encoding ftw\n      }\n      this.count = 1\n      // write first value\n      writeVarInt(this, v - this.s)\n      this.s = v\n    }\n  }\n}\n\n/**\n * @param {UintOptRleEncoder} encoder\n */\nconst flushUintOptRleEncoder = encoder => {\n  if (encoder.count > 0) {\n    // flush counter, unless this is the first value (count = 0)\n    // case 1: just a single value. set sign to positive\n    // case 2: write several values. set sign to negative to indicate that there is a length coming\n    writeVarInt(encoder.encoder, encoder.count === 1 ? encoder.s : -encoder.s)\n    if (encoder.count > 1) {\n      writeVarUint(encoder.encoder, encoder.count - 2) // since count is always > 1, we can decrement by one. non-standard encoding ftw\n    }\n  }\n}\n\n/**\n * Optimized Rle encoder that does not suffer from the mentioned problem of the basic Rle encoder.\n *\n * Internally uses VarInt encoder to write unsigned integers. If the input occurs multiple times, we write\n * write it as a negative number. The UintOptRleDecoder then understands that it needs to read a count.\n *\n * Encodes [1,2,3,3,3] as [1,2,-3,3] (once 1, once 2, three times 3)\n */\nexport class UintOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder()\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.s === v) {\n      this.count++\n    } else {\n      flushUintOptRleEncoder(this)\n      this.count = 1\n      this.s = v\n    }\n  }\n\n  /**\n   * Flush the encoded state and transform this to a Uint8Array.\n   *\n   * Note that this should only be called once.\n   */\n  toUint8Array () {\n    flushUintOptRleEncoder(this)\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * Increasing Uint Optimized RLE Encoder\n *\n * The RLE encoder counts the number of same occurences of the same value.\n * The IncUintOptRle encoder counts if the value increases.\n * I.e. 7, 8, 9, 10 will be encoded as [-7, 4]. 1, 3, 5 will be encoded\n * as [1, 3, 5].\n */\nexport class IncUintOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder()\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.s + this.count === v) {\n      this.count++\n    } else {\n      flushUintOptRleEncoder(this)\n      this.count = 1\n      this.s = v\n    }\n  }\n\n  /**\n   * Flush the encoded state and transform this to a Uint8Array.\n   *\n   * Note that this should only be called once.\n   */\n  toUint8Array () {\n    flushUintOptRleEncoder(this)\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * @param {IntDiffOptRleEncoder} encoder\n */\nconst flushIntDiffOptRleEncoder = encoder => {\n  if (encoder.count > 0) {\n    //          31 bit making up the diff | wether to write the counter\n    // const encodedDiff = encoder.diff << 1 | (encoder.count === 1 ? 0 : 1)\n    const encodedDiff = encoder.diff * 2 + (encoder.count === 1 ? 0 : 1)\n    // flush counter, unless this is the first value (count = 0)\n    // case 1: just a single value. set first bit to positive\n    // case 2: write several values. set first bit to negative to indicate that there is a length coming\n    writeVarInt(encoder.encoder, encodedDiff)\n    if (encoder.count > 1) {\n      writeVarUint(encoder.encoder, encoder.count - 2) // since count is always > 1, we can decrement by one. non-standard encoding ftw\n    }\n  }\n}\n\n/**\n * A combination of the IntDiffEncoder and the UintOptRleEncoder.\n *\n * The count approach is similar to the UintDiffOptRleEncoder, but instead of using the negative bitflag, it encodes\n * in the LSB whether a count is to be read. Therefore this Encoder only supports 31 bit integers!\n *\n * Encodes [1, 2, 3, 2] as [3, 1, 6, -1] (more specifically [(1 << 1) | 1, (3 << 0) | 0, -1])\n *\n * Internally uses variable length encoding. Contrary to normal UintVar encoding, the first byte contains:\n * * 1 bit that denotes whether the next value is a count (LSB)\n * * 1 bit that denotes whether this value is negative (MSB - 1)\n * * 1 bit that denotes whether to continue reading the variable length integer (MSB)\n *\n * Therefore, only five bits remain to encode diff ranges.\n *\n * Use this Encoder only when appropriate. In most cases, this is probably a bad idea.\n */\nexport class IntDiffOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder()\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n    this.diff = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.diff === v - this.s) {\n      this.s = v\n      this.count++\n    } else {\n      flushIntDiffOptRleEncoder(this)\n      this.count = 1\n      this.diff = v - this.s\n      this.s = v\n    }\n  }\n\n  /**\n   * Flush the encoded state and transform this to a Uint8Array.\n   *\n   * Note that this should only be called once.\n   */\n  toUint8Array () {\n    flushIntDiffOptRleEncoder(this)\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * Optimized String Encoder.\n *\n * Encoding many small strings in a simple Encoder is not very efficient. The function call to decode a string takes some time and creates references that must be eventually deleted.\n * In practice, when decoding several million small strings, the GC will kick in more and more often to collect orphaned string objects (or maybe there is another reason?).\n *\n * This string encoder solves the above problem. All strings are concatenated and written as a single string using a single encoding call.\n *\n * The lengths are encoded using a UintOptRleEncoder.\n */\nexport class StringEncoder {\n  constructor () {\n    /**\n     * @type {Array<string>}\n     */\n    this.sarr = []\n    this.s = ''\n    this.lensE = new UintOptRleEncoder()\n  }\n\n  /**\n   * @param {string} string\n   */\n  write (string) {\n    this.s += string\n    if (this.s.length > 19) {\n      this.sarr.push(this.s)\n      this.s = ''\n    }\n    this.lensE.write(string.length)\n  }\n\n  toUint8Array () {\n    const encoder = new Encoder()\n    this.sarr.push(this.s)\n    this.s = ''\n    writeVarString(encoder, this.sarr.join(''))\n    writeUint8Array(encoder, this.lensE.toUint8Array())\n    return toUint8Array(encoder)\n  }\n}\n","/**\n * Utility helpers for working with numbers.\n *\n * @module number\n */\n\nimport * as math from './math.js'\nimport * as binary from './binary.js'\n\nexport const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER\nexport const MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER\n\nexport const LOWEST_INT32 = 1 << 31\nexport const HIGHEST_INT32 = binary.BITS31\nexport const HIGHEST_UINT32 = binary.BITS32\n\n/* c8 ignore next */\nexport const isInteger = Number.isInteger || (num => typeof num === 'number' && isFinite(num) && math.floor(num) === num)\nexport const isNaN = Number.isNaN\nexport const parseInt = Number.parseInt\n\n/**\n * Count the number of \"1\" bits in an unsigned 32bit number.\n *\n * Super fun bitcount algorithm by Brian Kernighan.\n *\n * @param {number} n\n */\nexport const countBits = n => {\n  n &= binary.BITS32\n  let count = 0\n  while (n) {\n    n &= (n - 1)\n    count++\n  }\n  return count\n}\n","/* eslint-env browser */\n\n/**\n * Binary data constants.\n *\n * @module binary\n */\n\n/**\n * n-th bit activated.\n *\n * @type {number}\n */\nexport const BIT1 = 1\nexport const BIT2 = 2\nexport const BIT3 = 4\nexport const BIT4 = 8\nexport const BIT5 = 16\nexport const BIT6 = 32\nexport const BIT7 = 64\nexport const BIT8 = 128\nexport const BIT9 = 256\nexport const BIT10 = 512\nexport const BIT11 = 1024\nexport const BIT12 = 2048\nexport const BIT13 = 4096\nexport const BIT14 = 8192\nexport const BIT15 = 16384\nexport const BIT16 = 32768\nexport const BIT17 = 65536\nexport const BIT18 = 1 << 17\nexport const BIT19 = 1 << 18\nexport const BIT20 = 1 << 19\nexport const BIT21 = 1 << 20\nexport const BIT22 = 1 << 21\nexport const BIT23 = 1 << 22\nexport const BIT24 = 1 << 23\nexport const BIT25 = 1 << 24\nexport const BIT26 = 1 << 25\nexport const BIT27 = 1 << 26\nexport const BIT28 = 1 << 27\nexport const BIT29 = 1 << 28\nexport const BIT30 = 1 << 29\nexport const BIT31 = 1 << 30\nexport const BIT32 = 1 << 31\n\n/**\n * First n bits activated.\n *\n * @type {number}\n */\nexport const BITS0 = 0\nexport const BITS1 = 1\nexport const BITS2 = 3\nexport const BITS3 = 7\nexport const BITS4 = 15\nexport const BITS5 = 31\nexport const BITS6 = 63\nexport const BITS7 = 127\nexport const BITS8 = 255\nexport const BITS9 = 511\nexport const BITS10 = 1023\nexport const BITS11 = 2047\nexport const BITS12 = 4095\nexport const BITS13 = 8191\nexport const BITS14 = 16383\nexport const BITS15 = 32767\nexport const BITS16 = 65535\nexport const BITS17 = BIT18 - 1\nexport const BITS18 = BIT19 - 1\nexport const BITS19 = BIT20 - 1\nexport const BITS20 = BIT21 - 1\nexport const BITS21 = BIT22 - 1\nexport const BITS22 = BIT23 - 1\nexport const BITS23 = BIT24 - 1\nexport const BITS24 = BIT25 - 1\nexport const BITS25 = BIT26 - 1\nexport const BITS26 = BIT27 - 1\nexport const BITS27 = BIT28 - 1\nexport const BITS28 = BIT29 - 1\nexport const BITS29 = BIT30 - 1\nexport const BITS30 = BIT31 - 1\n/**\n * @type {number}\n */\nexport const BITS31 = 0x7FFFFFFF\n/**\n * @type {number}\n */\nexport const BITS32 = 0xFFFFFFFF\n","import * as array from './array.js'\n\n/**\n * Utility module to work with strings.\n *\n * @module string\n */\n\nexport const fromCharCode = String.fromCharCode\nexport const fromCodePoint = String.fromCodePoint\n\n/**\n * The largest utf16 character.\n * Corresponds to Uint8Array([255, 255]) or charcodeof(2x2^8)\n */\nexport const MAX_UTF16_CHARACTER = fromCharCode(65535)\n\n/**\n * @param {string} s\n * @return {string}\n */\nconst toLowerCase = s => s.toLowerCase()\n\nconst trimLeftRegex = /^\\s*/g\n\n/**\n * @param {string} s\n * @return {string}\n */\nexport const trimLeft = s => s.replace(trimLeftRegex, '')\n\nconst fromCamelCaseRegex = /([A-Z])/g\n\n/**\n * @param {string} s\n * @param {string} separator\n * @return {string}\n */\nexport const fromCamelCase = (s, separator) => trimLeft(s.replace(fromCamelCaseRegex, match => `${separator}${toLowerCase(match)}`))\n\n/**\n * Compute the utf8ByteLength\n * @param {string} str\n * @return {number}\n */\nexport const utf8ByteLength = str => unescape(encodeURIComponent(str)).length\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Polyfill = str => {\n  const encodedString = unescape(encodeURIComponent(str))\n  const len = encodedString.length\n  const buf = new Uint8Array(len)\n  for (let i = 0; i < len; i++) {\n    buf[i] = /** @type {number} */ (encodedString.codePointAt(i))\n  }\n  return buf\n}\n\n/* c8 ignore next */\nexport const utf8TextEncoder = /** @type {TextEncoder} */ (typeof TextEncoder !== 'undefined' ? new TextEncoder() : null)\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Native = str => utf8TextEncoder.encode(str)\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\n/* c8 ignore next */\nexport const encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Polyfill = buf => {\n  let remainingLen = buf.length\n  let encodedString = ''\n  let bufPos = 0\n  while (remainingLen > 0) {\n    const nextLen = remainingLen < 10000 ? remainingLen : 10000\n    const bytes = buf.subarray(bufPos, bufPos + nextLen)\n    bufPos += nextLen\n    // Starting with ES5.1 we can supply a generic array-like object as arguments\n    encodedString += String.fromCodePoint.apply(null, /** @type {any} */ (bytes))\n    remainingLen -= nextLen\n  }\n  return decodeURIComponent(escape(encodedString))\n}\n\n/* c8 ignore next */\nexport let utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8', { fatal: true, ignoreBOM: true })\n\n/* c8 ignore start */\nif (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {\n  // Safari doesn't handle BOM correctly.\n  // This fixes a bug in Safari 13.0.5 where it produces a BOM the first time it is called.\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the first call and\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the second call\n  // Another issue is that from then on no BOM chars are recognized anymore\n  /* c8 ignore next */\n  utf8TextDecoder = null\n}\n/* c8 ignore stop */\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Native = buf => /** @type {TextDecoder} */ (utf8TextDecoder).decode(buf)\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\n/* c8 ignore next */\nexport const decodeUtf8 = utf8TextDecoder ? _decodeUtf8Native : _decodeUtf8Polyfill\n\n/**\n * @param {string} str The initial string\n * @param {number} index Starting position\n * @param {number} remove Number of characters to remove\n * @param {string} insert New content to insert\n */\nexport const splice = (str, index, remove, insert = '') => str.slice(0, index) + insert + str.slice(index + remove)\n\n/**\n * @param {string} source\n * @param {number} n\n */\nexport const repeat = (source, n) => array.unfold(n, () => source).join('')\n","/**\n * Efficient schema-less binary decoding with support for variable length encoding.\n *\n * Use [lib0/decoding] with [lib0/encoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module decoding\n */\n\nimport * as binary from './binary.js'\nimport * as math from './math.js'\nimport * as number from './number.js'\nimport * as string from './string.js'\nimport * as error from './error.js'\nimport * as encoding from './encoding.js'\n\nconst errorUnexpectedEndOfArray = error.create('Unexpected end of array')\nconst errorIntegerOutOfRange = error.create('Integer out of Range')\n\n/**\n * A Decoder handles the decoding of an Uint8Array.\n */\nexport class Decoder {\n  /**\n   * @param {Uint8Array} uint8Array Binary data to decode\n   */\n  constructor (uint8Array) {\n    /**\n     * Decoding target.\n     *\n     * @type {Uint8Array}\n     */\n    this.arr = uint8Array\n    /**\n     * Current decoding position.\n     *\n     * @type {number}\n     */\n    this.pos = 0\n  }\n}\n\n/**\n * @function\n * @param {Uint8Array} uint8Array\n * @return {Decoder}\n */\nexport const createDecoder = uint8Array => new Decoder(uint8Array)\n\n/**\n * @function\n * @param {Decoder} decoder\n * @return {boolean}\n */\nexport const hasContent = decoder => decoder.pos !== decoder.arr.length\n\n/**\n * Clone a decoder instance.\n * Optionally set a new position parameter.\n *\n * @function\n * @param {Decoder} decoder The decoder instance\n * @param {number} [newPos] Defaults to current position\n * @return {Decoder} A clone of `decoder`\n */\nexport const clone = (decoder, newPos = decoder.pos) => {\n  const _decoder = createDecoder(decoder.arr)\n  _decoder.pos = newPos\n  return _decoder\n}\n\n/**\n * Create an Uint8Array view of the next `len` bytes and advance the position by `len`.\n *\n * Important: The Uint8Array still points to the underlying ArrayBuffer. Make sure to discard the result as soon as possible to prevent any memory leaks.\n *            Use `buffer.copyUint8Array` to copy the result into a new Uint8Array.\n *\n * @function\n * @param {Decoder} decoder The decoder instance\n * @param {number} len The length of bytes to read\n * @return {Uint8Array}\n */\nexport const readUint8Array = (decoder, len) => {\n  const view = new Uint8Array(decoder.arr.buffer, decoder.pos + decoder.arr.byteOffset, len)\n  decoder.pos += len\n  return view\n}\n\n/**\n * Read variable length Uint8Array.\n *\n * Important: The Uint8Array still points to the underlying ArrayBuffer. Make sure to discard the result as soon as possible to prevent any memory leaks.\n *            Use `buffer.copyUint8Array` to copy the result into a new Uint8Array.\n *\n * @function\n * @param {Decoder} decoder\n * @return {Uint8Array}\n */\nexport const readVarUint8Array = decoder => readUint8Array(decoder, readVarUint(decoder))\n\n/**\n * Read the rest of the content as an ArrayBuffer\n * @function\n * @param {Decoder} decoder\n * @return {Uint8Array}\n */\nexport const readTailAsUint8Array = decoder => readUint8Array(decoder, decoder.arr.length - decoder.pos)\n\n/**\n * Skip one byte, jump to the next position.\n * @function\n * @param {Decoder} decoder The decoder instance\n * @return {number} The next position\n */\nexport const skip8 = decoder => decoder.pos++\n\n/**\n * Read one byte as unsigned integer.\n * @function\n * @param {Decoder} decoder The decoder instance\n * @return {number} Unsigned 8-bit integer\n */\nexport const readUint8 = decoder => decoder.arr[decoder.pos++]\n\n/**\n * Read 2 bytes as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const readUint16 = decoder => {\n  const uint =\n    decoder.arr[decoder.pos] +\n    (decoder.arr[decoder.pos + 1] << 8)\n  decoder.pos += 2\n  return uint\n}\n\n/**\n * Read 4 bytes as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const readUint32 = decoder => {\n  const uint =\n    (decoder.arr[decoder.pos] +\n    (decoder.arr[decoder.pos + 1] << 8) +\n    (decoder.arr[decoder.pos + 2] << 16) +\n    (decoder.arr[decoder.pos + 3] << 24)) >>> 0\n  decoder.pos += 4\n  return uint\n}\n\n/**\n * Read 4 bytes as unsigned integer in big endian order.\n * (most significant byte first)\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const readUint32BigEndian = decoder => {\n  const uint =\n    (decoder.arr[decoder.pos + 3] +\n    (decoder.arr[decoder.pos + 2] << 8) +\n    (decoder.arr[decoder.pos + 1] << 16) +\n    (decoder.arr[decoder.pos] << 24)) >>> 0\n  decoder.pos += 4\n  return uint\n}\n\n/**\n * Look ahead without incrementing the position\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const peekUint8 = decoder => decoder.arr[decoder.pos]\n\n/**\n * Look ahead without incrementing the position\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const peekUint16 = decoder =>\n  decoder.arr[decoder.pos] +\n  (decoder.arr[decoder.pos + 1] << 8)\n\n/**\n * Look ahead without incrementing the position\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const peekUint32 = decoder => (\n  decoder.arr[decoder.pos] +\n  (decoder.arr[decoder.pos + 1] << 8) +\n  (decoder.arr[decoder.pos + 2] << 16) +\n  (decoder.arr[decoder.pos + 3] << 24)\n) >>> 0\n\n/**\n * Read unsigned integer (32bit) with variable length.\n * 1/8th of the storage is used as encoding overhead.\n *  * numbers < 2^7 is stored in one bytlength\n *  * numbers < 2^14 is stored in two bylength\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.length\n */\nexport const readVarUint = decoder => {\n  let num = 0\n  let mult = 1\n  const len = decoder.arr.length\n  while (decoder.pos < len) {\n    const r = decoder.arr[decoder.pos++]\n    // num = num | ((r & binary.BITS7) << len)\n    num = num + (r & binary.BITS7) * mult // shift $r << (7*#iterations) and add it to num\n    mult *= 128 // next iteration, shift 7 \"more\" to the left\n    if (r < binary.BIT8) {\n      return num\n    }\n    /* c8 ignore start */\n    if (num > number.MAX_SAFE_INTEGER) {\n      throw errorIntegerOutOfRange\n    }\n    /* c8 ignore stop */\n  }\n  throw errorUnexpectedEndOfArray\n}\n\n/**\n * Read signed integer (32bit) with variable length.\n * 1/8th of the storage is used as encoding overhead.\n *  * numbers < 2^7 is stored in one bytlength\n *  * numbers < 2^14 is stored in two bylength\n * @todo This should probably create the inverse ~num if number is negative - but this would be a breaking change.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.length\n */\nexport const readVarInt = decoder => {\n  let r = decoder.arr[decoder.pos++]\n  let num = r & binary.BITS6\n  let mult = 64\n  const sign = (r & binary.BIT7) > 0 ? -1 : 1\n  if ((r & binary.BIT8) === 0) {\n    // don't continue reading\n    return sign * num\n  }\n  const len = decoder.arr.length\n  while (decoder.pos < len) {\n    r = decoder.arr[decoder.pos++]\n    // num = num | ((r & binary.BITS7) << len)\n    num = num + (r & binary.BITS7) * mult\n    mult *= 128\n    if (r < binary.BIT8) {\n      return sign * num\n    }\n    /* c8 ignore start */\n    if (num > number.MAX_SAFE_INTEGER) {\n      throw errorIntegerOutOfRange\n    }\n    /* c8 ignore stop */\n  }\n  throw errorUnexpectedEndOfArray\n}\n\n/**\n * Look ahead and read varUint without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {number}\n */\nexport const peekVarUint = decoder => {\n  const pos = decoder.pos\n  const s = readVarUint(decoder)\n  decoder.pos = pos\n  return s\n}\n\n/**\n * Look ahead and read varUint without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {number}\n */\nexport const peekVarInt = decoder => {\n  const pos = decoder.pos\n  const s = readVarInt(decoder)\n  decoder.pos = pos\n  return s\n}\n\n/**\n * We don't test this function anymore as we use native decoding/encoding by default now.\n * Better not modify this anymore..\n *\n * Transforming utf8 to a string is pretty expensive. The code performs 10x better\n * when String.fromCodePoint is fed with all characters as arguments.\n * But most environments have a maximum number of arguments per functions.\n * For effiency reasons we apply a maximum of 10000 characters at once.\n *\n * @function\n * @param {Decoder} decoder\n * @return {String} The read String.\n */\n/* c8 ignore start */\nexport const _readVarStringPolyfill = decoder => {\n  let remainingLen = readVarUint(decoder)\n  if (remainingLen === 0) {\n    return ''\n  } else {\n    let encodedString = String.fromCodePoint(readUint8(decoder)) // remember to decrease remainingLen\n    if (--remainingLen < 100) { // do not create a Uint8Array for small strings\n      while (remainingLen--) {\n        encodedString += String.fromCodePoint(readUint8(decoder))\n      }\n    } else {\n      while (remainingLen > 0) {\n        const nextLen = remainingLen < 10000 ? remainingLen : 10000\n        // this is dangerous, we create a fresh array view from the existing buffer\n        const bytes = decoder.arr.subarray(decoder.pos, decoder.pos + nextLen)\n        decoder.pos += nextLen\n        // Starting with ES5.1 we can supply a generic array-like object as arguments\n        encodedString += String.fromCodePoint.apply(null, /** @type {any} */ (bytes))\n        remainingLen -= nextLen\n      }\n    }\n    return decodeURIComponent(escape(encodedString))\n  }\n}\n/* c8 ignore stop */\n\n/**\n * @function\n * @param {Decoder} decoder\n * @return {String} The read String\n */\nexport const _readVarStringNative = decoder =>\n  /** @type any */ (string.utf8TextDecoder).decode(readVarUint8Array(decoder))\n\n/**\n * Read string of variable length\n * * varUint is used to store the length of the string\n *\n * @function\n * @param {Decoder} decoder\n * @return {String} The read String\n *\n */\n/* c8 ignore next */\nexport const readVarString = string.utf8TextDecoder ? _readVarStringNative : _readVarStringPolyfill\n\n/**\n * @param {Decoder} decoder\n * @return {Uint8Array}\n */\nexport const readTerminatedUint8Array = decoder => {\n  const encoder = encoding.createEncoder()\n  let b\n  while (true) {\n    b = readUint8(decoder)\n    if (b === 0) {\n      return encoding.toUint8Array(encoder)\n    }\n    if (b === 1) {\n      b = readUint8(decoder)\n    }\n    encoding.write(encoder, b)\n  }\n}\n\n/**\n * @param {Decoder} decoder\n * @return {string}\n */\nexport const readTerminatedString = decoder => string.decodeUtf8(readTerminatedUint8Array(decoder))\n\n/**\n * Look ahead and read varString without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {string}\n */\nexport const peekVarString = decoder => {\n  const pos = decoder.pos\n  const s = readVarString(decoder)\n  decoder.pos = pos\n  return s\n}\n\n/**\n * @param {Decoder} decoder\n * @param {number} len\n * @return {DataView}\n */\nexport const readFromDataView = (decoder, len) => {\n  const dv = new DataView(decoder.arr.buffer, decoder.arr.byteOffset + decoder.pos, len)\n  decoder.pos += len\n  return dv\n}\n\n/**\n * @param {Decoder} decoder\n */\nexport const readFloat32 = decoder => readFromDataView(decoder, 4).getFloat32(0, false)\n\n/**\n * @param {Decoder} decoder\n */\nexport const readFloat64 = decoder => readFromDataView(decoder, 8).getFloat64(0, false)\n\n/**\n * @param {Decoder} decoder\n */\nexport const readBigInt64 = decoder => /** @type {any} */ (readFromDataView(decoder, 8)).getBigInt64(0, false)\n\n/**\n * @param {Decoder} decoder\n */\nexport const readBigUint64 = decoder => /** @type {any} */ (readFromDataView(decoder, 8)).getBigUint64(0, false)\n\n/**\n * @type {Array<function(Decoder):any>}\n */\nconst readAnyLookupTable = [\n  decoder => undefined, // CASE 127: undefined\n  decoder => null, // CASE 126: null\n  readVarInt, // CASE 125: integer\n  readFloat32, // CASE 124: float32\n  readFloat64, // CASE 123: float64\n  readBigInt64, // CASE 122: bigint\n  decoder => false, // CASE 121: boolean (false)\n  decoder => true, // CASE 120: boolean (true)\n  readVarString, // CASE 119: string\n  decoder => { // CASE 118: object<string,any>\n    const len = readVarUint(decoder)\n    /**\n     * @type {Object<string,any>}\n     */\n    const obj = {}\n    for (let i = 0; i < len; i++) {\n      const key = readVarString(decoder)\n      obj[key] = readAny(decoder)\n    }\n    return obj\n  },\n  decoder => { // CASE 117: array<any>\n    const len = readVarUint(decoder)\n    const arr = []\n    for (let i = 0; i < len; i++) {\n      arr.push(readAny(decoder))\n    }\n    return arr\n  },\n  readVarUint8Array // CASE 116: Uint8Array\n]\n\n/**\n * @param {Decoder} decoder\n */\nexport const readAny = decoder => readAnyLookupTable[127 - readUint8(decoder)](decoder)\n\n/**\n * T must not be null.\n *\n * @template T\n */\nexport class RleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {function(Decoder):T} reader\n   */\n  constructor (uint8Array, reader) {\n    super(uint8Array)\n    /**\n     * The reader\n     */\n    this.reader = reader\n    /**\n     * Current state\n     * @type {T|null}\n     */\n    this.s = null\n    this.count = 0\n  }\n\n  read () {\n    if (this.count === 0) {\n      this.s = this.reader(this)\n      if (hasContent(this)) {\n        this.count = readVarUint(this) + 1 // see encoder implementation for the reason why this is incremented\n      } else {\n        this.count = -1 // read the current value forever\n      }\n    }\n    this.count--\n    return /** @type {T} */ (this.s)\n  }\n}\n\nexport class IntDiffDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {number} start\n   */\n  constructor (uint8Array, start) {\n    super(uint8Array)\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n  }\n\n  /**\n   * @return {number}\n   */\n  read () {\n    this.s += readVarInt(this)\n    return this.s\n  }\n}\n\nexport class RleIntDiffDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {number} start\n   */\n  constructor (uint8Array, start) {\n    super(uint8Array)\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n    this.count = 0\n  }\n\n  /**\n   * @return {number}\n   */\n  read () {\n    if (this.count === 0) {\n      this.s += readVarInt(this)\n      if (hasContent(this)) {\n        this.count = readVarUint(this) + 1 // see encoder implementation for the reason why this is incremented\n      } else {\n        this.count = -1 // read the current value forever\n      }\n    }\n    this.count--\n    return /** @type {number} */ (this.s)\n  }\n}\n\nexport class UintOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    super(uint8Array)\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  read () {\n    if (this.count === 0) {\n      this.s = readVarInt(this)\n      // if the sign is negative, we read the count too, otherwise count is 1\n      const isNegative = math.isNegativeZero(this.s)\n      this.count = 1\n      if (isNegative) {\n        this.s = -this.s\n        this.count = readVarUint(this) + 2\n      }\n    }\n    this.count--\n    return /** @type {number} */ (this.s)\n  }\n}\n\nexport class IncUintOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    super(uint8Array)\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  read () {\n    if (this.count === 0) {\n      this.s = readVarInt(this)\n      // if the sign is negative, we read the count too, otherwise count is 1\n      const isNegative = math.isNegativeZero(this.s)\n      this.count = 1\n      if (isNegative) {\n        this.s = -this.s\n        this.count = readVarUint(this) + 2\n      }\n    }\n    this.count--\n    return /** @type {number} */ (this.s++)\n  }\n}\n\nexport class IntDiffOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    super(uint8Array)\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n    this.diff = 0\n  }\n\n  /**\n   * @return {number}\n   */\n  read () {\n    if (this.count === 0) {\n      const diff = readVarInt(this)\n      // if the first bit is set, we read more data\n      const hasCount = diff & 1\n      this.diff = math.floor(diff / 2) // shift >> 1\n      this.count = 1\n      if (hasCount) {\n        this.count = readVarUint(this) + 2\n      }\n    }\n    this.s += this.diff\n    this.count--\n    return this.s\n  }\n}\n\nexport class StringDecoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    this.decoder = new UintOptRleDecoder(uint8Array)\n    this.str = readVarString(this.decoder)\n    /**\n     * @type {number}\n     */\n    this.spos = 0\n  }\n\n  /**\n   * @return {string}\n   */\n  read () {\n    const end = this.spos + this.decoder.read()\n    const res = this.str.slice(this.spos, end)\n    this.spos = end\n    return res\n  }\n}\n","/**\n * Error helpers.\n *\n * @module error\n */\n\n/**\n * @param {string} s\n * @return {Error}\n */\n/* c8 ignore next */\nexport const create = s => new Error(s)\n\n/**\n * @throws {Error}\n * @return {never}\n */\n/* c8 ignore next 3 */\nexport const methodUnimplemented = () => {\n  throw create('Method unimplemented')\n}\n\n/**\n * @throws {Error}\n * @return {never}\n */\n/* c8 ignore next 3 */\nexport const unexpectedCase = () => {\n  throw create('Unexpected case')\n}\n","/**\n * Isomorphic module for true random numbers / buffers / uuids.\n *\n * Attention: falls back to Math.random if the browser does not support crypto.\n *\n * @module random\n */\n\nimport * as math from './math.js'\nimport * as binary from './binary.js'\nimport { getRandomValues } from 'lib0/webcrypto'\n\nexport const rand = Math.random\n\nexport const uint32 = () => getRandomValues(new Uint32Array(1))[0]\n\nexport const uint53 = () => {\n  const arr = getRandomValues(new Uint32Array(8))\n  return (arr[0] & binary.BITS21) * (binary.BITS32 + 1) + (arr[1] >>> 0)\n}\n\n/**\n * @template T\n * @param {Array<T>} arr\n * @return {T}\n */\nexport const oneOf = arr => arr[math.floor(rand() * arr.length)]\n\n// @ts-ignore\nconst uuidv4Template = [1e7] + -1e3 + -4e3 + -8e3 + -1e11\n\n/**\n * @return {string}\n */\nexport const uuidv4 = () => uuidv4Template.replace(/[018]/g, /** @param {number} c */ c =>\n  (c ^ uint32() & 15 >> c / 4).toString(16)\n)\n","/* eslint-env browser */\n\nexport const subtle = crypto.subtle\nexport const getRandomValues = crypto.getRandomValues.bind(crypto)\n","/**\n * Utility helpers to work with promises.\n *\n * @module promise\n */\n\nimport * as time from './time.js'\n\n/**\n * @template T\n * @callback PromiseResolve\n * @param {T|PromiseLike<T>} [result]\n */\n\n/**\n * @template T\n * @param {function(PromiseResolve<T>,function(Error):void):any} f\n * @return {Promise<T>}\n */\nexport const create = f => /** @type {Promise<T>} */ (new Promise(f))\n\n/**\n * @param {function(function():void,function(Error):void):void} f\n * @return {Promise<void>}\n */\nexport const createEmpty = f => new Promise(f)\n\n/**\n * `Promise.all` wait for all promises in the array to resolve and return the result\n * @template {unknown[] | []} PS\n *\n * @param {PS} ps\n * @return {Promise<{ -readonly [P in keyof PS]: Awaited<PS[P]> }>}\n */\nexport const all = Promise.all.bind(Promise)\n\n/**\n * @param {Error} [reason]\n * @return {Promise<never>}\n */\nexport const reject = reason => Promise.reject(reason)\n\n/**\n * @template T\n * @param {T|void} res\n * @return {Promise<T|void>}\n */\nexport const resolve = res => Promise.resolve(res)\n\n/**\n * @template T\n * @param {T} res\n * @return {Promise<T>}\n */\nexport const resolveWith = res => Promise.resolve(res)\n\n/**\n * @todo Next version, reorder parameters: check, [timeout, [intervalResolution]]\n * @deprecated use untilAsync instead\n *\n * @param {number} timeout\n * @param {function():boolean} check\n * @param {number} [intervalResolution]\n * @return {Promise<void>}\n */\nexport const until = (timeout, check, intervalResolution = 10) => create((resolve, reject) => {\n  const startTime = time.getUnixTime()\n  const hasTimeout = timeout > 0\n  const untilInterval = () => {\n    if (check()) {\n      clearInterval(intervalHandle)\n      resolve()\n    } else if (hasTimeout) {\n      /* c8 ignore else */\n      if (time.getUnixTime() - startTime > timeout) {\n        clearInterval(intervalHandle)\n        reject(new Error('Timeout'))\n      }\n    }\n  }\n  const intervalHandle = setInterval(untilInterval, intervalResolution)\n})\n\n/**\n * @param {()=>Promise<boolean>|boolean} check\n * @param {number} timeout\n * @param {number} intervalResolution\n * @return {Promise<void>}\n */\nexport const untilAsync = async (check, timeout = 0, intervalResolution = 10) => {\n  const startTime = time.getUnixTime()\n  const noTimeout = timeout <= 0\n  // eslint-disable-next-line no-unmodified-loop-condition\n  while (noTimeout || time.getUnixTime() - startTime <= timeout) {\n    if (await check()) return\n    await wait(intervalResolution)\n  }\n  throw new Error('Timeout')\n}\n\n/**\n * @param {number} timeout\n * @return {Promise<undefined>}\n */\nexport const wait = timeout => create((resolve, _reject) => setTimeout(resolve, timeout))\n\n/**\n * Checks if an object is a promise using ducktyping.\n *\n * Promises are often polyfilled, so it makes sense to add some additional guarantees if the user of this\n * library has some insane environment where global Promise objects are overwritten.\n *\n * @param {any} p\n * @return {boolean}\n */\nexport const isPromise = p => p instanceof Promise || (p && p.then && p.catch && p.finally)\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) resolve(value);\n    else Promise.resolve(value).then(_next, _throw);\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n\n            _next(undefined);\n        });\n    };\n}\nexport { _async_to_generator as _ };\n","/**\n * Utility module to work with time.\n *\n * @module time\n */\n\nimport * as metric from './metric.js'\nimport * as math from './math.js'\n\n/**\n * Return current time.\n *\n * @return {Date}\n */\nexport const getDate = () => new Date()\n\n/**\n * Return current unix time.\n *\n * @return {number}\n */\nexport const getUnixTime = Date.now\n\n/**\n * Transform time (in ms) to a human readable format. E.g. 1100 => 1.1s. 60s => 1min. .001 => 10μs.\n *\n * @param {number} d duration in milliseconds\n * @return {string} humanized approximation of time\n */\nexport const humanizeDuration = d => {\n  if (d < 60000) {\n    const p = metric.prefix(d, -1)\n    return math.round(p.n * 100) / 100 + p.prefix + 's'\n  }\n  d = math.floor(d / 1000)\n  const seconds = d % 60\n  const minutes = math.floor(d / 60) % 60\n  const hours = math.floor(d / 3600) % 24\n  const days = math.floor(d / 86400)\n  if (days > 0) {\n    return days + 'd' + ((hours > 0 || minutes > 30) ? ' ' + (minutes > 30 ? hours + 1 : hours) + 'h' : '')\n  }\n  if (hours > 0) {\n    /* c8 ignore next */\n    return hours + 'h' + ((minutes > 0 || seconds > 30) ? ' ' + (seconds > 30 ? minutes + 1 : minutes) + 'min' : '')\n  }\n  return minutes + 'min' + (seconds > 0 ? ' ' + seconds + 's' : '')\n}\n","/**\n * Utility module to convert metric values.\n *\n * @module metric\n */\n\nimport * as math from './math.js'\n\nexport const yotta = 1e24\nexport const zetta = 1e21\nexport const exa = 1e18\nexport const peta = 1e15\nexport const tera = 1e12\nexport const giga = 1e9\nexport const mega = 1e6\nexport const kilo = 1e3\nexport const hecto = 1e2\nexport const deca = 10\nexport const deci = 0.1\nexport const centi = 0.01\nexport const milli = 1e-3\nexport const micro = 1e-6\nexport const nano = 1e-9\nexport const pico = 1e-12\nexport const femto = 1e-15\nexport const atto = 1e-18\nexport const zepto = 1e-21\nexport const yocto = 1e-24\n\nconst prefixUp = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']\nconst prefixDown = ['', 'm', 'μ', 'n', 'p', 'f', 'a', 'z', 'y']\n\n/**\n * Calculate the metric prefix for a number. Assumes E.g. `prefix(1000) = { n: 1, prefix: 'k' }`\n *\n * @param {number} n\n * @param {number} [baseMultiplier] Multiplier of the base (10^(3*baseMultiplier)). E.g. `convert(time, -3)` if time is already in milli seconds\n * @return {{n:number,prefix:string}}\n */\nexport const prefix = (n, baseMultiplier = 0) => {\n  const nPow = n === 0 ? 0 : math.log10(n)\n  let mult = 0\n  while (nPow < mult * 3 && baseMultiplier > -8) {\n    baseMultiplier--\n    mult--\n  }\n  while (nPow >= 3 + mult * 3 && baseMultiplier < 8) {\n    baseMultiplier++\n    mult++\n  }\n  const prefix = baseMultiplier < 0 ? prefixDown[-baseMultiplier] : prefixUp[baseMultiplier]\n  return {\n    n: math.round((mult > 0 ? n / math.exp10(mult * 3) : n * math.exp10(mult * -3)) * 1e12) / 1e12,\n    prefix\n  }\n}\n","/**\n * Utility functions to work with buffers (Uint8Array).\n *\n * @module buffer\n */\n\nimport * as string from './string.js'\nimport * as env from './environment.js'\nimport * as array from './array.js'\nimport * as math from './math.js'\nimport * as encoding from './encoding.js'\nimport * as decoding from './decoding.js'\n\n/**\n * @param {number} len\n */\nexport const createUint8ArrayFromLen = len => new Uint8Array(len)\n\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n * @param {number} byteOffset\n * @param {number} length\n */\nexport const createUint8ArrayViewFromArrayBuffer = (buffer, byteOffset, length) => new Uint8Array(buffer, byteOffset, length)\n\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n */\nexport const createUint8ArrayFromArrayBuffer = buffer => new Uint8Array(buffer)\n\n/* c8 ignore start */\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\nconst toBase64Browser = bytes => {\n  let s = ''\n  for (let i = 0; i < bytes.byteLength; i++) {\n    s += string.fromCharCode(bytes[i])\n  }\n  // eslint-disable-next-line no-undef\n  return btoa(s)\n}\n/* c8 ignore stop */\n\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\nconst toBase64Node = bytes => Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength).toString('base64')\n\n/* c8 ignore start */\n/**\n * @param {string} s\n * @return {Uint8Array}\n */\nconst fromBase64Browser = s => {\n  // eslint-disable-next-line no-undef\n  const a = atob(s)\n  const bytes = createUint8ArrayFromLen(a.length)\n  for (let i = 0; i < a.length; i++) {\n    bytes[i] = a.charCodeAt(i)\n  }\n  return bytes\n}\n/* c8 ignore stop */\n\n/**\n * @param {string} s\n */\nconst fromBase64Node = s => {\n  const buf = Buffer.from(s, 'base64')\n  return createUint8ArrayViewFromArrayBuffer(buf.buffer, buf.byteOffset, buf.byteLength)\n}\n\n/* c8 ignore next */\nexport const toBase64 = env.isBrowser ? toBase64Browser : toBase64Node\n\n/* c8 ignore next */\nexport const fromBase64 = env.isBrowser ? fromBase64Browser : fromBase64Node\n\n/**\n * Implements base64url - see https://datatracker.ietf.org/doc/html/rfc4648#section-5\n * @param {Uint8Array} buf\n */\nexport const toBase64UrlEncoded = buf => toBase64(buf).replaceAll('+', '-').replaceAll('/', '_').replaceAll('=', '')\n\n/**\n * @param {string} base64\n */\nexport const fromBase64UrlEncoded = base64 => fromBase64(base64.replaceAll('-', '+').replaceAll('_', '/'))\n\n/**\n * Base64 is always a more efficient choice. This exists for utility purposes only.\n *\n * @param {Uint8Array} buf\n */\nexport const toHexString = buf => array.map(buf, b => b.toString(16).padStart(2, '0')).join('')\n\n/**\n * Note: This function expects that the hex doesn't start with 0x..\n *\n * @param {string} hex\n */\nexport const fromHexString = hex => {\n  const hlen = hex.length\n  const buf = new Uint8Array(math.ceil(hlen / 2))\n  for (let i = 0; i < hlen; i += 2) {\n    buf[buf.length - i / 2 - 1] = Number.parseInt(hex.slice(hlen - i - 2, hlen - i), 16)\n  }\n  return buf\n}\n\n/**\n * Copy the content of an Uint8Array view to a new ArrayBuffer.\n *\n * @param {Uint8Array} uint8Array\n * @return {Uint8Array}\n */\nexport const copyUint8Array = uint8Array => {\n  const newBuf = createUint8ArrayFromLen(uint8Array.byteLength)\n  newBuf.set(uint8Array)\n  return newBuf\n}\n\n/**\n * Encode anything as a UInt8Array. It's a pun on typescripts's `any` type.\n * See encoding.writeAny for more information.\n *\n * @param {any} data\n * @return {Uint8Array}\n */\nexport const encodeAny = data =>\n  encoding.encode(encoder => encoding.writeAny(encoder, data))\n\n/**\n * Decode an any-encoded value.\n *\n * @param {Uint8Array} buf\n * @return {any}\n */\nexport const decodeAny = buf => decoding.readAny(decoding.createDecoder(buf))\n\n/**\n * Shift Byte Array {N} bits to the left. Does not expand byte array.\n *\n * @param {Uint8Array} bs\n * @param {number} N should be in the range of [0-7]\n */\nexport const shiftNBitsLeft = (bs, N) => {\n  if (N === 0) return bs\n  bs = new Uint8Array(bs)\n  bs[0] <<= N\n  for (let i = 1; i < bs.length; i++) {\n    bs[i - 1] |= bs[i] >>> (8 - N)\n    bs[i] <<= N\n  }\n  return bs\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/**\n * Isomorphic module to work access the environment (query params, env variables).\n *\n * @module environment\n */\n\nimport * as map from './map.js'\nimport * as string from './string.js'\nimport * as conditions from './conditions.js'\nimport * as storage from './storage.js'\nimport * as f from './function.js'\n\n/* c8 ignore next 2 */\n// @ts-ignore\nexport const isNode = typeof process !== 'undefined' && process.release && /node|io\\.js/.test(process.release.name) && Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]'\n\n/* c8 ignore next */\nexport const isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && !isNode\n/* c8 ignore next 3 */\nexport const isMac = typeof navigator !== 'undefined'\n  ? /Mac/.test(navigator.platform)\n  : false\n\n/**\n * @type {Map<string,string>}\n */\nlet params\nconst args = []\n\n/* c8 ignore start */\nconst computeParams = () => {\n  if (params === undefined) {\n    if (isNode) {\n      params = map.create()\n      const pargs = process.argv\n      let currParamName = null\n      for (let i = 0; i < pargs.length; i++) {\n        const parg = pargs[i]\n        if (parg[0] === '-') {\n          if (currParamName !== null) {\n            params.set(currParamName, '')\n          }\n          currParamName = parg\n        } else {\n          if (currParamName !== null) {\n            params.set(currParamName, parg)\n            currParamName = null\n          } else {\n            args.push(parg)\n          }\n        }\n      }\n      if (currParamName !== null) {\n        params.set(currParamName, '')\n      }\n      // in ReactNative for example this would not be true (unless connected to the Remote Debugger)\n    } else if (typeof location === 'object') {\n      params = map.create(); // eslint-disable-next-line no-undef\n      (location.search || '?').slice(1).split('&').forEach((kv) => {\n        if (kv.length !== 0) {\n          const [key, value] = kv.split('=')\n          params.set(`--${string.fromCamelCase(key, '-')}`, value)\n          params.set(`-${string.fromCamelCase(key, '-')}`, value)\n        }\n      })\n    } else {\n      params = map.create()\n    }\n  }\n  return params\n}\n/* c8 ignore stop */\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* c8 ignore next */\nexport const hasParam = (name) => computeParams().has(name)\n\n/**\n * @param {string} name\n * @param {string} defaultVal\n * @return {string}\n */\n/* c8 ignore next 2 */\nexport const getParam = (name, defaultVal) =>\n  computeParams().get(name) || defaultVal\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n/* c8 ignore next 4 */\nexport const getVariable = (name) =>\n  isNode\n    ? conditions.undefinedToNull(process.env[name.toUpperCase().replaceAll('-', '_')])\n    : conditions.undefinedToNull(storage.varStorage.getItem(name))\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n/* c8 ignore next 2 */\nexport const getConf = (name) =>\n  computeParams().get('--' + name) || getVariable(name)\n\n/**\n * @param {string} name\n * @return {string}\n */\n/* c8 ignore next 5 */\nexport const ensureConf = (name) => {\n  const c = getConf(name)\n  if (c == null) throw new Error(`Expected configuration \"${name.toUpperCase().replaceAll('-', '_')}\"`)\n  return c\n}\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* c8 ignore next 2 */\nexport const hasConf = (name) =>\n  hasParam('--' + name) || getVariable(name) !== null\n\n/* c8 ignore next */\nexport const production = hasConf('production')\n\n/* c8 ignore next 2 */\nconst forceColor = isNode &&\n  f.isOneOf(process.env.FORCE_COLOR, ['true', '1', '2'])\n\n/* c8 ignore start */\n/**\n * Color is enabled by default if the terminal supports it.\n *\n * Explicitly enable color using `--color` parameter\n * Disable color using `--no-color` parameter or using `NO_COLOR=1` environment variable.\n * `FORCE_COLOR=1` enables color and takes precedence over all.\n */\nexport const supportsColor = forceColor || (\n  !hasParam('--no-colors') && // @todo deprecate --no-colors\n  !hasConf('no-color') &&\n  (!isNode || process.stdout.isTTY) && (\n    !isNode ||\n    hasParam('--color') ||\n    getVariable('COLORTERM') !== null ||\n    (getVariable('TERM') || '').includes('color')\n  )\n)\n/* c8 ignore stop */\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Often used conditions.\n *\n * @module conditions\n */\n\n/**\n * @template T\n * @param {T|null|undefined} v\n * @return {T|null}\n */\n/* c8 ignore next */\nexport const undefinedToNull = v => v === undefined ? null : v\n","/* eslint-env browser */\n\n/**\n * Isomorphic variable storage.\n *\n * Uses LocalStorage in the browser and falls back to in-memory storage.\n *\n * @module storage\n */\n\n/* c8 ignore start */\nclass VarStoragePolyfill {\n  constructor () {\n    this.map = new Map()\n  }\n\n  /**\n   * @param {string} key\n   * @param {any} newValue\n   */\n  setItem (key, newValue) {\n    this.map.set(key, newValue)\n  }\n\n  /**\n   * @param {string} key\n   */\n  getItem (key) {\n    return this.map.get(key)\n  }\n}\n/* c8 ignore stop */\n\n/**\n * @type {any}\n */\nlet _localStorage = new VarStoragePolyfill()\nlet usePolyfill = true\n\n/* c8 ignore start */\ntry {\n  // if the same-origin rule is violated, accessing localStorage might thrown an error\n  if (typeof localStorage !== 'undefined' && localStorage) {\n    _localStorage = localStorage\n    usePolyfill = false\n  }\n} catch (e) { }\n/* c8 ignore stop */\n\n/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\n/* c8 ignore next */\nexport const varStorage = _localStorage\n\n/**\n * A polyfill for `addEventListener('storage', event => {..})` that does nothing if the polyfill is being used.\n *\n * @param {function({ key: string, newValue: string, oldValue: string }): void} eventHandler\n * @function\n */\n/* c8 ignore next */\nexport const onChange = eventHandler => usePolyfill || addEventListener('storage', /** @type {any} */ (eventHandler))\n\n/**\n * A polyfill for `removeEventListener('storage', event => {..})` that does nothing if the polyfill is being used.\n *\n * @param {function({ key: string, newValue: string, oldValue: string }): void} eventHandler\n * @function\n */\n/* c8 ignore next */\nexport const offChange = eventHandler => usePolyfill || removeEventListener('storage', /** @type {any} */ (eventHandler))\n","/**\n * Common functions and function call helpers.\n *\n * @module function\n */\n\nimport * as array from './array.js'\nimport * as object from './object.js'\n\n/**\n * Calls all functions in `fs` with args. Only throws after all functions were called.\n *\n * @param {Array<function>} fs\n * @param {Array<any>} args\n */\nexport const callAll = (fs, args, i = 0) => {\n  try {\n    for (; i < fs.length; i++) {\n      fs[i](...args)\n    }\n  } finally {\n    if (i < fs.length) {\n      callAll(fs, args, i + 1)\n    }\n  }\n}\n\nexport const nop = () => {}\n\n/**\n * @template T\n * @param {function():T} f\n * @return {T}\n */\nexport const apply = f => f()\n\n/**\n * @template A\n *\n * @param {A} a\n * @return {A}\n */\nexport const id = a => a\n\n/**\n * @template T\n *\n * @param {T} a\n * @param {T} b\n * @return {boolean}\n */\nexport const equalityStrict = (a, b) => a === b\n\n/**\n * @template T\n *\n * @param {Array<T>|object} a\n * @param {Array<T>|object} b\n * @return {boolean}\n */\nexport const equalityFlat = (a, b) => a === b || (a != null && b != null && a.constructor === b.constructor && ((array.isArray(a) && array.equalFlat(a, /** @type {Array<T>} */ (b))) || (typeof a === 'object' && object.equalFlat(a, b))))\n\n/* c8 ignore start */\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nexport const equalityDeep = (a, b) => {\n  if (a == null || b == null) {\n    return equalityStrict(a, b)\n  }\n  if (a.constructor !== b.constructor) {\n    return false\n  }\n  if (a === b) {\n    return true\n  }\n  switch (a.constructor) {\n    case ArrayBuffer:\n      a = new Uint8Array(a)\n      b = new Uint8Array(b)\n    // eslint-disable-next-line no-fallthrough\n    case Uint8Array: {\n      if (a.byteLength !== b.byteLength) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n          return false\n        }\n      }\n      break\n    }\n    case Set: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const value of a) {\n        if (!b.has(value)) {\n          return false\n        }\n      }\n      break\n    }\n    case Map: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const key of a.keys()) {\n        if (!b.has(key) || !equalityDeep(a.get(key), b.get(key))) {\n          return false\n        }\n      }\n      break\n    }\n    case Object:\n      if (object.length(a) !== object.length(b)) {\n        return false\n      }\n      for (const key in a) {\n        if (!object.hasProperty(a, key) || !equalityDeep(a[key], b[key])) {\n          return false\n        }\n      }\n      break\n    case Array:\n      if (a.length !== b.length) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (!equalityDeep(a[i], b[i])) {\n          return false\n        }\n      }\n      break\n    default:\n      return false\n  }\n  return true\n}\n\n/**\n * @template V\n * @template {V} OPTS\n *\n * @param {V} value\n * @param {Array<OPTS>} options\n */\n// @ts-ignore\nexport const isOneOf = (value, options) => options.includes(value)\n/* c8 ignore stop */\n\nexport const isArray = array.isArray\n\n/**\n * @param {any} s\n * @return {s is String}\n */\nexport const isString = (s) => s && s.constructor === String\n\n/**\n * @param {any} n\n * @return {n is Number}\n */\nexport const isNumber = n => n != null && n.constructor === Number\n\n/**\n * @template {abstract new (...args: any) => any} TYPE\n * @param {any} n\n * @param {TYPE} T\n * @return {n is InstanceType<TYPE>}\n */\nexport const is = (n, T) => n && n.constructor === T\n\n/**\n * @template {abstract new (...args: any) => any} TYPE\n * @param {TYPE} T\n */\nexport const isTemplate = (T) =>\n  /**\n   * @param {any} n\n   * @return {n is InstanceType<TYPE>}\n   **/\n  n => n && n.constructor === T\n","/**\n * Utility functions for working with EcmaScript objects.\n *\n * @module object\n */\n\n/**\n * @return {Object<string,any>} obj\n */\nexport const create = () => Object.create(null)\n\n/**\n * Object.assign\n */\nexport const assign = Object.assign\n\n/**\n * @param {Object<string,any>} obj\n */\nexport const keys = Object.keys\n\n/**\n * @template V\n * @param {{[k:string]:V}} obj\n * @param {function(V,string):any} f\n */\nexport const forEach = (obj, f) => {\n  for (const key in obj) {\n    f(obj[key], key)\n  }\n}\n\n/**\n * @todo implement mapToArray & map\n *\n * @template R\n * @param {Object<string,any>} obj\n * @param {function(any,string):R} f\n * @return {Array<R>}\n */\nexport const map = (obj, f) => {\n  const results = []\n  for (const key in obj) {\n    results.push(f(obj[key], key))\n  }\n  return results\n}\n\n/**\n * @deprecated use object.size instead\n * @param {Object<string,any>} obj\n * @return {number}\n */\nexport const length = obj => keys(obj).length\n\n/**\n * @param {Object<string,any>} obj\n * @return {number}\n */\nexport const size = obj => keys(obj).length\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):boolean} f\n * @return {boolean}\n */\nexport const some = (obj, f) => {\n  for (const key in obj) {\n    if (f(obj[key], key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * @param {Object|undefined} obj\n */\nexport const isEmpty = obj => {\n  // eslint-disable-next-line\n  for (const _k in obj) {\n    return false\n  }\n  return true\n}\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):boolean} f\n * @return {boolean}\n */\nexport const every = (obj, f) => {\n  for (const key in obj) {\n    if (!f(obj[key], key)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Calls `Object.prototype.hasOwnProperty`.\n *\n * @param {any} obj\n * @param {string|symbol} key\n * @return {boolean}\n */\nexport const hasProperty = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key)\n\n/**\n * @param {Object<string,any>} a\n * @param {Object<string,any>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a === b || (size(a) === size(b) && every(a, (val, key) => (val !== undefined || hasProperty(b, key)) && b[key] === val))\n\n/**\n * Make an object immutable. This hurts performance and is usually not needed if you perform good\n * coding practices.\n */\nexport const freeze = Object.freeze\n\n/**\n * Make an object and all its children immutable.\n * This *really* hurts performance and is usually not needed if you perform good coding practices.\n *\n * @template {any} T\n * @param {T} o\n * @return {Readonly<T>}\n */\nexport const deepFreeze = (o) => {\n  for (const key in o) {\n    const c = o[key]\n    if (typeof c === 'object' || typeof c === 'function') {\n      deepFreeze(o[key])\n    }\n  }\n  return freeze(o)\n}\n","/**\n * Isomorphic logging module with support for colors!\n *\n * @module logging\n */\n\nimport * as env from './environment.js'\nimport * as set from './set.js'\nimport * as pair from './pair.js'\nimport * as dom from './dom.js'\nimport * as json from './json.js'\nimport * as map from './map.js'\nimport * as eventloop from './eventloop.js'\nimport * as math from './math.js'\nimport * as common from './logging.common.js'\n\nexport { BOLD, UNBOLD, BLUE, GREY, GREEN, RED, PURPLE, ORANGE, UNCOLOR } from './logging.common.js'\n\n/**\n * @type {Object<Symbol,pair.Pair<string,string>>}\n */\nconst _browserStyleMap = {\n  [common.BOLD]: pair.create('font-weight', 'bold'),\n  [common.UNBOLD]: pair.create('font-weight', 'normal'),\n  [common.BLUE]: pair.create('color', 'blue'),\n  [common.GREEN]: pair.create('color', 'green'),\n  [common.GREY]: pair.create('color', 'grey'),\n  [common.RED]: pair.create('color', 'red'),\n  [common.PURPLE]: pair.create('color', 'purple'),\n  [common.ORANGE]: pair.create('color', 'orange'), // not well supported in chrome when debugging node with inspector - TODO: deprecate\n  [common.UNCOLOR]: pair.create('color', 'black')\n}\n\n/**\n * @param {Array<string|Symbol|Object|number|function():any>} args\n * @return {Array<string|object|number>}\n */\n/* c8 ignore start */\nconst computeBrowserLoggingArgs = (args) => {\n  if (args.length === 1 && args[0]?.constructor === Function) {\n    args = /** @type {Array<string|Symbol|Object|number>} */ (/** @type {[function]} */ (args)[0]())\n  }\n  const strBuilder = []\n  const styles = []\n  const currentStyle = map.create()\n  /**\n   * @type {Array<string|Object|number>}\n   */\n  let logArgs = []\n  // try with formatting until we find something unsupported\n  let i = 0\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    // @ts-ignore\n    const style = _browserStyleMap[arg]\n    if (style !== undefined) {\n      currentStyle.set(style.left, style.right)\n    } else {\n      if (arg === undefined) {\n        break\n      }\n      if (arg.constructor === String || arg.constructor === Number) {\n        const style = dom.mapToStyleString(currentStyle)\n        if (i > 0 || style.length > 0) {\n          strBuilder.push('%c' + arg)\n          styles.push(style)\n        } else {\n          strBuilder.push(arg)\n        }\n      } else {\n        break\n      }\n    }\n  }\n  if (i > 0) {\n    // create logArgs with what we have so far\n    logArgs = styles\n    logArgs.unshift(strBuilder.join(''))\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    if (!(arg instanceof Symbol)) {\n      logArgs.push(arg)\n    }\n  }\n  return logArgs\n}\n/* c8 ignore stop */\n\n/* c8 ignore start */\nconst computeLoggingArgs = env.supportsColor\n  ? computeBrowserLoggingArgs\n  : common.computeNoColorLoggingArgs\n/* c8 ignore stop */\n\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nexport const print = (...args) => {\n  console.log(...computeLoggingArgs(args))\n  /* c8 ignore next */\n  vconsoles.forEach((vc) => vc.print(args))\n}\n\n/* c8 ignore start */\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nexport const warn = (...args) => {\n  console.warn(...computeLoggingArgs(args))\n  args.unshift(common.ORANGE)\n  vconsoles.forEach((vc) => vc.print(args))\n}\n/* c8 ignore stop */\n\n/**\n * @param {Error} err\n */\n/* c8 ignore start */\nexport const printError = (err) => {\n  console.error(err)\n  vconsoles.forEach((vc) => vc.printError(err))\n}\n/* c8 ignore stop */\n\n/**\n * @param {string} url image location\n * @param {number} height height of the image in pixel\n */\n/* c8 ignore start */\nexport const printImg = (url, height) => {\n  if (env.isBrowser) {\n    console.log(\n      '%c                      ',\n      `font-size: ${height}px; background-size: contain; background-repeat: no-repeat; background-image: url(${url})`\n    )\n    // console.log('%c                ', `font-size: ${height}x; background: url(${url}) no-repeat;`)\n  }\n  vconsoles.forEach((vc) => vc.printImg(url, height))\n}\n/* c8 ignore stop */\n\n/**\n * @param {string} base64\n * @param {number} height\n */\n/* c8 ignore next 2 */\nexport const printImgBase64 = (base64, height) =>\n  printImg(`data:image/gif;base64,${base64}`, height)\n\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nexport const group = (...args) => {\n  console.group(...computeLoggingArgs(args))\n  /* c8 ignore next */\n  vconsoles.forEach((vc) => vc.group(args))\n}\n\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nexport const groupCollapsed = (...args) => {\n  console.groupCollapsed(...computeLoggingArgs(args))\n  /* c8 ignore next */\n  vconsoles.forEach((vc) => vc.groupCollapsed(args))\n}\n\nexport const groupEnd = () => {\n  console.groupEnd()\n  /* c8 ignore next */\n  vconsoles.forEach((vc) => vc.groupEnd())\n}\n\n/**\n * @param {function():Node} createNode\n */\n/* c8 ignore next 2 */\nexport const printDom = (createNode) =>\n  vconsoles.forEach((vc) => vc.printDom(createNode()))\n\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {number} height\n */\n/* c8 ignore next 2 */\nexport const printCanvas = (canvas, height) =>\n  printImg(canvas.toDataURL(), height)\n\nexport const vconsoles = set.create()\n\n/**\n * @param {Array<string|Symbol|Object|number>} args\n * @return {Array<Element>}\n */\n/* c8 ignore start */\nconst _computeLineSpans = (args) => {\n  const spans = []\n  const currentStyle = new Map()\n  // try with formatting until we find something unsupported\n  let i = 0\n  for (; i < args.length; i++) {\n    let arg = args[i]\n    // @ts-ignore\n    const style = _browserStyleMap[arg]\n    if (style !== undefined) {\n      currentStyle.set(style.left, style.right)\n    } else {\n      if (arg === undefined) {\n        arg = 'undefined '\n      }\n      if (arg.constructor === String || arg.constructor === Number) {\n        // @ts-ignore\n        const span = dom.element('span', [\n          pair.create('style', dom.mapToStyleString(currentStyle))\n        ], [dom.text(arg.toString())])\n        if (span.innerHTML === '') {\n          span.innerHTML = '&nbsp;'\n        }\n        spans.push(span)\n      } else {\n        break\n      }\n    }\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    let content = args[i]\n    if (!(content instanceof Symbol)) {\n      if (content.constructor !== String && content.constructor !== Number) {\n        content = ' ' + json.stringify(content) + ' '\n      }\n      spans.push(\n        dom.element('span', [], [dom.text(/** @type {string} */ (content))])\n      )\n    }\n  }\n  return spans\n}\n/* c8 ignore stop */\n\nconst lineStyle =\n  'font-family:monospace;border-bottom:1px solid #e2e2e2;padding:2px;'\n\n/* c8 ignore start */\nexport class VConsole {\n  /**\n   * @param {Element} dom\n   */\n  constructor (dom) {\n    this.dom = dom\n    /**\n     * @type {Element}\n     */\n    this.ccontainer = this.dom\n    this.depth = 0\n    vconsoles.add(this)\n  }\n\n  /**\n   * @param {Array<string|Symbol|Object|number>} args\n   * @param {boolean} collapsed\n   */\n  group (args, collapsed = false) {\n    eventloop.enqueue(() => {\n      const triangleDown = dom.element('span', [\n        pair.create('hidden', collapsed),\n        pair.create('style', 'color:grey;font-size:120%;')\n      ], [dom.text('▼')])\n      const triangleRight = dom.element('span', [\n        pair.create('hidden', !collapsed),\n        pair.create('style', 'color:grey;font-size:125%;')\n      ], [dom.text('▶')])\n      const content = dom.element(\n        'div',\n        [pair.create(\n          'style',\n          `${lineStyle};padding-left:${this.depth * 10}px`\n        )],\n        [triangleDown, triangleRight, dom.text(' ')].concat(\n          _computeLineSpans(args)\n        )\n      )\n      const nextContainer = dom.element('div', [\n        pair.create('hidden', collapsed)\n      ])\n      const nextLine = dom.element('div', [], [content, nextContainer])\n      dom.append(this.ccontainer, [nextLine])\n      this.ccontainer = nextContainer\n      this.depth++\n      // when header is clicked, collapse/uncollapse container\n      dom.addEventListener(content, 'click', (_event) => {\n        nextContainer.toggleAttribute('hidden')\n        triangleDown.toggleAttribute('hidden')\n        triangleRight.toggleAttribute('hidden')\n      })\n    })\n  }\n\n  /**\n   * @param {Array<string|Symbol|Object|number>} args\n   */\n  groupCollapsed (args) {\n    this.group(args, true)\n  }\n\n  groupEnd () {\n    eventloop.enqueue(() => {\n      if (this.depth > 0) {\n        this.depth--\n        // @ts-ignore\n        this.ccontainer = this.ccontainer.parentElement.parentElement\n      }\n    })\n  }\n\n  /**\n   * @param {Array<string|Symbol|Object|number>} args\n   */\n  print (args) {\n    eventloop.enqueue(() => {\n      dom.append(this.ccontainer, [\n        dom.element('div', [\n          pair.create(\n            'style',\n            `${lineStyle};padding-left:${this.depth * 10}px`\n          )\n        ], _computeLineSpans(args))\n      ])\n    })\n  }\n\n  /**\n   * @param {Error} err\n   */\n  printError (err) {\n    this.print([common.RED, common.BOLD, err.toString()])\n  }\n\n  /**\n   * @param {string} url\n   * @param {number} height\n   */\n  printImg (url, height) {\n    eventloop.enqueue(() => {\n      dom.append(this.ccontainer, [\n        dom.element('img', [\n          pair.create('src', url),\n          pair.create('height', `${math.round(height * 1.5)}px`)\n        ])\n      ])\n    })\n  }\n\n  /**\n   * @param {Node} node\n   */\n  printDom (node) {\n    eventloop.enqueue(() => {\n      dom.append(this.ccontainer, [node])\n    })\n  }\n\n  destroy () {\n    eventloop.enqueue(() => {\n      vconsoles.delete(this)\n    })\n  }\n}\n/* c8 ignore stop */\n\n/**\n * @param {Element} dom\n */\n/* c8 ignore next */\nexport const createVConsole = (dom) => new VConsole(dom)\n\n/**\n * @param {string} moduleName\n * @return {function(...any):void}\n */\nexport const createModuleLogger = (moduleName) => common.createModuleLogger(print, moduleName)\n","/**\n * Working with value pairs.\n *\n * @module pair\n */\n\n/**\n * @template L,R\n */\nexport class Pair {\n  /**\n   * @param {L} left\n   * @param {R} right\n   */\n  constructor (left, right) {\n    this.left = left\n    this.right = right\n  }\n}\n\n/**\n * @template L,R\n * @param {L} left\n * @param {R} right\n * @return {Pair<L,R>}\n */\nexport const create = (left, right) => new Pair(left, right)\n\n/**\n * @template L,R\n * @param {R} right\n * @param {L} left\n * @return {Pair<L,R>}\n */\nexport const createReversed = (right, left) => new Pair(left, right)\n\n/**\n * @template L,R\n * @param {Array<Pair<L,R>>} arr\n * @param {function(L, R):any} f\n */\nexport const forEach = (arr, f) => arr.forEach(p => f(p.left, p.right))\n\n/**\n * @template L,R,X\n * @param {Array<Pair<L,R>>} arr\n * @param {function(L, R):X} f\n * @return {Array<X>}\n */\nexport const map = (arr, f) => arr.map(p => f(p.left, p.right))\n","/* eslint-env browser */\n\n/**\n * Utility module to work with the DOM.\n *\n * @module dom\n */\n\nimport * as pair from './pair.js'\nimport * as map from './map.js'\n\n/* c8 ignore start */\n/**\n * @type {Document}\n */\nexport const doc = /** @type {Document} */ (typeof document !== 'undefined' ? document : {})\n\n/**\n * @param {string} name\n * @return {HTMLElement}\n */\nexport const createElement = name => doc.createElement(name)\n\n/**\n * @return {DocumentFragment}\n */\nexport const createDocumentFragment = () => doc.createDocumentFragment()\n\n/**\n * @param {string} text\n * @return {Text}\n */\nexport const createTextNode = text => doc.createTextNode(text)\n\nexport const domParser = /** @type {DOMParser} */ (typeof DOMParser !== 'undefined' ? new DOMParser() : null)\n\n/**\n * @param {HTMLElement} el\n * @param {string} name\n * @param {Object} opts\n */\nexport const emitCustomEvent = (el, name, opts) => el.dispatchEvent(new CustomEvent(name, opts))\n\n/**\n * @param {Element} el\n * @param {Array<pair.Pair<string,string|boolean>>} attrs Array of key-value pairs\n * @return {Element}\n */\nexport const setAttributes = (el, attrs) => {\n  pair.forEach(attrs, (key, value) => {\n    if (value === false) {\n      el.removeAttribute(key)\n    } else if (value === true) {\n      el.setAttribute(key, '')\n    } else {\n      // @ts-ignore\n      el.setAttribute(key, value)\n    }\n  })\n  return el\n}\n\n/**\n * @param {Element} el\n * @param {Map<string, string>} attrs Array of key-value pairs\n * @return {Element}\n */\nexport const setAttributesMap = (el, attrs) => {\n  attrs.forEach((value, key) => { el.setAttribute(key, value) })\n  return el\n}\n\n/**\n * @param {Array<Node>|HTMLCollection} children\n * @return {DocumentFragment}\n */\nexport const fragment = children => {\n  const fragment = createDocumentFragment()\n  for (let i = 0; i < children.length; i++) {\n    appendChild(fragment, children[i])\n  }\n  return fragment\n}\n\n/**\n * @param {Element} parent\n * @param {Array<Node>} nodes\n * @return {Element}\n */\nexport const append = (parent, nodes) => {\n  appendChild(parent, fragment(nodes))\n  return parent\n}\n\n/**\n * @param {HTMLElement} el\n */\nexport const remove = el => el.remove()\n\n/**\n * @param {EventTarget} el\n * @param {string} name\n * @param {EventListener} f\n */\nexport const addEventListener = (el, name, f) => el.addEventListener(name, f)\n\n/**\n * @param {EventTarget} el\n * @param {string} name\n * @param {EventListener} f\n */\nexport const removeEventListener = (el, name, f) => el.removeEventListener(name, f)\n\n/**\n * @param {Node} node\n * @param {Array<pair.Pair<string,EventListener>>} listeners\n * @return {Node}\n */\nexport const addEventListeners = (node, listeners) => {\n  pair.forEach(listeners, (name, f) => addEventListener(node, name, f))\n  return node\n}\n\n/**\n * @param {Node} node\n * @param {Array<pair.Pair<string,EventListener>>} listeners\n * @return {Node}\n */\nexport const removeEventListeners = (node, listeners) => {\n  pair.forEach(listeners, (name, f) => removeEventListener(node, name, f))\n  return node\n}\n\n/**\n * @param {string} name\n * @param {Array<pair.Pair<string,string>|pair.Pair<string,boolean>>} attrs Array of key-value pairs\n * @param {Array<Node>} children\n * @return {Element}\n */\nexport const element = (name, attrs = [], children = []) =>\n  append(setAttributes(createElement(name), attrs), children)\n\n/**\n * @param {number} width\n * @param {number} height\n */\nexport const canvas = (width, height) => {\n  const c = /** @type {HTMLCanvasElement} */ (createElement('canvas'))\n  c.height = height\n  c.width = width\n  return c\n}\n\n/**\n * @param {string} t\n * @return {Text}\n */\nexport const text = createTextNode\n\n/**\n * @param {pair.Pair<string,string>} pair\n */\nexport const pairToStyleString = pair => `${pair.left}:${pair.right};`\n\n/**\n * @param {Array<pair.Pair<string,string>>} pairs\n * @return {string}\n */\nexport const pairsToStyleString = pairs => pairs.map(pairToStyleString).join('')\n\n/**\n * @param {Map<string,string>} m\n * @return {string}\n */\nexport const mapToStyleString = m => map.map(m, (value, key) => `${key}:${value};`).join('')\n\n/**\n * @todo should always query on a dom element\n *\n * @param {HTMLElement|ShadowRoot} el\n * @param {string} query\n * @return {HTMLElement | null}\n */\nexport const querySelector = (el, query) => el.querySelector(query)\n\n/**\n * @param {HTMLElement|ShadowRoot} el\n * @param {string} query\n * @return {NodeListOf<HTMLElement>}\n */\nexport const querySelectorAll = (el, query) => el.querySelectorAll(query)\n\n/**\n * @param {string} id\n * @return {HTMLElement}\n */\nexport const getElementById = id => /** @type {HTMLElement} */ (doc.getElementById(id))\n\n/**\n * @param {string} html\n * @return {HTMLElement}\n */\nconst _parse = html => domParser.parseFromString(`<html><body>${html}</body></html>`, 'text/html').body\n\n/**\n * @param {string} html\n * @return {DocumentFragment}\n */\nexport const parseFragment = html => fragment(/** @type {any} */ (_parse(html).childNodes))\n\n/**\n * @param {string} html\n * @return {HTMLElement}\n */\nexport const parseElement = html => /** @type HTMLElement */ (_parse(html).firstElementChild)\n\n/**\n * @param {HTMLElement} oldEl\n * @param {HTMLElement|DocumentFragment} newEl\n */\nexport const replaceWith = (oldEl, newEl) => oldEl.replaceWith(newEl)\n\n/**\n * @param {HTMLElement} parent\n * @param {HTMLElement} el\n * @param {Node|null} ref\n * @return {HTMLElement}\n */\nexport const insertBefore = (parent, el, ref) => parent.insertBefore(el, ref)\n\n/**\n * @param {Node} parent\n * @param {Node} child\n * @return {Node}\n */\nexport const appendChild = (parent, child) => parent.appendChild(child)\n\nexport const ELEMENT_NODE = doc.ELEMENT_NODE\nexport const TEXT_NODE = doc.TEXT_NODE\nexport const CDATA_SECTION_NODE = doc.CDATA_SECTION_NODE\nexport const COMMENT_NODE = doc.COMMENT_NODE\nexport const DOCUMENT_NODE = doc.DOCUMENT_NODE\nexport const DOCUMENT_TYPE_NODE = doc.DOCUMENT_TYPE_NODE\nexport const DOCUMENT_FRAGMENT_NODE = doc.DOCUMENT_FRAGMENT_NODE\n\n/**\n * @param {any} node\n * @param {number} type\n */\nexport const checkNodeType = (node, type) => node.nodeType === type\n\n/**\n * @param {Node} parent\n * @param {HTMLElement} child\n */\nexport const isParentOf = (parent, child) => {\n  let p = child.parentNode\n  while (p && p !== parent) {\n    p = p.parentNode\n  }\n  return p === parent\n}\n/* c8 ignore stop */\n","/**\n * JSON utility functions.\n *\n * @module json\n */\n\n/**\n * Transform JavaScript object to JSON.\n *\n * @param {any} object\n * @return {string}\n */\nexport const stringify = JSON.stringify\n\n/**\n * Parse JSON object.\n *\n * @param {string} json\n * @return {any}\n */\nexport const parse = JSON.parse\n","/* global requestIdleCallback, requestAnimationFrame, cancelIdleCallback, cancelAnimationFrame */\n\n/**\n * Utility module to work with EcmaScript's event loop.\n *\n * @module eventloop\n */\n\n/**\n * @type {Array<function>}\n */\nlet queue = []\n\nconst _runQueue = () => {\n  for (let i = 0; i < queue.length; i++) {\n    queue[i]()\n  }\n  queue = []\n}\n\n/**\n * @param {function():void} f\n */\nexport const enqueue = f => {\n  queue.push(f)\n  if (queue.length === 1) {\n    setTimeout(_runQueue, 0)\n  }\n}\n\n/**\n * @typedef {Object} TimeoutObject\n * @property {function} TimeoutObject.destroy\n */\n\n/**\n * @param {function(number):void} clearFunction\n */\nconst createTimeoutClass = clearFunction => class TT {\n  /**\n   * @param {number} timeoutId\n   */\n  constructor (timeoutId) {\n    this._ = timeoutId\n  }\n\n  destroy () {\n    clearFunction(this._)\n  }\n}\n\nconst Timeout = createTimeoutClass(clearTimeout)\n\n/**\n * @param {number} timeout\n * @param {function} callback\n * @return {TimeoutObject}\n */\nexport const timeout = (timeout, callback) => new Timeout(setTimeout(callback, timeout))\n\nconst Interval = createTimeoutClass(clearInterval)\n\n/**\n * @param {number} timeout\n * @param {function} callback\n * @return {TimeoutObject}\n */\nexport const interval = (timeout, callback) => new Interval(setInterval(callback, timeout))\n\n/* c8 ignore next */\nexport const Animation = createTimeoutClass(arg => typeof requestAnimationFrame !== 'undefined' && cancelAnimationFrame(arg))\n\n/**\n * @param {function(number):void} cb\n * @return {TimeoutObject}\n */\n/* c8 ignore next */\nexport const animationFrame = cb => typeof requestAnimationFrame === 'undefined' ? timeout(0, cb) : new Animation(requestAnimationFrame(cb))\n\n/* c8 ignore next */\n// @ts-ignore\nconst Idle = createTimeoutClass(arg => typeof cancelIdleCallback !== 'undefined' && cancelIdleCallback(arg))\n\n/**\n * Note: this is experimental and is probably only useful in browsers.\n *\n * @param {function} cb\n * @return {TimeoutObject}\n */\n/* c8 ignore next 2 */\n// @ts-ignore\nexport const idleCallback = cb => typeof requestIdleCallback !== 'undefined' ? new Idle(requestIdleCallback(cb)) : timeout(1000, cb)\n\n/**\n * @param {number} timeout Timeout of the debounce action\n * @return {function(function():void):void}\n */\nexport const createDebouncer = timeout => {\n  let timer = -1\n  return f => {\n    clearTimeout(timer)\n    if (f) {\n      timer = /** @type {any} */ (setTimeout(f, timeout))\n    }\n  }\n}\n","import * as symbol from './symbol.js'\nimport * as time from './time.js'\nimport * as env from './environment.js'\nimport * as func from './function.js'\nimport * as json from './json.js'\n\nexport const BOLD = symbol.create()\nexport const UNBOLD = symbol.create()\nexport const BLUE = symbol.create()\nexport const GREY = symbol.create()\nexport const GREEN = symbol.create()\nexport const RED = symbol.create()\nexport const PURPLE = symbol.create()\nexport const ORANGE = symbol.create()\nexport const UNCOLOR = symbol.create()\n\n/* c8 ignore start */\n/**\n * @param {Array<undefined|string|Symbol|Object|number|function():any>} args\n * @return {Array<string|object|number|undefined>}\n */\nexport const computeNoColorLoggingArgs = args => {\n  if (args.length === 1 && args[0]?.constructor === Function) {\n    args = /** @type {Array<string|Symbol|Object|number>} */ (/** @type {[function]} */ (args)[0]())\n  }\n  const strBuilder = []\n  const logArgs = []\n  // try with formatting until we find something unsupported\n  let i = 0\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    if (arg === undefined) {\n      break\n    } else if (arg.constructor === String || arg.constructor === Number) {\n      strBuilder.push(arg)\n    } else if (arg.constructor === Object) {\n      break\n    }\n  }\n  if (i > 0) {\n    // create logArgs with what we have so far\n    logArgs.push(strBuilder.join(''))\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    if (!(arg instanceof Symbol)) {\n      logArgs.push(arg)\n    }\n  }\n  return logArgs\n}\n/* c8 ignore stop */\n\nconst loggingColors = [GREEN, PURPLE, ORANGE, BLUE]\nlet nextColor = 0\nlet lastLoggingTime = time.getUnixTime()\n\n/* c8 ignore start */\n/**\n * @param {function(...any):void} _print\n * @param {string} moduleName\n * @return {function(...any):void}\n */\nexport const createModuleLogger = (_print, moduleName) => {\n  const color = loggingColors[nextColor]\n  const debugRegexVar = env.getVariable('log')\n  const doLogging = debugRegexVar !== null &&\n    (debugRegexVar === '*' || debugRegexVar === 'true' ||\n      new RegExp(debugRegexVar, 'gi').test(moduleName))\n  nextColor = (nextColor + 1) % loggingColors.length\n  moduleName += ': '\n  return !doLogging\n    ? func.nop\n    : (...args) => {\n        if (args.length === 1 && args[0]?.constructor === Function) {\n          args = args[0]()\n        }\n        const timeNow = time.getUnixTime()\n        const timeDiff = timeNow - lastLoggingTime\n        lastLoggingTime = timeNow\n        _print(\n          color,\n          moduleName,\n          UNCOLOR,\n          ...args.map((arg) => {\n            if (arg != null && arg.constructor === Uint8Array) {\n              arg = Array.from(arg)\n            }\n            const t = typeof arg\n            switch (t) {\n              case 'string':\n              case 'symbol':\n                return arg\n              default: {\n                return json.stringify(arg)\n              }\n            }\n          }),\n          color,\n          ' +' + timeDiff + 'ms'\n        )\n      }\n}\n/* c8 ignore stop */\n","/**\n * Utility module to work with EcmaScript Symbols.\n *\n * @module symbol\n */\n\n/**\n * Return fresh symbol.\n *\n * @return {Symbol}\n */\nexport const create = Symbol\n\n/**\n * @param {any} s\n * @return {boolean}\n */\nexport const isSymbol = s => typeof s === 'symbol'\n","/**\n * Utility module to create and manipulate Iterators.\n *\n * @module iterator\n */\n\n/**\n * @template T,R\n * @param {Iterator<T>} iterator\n * @param {function(T):R} f\n * @return {IterableIterator<R>}\n */\nexport const mapIterator = (iterator, f) => ({\n  [Symbol.iterator] () {\n    return this\n  },\n  // @ts-ignore\n  next () {\n    const r = iterator.next()\n    return { value: r.done ? undefined : f(r.value), done: r.done }\n  }\n})\n\n/**\n * @template T\n * @param {function():IteratorResult<T>} next\n * @return {IterableIterator<T>}\n */\nexport const createIterator = next => ({\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return this\n  },\n  // @ts-ignore\n  next\n})\n\n/**\n * @template T\n * @param {Iterator<T>} iterator\n * @param {function(T):boolean} filter\n */\nexport const iteratorFilter = (iterator, filter) => createIterator(() => {\n  let res\n  do {\n    res = iterator.next()\n  } while (!res.done && !filter(res.value))\n  return res\n})\n\n/**\n * @template T,M\n * @param {Iterator<T>} iterator\n * @param {function(T):M} fmap\n */\nexport const iteratorMap = (iterator, fmap) => createIterator(() => {\n  const { done, value } = iterator.next()\n  return { done, value: done ? undefined : fmap(value) }\n})\n","/**\n * @module awareness-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as time from 'lib0/time'\nimport * as math from 'lib0/math'\nimport { Observable } from 'lib0/observable'\nimport * as f from 'lib0/function'\nimport * as Y from 'yjs' // eslint-disable-line\n\nexport const outdatedTimeout = 30000\n\n/**\n * @typedef {Object} MetaClientState\n * @property {number} MetaClientState.clock\n * @property {number} MetaClientState.lastUpdated unix timestamp\n */\n\n/**\n * The Awareness class implements a simple shared state protocol that can be used for non-persistent data like awareness information\n * (cursor, username, status, ..). Each client can update its own local state and listen to state changes of\n * remote clients. Every client may set a state of a remote peer to `null` to mark the client as offline.\n *\n * Each client is identified by a unique client id (something we borrow from `doc.clientID`). A client can override\n * its own state by propagating a message with an increasing timestamp (`clock`). If such a message is received, it is\n * applied if the known state of that client is older than the new state (`clock < newClock`). If a client thinks that\n * a remote client is offline, it may propagate a message with\n * `{ clock: currentClientClock, state: null, client: remoteClient }`. If such a\n * message is received, and the known clock of that client equals the received clock, it will override the state with `null`.\n *\n * Before a client disconnects, it should propagate a `null` state with an updated clock.\n *\n * Awareness states must be updated every 30 seconds. Otherwise the Awareness instance will delete the client state.\n *\n * @extends {Observable<string>}\n */\nexport class Awareness extends Observable {\n  /**\n   * @param {Y.Doc} doc\n   */\n  constructor (doc) {\n    super()\n    this.doc = doc\n    /**\n     * @type {number}\n     */\n    this.clientID = doc.clientID\n    /**\n     * Maps from client id to client state\n     * @type {Map<number, Object<string, any>>}\n     */\n    this.states = new Map()\n    /**\n     * @type {Map<number, MetaClientState>}\n     */\n    this.meta = new Map()\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      const now = time.getUnixTime()\n      if (this.getLocalState() !== null && (outdatedTimeout / 2 <= now - /** @type {{lastUpdated:number}} */ (this.meta.get(this.clientID)).lastUpdated)) {\n        // renew local clock\n        this.setLocalState(this.getLocalState())\n      }\n      /**\n       * @type {Array<number>}\n       */\n      const remove = []\n      this.meta.forEach((meta, clientid) => {\n        if (clientid !== this.clientID && outdatedTimeout <= now - meta.lastUpdated && this.states.has(clientid)) {\n          remove.push(clientid)\n        }\n      })\n      if (remove.length > 0) {\n        removeAwarenessStates(this, remove, 'timeout')\n      }\n    }, math.floor(outdatedTimeout / 10)))\n    doc.on('destroy', () => {\n      this.destroy()\n    })\n    this.setLocalState({})\n  }\n\n  destroy () {\n    this.emit('destroy', [this])\n    this.setLocalState(null)\n    super.destroy()\n    clearInterval(this._checkInterval)\n  }\n\n  /**\n   * @return {Object<string,any>|null}\n   */\n  getLocalState () {\n    return this.states.get(this.clientID) || null\n  }\n\n  /**\n   * @param {Object<string,any>|null} state\n   */\n  setLocalState (state) {\n    const clientID = this.clientID\n    const currLocalMeta = this.meta.get(clientID)\n    const clock = currLocalMeta === undefined ? 0 : currLocalMeta.clock + 1\n    const prevState = this.states.get(clientID)\n    if (state === null) {\n      this.states.delete(clientID)\n    } else {\n      this.states.set(clientID, state)\n    }\n    this.meta.set(clientID, {\n      clock,\n      lastUpdated: time.getUnixTime()\n    })\n    const added = []\n    const updated = []\n    const filteredUpdated = []\n    const removed = []\n    if (state === null) {\n      removed.push(clientID)\n    } else if (prevState == null) {\n      if (state != null) {\n        added.push(clientID)\n      }\n    } else {\n      updated.push(clientID)\n      if (!f.equalityDeep(prevState, state)) {\n        filteredUpdated.push(clientID)\n      }\n    }\n    if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n      this.emit('change', [{ added, updated: filteredUpdated, removed }, 'local'])\n    }\n    this.emit('update', [{ added, updated, removed }, 'local'])\n  }\n\n  /**\n   * @param {string} field\n   * @param {any} value\n   */\n  setLocalStateField (field, value) {\n    const state = this.getLocalState()\n    if (state !== null) {\n      this.setLocalState({\n        ...state,\n        [field]: value\n      })\n    }\n  }\n\n  /**\n   * @return {Map<number,Object<string,any>>}\n   */\n  getStates () {\n    return this.states\n  }\n}\n\n/**\n * Mark (remote) clients as inactive and remove them from the list of active peers.\n * This change will be propagated to remote clients.\n *\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @param {any} origin\n */\nexport const removeAwarenessStates = (awareness, clients, origin) => {\n  const removed = []\n  for (let i = 0; i < clients.length; i++) {\n    const clientID = clients[i]\n    if (awareness.states.has(clientID)) {\n      awareness.states.delete(clientID)\n      if (clientID === awareness.clientID) {\n        const curMeta = /** @type {MetaClientState} */ (awareness.meta.get(clientID))\n        awareness.meta.set(clientID, {\n          clock: curMeta.clock + 1,\n          lastUpdated: time.getUnixTime()\n        })\n      }\n      removed.push(clientID)\n    }\n  }\n  if (removed.length > 0) {\n    awareness.emit('change', [{ added: [], updated: [], removed }, origin])\n    awareness.emit('update', [{ added: [], updated: [], removed }, origin])\n  }\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @return {Uint8Array}\n */\nexport const encodeAwarenessUpdate = (awareness, clients, states = awareness.states) => {\n  const len = clients.length\n  const encoder = encoding.createEncoder()\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = clients[i]\n    const state = states.get(clientID) || null\n    const clock = /** @type {MetaClientState} */ (awareness.meta.get(clientID)).clock\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(state))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * Modify the content of an awareness update before re-encoding it to an awareness update.\n *\n * This might be useful when you have a central server that wants to ensure that clients\n * cant hijack somebody elses identity.\n *\n * @param {Uint8Array} update\n * @param {function(any):any} modify\n * @return {Uint8Array}\n */\nexport const modifyAwarenessUpdate = (update, modify) => {\n  const decoder = decoding.createDecoder(update)\n  const encoder = encoding.createEncoder()\n  const len = decoding.readVarUint(decoder)\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    const clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const modifiedState = modify(state)\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(modifiedState))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Uint8Array} update\n * @param {any} origin This will be added to the emitted change event\n */\nexport const applyAwarenessUpdate = (awareness, update, origin) => {\n  const decoder = decoding.createDecoder(update)\n  const timestamp = time.getUnixTime()\n  const added = []\n  const updated = []\n  const filteredUpdated = []\n  const removed = []\n  const len = decoding.readVarUint(decoder)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    let clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const clientMeta = awareness.meta.get(clientID)\n    const prevState = awareness.states.get(clientID)\n    const currClock = clientMeta === undefined ? 0 : clientMeta.clock\n    if (currClock < clock || (currClock === clock && state === null && awareness.states.has(clientID))) {\n      if (state === null) {\n        // never let a remote client remove this local state\n        if (clientID === awareness.clientID && awareness.getLocalState() != null) {\n          // remote client removed the local state. Do not remote state. Broadcast a message indicating\n          // that this client still exists by increasing the clock\n          clock++\n        } else {\n          awareness.states.delete(clientID)\n        }\n      } else {\n        awareness.states.set(clientID, state)\n      }\n      awareness.meta.set(clientID, {\n        clock,\n        lastUpdated: timestamp\n      })\n      if (clientMeta === undefined && state !== null) {\n        added.push(clientID)\n      } else if (clientMeta !== undefined && state === null) {\n        removed.push(clientID)\n      } else if (state !== null) {\n        if (!f.equalityDeep(state, prevState)) {\n          filteredUpdated.push(clientID)\n        }\n        updated.push(clientID)\n      }\n    }\n  }\n  if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n    awareness.emit('change', [{\n      added, updated: filteredUpdated, removed\n    }, origin])\n  }\n  if (added.length > 0 || updated.length > 0 || removed.length > 0) {\n    awareness.emit('update', [{\n      added, updated, removed\n    }, origin])\n  }\n}\n","export class RoomAwarenessManager {\n  constructor(private baseAwareness: any) {}\n\n  getAwareness(room: string) {\n    const roomAwareness = new Proxy(this.baseAwareness, {\n      get: (target, prop) => {\n        if (prop === 'getStates') {\n          return () => {\n            const allStates = target.getStates()\n            return new Map(\n              Array.from(\n                allStates.entries() as IterableIterator<[string, any]>\n              ).filter(([clientId, state]) => state._room === room)\n            )\n          }\n        }\n        if (prop === 'setLocalStateField') {\n          return (field: string, value: any) => {\n            const currentState = target.getLocalState() || {}\n            target.setLocalState({\n              ...currentState,\n              _room: room,\n              [field]: value,\n            })\n          }\n        }\n\n        if (prop === 'on') {\n          return (event: string, listener: Function) => {\n            target.on(event, (changes: any, origin: any) => {\n              // Filter changes to include only those relevant to the room\n              const filteredChanges = {\n                added: changes.added.filter((clientId: string) => {\n                  const state = target.getStates().get(clientId)\n                  return state && state._room === room\n                }),\n                updated: changes.updated.filter((clientId: string) => {\n                  const state = target.getStates().get(clientId)\n                  return state && state._room === room\n                }),\n                removed: changes.removed.filter((clientId: string) => {\n                  // We might not have the state anymore, so we need to track room assignments separately\n                  return true // Simplification for this example\n                }),\n              }\n              listener(filteredChanges, origin)\n            })\n          }\n        }\n        return target[prop]\n      },\n    })\n\n    return roomAwareness\n  }\n}\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","awareness","awarenessManager","doc","_slicedToArray","_toConsumableArray","_yjs","_awarenessJs","_awarenessManager","EXTERN","origin","ready","role","undefined","username","liveClass","liveRoom","liveUser","class_id","onReady","handler","addEventListener","e","onUpdate","onMessage","promiscuous","arguments","_window_Edrys_module","customEvent","detail","url","sendMessage","subject","body","user","JSON","stringify","postMessage","event","setItem","key","value","localStorage","concat","room","getItem","clearState","getMap","getState","type","getAwareness","state","map","has","Map","Array","Text","XmlFragment","XmlText","XmlElement","set","edrysProxyValidator","path","target","prop","isProxy","Proxy","_","includes","path_","data","Doc","Awareness","RoomAwarenessManager","on","entries","users","toJSON","rooms","forEach","param","_param","n","u","dispatchEvent","CustomEvent","bubbles","added","updated","removed","changedClients","encodeAwarenessUpdate","config","parse","studentConfig","teacherConfig","stationConfig","applyUpdate","applyAwarenessUpdate","console","log","parcelHelpers","defineInteropFlag","export","_sliced_to_array","_arrayWithHolesJs","_iterableToArrayLimitJs","_nonIterableRestJs","_unsupportedIterableToArrayJs","arr","_array_with_holes","isArray","interopDefault","a","__esModule","exportAll","source","dest","keys","prototype","hasOwnProperty","enumerable","destName","_iterable_to_array_limit","_s","_e","_i","Symbol","iterator","_arr","_n","_d","next","done","push","_non_iterable_rest","TypeError","_unsupported_iterable_to_array","_arrayLikeToArrayJs","o","minLen","toString","slice","constructor","from","test","_array_like_to_array","len","arr2","_to_consumable_array","_arrayWithoutHolesJs","_iterableToArrayJs","_nonIterableSpreadJs","_array_without_holes","_iterable_to_array","iter","_non_iterable_spread","AbsolutePosition","AbstractConnector","AbstractStruct","AbstractType","YArray","ContentAny","ContentBinary","ContentDeleted","ContentDoc","ContentEmbed","ContentFormat","ContentJSON","ContentString","ContentType","GC","ID","Item","YMap","PermanentUserData","RelativePosition","Skip","Snapshot","YText","Transaction","UndoManager","UpdateDecoderV1","UpdateDecoderV2","UpdateEncoderV1","UpdateEncoderV2","YXmlElement","YXmlFragment","YXmlHook","YXmlText","YArrayEvent","YEvent","YMapEvent","YTextEvent","YXmlEvent","applyUpdateV2","cleanupYTextFormatting","compareIDs","compareRelativePositions","convertUpdateFormatV1ToV2","convertUpdateFormatV2ToV1","createAbsolutePositionFromRelativePosition","createDeleteSet","createDeleteSetFromStructStore","createDocFromSnapshot","createID","createRelativePositionFromJSON","createRelativePositionFromTypeIndex","createSnapshot","decodeRelativePosition","decodeSnapshot","decodeSnapshotV2","decodeStateVector","decodeUpdate","decodeUpdateV2","diffUpdate","diffUpdateV2","emptySnapshot","encodeRelativePosition","encodeSnapshot","encodeSnapshotV2","encodeStateAsUpdate","encodeStateAsUpdateV2","encodeStateVector","encodeStateVectorFromUpdate","encodeStateVectorFromUpdateV2","equalDeleteSets","equalSnapshots","findIndexSS","findRootTypeKey","getTypeChildren","isDeleted","isParentOf","iterateDeletedStructs","logType","logUpdate","logUpdateV2","mergeDeleteSets","mergeUpdates","mergeUpdatesV2","obfuscateUpdate","obfuscateUpdateV2","parseUpdateMeta","parseUpdateMetaV2","readUpdate","readUpdateV2","relativePositionToJSON","snapshot","snapshotContainsUpdate","transact","tryGc","typeListToArraySnapshot","typeMapGetAllSnapshot","typeMapGetSnapshot","_assertThisInitialized","_classCallCheck","_createClass","_defineProperty","_get","_getPrototypeOf","_inherits","_objectSpread","_objectSpreadProps","_createSuper","_tsGenerator","_observable","_array","_math","_map","_encoding","_decoding","_random","_promise","_buffer","_error","_binary","_function","_set","_logging","_time","_string","_iterator","_object","_environment","ObservableV2","_super","ydoc","_this","DeleteItem","clock","DeleteSet","clients","transaction","ds","f","deletes","clientid","structs","store","del","iterateStructs","findIndexDS","dis","left","right","midindex","floor","mid","midclock","client","sortAndMergeDeleteSet","dels","sort","b","j","max","dss","_loop","dssI","delsLeft","merged","appendTo","addToDeleteSet","setIfUndefined","ss","dsitems","struct","deleted","writeDeleteSet","encoder","writeVarUint","restEncoder","size","resetDsCurVal","item","writeDsClock","writeDsLen","readDeleteSet","decoder","numClients","readVarUint","restDecoder","numberOfDeletes","dsField","i1","readDsClock","readDsLen","readAndApplyDeleteSet","unappliedDS","clockEnd","index","splice","splitItem","toUint8Array","ds1","ds2","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_step_value","deleteItems1","deleteItems2","di1","di2","generateNewClientId","uint32","_ref","_ref_guid","guid","uuidv4","_ref_collectionid","collectionid","_ref_gc","gc","_ref_gcFilter","gcFilter","_ref_meta","meta","_ref_autoLoad","autoLoad","_ref_shouldLoad","shouldLoad","clientID","share","StructStore","_transaction","_transactionCleanups","subdocs","Set","_item","isLoaded","isSynced","isDestroyed","whenLoaded","create","provideSyncedPromise","eventHandler","off","whenSynced","emit","subdocsLoaded","add","TypeConstructor","t","_integrate","Constr","_start","_length","subdoc","destroy","content","opts","subdocsAdded","subdocsRemoved","DSDecoderV1","apply","readUint8","readVarString","readAny","copyUint8Array","readVarUint8Array","DSDecoderV2","dsCurrVal","diff","keyClockDecoder","IntDiffOptRleDecoder","clientDecoder","UintOptRleDecoder","leftClockDecoder","rightClockDecoder","infoDecoder","RleDecoder","stringDecoder","StringDecoder","parentInfoDecoder","typeRefDecoder","lenDecoder","read","keyClock","DSEncoderV1","createEncoder","info","writeUint8","s","writeVarString","isYKey","any","writeAny","buf","writeVarUint8Array","embed","DSEncoderV2","unexpectedCase","keyMap","keyClockEncoder","IntDiffOptRleEncoder","clientEncoder","UintOptRleEncoder","leftClockEncoder","rightClockEncoder","infoEncoder","RleEncoder","stringEncoder","StringEncoder","parentInfoEncoder","typeRefEncoder","lenEncoder","writeUint8Array","write","writeStructs","startNewStructs","writeClient","firstStruct","writeClientsStructs","_sm","sm","getStateVector","_clock","readClientsStructRefs","clientRefs","numOfStateUpdates","numberOfStructs","refs","readClient","readInfo","BITS5","readLen","len1","cantCopyParentInfo","BIT7","BIT8","readLeftID","readRightID","readParentInfo","readString","BIT6","readItemContent","integrateStructs","clientsStructRefs","stack","clientsStructRefsIds","getNextStructTarget","nextStructsTarget","pop","curStructsTarget","restStructs","missingSV","updateMissingSv","mclock","stackHead","addStackToRestSS","unapplicableItems","filter","c","offset","localClock","missing","getMissing","structRefs","integrate","update","transactionOrigin","structDecoder","local","retry","pending","pendingStructs","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","_step_value1","client1","clock1","dsRest","pendingDs","pendingDSUpdate","createDecoder","dsRest2","YDecoder","writeStateAsUpdate","targetStateVector","encodedTargetStateVector","Uint8Array","updates","readStateVector","ssLength","decodedState","writeStateVector","sv","encodeStateVectorV2","EventHandler","l","createEventHandler","addEventHandlerListener","removeEventHandlerListener","g","error","callEventHandlerListeners","arg0","arg1","callAll","writeID","readID","child","m","storeType","yusers","initUser","userDescription","ids","addClientId","observe","changes","getContent","encodedDs","keysChanged","_ref_filter","_event","setTimeout","userOverwrite","_userDescription","yds","deleteSet","tname","assoc","rpos","json","_json_tname","createAbsolutePosition","createRelativePosition","typeid","countable","lastId","writeRelativePosition","writeVarInt","readRelativePosition","itemID","hasContent","readVarInt","uint8Array","followUndoneDeletions","rightID","typeID","followRedone","snap1","snap2","sv1","sv2","dsitems1","dsitems2","dsitem1","dsitem2","isVisible","splitSnapshotAffectedStructs","getItemCleanStart","originDoc","newDoc","lastStructIndex","snapshotContainsUpdateV2","updateDecoder","lazyDecoder","LazyStructReader","curr","mergedDS","lastStruct","addStruct","findIndexCleanStart","getItemCleanEnd","replaceStruct","newStruct","clockStart","beforeState","afterState","changed","changedParentTypes","_mergeStructs","_needFormattingCleanup","writeUpdateMessageFromTransaction","addChangedTypeToTransaction","parentSub","tryToMergeWithLefts","pos","mergeWith","tryGcDeleteSet","deleteItems","di","deleteItem","endDeleteItemClock","si","struct1","keep","tryMergeDeleteSet","mostRightIndexToCheck","min","cleanupTransactions","transactionCleanups","mergeStructs","fs","subs","itemtype","_callObserver","events","_dEH","currentTarget","_path","event1","event2","cleanupYTextAfterTransaction","beforeClock","firstChangePos","_$i","_mergeStructs_i_id","replacedStructPos","print","ORANGE","BOLD","UNBOLD","RED","_observers","encoder1","loaded","initialCall","result","finishCleanup","StackItem","deletions","insertions","clearUndoManagerStackItem","tr","um","stackItem","scope","some","keepItem","popStackItem","undoManager","eventType","_tr","currStackItem","itemsToRedo","itemsToDelete","performedChange","redone","_followRedone","redoItem","ignoreRemoteMapChanges","deleteFilter","subProps","_searchMarker","typeScope","_ref_captureTimeout","captureTimeout","_ref_captureTransaction","captureTransaction","_ref_deleteFilter","_ref_trackedOrigins","trackedOrigins","_ref_ignoreRemoteMapChanges","_ref_doc","addToScope","undoStack","redoStack","undoing","redoing","lastChange","afterTransactionHandler","stopCapturing","clear","endClock","startClock","now","getUnixTime","didAdd","lastOp","changeEvent","ytypes","ytype","every","yt","warn","clearUndoStack","clearRedoStack","canUndo","canRedo","undoStackCleared","redoStackCleared","filterSkips","gen","lazyStructReaderGenerator","_state","label","sent","LazyStructWriter","currClient","written","clientStructs","YEncoder","stopCounting","currClock","enc","writeBinaryEncoder","to","sliceStruct","_left_id","_left_id1","_leftItem_id","leftItem","client2","clock2","rightOrigin","updateDecoders","lazyStructDecoders","currWrite","updateEncoder","lazyStructEncoder","_ret","dec","dec1","dec2","clockDiff","currDecoder","firstClient","iterated","writeStructToLazyStructWriter","diff1","finishLazyStructWriting","lazyStructWriter","reader","svClock","flushLazyStructWriter","lazyWriter","partStructs","convertUpdateFormat","blockTransformer","createObfuscator","_ref_formatting","formatting","_ref_subdocs","_ref_yxml","yxml","mapKeyCache","nodeNameCache","formattingKeyCache","formattingValueCache","block","nodeName","hookName","c1","c2","c3","c4","c5","c6","str","repeat","errorComputeChanges","_changes","_keys","_delta","getPathTo","action","oldValue","adds","prev","last","delta","packOp","insert","retain","unshift","warnPrematureAccess","globalSearchMarkerTimestamp","ArraySearchMarker","p","marker","timestamp","refreshMarkerTimestamp","overwriteMarker","markPosition","searchMarker","reduce","pm","findMarker","yarray","abs","pindex","updateMarkerChanges","_t_doc","callTypeObservers","changedType","_eH","y","methodUnimplemented","_encoder","_parentSubs","typeListSlice","start","end","_type_doc","cs","typeListToArray","typeListForEach","typeListMap","typeListCreateIterator","_obj","currentContent","currentContentIndex","typeListGet","typeListInsertGenericsAfter","referenceItem","ownClientId","jsonContent","packJsonContent","Number","Boolean","String","ArrayBuffer","lengthExceeded","typeListInsertGenerics","startIndex","typeListPushGenerics","maxMarker","currMarker","typeListDelete","startLength","typeMapDelete","typeMapSet","typeMapGet","_parent_doc","val","typeMapGetAll","typeMapHas","v","createMapIterator","iteratorFilter","AbstractType1","_prelimContent","toArray","el","clone","_this_doc","parentSubs","_this__prelimContent","writeTypeRef","YArrayRefID","items","ymap","iteratorMap","_value","YMapRefID","equalAttrs","equalFlat","ItemTextListPosition","currentAttributes","updateCurrentAttributes","findNextPosition","count","findPosition","useSearchMarker","insertNegatedAttributes","currPos","negatedAttributes","forward","nextFormat","format","minimizeAttributeChanges","attributes","_attributes_currPos_right_content_key","insertAttributes","_currPos_currentAttributes_get","currentVal","insertText","text","_val","getLength","formatText","_currPos_right_content","attr","newlines","cleanupFormattingGap","startAttributes","currAttributes","endFormats","cf","cleanups","reachedCurr","_startAttributes_get","_currAttributes_get","startAttrValue","cleanupContextlessFormattingGap","attrs","copy","needFullCleanup","afterClock","_hasFormatting","yText","deleteText","startAttrs","ytext","childListChanged","sub","oldAttributes","deleteLen","addOp","op","isEmpty","assign","_item_content","_currentAttributes_get","_oldAttributes_get","_currentAttributes_get1","curVal1","string","_pending","applyDelta","toDelta","_ref_sanitize","sanitize","ins","prevSnapshot","computeYChange","ops","packStr","addAttributes","computeDelta","cur","k","insertEmbed","attributeName","removeAttribute","attributeValue","setAttribute","YTextRefID","YXmlTreeWalker","root","_root_doc","_filter","_root","_currentNode","_firstCall","first","_first","query","toUpperCase","element","xml","join","_document","document","hooks","binding","fragment","createDocumentFragment","_createAssociation","xmlType","insertBefore","toDOM","ref","pc","findIndex","YXmlFragmentRefID","_prelimAttrs","getAttributes","stringBuilder","keysLen","key1","toLocaleLowerCase","attrsString","dom","createElement","appendChild","YXmlElementRefID","writeKey","attributesChanged","hook","createDom","YXmlHookRefID","createTextNode","nestedNodes","node","YXmlTextRefID","encodingRef","writeInfo","writeLen","writeBuf","markDeleted","createDocFromOpts","writeString","writeJSON","_offset","_right","isDevMode","getVariable","deepFreeze","split","firstCharCode","charCodeAt","typeRefs","_decoder","readKey","_copy","_write","nextID","rightItem","isDeletedByUndoStack","redoitems","ownClientID","parentItem","parentType","leftTrace","rightTrace","nextClock","nextId","redoneItem","isCountable","BIT2","BIT4","isMarked","BIT1","doKeep","BIT3","doDelete","r","conflictingItems","itemsBeforeOrigin","parentGCd","getRef","writeLeftID","writeRightID","ykey","writeParentInfo","contentRefs","readBuf","readJSON","readTypeRef","glo","importIdentifier","_assert_this_initialized","ReferenceError","_class_call_check","instance","Constructor","_defineProperties","props","descriptor","configurable","writable","_create_class","protoProps","staticProps","_define_property","obj","_superPropBaseJs","property","receiver","Reflect","base","desc","getOwnPropertyDescriptor","_super_prop_base","_getPrototypeOfJs","object","_get_prototype_of","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOfJs","subClass","superClass","_set_prototype_of","_object_spread","_definePropertyJs","ownKeys","getOwnPropertySymbols","sym","_object_spread_props","getOwnPropertyDescriptors","defineProperties","enumerableOnly","symbols","_create_super","_isNativeReflectConstructJs","_possibleConstructorReturnJs","Derived","hasNativeReflectConstruct","Super","construct","_is_native_reflect_construct","valueOf","_possible_constructor_return","_assertThisInitializedJs","_typeOfJs","_type_of","_tslib","__generator","__extends","__assign","__rest","__decorate","__param","__esDecorate","__runInitializers","__propKey","__setFunctionName","__metadata","__awaiter","__createBinding","__exportStar","__values","__read","__spread","__spreadArrays","__spreadArray","__await","__asyncGenerator","__asyncDelegator","__asyncValues","__makeTemplateObject","__importStar","__importDefault","__classPrivateFieldGet","__classPrivateFieldSet","__classPrivateFieldIn","__addDisposableResource","__disposeResources","__rewriteRelativeImportExtension","_typeOf","extendStatics","d","__","indexOf","propertyIsEnumerable","decorators","decorate","paramIndex","decorator","ctor","descriptorIn","contextIn","initializers","extraInitializers","accept","kind","context","access","addInitializer","init","thisArg","useValue","prefix","description","metadataKey","metadataValue","metadata","_arguments","P","generator","Promise","reject","fulfilled","step","rejected","adopt","then","trys","Iterator","verb","k2","ar","il","jl","pack","asyncIterator","q","AsyncIterator","resume","fulfill","settle","shift","cooked","raw","__setModuleDefault","mod","env","async","dispose","inner","asyncDispose","_SuppressedError","SuppressedError","suppressed","message","fail","hasError","preserveJsx","replace","tsx","ext","cm","toLowerCase","default","Observable","_mapJs","_setJs","_arrayJs","_f","_len","args","_key","observers","values","all","createT","_set_values_next_value","flatten","unfold","fold","unique","uniqueBy","src","acc","array","seed","folder","mapper","happened","mapped","ceil","imul","round","log10","log2","sqrt","isNaN","pow","exp10","sign","isNegativeZero","Math","exp","Encoder","encode","verifyLen","setUint8","writeUint16","setUint16","writeUint32","writeUint32BigEndian","setUint32","_writeVarStringNative","_writeVarStringPolyfill","writeTerminatedString","writeTerminatedUint8Array","writeOnDataView","writeFloat32","writeFloat64","writeBigInt64","writeBigUint64","IntDiffEncoder","RleIntDiffEncoder","IncUintOptRleEncoder","_mathJs","_numberJs","_binaryJs","_stringJs","cpos","cbuf","bufs","uint8arr","curPos","buffer","bufferLen","num","BITS8","BITS7","isNegative","BITS6","_strBuffer","_maxStrBSize","utf8TextEncoder","encodeInto","encodeUtf8","encodedString","unescape","encodeURIComponent","codePointAt","append","leftCopyLen","rightCopyLen","subarray","byteLength","dview","DataView","setFloat32","setFloat64","setBigInt64","setBigUint64","floatTestBed","isInteger","BITS31","getFloat32","writer","w","flushUintOptRleEncoder","flushIntDiffOptRleEncoder","encodedDiff","sarr","lensE","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","LOWEST_INT32","HIGHEST_INT32","HIGHEST_UINT32","parseInt","countBits","BITS32","isFinite","BIT5","BIT9","BIT10","BIT11","BIT12","BIT13","BIT14","BIT15","BIT16","BIT17","BIT18","BIT19","BIT20","BIT21","BIT22","BIT23","BIT24","BIT25","BIT26","BIT27","BIT28","BIT29","BIT30","BIT31","BIT32","BITS0","BITS1","BITS2","BITS3","BITS4","BITS9","BITS10","BITS11","BITS12","BITS13","BITS14","BITS15","BITS16","BITS17","BITS18","BITS19","BITS20","BITS21","BITS22","BITS23","BITS24","BITS25","BITS26","BITS27","BITS28","BITS29","BITS30","fromCharCode","fromCodePoint","MAX_UTF16_CHARACTER","trimLeft","fromCamelCase","utf8ByteLength","_encodeUtf8Polyfill","_encodeUtf8Native","_decodeUtf8Polyfill","utf8TextDecoder","_decodeUtf8Native","decodeUtf8","trimLeftRegex","fromCamelCaseRegex","separator","match","TextEncoder","remainingLen","bufPos","nextLen","bytes","decodeURIComponent","escape","TextDecoder","fatal","ignoreBOM","decode","remove","Decoder","readUint8Array","readTailAsUint8Array","skip8","readUint16","readUint32","readUint32BigEndian","peekUint8","peekUint16","peekUint32","peekVarUint","peekVarInt","_readVarStringPolyfill","_readVarStringNative","readTerminatedUint8Array","readTerminatedString","peekVarString","readFromDataView","readFloat32","readFloat64","readBigInt64","readBigUint64","IntDiffDecoder","RleIntDiffDecoder","IncUintOptRleDecoder","_errorJs","_encodingJs","errorUnexpectedEndOfArray","errorIntegerOutOfRange","newPos","view","byteOffset","uint","mult","dv","getFloat64","getBigInt64","getBigUint64","readAnyLookupTable","spos","rand","uint53","oneOf","_webcrypto","random","getRandomValues","Uint32Array","uuidv4Template","subtle","crypto","createEmpty","resolveWith","until","untilAsync","wait","isPromise","_asyncToGenerator","_timeJs","reason","timeout","check","intervalResolution","startTime","hasTimeout","intervalHandle","setInterval","clearInterval","noTimeout","_reject","asyncGeneratorStep","_next","_throw","arg","_async_to_generator","fn","getDate","humanizeDuration","_metricJs","Date","seconds","minutes","hours","days","yotta","zetta","exa","peta","tera","giga","mega","kilo","hecto","deca","deci","centi","milli","micro","nano","pico","femto","atto","zepto","yocto","prefixUp","prefixDown","baseMultiplier","nPow","createUint8ArrayFromLen","createUint8ArrayViewFromArrayBuffer","createUint8ArrayFromArrayBuffer","toBase64","fromBase64","toBase64UrlEncoded","fromBase64UrlEncoded","toHexString","fromHexString","encodeAny","decodeAny","shiftNBitsLeft","_environmentJs","_decodingJs","Buffer","isBrowser","btoa","atob","replaceAll","base64","padStart","hex","hlen","newBuf","bs","N","ieee754","customInspectSymbol","createBuffer","RangeError","encodingOrOffset","allocUnsafe","fromString","encoding","isEncoding","actual","isView","fromArrayView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","SharedArrayBuffer","fromObject","isBuffer","checked","toPrimitive","assertSize","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","out","hexSliceLookupTable","utf8Slice","asciiSlice","ret","latin1Slice","fromByteArray","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","checkOffset","checkInt","wrtBigUInt64LE","checkIntBI","lo","BigInt","hi","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","SlowBuffer","alloc","INSPECT_MAX_BYTES","kMaxLength","TYPED_ARRAY_SUPPORT","typedArraySupport","proto","foo","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","list","swap16","swap32","swap64","toLocaleString","equals","inspect","trim","thisStart","thisEnd","thisCopy","targetCopy","remaining","hexWrite","strLen","parsed","substr","blitBuffer","asciiToBytes","byteArray","utf16leToBytes","units","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","maxBytes","writeUintBE","writeUIntBE","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","getMessage","Base","NodeError","addNumericalSeparator","range","ERR_OUT_OF_RANGE","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","base64clean","dst","alphabet","table","i16","BufferBigIntNotDefined","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","output","lookup","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","LN2","params","isNode","isMac","hasParam","getParam","getConf","ensureConf","hasConf","production","supportsColor","_conditionsJs","_storageJs","_functionJs","process","release","navigator","platform","computeParams","pargs","argv","currParamName","parg","location","search","kv","_kv_split","defaultVal","undefinedToNull","varStorage","forceColor","isOneOf","stdout","isTTY","cachedSetTimeout","cachedClearTimeout","currentQueue","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","queue","draining","queueIndex","cleanUpNextTick","drainQueue","run","runClearTimeout","noop","nextTick","title","browser","version","versions","addListener","once","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","cwd","chdir","umask","onChange","offChange","_localStorage","VarStoragePolyfill","newValue","usePolyfill","removeEventListener","nop","equalityStrict","equalityFlat","equalityDeep","isString","isNumber","is","isTemplate","_objectJs","hasProperty","options","T","freeze","results","_k","_loggingCommonJs","BLUE","GREY","GREEN","PURPLE","UNCOLOR","printError","printImg","printImgBase64","group","groupCollapsed","groupEnd","printDom","printCanvas","vconsoles","VConsole","createVConsole","createModuleLogger","_pairJs","_domJs","_jsonJs","_eventloopJs","_browserStyleMap","computeLoggingArgs","_args_","Function","strBuilder","styles","currentStyle","logArgs","style","style1","mapToStyleString","computeNoColorLoggingArgs","_console","vc","height","createNode","canvas","toDataURL","_computeLineSpans","spans","span","innerHTML","lineStyle","ccontainer","depth","collapsed","enqueue","triangleDown","triangleRight","nextContainer","nextLine","toggleAttribute","parentElement","Pair","createReversed","domParser","emitCustomEvent","setAttributes","setAttributesMap","addEventListeners","removeEventListeners","pairToStyleString","pairsToStyleString","querySelector","querySelectorAll","getElementById","parseFragment","parseElement","replaceWith","ELEMENT_NODE","TEXT_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","checkNodeType","DOMParser","children","nodes","width","pair","pairs","_parse","html","parseFromString","childNodes","firstElementChild","oldEl","newEl","nodeType","parentNode","interval","Animation","animationFrame","idleCallback","createDebouncer","_runQueue","createTimeoutClass","clearFunction","TT","timeoutId","Timeout","callback","Interval","requestAnimationFrame","cancelAnimationFrame","cb","Idle","cancelIdleCallback","requestIdleCallback","timer","_symbolJs","loggingColors","nextColor","lastLoggingTime","_print","color","debugRegexVar","doLogging","RegExp","timeNow","timeDiff","isSymbol","mapIterator","createIterator","fmap","_iterator_next","outdatedTimeout","removeAwarenessStates","modifyAwarenessUpdate","states","_checkInterval","getLocalState","lastUpdated","setLocalState","currLocalMeta","prevState","filteredUpdated","field","curMeta","modify","modifiedState","clientMeta","baseAwareness","allStates","getStates","_room","currentState","listener","clientId"],"version":3,"file":"edrys.js.map"}